//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenTK.OpenGL
{
    using System;
    using System.Runtime.InteropServices;
    using System.Text;
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLenum = System.Int32;
    using GLboolean = System.Boolean;
    using GLbitfield = System.Int32;
    using GLvoid = System.Object;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;
    
    #region GL class
    public partial class GL
    {
        #pragma warning disable 1591

        #region Private Constants

        #region string GL_NATIVE_LIBRARY
        /// <summary>
        /// Specifies OpenGl's native library archive.
        /// </summary>
        /// <remarks>
        /// Specifies opengl32.dll everywhere; will be mapped via .config for mono.
        /// </remarks>
        internal const string GL_NATIVE_LIBRARY = "opengl32.dll";
        #endregion string GL_NATIVE_LIBRARY

        #endregion Private Constants

        #region OpenGL functions
        public static void Accum(Enums.AccumOp op, GLfloat value)
        {
            Delegates.glAccum(op, value);
        }
        public static void ActiveStencilFaceEXT(Enums.EXT_stencil_two_side face)
        {
            Delegates.glActiveStencilFaceEXT(face);
        }
        public static void ActiveTexture(Enums.VERSION_1_3 texture)
        {
            Delegates.glActiveTexture(texture);
        }
        public static void ActiveTextureARB(Enums.ARB_multitexture texture)
        {
            Delegates.glActiveTextureARB(texture);
        }
        public static void ActiveVaryingNV(GLuint program, string name)
        {
            Delegates.glActiveVaryingNV(program, name);
        }
        public static void AlphaFragmentOp1ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        {
            Delegates.glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        }
        public static void AlphaFragmentOp2ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        {
            Delegates.glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        public static void AlphaFragmentOp3ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        {
            Delegates.glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        public static void AlphaFunc(Enums.AlphaFunction func, GLclampf @ref)
        {
            Delegates.glAlphaFunc(func, @ref);
        }
        public static void ApplyTextureEXT(Enums.EXT_light_texture mode)
        {
            Delegates.glApplyTextureEXT(mode);
        }
        public static GLboolean AreProgramsResidentNV(GLsizei n, System.IntPtr programs, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, programs, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean AreProgramsResidentNV(GLsizei n, GLuint[] programs, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean AreProgramsResidentNV(GLsizei n, System.IntPtr programs, [In, Out()] System.IntPtr residences)
        {
            return Delegates.glAreProgramsResidentNV(n, programs, residences);
        }
        public static GLboolean AreProgramsResidentNV(GLsizei n, GLuint[] programs, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean AreTexturesResident(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences)
        {
            return Delegates.glAreTexturesResident(n, textures, residences);
        }
        public static GLboolean AreTexturesResident(GLsizei n, System.IntPtr textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean AreTexturesResident(GLsizei n, GLuint[] textures, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean AreTexturesResident(GLsizei n, GLuint[] textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean AreTexturesResidentEXT(GLsizei n, GLuint[] textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean AreTexturesResidentEXT(GLsizei n, System.IntPtr textures, Enums.Boolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean AreTexturesResidentEXT(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences)
        {
            return Delegates.glAreTexturesResidentEXT(n, textures, residences);
        }
        public static GLboolean AreTexturesResidentEXT(GLsizei n, GLuint[] textures, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                return Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), residences);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ArrayElement(GLint i)
        {
            Delegates.glArrayElement(i);
        }
        public static void ArrayElementEXT(GLint i)
        {
            Delegates.glArrayElementEXT(i);
        }
        public static void ArrayObjectATI(Enums.EnableCap array, GLint size, Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glArrayObjectATI(array, size, type, stride, buffer, offset);
        }
        public static void AsyncMarkerSGIX(GLuint marker)
        {
            Delegates.glAsyncMarkerSGIX(marker);
        }
        public static void AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
        {
            Delegates.glAttachObjectARB(containerObj, obj);
        }
        public static void AttachShader(GLuint program, GLuint shader)
        {
            Delegates.glAttachShader(program, shader);
        }
        public static void Begin(Enums.BeginMode mode)
        {
            Delegates.glBegin(mode);
        }
        public static void BeginFragmentShaderATI()
        {
            Delegates.glBeginFragmentShaderATI();
        }
        public static void BeginOcclusionQueryNV(GLuint id)
        {
            Delegates.glBeginOcclusionQueryNV(id);
        }
        public static void BeginQuery(Enums.VERSION_1_5 target, GLuint id)
        {
            Delegates.glBeginQuery(target, id);
        }
        public static void BeginQueryARB(Enums.ARB_occlusion_query target, GLuint id)
        {
            Delegates.glBeginQueryARB(target, id);
        }
        public static void BeginTransformFeedbackNV(Enums.NV_transform_feedback primitiveMode)
        {
            Delegates.glBeginTransformFeedbackNV(primitiveMode);
        }
        public static void BeginVertexShaderEXT()
        {
            Delegates.glBeginVertexShaderEXT();
        }
        public static void BindAttribLocation(GLuint program, GLuint index, string name)
        {
            Delegates.glBindAttribLocation(program, index, name);
        }
        public static void BindAttribLocationARB(GLhandleARB programObj, GLuint index, string name)
        {
            Delegates.glBindAttribLocationARB(programObj, index, name);
        }
        public static void BindBuffer(Enums.VERSION_1_5 target, GLuint buffer)
        {
            Delegates.glBindBuffer(target, buffer);
        }
        public static void BindBufferARB(Enums.ARB_vertex_buffer_object target, GLuint buffer)
        {
            Delegates.glBindBufferARB(target, buffer);
        }
        public static void BindBufferBaseNV(Enums.NV_transform_feedback target, GLuint index, GLuint buffer)
        {
            Delegates.glBindBufferBaseNV(target, index, buffer);
        }
        public static void BindBufferOffsetNV(Enums.NV_transform_feedback target, GLuint index, GLuint buffer, GLintptr offset)
        {
            Delegates.glBindBufferOffsetNV(target, index, buffer, offset);
        }
        public static void BindBufferRangeNV(Enums.NV_transform_feedback target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
        {
            Delegates.glBindBufferRangeNV(target, index, buffer, offset, size);
        }
        public static void BindFragDataLocationEXT(GLuint program, GLuint color, string name)
        {
            Delegates.glBindFragDataLocationEXT(program, color, name);
        }
        public static void BindFragmentShaderATI(GLuint id)
        {
            Delegates.glBindFragmentShaderATI(id);
        }
        public static void BindFramebufferEXT(Enums.EXT_framebuffer_object target, GLuint framebuffer)
        {
            Delegates.glBindFramebufferEXT(target, framebuffer);
        }
        public static GLuint BindLightParameterEXT(Enums.LightName light, Enums.LightParameter value)
        {
            return Delegates.glBindLightParameterEXT(light, value);
        }
        public static GLuint BindMaterialParameterEXT(Enums.MaterialFace face, Enums.MaterialParameter value)
        {
            return Delegates.glBindMaterialParameterEXT(face, value);
        }
        public static GLuint BindParameterEXT(Enums.EXT_vertex_shader value)
        {
            return Delegates.glBindParameterEXT(value);
        }
        public static void BindProgramARB(Enums.ARB_vertex_program target, GLuint program)
        {
            Delegates.glBindProgramARB(target, program);
        }
        public static void BindProgramNV(Enums.NV_vertex_program target, GLuint id)
        {
            Delegates.glBindProgramNV(target, id);
        }
        public static void BindRenderbufferEXT(Enums.EXT_framebuffer_object target, GLuint renderbuffer)
        {
            Delegates.glBindRenderbufferEXT(target, renderbuffer);
        }
        public static GLuint BindTexGenParameterEXT(Enums.EXT_vertex_shader unit, Enums.TextureCoordName coord, Enums.TextureGenParameter value)
        {
            return Delegates.glBindTexGenParameterEXT(unit, coord, value);
        }
        public static void BindTexture(Enums.TextureTarget target, GLuint texture)
        {
            Delegates.glBindTexture(target, texture);
        }
        public static void BindTextureEXT(Enums.TextureTarget target, GLuint texture)
        {
            Delegates.glBindTextureEXT(target, texture);
        }
        public static GLuint BindTextureUnitParameterEXT(Enums.EXT_vertex_shader unit, Enums.EXT_vertex_shader value)
        {
            return Delegates.glBindTextureUnitParameterEXT(unit, value);
        }
        public static void BindVertexArrayAPPLE(GLuint array)
        {
            Delegates.glBindVertexArrayAPPLE(array);
        }
        public static void BindVertexShaderEXT(GLuint id)
        {
            Delegates.glBindVertexShaderEXT(id);
        }
        public static void Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
        {
            Delegates.glBinormal3bEXT(bx, by, bz);
        }
        public static void Binormal3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Binormal3bvEXT(System.IntPtr v)
        {
            Delegates.glBinormal3bvEXT(v);
        }
        public static void Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
        {
            Delegates.glBinormal3dEXT(bx, by, bz);
        }
        public static void Binormal3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Binormal3dvEXT(System.IntPtr v)
        {
            Delegates.glBinormal3dvEXT(v);
        }
        public static void Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
        {
            Delegates.glBinormal3fEXT(bx, by, bz);
        }
        public static void Binormal3fvEXT(System.IntPtr v)
        {
            Delegates.glBinormal3fvEXT(v);
        }
        public static void Binormal3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Binormal3iEXT(GLint bx, GLint by, GLint bz)
        {
            Delegates.glBinormal3iEXT(bx, by, bz);
        }
        public static void Binormal3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Binormal3ivEXT(System.IntPtr v)
        {
            Delegates.glBinormal3ivEXT(v);
        }
        public static void Binormal3sEXT(GLshort bx, GLshort by, GLshort bz)
        {
            Delegates.glBinormal3sEXT(bx, by, bz);
        }
        public static void Binormal3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Binormal3svEXT(System.IntPtr v)
        {
            Delegates.glBinormal3svEXT(v);
        }
        public static void BinormalPointerEXT(Enums.EXT_coordinate_frame type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormalPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void BinormalPointerEXT(Enums.EXT_coordinate_frame type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glBinormalPointerEXT(type, stride, pointer);
        }
        public static void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, System.IntPtr bitmap)
        {
            Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        public static void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glBlendColor(red, green, blue, alpha);
        }
        public static void BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glBlendColorEXT(red, green, blue, alpha);
        }
        public static void BlendEquation(Enums.VERSION_1_2 mode)
        {
            Delegates.glBlendEquation(mode);
        }
        public static void BlendEquationEXT(Enums.BlendEquationModeEXT mode)
        {
            Delegates.glBlendEquationEXT(mode);
        }
        public static void BlendEquationSeparate(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha)
        {
            Delegates.glBlendEquationSeparate(modeRGB, modeAlpha);
        }
        public static void BlendEquationSeparateEXT(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha)
        {
            Delegates.glBlendEquationSeparateEXT(modeRGB, modeAlpha);
        }
        public static void BlendFunc(Enums.BlendingFactorSrc sfactor, Enums.BlendingFactorDest dfactor)
        {
            Delegates.glBlendFunc(sfactor, dfactor);
        }
        public static void BlendFuncSeparate(Enums.VERSION_1_4 sfactorRGB, Enums.VERSION_1_4 dfactorRGB, Enums.VERSION_1_4 sfactorAlpha, Enums.VERSION_1_4 dfactorAlpha)
        {
            Delegates.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void BlendFuncSeparateEXT(Enums.EXT_blend_func_separate sfactorRGB, Enums.EXT_blend_func_separate dfactorRGB, Enums.EXT_blend_func_separate sfactorAlpha, Enums.EXT_blend_func_separate dfactorAlpha)
        {
            Delegates.glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void BlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        {
            Delegates.glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, Enums.ClearBufferMask mask, Enums.EXT_framebuffer_blit filter)
        {
            Delegates.glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        public static void BufferData(Enums.VERSION_1_5 target, GLsizeiptr size, System.IntPtr data, Enums.VERSION_1_5 usage)
        {
            Delegates.glBufferData(target, size, data, usage);
        }
        public static void BufferData(Enums.VERSION_1_5 target, GLsizeiptr size, object data, Enums.VERSION_1_5 usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void BufferDataARB(Enums.ARB_vertex_buffer_object target, GLsizeiptrARB size, System.IntPtr data, Enums.ARB_vertex_buffer_object usage)
        {
            Delegates.glBufferDataARB(target, size, data, usage);
        }
        public static void BufferDataARB(Enums.ARB_vertex_buffer_object target, GLsizeiptrARB size, object data, Enums.ARB_vertex_buffer_object usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferDataARB(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void BufferParameteriAPPLE(Enums.APPLE_flush_buffer_range target, Enums.APPLE_flush_buffer_range pname, GLint param)
        {
            Delegates.glBufferParameteriAPPLE(target, pname, param);
        }
        public static void BufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void BufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, System.IntPtr data)
        {
            Delegates.glBufferSubData(target, offset, size, data);
        }
        public static void BufferSubDataARB(Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, System.IntPtr data)
        {
            Delegates.glBufferSubDataARB(target, offset, size, data);
        }
        public static void BufferSubDataARB(Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubDataARB(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CallList(GLuint list)
        {
            Delegates.glCallList(list);
        }
        public static void CallLists(GLsizei n, Enums.ListNameType type, object lists)
        {
            GCHandle h0 = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists(n, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CallLists(GLsizei n, Enums.ListNameType type, System.IntPtr lists)
        {
            Delegates.glCallLists(n, type, lists);
        }
        public static GLenum CheckFramebufferStatusEXT(Enums.EXT_framebuffer_object target)
        {
            return Delegates.glCheckFramebufferStatusEXT(target);
        }
        public static void ClampColorARB(Enums.ARB_color_buffer_float target, Enums.ARB_color_buffer_float clamp)
        {
            Delegates.glClampColorARB(target, clamp);
        }
        public static void Clear(Enums.ClearBufferMask mask)
        {
            Delegates.glClear(mask);
        }
        public static void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glClearAccum(red, green, blue, alpha);
        }
        public static void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glClearColor(red, green, blue, alpha);
        }
        public static void ClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
        {
            Delegates.glClearColorIiEXT(red, green, blue, alpha);
        }
        public static void ClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
        {
            Delegates.glClearColorIuiEXT(red, green, blue, alpha);
        }
        public static void ClearDepth(GLclampd depth)
        {
            Delegates.glClearDepth(depth);
        }
        public static void ClearDepthdNV(GLdouble depth)
        {
            Delegates.glClearDepthdNV(depth);
        }
        public static void ClearIndex(GLfloat c)
        {
            Delegates.glClearIndex(c);
        }
        public static void ClearStencil(GLint s)
        {
            Delegates.glClearStencil(s);
        }
        public static void ClientActiveTexture(Enums.VERSION_1_3 texture)
        {
            Delegates.glClientActiveTexture(texture);
        }
        public static void ClientActiveTextureARB(Enums.ARB_multitexture texture)
        {
            Delegates.glClientActiveTextureARB(texture);
        }
        public static void ClientActiveVertexStreamATI(Enums.ATI_vertex_streams stream)
        {
            Delegates.glClientActiveVertexStreamATI(stream);
        }
        public static void ClipPlane(Enums.ClipPlaneName plane, System.IntPtr equation)
        {
            Delegates.glClipPlane(plane, equation);
        }
        public static void ClipPlane(Enums.ClipPlaneName plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glColor3b(red, green, blue);
        }
        public static void Color3bv(System.IntPtr v)
        {
            Delegates.glColor3bv(v);
        }
        public static void Color3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glColor3d(red, green, blue);
        }
        public static void Color3dv(System.IntPtr v)
        {
            Delegates.glColor3dv(v);
        }
        public static void Color3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glColor3f(red, green, blue);
        }
        public static void Color3fv(System.IntPtr v)
        {
            Delegates.glColor3fv(v);
        }
        public static void Color3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor3fVertex3fSUN(r, g, b, x, y, z);
        }
        public static void Color3fVertex3fvSUN(System.IntPtr c, System.IntPtr v)
        {
            Delegates.glColor3fVertex3fvSUN(c, v);
        }
        public static void Color3fVertex3fvSUN(System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Color3fVertex3fvSUN(GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
        {
            Delegates.glColor3hNV(red, green, blue);
        }
        public static void Color3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3hvNV(System.IntPtr v)
        {
            Delegates.glColor3hvNV(v);
        }
        public static void Color3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glColor3i(red, green, blue);
        }
        public static void Color3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3iv(System.IntPtr v)
        {
            Delegates.glColor3iv(v);
        }
        public static void Color3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glColor3s(red, green, blue);
        }
        public static void Color3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3sv(System.IntPtr v)
        {
            Delegates.glColor3sv(v);
        }
        public static void Color3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glColor3ub(red, green, blue);
        }
        public static void Color3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3ubv(System.IntPtr v)
        {
            Delegates.glColor3ubv(v);
        }
        public static void Color3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glColor3ui(red, green, blue);
        }
        public static void Color3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3uiv(System.IntPtr v)
        {
            Delegates.glColor3uiv(v);
        }
        public static void Color3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glColor3us(red, green, blue);
        }
        public static void Color3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color3usv(System.IntPtr v)
        {
            Delegates.glColor3usv(v);
        }
        public static void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
        {
            Delegates.glColor4b(red, green, blue, alpha);
        }
        public static void Color4bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4bv(System.IntPtr v)
        {
            Delegates.glColor4bv(v);
        }
        public static void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
        {
            Delegates.glColor4d(red, green, blue, alpha);
        }
        public static void Color4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4dv(System.IntPtr v)
        {
            Delegates.glColor4dv(v);
        }
        public static void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glColor4f(red, green, blue, alpha);
        }
        public static void Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void Color4fNormal3fVertex3fvSUN(GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4fNormal3fVertex3fvSUN(GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Color4fNormal3fVertex3fvSUN(System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4fNormal3fVertex3fvSUN(System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Color4fNormal3fVertex3fvSUN(System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Color4fNormal3fVertex3fvSUN(System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glColor4fNormal3fVertex3fvSUN(c, n, v);
        }
        public static void Color4fv(System.IntPtr v)
        {
            Delegates.glColor4fv(v);
        }
        public static void Color4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
        {
            Delegates.glColor4hNV(red, green, blue, alpha);
        }
        public static void Color4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4hvNV(System.IntPtr v)
        {
            Delegates.glColor4hvNV(v);
        }
        public static void Color4i(GLint red, GLint green, GLint blue, GLint alpha)
        {
            Delegates.glColor4i(red, green, blue, alpha);
        }
        public static void Color4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4iv(System.IntPtr v)
        {
            Delegates.glColor4iv(v);
        }
        public static void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
        {
            Delegates.glColor4s(red, green, blue, alpha);
        }
        public static void Color4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4sv(System.IntPtr v)
        {
            Delegates.glColor4sv(v);
        }
        public static void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
        {
            Delegates.glColor4ub(red, green, blue, alpha);
        }
        public static void Color4ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4ubv(System.IntPtr v)
        {
            Delegates.glColor4ubv(v);
        }
        public static void Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
        {
            Delegates.glColor4ubVertex2fSUN(r, g, b, a, x, y);
        }
        public static void Color4ubVertex2fvSUN(GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Color4ubVertex2fvSUN(System.IntPtr c, System.IntPtr v)
        {
            Delegates.glColor4ubVertex2fvSUN(c, v);
        }
        public static void Color4ubVertex2fvSUN(System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
        }
        public static void Color4ubVertex3fvSUN(GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Color4ubVertex3fvSUN(System.IntPtr c, System.IntPtr v)
        {
            Delegates.glColor4ubVertex3fvSUN(c, v);
        }
        public static void Color4ubVertex3fvSUN(System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
        {
            Delegates.glColor4ui(red, green, blue, alpha);
        }
        public static void Color4uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Color4uiv(System.IntPtr v)
        {
            Delegates.glColor4uiv(v);
        }
        public static void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
        {
            Delegates.glColor4us(red, green, blue, alpha);
        }
        public static void Color4usv(System.IntPtr v)
        {
            Delegates.glColor4usv(v);
        }
        public static void Color4usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorFragmentOp1ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        {
            Delegates.glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        }
        public static void ColorFragmentOp2ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        {
            Delegates.glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        public static void ColorFragmentOp3ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        {
            Delegates.glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        public static void ColorMask([MarshalAs(UnmanagedType.Bool)] bool red, [MarshalAs(UnmanagedType.Bool)] bool green, [MarshalAs(UnmanagedType.Bool)] bool blue, [MarshalAs(UnmanagedType.Bool)] bool alpha)
        {
            Delegates.glColorMask(red, green, blue, alpha);
        }
        public static void ColorMaskIndexedEXT(GLuint index, [MarshalAs(UnmanagedType.Bool)] bool r, [MarshalAs(UnmanagedType.Bool)] bool g, [MarshalAs(UnmanagedType.Bool)] bool b, [MarshalAs(UnmanagedType.Bool)] bool a)
        {
            Delegates.glColorMaskIndexedEXT(index, r, g, b, a);
        }
        public static void ColorMaterial(Enums.MaterialFace face, Enums.ColorMaterialParameter mode)
        {
            Delegates.glColorMaterial(face, mode);
        }
        public static void ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glColorPointer(size, type, stride, pointer);
        }
        public static void ColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glColorPointerEXT(size, type, stride, count, pointer);
        }
        public static void ColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorPointervINTEL(GLint size, Enums.VertexPointerType type, System.IntPtr pointer)
        {
            Delegates.glColorPointervINTEL(size, type, pointer);
        }
        public static void ColorPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorSubTable(Enums.VERSION_1_2 target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr data)
        {
            Delegates.glColorSubTable(target, start, count, format, type, data);
        }
        public static void ColorSubTable(Enums.VERSION_1_2 target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorSubTableEXT(Enums.EXT_color_subtable target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr data)
        {
            Delegates.glColorSubTableEXT(target, start, count, format, type, data);
        }
        public static void ColorSubTableEXT(Enums.EXT_color_subtable target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTableEXT(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTable(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTable(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table)
        {
            Delegates.glColorTable(target, internalformat, width, format, type, table);
        }
        public static void ColorTableEXT(Enums.EXT_paletted_texture target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table)
        {
            Delegates.glColorTableEXT(target, internalFormat, width, format, type, table);
        }
        public static void ColorTableEXT(Enums.EXT_paletted_texture target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableEXT(target, internalFormat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameterfv(target, pname, @params);
        }
        public static void ColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameterfvSGI(target, pname, @params);
        }
        public static void ColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameteriv(target, pname, @params);
        }
        public static void ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameterivSGI(target, pname, @params);
        }
        public static void ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableSGI(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table)
        {
            Delegates.glColorTableSGI(target, internalformat, width, format, type, table);
        }
        public static void CombinerInputNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners input, Enums.NV_register_combiners mapping, Enums.NV_register_combiners componentUsage)
        {
            Delegates.glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
        }
        public static void CombinerOutputNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners abOutput, Enums.NV_register_combiners cdOutput, Enums.NV_register_combiners sumOutput, Enums.NV_register_combiners scale, Enums.NV_register_combiners bias, [MarshalAs(UnmanagedType.Bool)] bool abDotProduct, [MarshalAs(UnmanagedType.Bool)] bool cdDotProduct, [MarshalAs(UnmanagedType.Bool)] bool muxSum)
        {
            Delegates.glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        }
        public static void CombinerParameterfNV(Enums.NV_register_combiners pname, GLfloat param)
        {
            Delegates.glCombinerParameterfNV(pname, param);
        }
        public static void CombinerParameterfvNV(Enums.NV_register_combiners pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterfvNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CombinerParameterfvNV(Enums.NV_register_combiners pname, System.IntPtr @params)
        {
            Delegates.glCombinerParameterfvNV(pname, @params);
        }
        public static void CombinerParameteriNV(Enums.NV_register_combiners pname, GLint param)
        {
            Delegates.glCombinerParameteriNV(pname, param);
        }
        public static void CombinerParameterivNV(Enums.NV_register_combiners pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CombinerParameterivNV(Enums.NV_register_combiners pname, System.IntPtr @params)
        {
            Delegates.glCombinerParameterivNV(pname, @params);
        }
        public static void CombinerStageParameterfvNV(Enums.NV_register_combiners2 stage, Enums.NV_register_combiners2 pname, System.IntPtr @params)
        {
            Delegates.glCombinerStageParameterfvNV(stage, pname, @params);
        }
        public static void CombinerStageParameterfvNV(Enums.NV_register_combiners2 stage, Enums.NV_register_combiners2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompileShader(GLuint shader)
        {
            Delegates.glCompileShader(shader);
        }
        public static void CompileShaderARB(GLhandleARB shaderObj)
        {
            Delegates.glCompileShaderARB(shaderObj);
        }
        public static void CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
        }
        public static void CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexImage1DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexImage1DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
        }
        public static void CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexImage2DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void CompressedTexImage2DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void CompressedTexImage3DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexImage3DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
        }
        public static void CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexSubImage1DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexSubImage1DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
        }
        public static void CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexSubImage2DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void CompressedTexSubImage2DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void CompressedTexSubImage3DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void CompressedTexSubImage3DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionFilter1D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionFilter1D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, image);
        }
        public static void ConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
        }
        public static void ConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
        }
        public static void ConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
        }
        public static void ConvolutionParameterf(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat @params)
        {
            Delegates.glConvolutionParameterf(target, pname, @params);
        }
        public static void ConvolutionParameterfEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat @params)
        {
            Delegates.glConvolutionParameterfEXT(target, pname, @params);
        }
        public static void ConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameterfv(target, pname, @params);
        }
        public static void ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameterfvEXT(target, pname, @params);
        }
        public static void ConvolutionParameteri(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint @params)
        {
            Delegates.glConvolutionParameteri(target, pname, @params);
        }
        public static void ConvolutionParameteriEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint @params)
        {
            Delegates.glConvolutionParameteriEXT(target, pname, @params);
        }
        public static void ConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameteriv(target, pname, @params);
        }
        public static void ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameterivEXT(target, pname, @params);
        }
        public static void CopyColorSubTable(Enums.VERSION_1_2 target, GLsizei start, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorSubTable(target, start, x, y, width);
        }
        public static void CopyColorSubTableEXT(Enums.EXT_color_subtable target, GLsizei start, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorSubTableEXT(target, start, x, y, width);
        }
        public static void CopyColorTable(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorTable(target, internalformat, x, y, width);
        }
        public static void CopyColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorTableSGI(target, internalformat, x, y, width);
        }
        public static void CopyConvolutionFilter1D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyConvolutionFilter1D(target, internalformat, x, y, width);
        }
        public static void CopyConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
        }
        public static void CopyConvolutionFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
        }
        public static void CopyConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
        }
        public static void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelCopyType type)
        {
            Delegates.glCopyPixels(x, y, width, height, type);
        }
        public static void CopyTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border)
        {
            Delegates.glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }
        public static void CopyTexImage1DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border)
        {
            Delegates.glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
        }
        public static void CopyTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        {
            Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }
        public static void CopyTexImage2DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        {
            Delegates.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
        }
        public static void CopyTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }
        public static void CopyTexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
        }
        public static void CopyTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void CopyTexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void CopyTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static void CopyTexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static GLuint CreateProgram()
        {
            return Delegates.glCreateProgram();
        }
        public static GLhandleARB CreateProgramObjectARB()
        {
            return Delegates.glCreateProgramObjectARB();
        }
        public static GLuint CreateShader(Enums.VERSION_2_0 type)
        {
            return Delegates.glCreateShader(type);
        }
        public static GLhandleARB CreateShaderObjectARB(Enums.ARB_shader_objects shaderType)
        {
            return Delegates.glCreateShaderObjectARB(shaderType);
        }
        public static void CullFace(Enums.CullFaceMode mode)
        {
            Delegates.glCullFace(mode);
        }
        public static void CullParameterdvEXT(Enums.EXT_cull_vertex pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterdvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CullParameterdvEXT(Enums.EXT_cull_vertex pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glCullParameterdvEXT(pname, @params);
        }
        public static void CullParameterfvEXT(Enums.EXT_cull_vertex pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glCullParameterfvEXT(pname, @params);
        }
        public static void CullParameterfvEXT(Enums.EXT_cull_vertex pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void CurrentPaletteMatrixARB(GLint index)
        {
            Delegates.glCurrentPaletteMatrixARB(index);
        }
        public static void DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, System.IntPtr points)
        {
            Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        public static void DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, System.IntPtr points)
        {
            Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        public static void DeformSGIX(Enums.FfdMaskSGIX mask)
        {
            Delegates.glDeformSGIX(mask);
        }
        public static void DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
        {
            Delegates.glDeleteAsyncMarkersSGIX(marker, range);
        }
        public static void DeleteBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteBuffers(GLsizei n, System.IntPtr buffers)
        {
            Delegates.glDeleteBuffers(n, buffers);
        }
        public static void DeleteBuffersARB(GLsizei n, System.IntPtr buffers)
        {
            Delegates.glDeleteBuffersARB(n, buffers);
        }
        public static void DeleteBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteFencesAPPLE(GLsizei n, System.IntPtr fences)
        {
            Delegates.glDeleteFencesAPPLE(n, fences);
        }
        public static void DeleteFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteFencesNV(GLsizei n, System.IntPtr fences)
        {
            Delegates.glDeleteFencesNV(n, fences);
        }
        public static void DeleteFragmentShaderATI(GLuint id)
        {
            Delegates.glDeleteFragmentShaderATI(id);
        }
        public static void DeleteFramebuffersEXT(GLsizei n, System.IntPtr framebuffers)
        {
            Delegates.glDeleteFramebuffersEXT(n, framebuffers);
        }
        public static void DeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteLists(GLuint list, GLsizei range)
        {
            Delegates.glDeleteLists(list, range);
        }
        public static void DeleteObjectARB(GLhandleARB obj)
        {
            Delegates.glDeleteObjectARB(obj);
        }
        public static void DeleteOcclusionQueriesNV(GLsizei n, System.IntPtr ids)
        {
            Delegates.glDeleteOcclusionQueriesNV(n, ids);
        }
        public static void DeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteProgram(GLuint program)
        {
            Delegates.glDeleteProgram(program);
        }
        public static void DeleteProgramsARB(GLsizei n, System.IntPtr programs)
        {
            Delegates.glDeleteProgramsARB(n, programs);
        }
        public static void DeleteProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteProgramsNV(GLsizei n, System.IntPtr programs)
        {
            Delegates.glDeleteProgramsNV(n, programs);
        }
        public static void DeleteQueries(GLsizei n, System.IntPtr ids)
        {
            Delegates.glDeleteQueries(n, ids);
        }
        public static void DeleteQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteQueriesARB(GLsizei n, System.IntPtr ids)
        {
            Delegates.glDeleteQueriesARB(n, ids);
        }
        public static void DeleteRenderbuffersEXT(GLsizei n, System.IntPtr renderbuffers)
        {
            Delegates.glDeleteRenderbuffersEXT(n, renderbuffers);
        }
        public static void DeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteShader(GLuint shader)
        {
            Delegates.glDeleteShader(shader);
        }
        public static void DeleteTextures(GLsizei n, System.IntPtr textures)
        {
            Delegates.glDeleteTextures(n, textures);
        }
        public static void DeleteTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteTexturesEXT(GLsizei n, System.IntPtr textures)
        {
            Delegates.glDeleteTexturesEXT(n, textures);
        }
        public static void DeleteTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteVertexArraysAPPLE(GLsizei n, System.IntPtr arrays)
        {
            Delegates.glDeleteVertexArraysAPPLE(n, arrays);
        }
        public static void DeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DeleteVertexShaderEXT(GLuint id)
        {
            Delegates.glDeleteVertexShaderEXT(id);
        }
        public static void DepthBoundsdNV(GLdouble zmin, GLdouble zmax)
        {
            Delegates.glDepthBoundsdNV(zmin, zmax);
        }
        public static void DepthBoundsEXT(GLclampd zmin, GLclampd zmax)
        {
            Delegates.glDepthBoundsEXT(zmin, zmax);
        }
        public static void DepthFunc(Enums.DepthFunction func)
        {
            Delegates.glDepthFunc(func);
        }
        public static void DepthMask([MarshalAs(UnmanagedType.Bool)] bool flag)
        {
            Delegates.glDepthMask(flag);
        }
        public static void DepthRange(GLclampd near, GLclampd far)
        {
            Delegates.glDepthRange(near, far);
        }
        public static void DepthRangedNV(GLdouble zNear, GLdouble zFar)
        {
            Delegates.glDepthRangedNV(zNear, zFar);
        }
        public static void DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
        {
            Delegates.glDetachObjectARB(containerObj, attachedObj);
        }
        public static void DetachShader(GLuint program, GLuint shader)
        {
            Delegates.glDetachShader(program, shader);
        }
        public static void DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDetailTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, System.IntPtr points)
        {
            Delegates.glDetailTexFuncSGIS(target, n, points);
        }
        public static void Disable(Enums.EnableCap cap)
        {
            Delegates.glDisable(cap);
        }
        public static void DisableClientState(Enums.EnableCap array)
        {
            Delegates.glDisableClientState(array);
        }
        public static void DisableIndexedEXT(Enums.EXT_draw_buffers2 target, GLuint index)
        {
            Delegates.glDisableIndexedEXT(target, index);
        }
        public static void DisableVariantClientStateEXT(GLuint id)
        {
            Delegates.glDisableVariantClientStateEXT(id);
        }
        public static void DisableVertexAttribArray(GLuint index)
        {
            Delegates.glDisableVertexAttribArray(index);
        }
        public static void DisableVertexAttribArrayARB(GLuint index)
        {
            Delegates.glDisableVertexAttribArrayARB(index);
        }
        public static void DrawArrays(Enums.BeginMode mode, GLint first, GLsizei count)
        {
            Delegates.glDrawArrays(mode, first, count);
        }
        public static void DrawArraysEXT(Enums.BeginMode mode, GLint first, GLsizei count)
        {
            Delegates.glDrawArraysEXT(mode, first, count);
        }
        public static void DrawArraysInstancedEXT(Enums.BeginMode mode, GLint start, GLsizei count, GLsizei primcount)
        {
            Delegates.glDrawArraysInstancedEXT(mode, start, count, primcount);
        }
        public static void DrawBuffer(Enums.DrawBufferMode mode)
        {
            Delegates.glDrawBuffer(mode);
        }
        public static void DrawBuffers(GLsizei n, System.IntPtr bufs)
        {
            Delegates.glDrawBuffers(n, bufs);
        }
        public static void DrawBuffers(GLsizei n, Enums.VERSION_2_0[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawBuffersARB(GLsizei n, System.IntPtr bufs)
        {
            Delegates.glDrawBuffersARB(n, bufs);
        }
        public static void DrawBuffersARB(GLsizei n, Enums.ARB_draw_buffers[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawBuffersATI(GLsizei n, System.IntPtr bufs)
        {
            Delegates.glDrawBuffersATI(n, bufs);
        }
        public static void DrawBuffersATI(GLsizei n, Enums.ATI_draw_buffers[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersATI(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawElementArrayAPPLE(Enums.BeginMode mode, GLint first, GLsizei count)
        {
            Delegates.glDrawElementArrayAPPLE(mode, first, count);
        }
        public static void DrawElementArrayATI(Enums.BeginMode mode, GLsizei count)
        {
            Delegates.glDrawElementArrayATI(mode, count);
        }
        public static void DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, System.IntPtr indices)
        {
            Delegates.glDrawElements(mode, count, type, indices);
        }
        public static void DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements(mode, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawElementsInstancedEXT(Enums.BeginMode mode, GLsizei count, Enums.EXT_draw_instanced type, System.IntPtr indices, GLsizei primcount)
        {
            Delegates.glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
        }
        public static void DrawElementsInstancedEXT(Enums.BeginMode mode, GLsizei count, Enums.EXT_draw_instanced type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedEXT(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawMeshArraysSUN(Enums.BeginMode mode, GLint first, GLsizei count, GLsizei width)
        {
            Delegates.glDrawMeshArraysSUN(mode, first, count, width);
        }
        public static void DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glDrawPixels(width, height, format, type, pixels);
        }
        public static void DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels(width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint first, GLsizei count)
        {
            Delegates.glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
        }
        public static void DrawRangeElementArrayATI(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count)
        {
            Delegates.glDrawRangeElementArrayATI(mode, start, end, count);
        }
        public static void DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, Enums.VERSION_1_2 type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, Enums.VERSION_1_2 type, System.IntPtr indices)
        {
            Delegates.glDrawRangeElements(mode, start, end, count, type, indices);
        }
        public static void DrawRangeElementsEXT(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, Enums.EXT_draw_range_elements type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void DrawRangeElementsEXT(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, Enums.EXT_draw_range_elements type, System.IntPtr indices)
        {
            Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, indices);
        }
        public static void EdgeFlag([MarshalAs(UnmanagedType.Bool)] bool flag)
        {
            Delegates.glEdgeFlag(flag);
        }
        public static void EdgeFlagPointer(GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointer(stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void EdgeFlagPointer(GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glEdgeFlagPointer(stride, pointer);
        }
        public static void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, Enums.Boolean[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerEXT(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glEdgeFlagPointerEXT(stride, count, pointer);
        }
        public static void EdgeFlagPointerListIBM(GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
        }
        public static void EdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerListIBM(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void EdgeFlagv(System.IntPtr flag)
        {
            Delegates.glEdgeFlagv(flag);
        }
        public static void EdgeFlagv(Enums.Boolean[] flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ElementPointerAPPLE(Enums.APPLE_element_array type, System.IntPtr pointer)
        {
            Delegates.glElementPointerAPPLE(type, pointer);
        }
        public static void ElementPointerAPPLE(Enums.APPLE_element_array type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glElementPointerAPPLE(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ElementPointerATI(Enums.ATI_element_array type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glElementPointerATI(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ElementPointerATI(Enums.ATI_element_array type, System.IntPtr pointer)
        {
            Delegates.glElementPointerATI(type, pointer);
        }
        public static void Enable(Enums.EnableCap cap)
        {
            Delegates.glEnable(cap);
        }
        public static void EnableClientState(Enums.EnableCap array)
        {
            Delegates.glEnableClientState(array);
        }
        public static void EnableIndexedEXT(Enums.EXT_draw_buffers2 target, GLuint index)
        {
            Delegates.glEnableIndexedEXT(target, index);
        }
        public static void EnableVariantClientStateEXT(GLuint id)
        {
            Delegates.glEnableVariantClientStateEXT(id);
        }
        public static void EnableVertexAttribArray(GLuint index)
        {
            Delegates.glEnableVertexAttribArray(index);
        }
        public static void EnableVertexAttribArrayARB(GLuint index)
        {
            Delegates.glEnableVertexAttribArrayARB(index);
        }
        public static void End()
        {
            Delegates.glEnd();
        }
        public static void EndFragmentShaderATI()
        {
            Delegates.glEndFragmentShaderATI();
        }
        public static void EndList()
        {
            Delegates.glEndList();
        }
        public static void EndOcclusionQueryNV()
        {
            Delegates.glEndOcclusionQueryNV();
        }
        public static void EndQuery(Enums.VERSION_1_5 target)
        {
            Delegates.glEndQuery(target);
        }
        public static void EndQueryARB(Enums.ARB_occlusion_query target)
        {
            Delegates.glEndQueryARB(target);
        }
        public static void EndTransformFeedbackNV()
        {
            Delegates.glEndTransformFeedbackNV();
        }
        public static void EndVertexShaderEXT()
        {
            Delegates.glEndVertexShaderEXT();
        }
        public static void EvalCoord1d(GLdouble u)
        {
            Delegates.glEvalCoord1d(u);
        }
        public static void EvalCoord1dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void EvalCoord1dv(System.IntPtr u)
        {
            Delegates.glEvalCoord1dv(u);
        }
        public static void EvalCoord1f(GLfloat u)
        {
            Delegates.glEvalCoord1f(u);
        }
        public static void EvalCoord1fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void EvalCoord1fv(System.IntPtr u)
        {
            Delegates.glEvalCoord1fv(u);
        }
        public static void EvalCoord2d(GLdouble u, GLdouble v)
        {
            Delegates.glEvalCoord2d(u, v);
        }
        public static void EvalCoord2dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void EvalCoord2dv(System.IntPtr u)
        {
            Delegates.glEvalCoord2dv(u);
        }
        public static void EvalCoord2f(GLfloat u, GLfloat v)
        {
            Delegates.glEvalCoord2f(u, v);
        }
        public static void EvalCoord2fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void EvalCoord2fv(System.IntPtr u)
        {
            Delegates.glEvalCoord2fv(u);
        }
        public static void EvalMapsNV(Enums.NV_evaluators target, Enums.NV_evaluators mode)
        {
            Delegates.glEvalMapsNV(target, mode);
        }
        public static void EvalMesh1(Enums.MeshMode1 mode, GLint i1, GLint i2)
        {
            Delegates.glEvalMesh1(mode, i1, i2);
        }
        public static void EvalMesh2(Enums.MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2)
        {
            Delegates.glEvalMesh2(mode, i1, i2, j1, j2);
        }
        public static void EvalPoint1(GLint i)
        {
            Delegates.glEvalPoint1(i);
        }
        public static void EvalPoint2(GLint i, GLint j)
        {
            Delegates.glEvalPoint2(i, j);
        }
        public static void ExecuteProgramNV(Enums.NV_vertex_program target, GLuint id, System.IntPtr @params)
        {
            Delegates.glExecuteProgramNV(target, id, @params);
        }
        public static void ExecuteProgramNV(Enums.NV_vertex_program target, GLuint id, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glExecuteProgramNV(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ExtractComponentEXT(GLuint res, GLuint src, GLuint num)
        {
            Delegates.glExtractComponentEXT(res, src, num);
        }
        public static void FeedbackBuffer(GLsizei size, Enums.FeedbackType type, GLfloat[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glFeedbackBuffer(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FeedbackBuffer(GLsizei size, Enums.FeedbackType type, [In, Out()] System.IntPtr buffer)
        {
            Delegates.glFeedbackBuffer(size, type, buffer);
        }
        public static void FinalCombinerInputNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners input, Enums.NV_register_combiners mapping, Enums.NV_register_combiners componentUsage)
        {
            Delegates.glFinalCombinerInputNV(variable, input, mapping, componentUsage);
        }
        public static void Finish()
        {
            Delegates.glFinish();
        }
        public static GLint FinishAsyncSGIX([In, Out()] System.IntPtr markerp)
        {
            return Delegates.glFinishAsyncSGIX(markerp);
        }
        public static GLint FinishAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return Delegates.glFinishAsyncSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FinishFenceAPPLE(GLuint fence)
        {
            Delegates.glFinishFenceAPPLE(fence);
        }
        public static void FinishFenceNV(GLuint fence)
        {
            Delegates.glFinishFenceNV(fence);
        }
        public static void FinishObjectAPPLE(Enums.APPLE_fence @object, GLint name)
        {
            Delegates.glFinishObjectAPPLE(@object, name);
        }
        public static void FinishTextureSUNX()
        {
            Delegates.glFinishTextureSUNX();
        }
        public static void Flush()
        {
            Delegates.glFlush();
        }
        public static void FlushMappedBufferRangeAPPLE(Enums.APPLE_flush_buffer_range target, GLintptr offset, GLsizeiptr size)
        {
            Delegates.glFlushMappedBufferRangeAPPLE(target, offset, size);
        }
        public static void FlushPixelDataRangeNV(Enums.NV_pixel_data_range target)
        {
            Delegates.glFlushPixelDataRangeNV(target);
        }
        public static void FlushRasterSGIX()
        {
            Delegates.glFlushRasterSGIX();
        }
        public static void FlushVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFlushVertexArrayRangeAPPLE(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FlushVertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glFlushVertexArrayRangeAPPLE(length, pointer);
        }
        public static void FlushVertexArrayRangeNV()
        {
            Delegates.glFlushVertexArrayRangeNV();
        }
        public static void FogCoordd(GLdouble coord)
        {
            Delegates.glFogCoordd(coord);
        }
        public static void FogCoorddEXT(GLdouble coord)
        {
            Delegates.glFogCoorddEXT(coord);
        }
        public static void FogCoorddv(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FogCoorddv(System.IntPtr coord)
        {
            Delegates.glFogCoorddv(coord);
        }
        public static void FogCoorddvEXT(System.IntPtr coord)
        {
            Delegates.glFogCoorddvEXT(coord);
        }
        public static void FogCoorddvEXT(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FogCoordf(GLfloat coord)
        {
            Delegates.glFogCoordf(coord);
        }
        public static void FogCoordfEXT(GLfloat coord)
        {
            Delegates.glFogCoordfEXT(coord);
        }
        public static void FogCoordfv(System.IntPtr coord)
        {
            Delegates.glFogCoordfv(coord);
        }
        public static void FogCoordfv(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FogCoordfvEXT(System.IntPtr coord)
        {
            Delegates.glFogCoordfvEXT(coord);
        }
        public static void FogCoordfvEXT(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FogCoordhNV(GLhalfNV fog)
        {
            Delegates.glFogCoordhNV(fog);
        }
        public static void FogCoordhvNV(System.IntPtr fog)
        {
            Delegates.glFogCoordhvNV(fog);
        }
        public static void FogCoordhvNV(GLhalfNV[] fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordhvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FogCoordPointer(Enums.VERSION_1_4 type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FogCoordPointer(Enums.VERSION_1_4 type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glFogCoordPointer(type, stride, pointer);
        }
        public static void FogCoordPointerEXT(Enums.EXT_fog_coord type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FogCoordPointerEXT(Enums.EXT_fog_coord type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glFogCoordPointerEXT(type, stride, pointer);
        }
        public static void FogCoordPointerListIBM(Enums.IBM_vertex_array_lists type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
        }
        public static void FogCoordPointerListIBM(Enums.IBM_vertex_array_lists type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Fogf(Enums.FogParameter pname, GLfloat param)
        {
            Delegates.glFogf(pname, param);
        }
        public static void FogFuncSGIS(GLsizei n, System.IntPtr points)
        {
            Delegates.glFogFuncSGIS(n, points);
        }
        public static void FogFuncSGIS(GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glFogFuncSGIS(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Fogfv(Enums.FogParameter pname, System.IntPtr @params)
        {
            Delegates.glFogfv(pname, @params);
        }
        public static void Fogfv(Enums.FogParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFogfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Fogi(Enums.FogParameter pname, GLint param)
        {
            Delegates.glFogi(pname, param);
        }
        public static void Fogiv(Enums.FogParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFogiv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Fogiv(Enums.FogParameter pname, System.IntPtr @params)
        {
            Delegates.glFogiv(pname, @params);
        }
        public static void FragmentColorMaterialSGIX(Enums.MaterialFace face, Enums.MaterialParameter mode)
        {
            Delegates.glFragmentColorMaterialSGIX(face, mode);
        }
        public static void FragmentLightfSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLfloat param)
        {
            Delegates.glFragmentLightfSGIX(light, pname, param);
        }
        public static void FragmentLightfvSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FragmentLightfvSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightfvSGIX(light, pname, @params);
        }
        public static void FragmentLightiSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLint param)
        {
            Delegates.glFragmentLightiSGIX(light, pname, param);
        }
        public static void FragmentLightivSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FragmentLightivSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightivSGIX(light, pname, @params);
        }
        public static void FragmentLightModelfSGIX(Enums.FragmentLightModelParameterSGIX pname, GLfloat param)
        {
            Delegates.glFragmentLightModelfSGIX(pname, param);
        }
        public static void FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightModelfvSGIX(pname, @params);
        }
        public static void FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FragmentLightModeliSGIX(Enums.FragmentLightModelParameterSGIX pname, GLint param)
        {
            Delegates.glFragmentLightModeliSGIX(pname, param);
        }
        public static void FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightModelivSGIX(pname, @params);
        }
        public static void FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FragmentMaterialfSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param)
        {
            Delegates.glFragmentMaterialfSGIX(face, pname, param);
        }
        public static void FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params)
        {
            Delegates.glFragmentMaterialfvSGIX(face, pname, @params);
        }
        public static void FragmentMaterialiSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param)
        {
            Delegates.glFragmentMaterialiSGIX(face, pname, param);
        }
        public static void FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params)
        {
            Delegates.glFragmentMaterialivSGIX(face, pname, @params);
        }
        public static void FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void FramebufferRenderbufferEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object renderbuffertarget, GLuint renderbuffer)
        {
            Delegates.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
        }
        public static void FramebufferTexture1DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
        }
        public static void FramebufferTexture2DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
        }
        public static void FramebufferTexture3DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level, GLint zoffset)
        {
            Delegates.glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
        }
        public static void FramebufferTextureEXT(Enums.NV_geometry_program4 target, Enums.NV_geometry_program4 attachment, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTextureEXT(target, attachment, texture, level);
        }
        public static void FramebufferTextureFaceEXT(Enums.NV_geometry_program4 target, Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, Enums.TextureTarget face)
        {
            Delegates.glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
        }
        public static void FramebufferTextureLayerEXT(Enums.NV_geometry_program4 target, Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, GLint layer)
        {
            Delegates.glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
        }
        public static void FrameZoomSGIX(GLint factor)
        {
            Delegates.glFrameZoomSGIX(factor);
        }
        public static void FreeObjectBufferATI(GLuint buffer)
        {
            Delegates.glFreeObjectBufferATI(buffer);
        }
        public static void FrontFace(Enums.FrontFaceDirection mode)
        {
            Delegates.glFrontFace(mode);
        }
        public static void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glFrustum(left, right, bottom, top, zNear, zFar);
        }
        public static GLuint GenAsyncMarkersSGIX(GLsizei range)
        {
            return Delegates.glGenAsyncMarkersSGIX(range);
        }
        public static void GenBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenBuffers(GLsizei n, [In, Out()] System.IntPtr buffers)
        {
            Delegates.glGenBuffers(n, buffers);
        }
        public static void GenBuffersARB(GLsizei n, [In, Out()] System.IntPtr buffers)
        {
            Delegates.glGenBuffersARB(n, buffers);
        }
        public static void GenBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenerateMipmapEXT(Enums.EXT_framebuffer_object target)
        {
            Delegates.glGenerateMipmapEXT(target);
        }
        public static void GenFencesAPPLE(GLsizei n, [In, Out()] System.IntPtr fences)
        {
            Delegates.glGenFencesAPPLE(n, fences);
        }
        public static void GenFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenFencesNV(GLsizei n, [In, Out()] System.IntPtr fences)
        {
            Delegates.glGenFencesNV(n, fences);
        }
        public static GLuint GenFragmentShadersATI(GLuint range)
        {
            return Delegates.glGenFragmentShadersATI(range);
        }
        public static void GenFramebuffersEXT(GLsizei n, [In, Out()] System.IntPtr framebuffers)
        {
            Delegates.glGenFramebuffersEXT(n, framebuffers);
        }
        public static void GenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLuint GenLists(GLsizei range)
        {
            return Delegates.glGenLists(range);
        }
        public static void GenOcclusionQueriesNV(GLsizei n, [In, Out()] System.IntPtr ids)
        {
            Delegates.glGenOcclusionQueriesNV(n, ids);
        }
        public static void GenOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenProgramsARB(GLsizei n, [In, Out()] System.IntPtr programs)
        {
            Delegates.glGenProgramsARB(n, programs);
        }
        public static void GenProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenProgramsNV(GLsizei n, [In, Out()] System.IntPtr programs)
        {
            Delegates.glGenProgramsNV(n, programs);
        }
        public static void GenQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenQueries(GLsizei n, [In, Out()] System.IntPtr ids)
        {
            Delegates.glGenQueries(n, ids);
        }
        public static void GenQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenQueriesARB(GLsizei n, [In, Out()] System.IntPtr ids)
        {
            Delegates.glGenQueriesARB(n, ids);
        }
        public static void GenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenRenderbuffersEXT(GLsizei n, [In, Out()] System.IntPtr renderbuffers)
        {
            Delegates.glGenRenderbuffersEXT(n, renderbuffers);
        }
        public static GLuint GenSymbolsEXT(Enums.EXT_vertex_shader datatype, Enums.EXT_vertex_shader storagetype, Enums.EXT_vertex_shader range, GLuint components)
        {
            return Delegates.glGenSymbolsEXT(datatype, storagetype, range, components);
        }
        public static void GenTextures(GLsizei n, [In, Out()] System.IntPtr textures)
        {
            Delegates.glGenTextures(n, textures);
        }
        public static void GenTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenTexturesEXT(GLsizei n, [In, Out()] System.IntPtr textures)
        {
            Delegates.glGenTexturesEXT(n, textures);
        }
        public static void GenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glGenVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GenVertexArraysAPPLE(GLsizei n, [In, Out()] System.IntPtr arrays)
        {
            Delegates.glGenVertexArraysAPPLE(n, arrays);
        }
        public static GLuint GenVertexShadersEXT(GLuint range)
        {
            return Delegates.glGenVertexShadersEXT(range);
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveAttrib(program, index, bufSize, length, size, type, name);
        }
        public static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, Enums.ARB_vertex_shader[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, Enums.ARB_vertex_shader[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, Enums.ARB_vertex_shader[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, Enums.ARB_vertex_shader[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveUniform(program, index, bufSize, length, size, type, name);
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, Enums.VERSION_2_0[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, Enums.ARB_shader_objects[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, Enums.ARB_shader_objects[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, Enums.ARB_shader_objects[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, Enums.ARB_shader_objects[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLsizei[] size, Enums.NV_transform_feedback[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, length, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, Enums.NV_transform_feedback[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), size, h1.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, Enums.NV_transform_feedback[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, Enums.NV_transform_feedback[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size, h0.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), size, type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLsizei[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(size, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, length, h0.AddrOfPinnedObject(), type, name);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetArrayObjectfvATI(Enums.EnableCap array, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetArrayObjectfvATI(array, pname, @params);
        }
        public static void GetArrayObjectfvATI(Enums.EnableCap array, Enums.ATI_vertex_array_object pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectfvATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetArrayObjectivATI(Enums.EnableCap array, Enums.ATI_vertex_array_object pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectivATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetArrayObjectivATI(Enums.EnableCap array, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetArrayObjectivATI(array, pname, @params);
        }
        public static void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, [In, Out()] System.IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj)
        {
            Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
        }
        public static void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, [In, Out()] System.IntPtr count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, [In, Out()] System.IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), obj);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetAttachedShaders(GLuint program, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj)
        {
            Delegates.glGetAttachedShaders(program, maxCount, count, obj);
        }
        public static void GetAttachedShaders(GLuint program, GLsizei maxCount, [In, Out()] System.IntPtr count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint GetAttribLocation(GLuint program, string name)
        {
            return Delegates.glGetAttribLocation(program, name);
        }
        public static GLint GetAttribLocationARB(GLhandleARB programObj, string name)
        {
            return Delegates.glGetAttribLocationARB(programObj, name);
        }
        public static void GetBooleanIndexedvEXT(Enums.EXT_draw_buffers2 target, GLuint index, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetBooleanIndexedvEXT(target, index, data);
        }
        public static void GetBooleanIndexedvEXT(Enums.EXT_draw_buffers2 target, GLuint index, Enums.Boolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanIndexedvEXT(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetBooleanv(Enums.GetPName pname, Enums.Boolean[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetBooleanv(Enums.GetPName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBooleanv(pname, @params);
        }
        public static void GetBufferParameteriv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferParameteriv(target, pname, @params);
        }
        public static void GetBufferParameteriv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetBufferParameterivARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameterivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetBufferParameterivARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferParameterivARB(target, pname, @params);
        }
        public static void GetBufferPointerv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, IntPtr[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointerv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetBufferPointerv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferPointerv(target, pname, @params);
        }
        public static void GetBufferPointervARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object pname, IntPtr[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferPointervARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetBufferPointervARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferPointervARB(target, pname, @params);
        }
        public static void GetBufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetBufferSubData(target, offset, size, data);
        }
        public static void GetBufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetBufferSubDataARB(Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetBufferSubDataARB(target, offset, size, data);
        }
        public static void GetBufferSubDataARB(Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubDataARB(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetClipPlane(Enums.ClipPlaneName plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glGetClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetClipPlane(Enums.ClipPlaneName plane, [In, Out()] System.IntPtr equation)
        {
            Delegates.glGetClipPlane(plane, equation);
        }
        public static void GetColorTable(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTable(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr table)
        {
            Delegates.glGetColorTable(target, format, type, table);
        }
        public static void GetColorTableEXT(Enums.EXT_paletted_texture target, Enums.PixelFormat format, Enums.PixelType type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableEXT(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTableEXT(Enums.EXT_paletted_texture target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetColorTableEXT(target, format, type, data);
        }
        public static void GetColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterfv(target, pname, @params);
        }
        public static void GetColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTableParameterfvEXT(Enums.EXT_paletted_texture target, Enums.EXT_paletted_texture pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTableParameterfvEXT(Enums.EXT_paletted_texture target, Enums.EXT_paletted_texture pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterfvEXT(target, pname, @params);
        }
        public static void GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterfvSGI(target, pname, @params);
        }
        public static void GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameteriv(target, pname, @params);
        }
        public static void GetColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTableParameterivEXT(Enums.EXT_paletted_texture target, Enums.EXT_paletted_texture pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterivEXT(target, pname, @params);
        }
        public static void GetColorTableParameterivEXT(Enums.EXT_paletted_texture target, Enums.EXT_paletted_texture pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterivSGI(target, pname, @params);
        }
        public static void GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr table)
        {
            Delegates.glGetColorTableSGI(target, format, type, table);
        }
        public static void GetColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableSGI(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetCombinerInputParameterfvNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetCombinerInputParameterfvNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, @params);
        }
        public static void GetCombinerInputParameterivNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, @params);
        }
        public static void GetCombinerInputParameterivNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetCombinerOutputParameterfvNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, @params);
        }
        public static void GetCombinerOutputParameterfvNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetCombinerOutputParameterivNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, @params);
        }
        public static void GetCombinerOutputParameterivNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetCombinerStageParameterfvNV(Enums.NV_register_combiners2 stage, Enums.NV_register_combiners2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetCombinerStageParameterfvNV(Enums.NV_register_combiners2 stage, Enums.NV_register_combiners2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerStageParameterfvNV(stage, pname, @params);
        }
        public static void GetCompressedTexImage(Enums.TextureTarget target, GLint level, [In, Out()] System.IntPtr img)
        {
            Delegates.glGetCompressedTexImage(target, level, img);
        }
        public static void GetCompressedTexImage(Enums.TextureTarget target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetCompressedTexImageARB(Enums.TextureTarget target, GLint level, [In, Out()] System.IntPtr img)
        {
            Delegates.glGetCompressedTexImageARB(target, level, img);
        }
        public static void GetCompressedTexImageARB(Enums.TextureTarget target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImageARB(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetConvolutionFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr image)
        {
            Delegates.glGetConvolutionFilter(target, format, type, image);
        }
        public static void GetConvolutionFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetConvolutionFilterEXT(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr image)
        {
            Delegates.glGetConvolutionFilterEXT(target, format, type, image);
        }
        public static void GetConvolutionFilterEXT(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilterEXT(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameterfv(target, pname, @params);
        }
        public static void GetConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameterfvEXT(target, pname, @params);
        }
        public static void GetConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameteriv(target, pname, @params);
        }
        public static void GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameterivEXT(target, pname, @params);
        }
        public static void GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetDetailTexFuncSGIS(Enums.TextureTarget target, [In, Out()] System.IntPtr points)
        {
            Delegates.glGetDetailTexFuncSGIS(target, points);
        }
        public static void GetDetailTexFuncSGIS(Enums.TextureTarget target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDetailTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetDoublev(Enums.GetPName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetDoublev(pname, @params);
        }
        public static void GetDoublev(Enums.GetPName pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDoublev(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLenum GetError()
        {
            return Delegates.glGetError();
        }
        public static void GetFenceivNV(GLuint fence, Enums.NV_fence pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFenceivNV(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFenceivNV(GLuint fence, Enums.NV_fence pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFenceivNV(fence, pname, @params);
        }
        public static void GetFinalCombinerInputParameterfvNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFinalCombinerInputParameterfvNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, @params);
        }
        public static void GetFinalCombinerInputParameterivNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFinalCombinerInputParameterivNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, @params);
        }
        public static void GetFloatv(Enums.GetPName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFloatv(pname, @params);
        }
        public static void GetFloatv(Enums.GetPName pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFloatv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFogFuncSGIS(GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFogFuncSGIS(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFogFuncSGIS([In, Out()] System.IntPtr points)
        {
            Delegates.glGetFogFuncSGIS(points);
        }
        public static GLint GetFragDataLocationEXT(GLuint program, string name)
        {
            return Delegates.glGetFragDataLocationEXT(program, name);
        }
        public static void GetFragmentLightfvSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentLightfvSGIX(light, pname, @params);
        }
        public static void GetFragmentLightfvSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFragmentLightivSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentLightivSGIX(light, pname, @params);
        }
        public static void GetFragmentLightivSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentMaterialfvSGIX(face, pname, @params);
        }
        public static void GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentMaterialivSGIX(face, pname, @params);
        }
        public static void GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, @params);
        }
        public static void GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLhandleARB GetHandleARB(Enums.ARB_shader_objects pname)
        {
            return Delegates.glGetHandleARB(pname);
        }
        public static void GetHistogram(Enums.VERSION_1_2 target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetHistogram(Enums.VERSION_1_2 target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetHistogram(target, reset, format, type, values);
        }
        public static void GetHistogramEXT(Enums.HistogramTargetEXT target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetHistogramEXT(target, reset, format, type, values);
        }
        public static void GetHistogramEXT(Enums.HistogramTargetEXT target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramEXT(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetHistogramParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameterfv(target, pname, @params);
        }
        public static void GetHistogramParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameterfvEXT(target, pname, @params);
        }
        public static void GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetHistogramParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetHistogramParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameteriv(target, pname, @params);
        }
        public static void GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameterivEXT(target, pname, @params);
        }
        public static void GetImageTransformParameterfvHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetImageTransformParameterfvHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetImageTransformParameterfvHP(target, pname, @params);
        }
        public static void GetImageTransformParameterivHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetImageTransformParameterivHP(target, pname, @params);
        }
        public static void GetImageTransformParameterivHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInfoLogARB(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetInfoLogARB(obj, maxLength, length, infoLog);
        }
        public static GLint GetInstrumentsSGIX()
        {
            return Delegates.glGetInstrumentsSGIX();
        }
        public static void GetIntegerIndexedvEXT(Enums.EXT_draw_buffers2 target, GLuint index, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetIntegerIndexedvEXT(target, index, data);
        }
        public static void GetIntegerIndexedvEXT(Enums.EXT_draw_buffers2 target, GLuint index, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerIndexedvEXT(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetIntegerv(Enums.GetPName pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetIntegerv(Enums.GetPName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetIntegerv(pname, @params);
        }
        public static void GetInvariantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, Enums.Boolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetInvariantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetInvariantBooleanvEXT(id, value, data);
        }
        public static void GetInvariantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetInvariantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetInvariantFloatvEXT(id, value, data);
        }
        public static void GetInvariantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetInvariantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetInvariantIntegervEXT(id, value, data);
        }
        public static void GetLightfv(Enums.LightName light, Enums.LightParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetLightfv(Enums.LightName light, Enums.LightParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetLightfv(light, pname, @params);
        }
        public static void GetLightiv(Enums.LightName light, Enums.LightParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetLightiv(Enums.LightName light, Enums.LightParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetLightiv(light, pname, @params);
        }
        public static void GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetListParameterfvSGIX(list, pname, @params);
        }
        public static void GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetListParameterivSGIX(list, pname, @params);
        }
        public static void GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetLocalConstantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, Enums.Boolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetLocalConstantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetLocalConstantBooleanvEXT(id, value, data);
        }
        public static void GetLocalConstantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetLocalConstantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetLocalConstantFloatvEXT(id, value, data);
        }
        public static void GetLocalConstantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetLocalConstantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetLocalConstantIntegervEXT(id, value, data);
        }
        public static void GetMapAttribParameterfvNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMapAttribParameterfvNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapAttribParameterfvNV(target, index, pname, @params);
        }
        public static void GetMapAttribParameterivNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapAttribParameterivNV(target, index, pname, @params);
        }
        public static void GetMapAttribParameterivNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterivNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMapControlPointsNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, [MarshalAs(UnmanagedType.Bool)] bool packed, [In, Out()] System.IntPtr points)
        {
            Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
        }
        public static void GetMapControlPointsNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, [MarshalAs(UnmanagedType.Bool)] bool packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, [In, Out()] System.IntPtr v)
        {
            Delegates.glGetMapdv(target, query, v);
        }
        public static void GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapdv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapfv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, [In, Out()] System.IntPtr v)
        {
            Delegates.glGetMapfv(target, query, v);
        }
        public static void GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, [In, Out()] System.IntPtr v)
        {
            Delegates.glGetMapiv(target, query, v);
        }
        public static void GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapiv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMapParameterfvNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMapParameterfvNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapParameterfvNV(target, pname, @params);
        }
        public static void GetMapParameterivNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapParameterivNV(target, pname, @params);
        }
        public static void GetMapParameterivNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMaterialfv(face, pname, @params);
        }
        public static void GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMaterialiv(face, pname, @params);
        }
        public static void GetMinmax(Enums.VERSION_1_2 target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMinmax(Enums.VERSION_1_2 target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetMinmax(target, reset, format, type, values);
        }
        public static void GetMinmaxEXT(Enums.MinmaxTargetEXT target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxEXT(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMinmaxEXT(Enums.MinmaxTargetEXT target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetMinmaxEXT(target, reset, format, type, values);
        }
        public static void GetMinmaxParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameterfv(target, pname, @params);
        }
        public static void GetMinmaxParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameterfvEXT(target, pname, @params);
        }
        public static void GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMinmaxParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetMinmaxParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameteriv(target, pname, @params);
        }
        public static void GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameterivEXT(target, pname, @params);
        }
        public static void GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetObjectBufferfvATI(GLuint buffer, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectBufferfvATI(buffer, pname, @params);
        }
        public static void GetObjectBufferfvATI(GLuint buffer, Enums.ATI_vertex_array_object pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferfvATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetObjectBufferivATI(GLuint buffer, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectBufferivATI(buffer, pname, @params);
        }
        public static void GetObjectBufferivATI(GLuint buffer, Enums.ATI_vertex_array_object pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferivATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectParameterfvARB(obj, pname, @params);
        }
        public static void GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterfvARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterivARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectParameterivARB(obj, pname, @params);
        }
        public static void GetOcclusionQueryivNV(GLuint id, Enums.NV_occlusion_query pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetOcclusionQueryivNV(id, pname, @params);
        }
        public static void GetOcclusionQueryivNV(GLuint id, Enums.NV_occlusion_query pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetOcclusionQueryuivNV(GLuint id, Enums.NV_occlusion_query pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryuivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetOcclusionQueryuivNV(GLuint id, Enums.NV_occlusion_query pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetOcclusionQueryuivNV(id, pname, @params);
        }
        public static void GetPixelMapfv(Enums.PixelMap map, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapfv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPixelMapfv(Enums.PixelMap map, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetPixelMapfv(map, values);
        }
        public static void GetPixelMapuiv(Enums.PixelMap map, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapuiv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPixelMapuiv(Enums.PixelMap map, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetPixelMapuiv(map, values);
        }
        public static void GetPixelMapusv(Enums.PixelMap map, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetPixelMapusv(map, values);
        }
        public static void GetPixelMapusv(Enums.PixelMap map, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapusv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPixelTexGenParameterfvSGIS(pname, @params);
        }
        public static void GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPixelTexGenParameterivSGIS(pname, @params);
        }
        public static void GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPointerv(Enums.GetPointervPName pname, object[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPointerv(Enums.GetPointervPName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPointerv(pname, @params);
        }
        public static void GetPointervEXT(Enums.GetPointervPName pname, IntPtr[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointervEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPointervEXT(Enums.GetPointervPName pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPointervEXT(pname, @params);
        }
        public static void GetPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetPolygonStipple([In, Out()] System.IntPtr mask)
        {
            Delegates.glGetPolygonStipple(mask);
        }
        public static void GetProgramEnvParameterdvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterdvARB(target, index, @params);
        }
        public static void GetProgramEnvParameterdvARB(Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramEnvParameterfvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterfvARB(target, index, @params);
        }
        public static void GetProgramEnvParameterfvARB(Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramEnvParameterIivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterIivNV(target, index, @params);
        }
        public static void GetProgramEnvParameterIivNV(Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterIivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramEnvParameterIuivNV(Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterIuivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramEnvParameterIuivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterIuivNV(target, index, @params);
        }
        public static void GetProgramInfoLog(GLuint program, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog(program, bufSize, length, infoLog);
        }
        public static void GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramInfoLog(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramiv(program, pname, @params);
        }
        public static void GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramiv(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramivARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramivARB(target, pname, @params);
        }
        public static void GetProgramivARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramivNV(GLuint id, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramivNV(id, pname, @params);
        }
        public static void GetProgramivNV(GLuint id, Enums.NV_vertex_program pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramLocalParameterdvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterdvARB(target, index, @params);
        }
        public static void GetProgramLocalParameterdvARB(Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramLocalParameterfvARB(Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramLocalParameterfvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterfvARB(target, index, @params);
        }
        public static void GetProgramLocalParameterIivNV(Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterIivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramLocalParameterIivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterIivNV(target, index, @params);
        }
        public static void GetProgramLocalParameterIuivNV(Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterIuivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramLocalParameterIuivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterIuivNV(target, index, @params);
        }
        public static void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, [In, Out()] System.IntPtr @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), @params);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramNamedParameterdvNV(id, len, name, @params);
        }
        public static void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramNamedParameterfvNV(id, len, name, @params);
        }
        public static void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, [In, Out()] System.IntPtr @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), @params);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramParameterdvNV(Enums.NV_vertex_program target, GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramParameterdvNV(target, index, pname, @params);
        }
        public static void GetProgramParameterdvNV(Enums.NV_vertex_program target, GLuint index, Enums.NV_vertex_program pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterdvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramParameterfvNV(Enums.NV_vertex_program target, GLuint index, Enums.NV_vertex_program pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramParameterfvNV(Enums.NV_vertex_program target, GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramParameterfvNV(target, index, pname, @params);
        }
        public static void GetProgramStringARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program pname, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetProgramStringARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @string)
        {
            Delegates.glGetProgramStringARB(target, pname, @string);
        }
        public static void GetProgramStringNV(GLuint id, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr program)
        {
            Delegates.glGetProgramStringNV(id, pname, program);
        }
        public static void GetProgramStringNV(GLuint id, Enums.NV_vertex_program pname, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryiv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryiv(target, pname, @params);
        }
        public static void GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryivARB(target, pname, @params);
        }
        public static void GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, GLint64EXT[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjecti64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjecti64vEXT(id, pname, @params);
        }
        public static void GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectiv(id, pname, @params);
        }
        public static void GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectivARB(id, pname, @params);
        }
        public static void GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectui64vEXT(id, pname, @params);
        }
        public static void GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, GLuint64EXT[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectui64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectuiv(id, pname, @params);
        }
        public static void GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectuivARB(id, pname, @params);
        }
        public static void GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetRenderbufferParameterivEXT(target, pname, @params);
        }
        public static void GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetRenderbufferParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, object row, [In, Out()] System.IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            Delegates.glGetSeparableFilter(target, format, type, row, column, span);
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, object column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, object row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, object column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, row, h0.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, row, column, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            Delegates.glGetSeparableFilterEXT(target, format, type, row, column, span);
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, row, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), span);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), column, span);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, object row, [In, Out()] System.IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), column, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void GetShaderInfoLog(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog(shader, bufSize, length, infoLog);
        }
        public static void GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderInfoLog(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetShaderiv(shader, pname, @params);
        }
        public static void GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderiv(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, [In, Out()] System.Text.StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSource(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetShaderSource(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source)
        {
            Delegates.glGetShaderSource(shader, bufSize, length, source);
        }
        public static void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source)
        {
            Delegates.glGetShaderSourceARB(obj, maxLength, length, source);
        }
        public static void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, [In, Out()] System.Text.StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSourceARB(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSharpenTexFuncSGIS(Enums.TextureTarget target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSharpenTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetSharpenTexFuncSGIS(Enums.TextureTarget target, [In, Out()] System.IntPtr points)
        {
            Delegates.glGetSharpenTexFuncSGIS(target, points);
        }
        public static string GetString(Enums.StringName name)
        {
            return Marshal.PtrToStringAnsi(Delegates.glGetString(name));
        }
        public static void GetTexBumpParameterfvATI(Enums.ATI_envmap_bumpmap pname, [In, Out()] System.IntPtr param)
        {
            Delegates.glGetTexBumpParameterfvATI(pname, param);
        }
        public static void GetTexBumpParameterfvATI(Enums.ATI_envmap_bumpmap pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexBumpParameterivATI(Enums.ATI_envmap_bumpmap pname, [In, Out()] System.IntPtr param)
        {
            Delegates.glGetTexBumpParameterivATI(pname, param);
        }
        public static void GetTexBumpParameterivATI(Enums.ATI_envmap_bumpmap pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexEnvfv(target, pname, @params);
        }
        public static void GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexEnviv(target, pname, @params);
        }
        public static void GetTexFilterFuncSGIS(Enums.TextureTarget target, Enums.SGIS_texture_filter4 filter, [In, Out()] System.IntPtr weights)
        {
            Delegates.glGetTexFilterFuncSGIS(target, filter, weights);
        }
        public static void GetTexFilterFuncSGIS(Enums.TextureTarget target, Enums.SGIS_texture_filter4 filter, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexFilterFuncSGIS(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexGendv(coord, pname, @params);
        }
        public static void GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexGenfv(coord, pname, @params);
        }
        public static void GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexGeniv(coord, pname, @params);
        }
        public static void GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage(target, level, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr pixels)
        {
            Delegates.glGetTexImage(target, level, format, type, pixels);
        }
        public static void GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexLevelParameterfv(target, level, pname, @params);
        }
        public static void GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameterfv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexLevelParameteriv(target, level, pname, @params);
        }
        public static void GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameteriv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameterfv(target, pname, @params);
        }
        public static void GetTexParameterIivEXT(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterIivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexParameterIivEXT(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameterIivEXT(target, pname, @params);
        }
        public static void GetTexParameterIuivEXT(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterIuivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexParameterIuivEXT(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameterIuivEXT(target, pname, @params);
        }
        public static void GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameteriv(target, pname, @params);
        }
        public static void GetTrackMatrixivNV(Enums.NV_vertex_program target, GLuint address, Enums.NV_vertex_program pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTrackMatrixivNV(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetTrackMatrixivNV(Enums.NV_vertex_program target, GLuint address, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTrackMatrixivNV(target, address, pname, @params);
        }
        public static void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, [In, Out()] System.IntPtr location)
        {
            Delegates.glGetTransformFeedbackVaryingNV(program, index, location);
        }
        public static void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint[] location)
        {
            GCHandle h0 = GCHandle.Alloc(location, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTransformFeedbackVaryingNV(program, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint GetUniformBufferSizeEXT(GLuint program, GLint location)
        {
            return Delegates.glGetUniformBufferSizeEXT(program, location);
        }
        public static void GetUniformfv(GLuint program, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformfv(program, location, @params);
        }
        public static void GetUniformfv(GLuint program, GLint location, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetUniformfvARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformfvARB(programObj, location, @params);
        }
        public static void GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfvARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetUniformiv(GLuint program, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformiv(program, location, @params);
        }
        public static void GetUniformiv(GLuint program, GLint location, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformiv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetUniformivARB(GLhandleARB programObj, GLint location, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformivARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetUniformivARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformivARB(programObj, location, @params);
        }
        public static GLint GetUniformLocation(GLuint program, string name)
        {
            return Delegates.glGetUniformLocation(program, name);
        }
        public static GLint GetUniformLocationARB(GLhandleARB programObj, string name)
        {
            return Delegates.glGetUniformLocationARB(programObj, name);
        }
        public static GLintptr GetUniformOffsetEXT(GLuint program, GLint location)
        {
            return Delegates.glGetUniformOffsetEXT(program, location);
        }
        public static void GetUniformuivEXT(GLuint program, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformuivEXT(program, location, @params);
        }
        public static void GetUniformuivEXT(GLuint program, GLint location, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformuivEXT(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVariantArrayObjectfvATI(GLuint id, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVariantArrayObjectfvATI(id, pname, @params);
        }
        public static void GetVariantArrayObjectfvATI(GLuint id, Enums.ATI_vertex_array_object pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectfvATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVariantArrayObjectivATI(GLuint id, Enums.ATI_vertex_array_object pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectivATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVariantArrayObjectivATI(GLuint id, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVariantArrayObjectivATI(id, pname, @params);
        }
        public static void GetVariantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, Enums.Boolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVariantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantBooleanvEXT(id, value, data);
        }
        public static void GetVariantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantFloatvEXT(id, value, data);
        }
        public static void GetVariantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVariantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantIntegervEXT(id, value, data);
        }
        public static void GetVariantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVariantPointervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantPointervEXT(id, value, data);
        }
        public static void GetVariantPointervEXT(GLuint id, Enums.EXT_vertex_shader value, IntPtr[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantPointervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint GetVaryingLocationNV(GLuint program, string name)
        {
            return Delegates.glGetVaryingLocationNV(program, name);
        }
        public static void GetVertexAttribArrayObjectfvATI(GLuint index, Enums.ATI_vertex_attrib_array_object pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribArrayObjectfvATI(GLuint index, Enums.ATI_vertex_attrib_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, @params);
        }
        public static void GetVertexAttribArrayObjectivATI(GLuint index, Enums.ATI_vertex_attrib_array_object pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectivATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribArrayObjectivATI(GLuint index, Enums.ATI_vertex_attrib_array_object pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribArrayObjectivATI(index, pname, @params);
        }
        public static void GetVertexAttribdv(GLuint index, Enums.VERSION_2_0 pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribdv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribdv(index, pname, @params);
        }
        public static void GetVertexAttribdvARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribdvARB(index, pname, @params);
        }
        public static void GetVertexAttribdvARB(GLuint index, Enums.ARB_vertex_program pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribdvNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribdvNV(index, pname, @params);
        }
        public static void GetVertexAttribdvNV(GLuint index, Enums.NV_vertex_program pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribfv(GLuint index, Enums.VERSION_2_0 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribfv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribfv(index, pname, @params);
        }
        public static void GetVertexAttribfvARB(GLuint index, Enums.ARB_vertex_program pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribfvARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribfvARB(index, pname, @params);
        }
        public static void GetVertexAttribfvNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribfvNV(index, pname, @params);
        }
        public static void GetVertexAttribfvNV(GLuint index, Enums.NV_vertex_program pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribIivEXT(GLuint index, Enums.NV_vertex_program4 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribIivEXT(index, pname, @params);
        }
        public static void GetVertexAttribIivEXT(GLuint index, Enums.NV_vertex_program4 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribIivEXT(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribIuivEXT(GLuint index, Enums.NV_vertex_program4 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribIuivEXT(index, pname, @params);
        }
        public static void GetVertexAttribIuivEXT(GLuint index, Enums.NV_vertex_program4 pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribIuivEXT(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribiv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribiv(index, pname, @params);
        }
        public static void GetVertexAttribiv(GLuint index, Enums.VERSION_2_0 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribiv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribivARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribivARB(index, pname, @params);
        }
        public static void GetVertexAttribivARB(GLuint index, Enums.ARB_vertex_program pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribivNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribivNV(index, pname, @params);
        }
        public static void GetVertexAttribivNV(GLuint index, Enums.NV_vertex_program pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribPointerv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointerv(index, pname, pointer);
        }
        public static void GetVertexAttribPointerv(GLuint index, Enums.VERSION_2_0 pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointerv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribPointervARB(GLuint index, Enums.ARB_vertex_program pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointervARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GetVertexAttribPointervARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointervARB(index, pname, pointer);
        }
        public static void GetVertexAttribPointervNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointervNV(index, pname, pointer);
        }
        public static void GetVertexAttribPointervNV(GLuint index, Enums.NV_vertex_program pname, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribPointervNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void GlobalAlphaFactorbSUN(GLbyte factor)
        {
            Delegates.glGlobalAlphaFactorbSUN(factor);
        }
        public static void GlobalAlphaFactordSUN(GLdouble factor)
        {
            Delegates.glGlobalAlphaFactordSUN(factor);
        }
        public static void GlobalAlphaFactorfSUN(GLfloat factor)
        {
            Delegates.glGlobalAlphaFactorfSUN(factor);
        }
        public static void GlobalAlphaFactoriSUN(GLint factor)
        {
            Delegates.glGlobalAlphaFactoriSUN(factor);
        }
        public static void GlobalAlphaFactorsSUN(GLshort factor)
        {
            Delegates.glGlobalAlphaFactorsSUN(factor);
        }
        public static void GlobalAlphaFactorubSUN(GLubyte factor)
        {
            Delegates.glGlobalAlphaFactorubSUN(factor);
        }
        public static void GlobalAlphaFactoruiSUN(GLuint factor)
        {
            Delegates.glGlobalAlphaFactoruiSUN(factor);
        }
        public static void GlobalAlphaFactorusSUN(GLushort factor)
        {
            Delegates.glGlobalAlphaFactorusSUN(factor);
        }
        public static void Hint(Enums.HintTarget target, Enums.HintMode mode)
        {
            Delegates.glHint(target, mode);
        }
        public static void HintPGI(Enums.PGI_misc_hints target, GLint mode)
        {
            Delegates.glHintPGI(target, mode);
        }
        public static void Histogram(Enums.VERSION_1_2 target, GLsizei width, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink)
        {
            Delegates.glHistogram(target, width, internalformat, sink);
        }
        public static void HistogramEXT(Enums.HistogramTargetEXT target, GLsizei width, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink)
        {
            Delegates.glHistogramEXT(target, width, internalformat, sink);
        }
        public static void IglooInterfaceSGIX(GLenum pname, object @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glIglooInterfaceSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void IglooInterfaceSGIX(GLenum pname, System.IntPtr @params)
        {
            Delegates.glIglooInterfaceSGIX(pname, @params);
        }
        public static void ImageTransformParameterfHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLfloat param)
        {
            Delegates.glImageTransformParameterfHP(target, pname, param);
        }
        public static void ImageTransformParameterfvHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ImageTransformParameterfvHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, System.IntPtr @params)
        {
            Delegates.glImageTransformParameterfvHP(target, pname, @params);
        }
        public static void ImageTransformParameteriHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLint param)
        {
            Delegates.glImageTransformParameteriHP(target, pname, param);
        }
        public static void ImageTransformParameterivHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, System.IntPtr @params)
        {
            Delegates.glImageTransformParameterivHP(target, pname, @params);
        }
        public static void ImageTransformParameterivHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Indexd(GLdouble c)
        {
            Delegates.glIndexd(c);
        }
        public static void Indexdv(GLdouble[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexdv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Indexdv(System.IntPtr c)
        {
            Delegates.glIndexdv(c);
        }
        public static void Indexf(GLfloat c)
        {
            Delegates.glIndexf(c);
        }
        public static void IndexFuncEXT(Enums.EXT_index_func func, GLclampf @ref)
        {
            Delegates.glIndexFuncEXT(func, @ref);
        }
        public static void Indexfv(GLfloat[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Indexfv(System.IntPtr c)
        {
            Delegates.glIndexfv(c);
        }
        public static void Indexi(GLint c)
        {
            Delegates.glIndexi(c);
        }
        public static void Indexiv(GLint[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Indexiv(System.IntPtr c)
        {
            Delegates.glIndexiv(c);
        }
        public static void IndexMask(GLuint mask)
        {
            Delegates.glIndexMask(mask);
        }
        public static void IndexMaterialEXT(Enums.MaterialFace face, Enums.EXT_index_material mode)
        {
            Delegates.glIndexMaterialEXT(face, mode);
        }
        public static void IndexPointer(Enums.IndexPointerType type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glIndexPointer(type, stride, pointer);
        }
        public static void IndexPointer(Enums.IndexPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void IndexPointerEXT(Enums.IndexPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glIndexPointerEXT(type, stride, count, pointer);
        }
        public static void IndexPointerEXT(Enums.IndexPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointerEXT(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glIndexPointerListIBM(type, stride, pointer, ptrstride);
        }
        public static void Indexs(GLshort c)
        {
            Delegates.glIndexs(c);
        }
        public static void Indexsv(GLshort[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexsv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Indexsv(System.IntPtr c)
        {
            Delegates.glIndexsv(c);
        }
        public static void Indexub(GLubyte c)
        {
            Delegates.glIndexub(c);
        }
        public static void Indexubv(System.IntPtr c)
        {
            Delegates.glIndexubv(c);
        }
        public static void Indexubv(GLubyte[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void InitNames()
        {
            Delegates.glInitNames();
        }
        public static void InsertComponentEXT(GLuint res, GLuint src, GLuint num)
        {
            Delegates.glInsertComponentEXT(res, src, num);
        }
        public static void InstrumentsBufferSGIX(GLsizei size, [In, Out()] System.IntPtr buffer)
        {
            Delegates.glInstrumentsBufferSGIX(size, buffer);
        }
        public static void InstrumentsBufferSGIX(GLsizei size, GLint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glInstrumentsBufferSGIX(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glInterleavedArrays(format, stride, pointer);
        }
        public static void InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays(format, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean IsAsyncMarkerSGIX(GLuint marker)
        {
            return Delegates.glIsAsyncMarkerSGIX(marker);
        }
        public static GLboolean IsBuffer(GLuint buffer)
        {
            return Delegates.glIsBuffer(buffer);
        }
        public static GLboolean IsBufferARB(GLuint buffer)
        {
            return Delegates.glIsBufferARB(buffer);
        }
        public static GLboolean IsEnabled(Enums.EnableCap cap)
        {
            return Delegates.glIsEnabled(cap);
        }
        public static GLboolean IsEnabledIndexedEXT(Enums.EXT_draw_buffers2 target, GLuint index)
        {
            return Delegates.glIsEnabledIndexedEXT(target, index);
        }
        public static GLboolean IsFenceAPPLE(GLuint fence)
        {
            return Delegates.glIsFenceAPPLE(fence);
        }
        public static GLboolean IsFenceNV(GLuint fence)
        {
            return Delegates.glIsFenceNV(fence);
        }
        public static GLboolean IsFramebufferEXT(GLuint framebuffer)
        {
            return Delegates.glIsFramebufferEXT(framebuffer);
        }
        public static GLboolean IsList(GLuint list)
        {
            return Delegates.glIsList(list);
        }
        public static GLboolean IsObjectBufferATI(GLuint buffer)
        {
            return Delegates.glIsObjectBufferATI(buffer);
        }
        public static GLboolean IsOcclusionQueryNV(GLuint id)
        {
            return Delegates.glIsOcclusionQueryNV(id);
        }
        public static GLboolean IsProgram(GLuint program)
        {
            return Delegates.glIsProgram(program);
        }
        public static GLboolean IsProgramARB(GLuint program)
        {
            return Delegates.glIsProgramARB(program);
        }
        public static GLboolean IsProgramNV(GLuint id)
        {
            return Delegates.glIsProgramNV(id);
        }
        public static GLboolean IsQuery(GLuint id)
        {
            return Delegates.glIsQuery(id);
        }
        public static GLboolean IsQueryARB(GLuint id)
        {
            return Delegates.glIsQueryARB(id);
        }
        public static GLboolean IsRenderbufferEXT(GLuint renderbuffer)
        {
            return Delegates.glIsRenderbufferEXT(renderbuffer);
        }
        public static GLboolean IsShader(GLuint shader)
        {
            return Delegates.glIsShader(shader);
        }
        public static GLboolean IsTexture(GLuint texture)
        {
            return Delegates.glIsTexture(texture);
        }
        public static GLboolean IsTextureEXT(GLuint texture)
        {
            return Delegates.glIsTextureEXT(texture);
        }
        public static GLboolean IsVariantEnabledEXT(GLuint id, Enums.EXT_vertex_shader cap)
        {
            return Delegates.glIsVariantEnabledEXT(id, cap);
        }
        public static GLboolean IsVertexArrayAPPLE(GLuint array)
        {
            return Delegates.glIsVertexArrayAPPLE(array);
        }
        public static void LightEnviSGIX(Enums.LightEnvParameterSGIX pname, GLint param)
        {
            Delegates.glLightEnviSGIX(pname, param);
        }
        public static void Lightf(Enums.LightName light, Enums.LightParameter pname, GLfloat param)
        {
            Delegates.glLightf(light, pname, param);
        }
        public static void Lightfv(Enums.LightName light, Enums.LightParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Lightfv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params)
        {
            Delegates.glLightfv(light, pname, @params);
        }
        public static void Lighti(Enums.LightName light, Enums.LightParameter pname, GLint param)
        {
            Delegates.glLighti(light, pname, param);
        }
        public static void Lightiv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params)
        {
            Delegates.glLightiv(light, pname, @params);
        }
        public static void Lightiv(Enums.LightName light, Enums.LightParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LightModelf(Enums.LightModelParameter pname, GLfloat param)
        {
            Delegates.glLightModelf(pname, param);
        }
        public static void LightModelfv(Enums.LightModelParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModelfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LightModelfv(Enums.LightModelParameter pname, System.IntPtr @params)
        {
            Delegates.glLightModelfv(pname, @params);
        }
        public static void LightModeli(Enums.LightModelParameter pname, GLint param)
        {
            Delegates.glLightModeli(pname, param);
        }
        public static void LightModeliv(Enums.LightModelParameter pname, System.IntPtr @params)
        {
            Delegates.glLightModeliv(pname, @params);
        }
        public static void LightModeliv(Enums.LightModelParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModeliv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LineStipple(GLint factor, GLushort pattern)
        {
            Delegates.glLineStipple(factor, unchecked((GLushort)pattern));
        }
        public static void LineWidth(GLfloat width)
        {
            Delegates.glLineWidth(width);
        }
        public static void LinkProgram(GLuint program)
        {
            Delegates.glLinkProgram(program);
        }
        public static void LinkProgramARB(GLhandleARB programObj)
        {
            Delegates.glLinkProgramARB(programObj);
        }
        public static void ListBase(GLuint @base)
        {
            Delegates.glListBase(@base);
        }
        public static void ListParameterfSGIX(GLuint list, Enums.ListParameterName pname, GLfloat param)
        {
            Delegates.glListParameterfSGIX(list, pname, param);
        }
        public static void ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, System.IntPtr @params)
        {
            Delegates.glListParameterfvSGIX(list, pname, @params);
        }
        public static void ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ListParameteriSGIX(GLuint list, Enums.ListParameterName pname, GLint param)
        {
            Delegates.glListParameteriSGIX(list, pname, param);
        }
        public static void ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, System.IntPtr @params)
        {
            Delegates.glListParameterivSGIX(list, pname, @params);
        }
        public static void ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LoadIdentity()
        {
            Delegates.glLoadIdentity();
        }
        public static void LoadIdentityDeformationMapSGIX(Enums.FfdMaskSGIX mask)
        {
            Delegates.glLoadIdentityDeformationMapSGIX(mask);
        }
        public static void LoadMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LoadMatrixd(System.IntPtr m)
        {
            Delegates.glLoadMatrixd(m);
        }
        public static void LoadMatrixf(System.IntPtr m)
        {
            Delegates.glLoadMatrixf(m);
        }
        public static void LoadMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LoadName(GLuint name)
        {
            Delegates.glLoadName(name);
        }
        public static void LoadProgramNV(Enums.NV_vertex_program target, GLuint id, GLsizei len, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadProgramNV(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LoadProgramNV(Enums.NV_vertex_program target, GLuint id, GLsizei len, System.IntPtr program)
        {
            Delegates.glLoadProgramNV(target, id, len, program);
        }
        public static void LoadTransposeMatrixd(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixd(m);
        }
        public static void LoadTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LoadTransposeMatrixdARB(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixdARB(m);
        }
        public static void LoadTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LoadTransposeMatrixf(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixf(m);
        }
        public static void LoadTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LoadTransposeMatrixfARB(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixfARB(m);
        }
        public static void LoadTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void LockArraysEXT(GLint first, GLsizei count)
        {
            Delegates.glLockArraysEXT(first, count);
        }
        public static void LogicOp(Enums.LogicOp opcode)
        {
            Delegates.glLogicOp(opcode);
        }
        public static void Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1d(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, System.IntPtr points)
        {
            Delegates.glMap1d(target, u1, u2, stride, order, points);
        }
        public static void Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, System.IntPtr points)
        {
            Delegates.glMap1f(target, u1, u2, stride, order, points);
        }
        public static void Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1f(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, System.IntPtr points)
        {
            Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, System.IntPtr points)
        {
            Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static IntPtr MapBuffer(Enums.VERSION_1_5 target, Enums.VERSION_1_5 access)
        {
            return Delegates.glMapBuffer(target, access);
        }
        public static IntPtr MapBufferARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object access)
        {
            return Delegates.glMapBufferARB(target, access);
        }
        public static void MapControlPointsNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, [MarshalAs(UnmanagedType.Bool)] bool packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MapControlPointsNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, [MarshalAs(UnmanagedType.Bool)] bool packed, System.IntPtr points)
        {
            Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }
        public static void MapGrid1d(GLint un, GLdouble u1, GLdouble u2)
        {
            Delegates.glMapGrid1d(un, u1, u2);
        }
        public static void MapGrid1f(GLint un, GLfloat u1, GLfloat u2)
        {
            Delegates.glMapGrid1f(un, u1, u2);
        }
        public static void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
        {
            Delegates.glMapGrid2d(un, u1, u2, vn, v1, v2);
        }
        public static void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
        {
            Delegates.glMapGrid2f(un, u1, u2, vn, v1, v2);
        }
        public static IntPtr MapObjectBufferATI(GLuint buffer)
        {
            return Delegates.glMapObjectBufferATI(buffer);
        }
        public static void MapParameterfvNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MapParameterfvNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, System.IntPtr @params)
        {
            Delegates.glMapParameterfvNV(target, pname, @params);
        }
        public static void MapParameterivNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MapParameterivNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, System.IntPtr @params)
        {
            Delegates.glMapParameterivNV(target, pname, @params);
        }
        public static void Materialf(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param)
        {
            Delegates.glMaterialf(face, pname, param);
        }
        public static void Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params)
        {
            Delegates.glMaterialfv(face, pname, @params);
        }
        public static void Materiali(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param)
        {
            Delegates.glMateriali(face, pname, param);
        }
        public static void Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params)
        {
            Delegates.glMaterialiv(face, pname, @params);
        }
        public static void Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MatrixIndexPointerARB(GLint size, Enums.ARB_matrix_palette type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glMatrixIndexPointerARB(size, type, stride, pointer);
        }
        public static void MatrixIndexPointerARB(GLint size, Enums.ARB_matrix_palette type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexPointerARB(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MatrixIndexubvARB(GLint size, System.IntPtr indices)
        {
            Delegates.glMatrixIndexubvARB(size, indices);
        }
        public static void MatrixIndexubvARB(GLint size, GLubyte[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MatrixIndexuivARB(GLint size, GLuint[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MatrixIndexuivARB(GLint size, System.IntPtr indices)
        {
            Delegates.glMatrixIndexuivARB(size, indices);
        }
        public static void MatrixIndexusvARB(GLint size, System.IntPtr indices)
        {
            Delegates.glMatrixIndexusvARB(size, indices);
        }
        public static void MatrixIndexusvARB(GLint size, GLushort[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MatrixMode(Enums.MatrixMode mode)
        {
            Delegates.glMatrixMode(mode);
        }
        public static void Minmax(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink)
        {
            Delegates.glMinmax(target, internalformat, sink);
        }
        public static void MinmaxEXT(Enums.MinmaxTargetEXT target, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink)
        {
            Delegates.glMinmaxEXT(target, internalformat, sink);
        }
        public static void MultiDrawArrays(Enums.BeginMode mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawArrays(mode, first, count, primcount);
        }
        public static void MultiDrawArrays(Enums.BeginMode mode, GLint[] first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawArrays(Enums.BeginMode mode, [In, Out()] System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawArrays(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawArraysEXT(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiDrawArraysEXT(Enums.BeginMode mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawArraysEXT(mode, first, count, primcount);
        }
        public static void MultiDrawArraysEXT(Enums.BeginMode mode, [In, Out()] System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, System.IntPtr first, System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
        }
        public static void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiDrawElements(Enums.BeginMode mode, System.IntPtr count, Enums.VERSION_1_4 type, object[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, Enums.VERSION_1_4 type, object[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiDrawElements(Enums.BeginMode mode, System.IntPtr count, Enums.VERSION_1_4 type, System.IntPtr indices, GLsizei primcount)
        {
            Delegates.glMultiDrawElements(mode, count, type, indices, primcount);
        }
        public static void MultiDrawElements(Enums.BeginMode mode, GLsizei[] count, Enums.VERSION_1_4 type, System.IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawElementsEXT(Enums.BeginMode mode, System.IntPtr count, Enums.EXT_multi_draw_arrays type, System.IntPtr indices, GLsizei primcount)
        {
            Delegates.glMultiDrawElementsEXT(mode, count, type, indices, primcount);
        }
        public static void MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, Enums.EXT_multi_draw_arrays type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiDrawElementsEXT(Enums.BeginMode mode, System.IntPtr count, Enums.EXT_multi_draw_arrays type, IntPtr[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawElementsEXT(Enums.BeginMode mode, GLsizei[] count, Enums.EXT_multi_draw_arrays type, System.IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, System.IntPtr first, System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
        }
        public static void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiModeDrawArraysIBM(System.IntPtr mode, System.IntPtr first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            Delegates.glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
        }
        public static void MultiModeDrawArraysIBM(System.IntPtr mode, System.IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiModeDrawArraysIBM(System.IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiModeDrawArraysIBM(System.IntPtr mode, GLint[] first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, System.IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiModeDrawArraysIBM(Enums.BeginMode[] mode, System.IntPtr first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, GLsizei[] count, Enums.IBM_multimode_draw_arrays type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, System.IntPtr count, Enums.IBM_multimode_draw_arrays type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(System.IntPtr mode, GLsizei[] count, Enums.IBM_multimode_draw_arrays type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(System.IntPtr mode, System.IntPtr count, Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, count, type, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(System.IntPtr mode, GLsizei[] count, Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, GLsizei[] count, Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(Enums.BeginMode[] mode, System.IntPtr count, Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void MultiModeDrawElementsIBM(System.IntPtr mode, System.IntPtr count, Enums.IBM_multimode_draw_arrays type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            Delegates.glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
        }
        public static void MultiTexCoord1d(Enums.VERSION_1_3 target, GLdouble s)
        {
            Delegates.glMultiTexCoord1d(target, s);
        }
        public static void MultiTexCoord1dARB(Enums.ARB_multitexture target, GLdouble s)
        {
            Delegates.glMultiTexCoord1dARB(target, s);
        }
        public static void MultiTexCoord1dv(Enums.VERSION_1_3 target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1dv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1dv(target, v);
        }
        public static void MultiTexCoord1dvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1dvARB(target, v);
        }
        public static void MultiTexCoord1dvARB(Enums.ARB_multitexture target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1f(Enums.VERSION_1_3 target, GLfloat s)
        {
            Delegates.glMultiTexCoord1f(target, s);
        }
        public static void MultiTexCoord1fARB(Enums.ARB_multitexture target, GLfloat s)
        {
            Delegates.glMultiTexCoord1fARB(target, s);
        }
        public static void MultiTexCoord1fv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1fv(target, v);
        }
        public static void MultiTexCoord1fv(Enums.VERSION_1_3 target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1fvARB(Enums.ARB_multitexture target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1fvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1fvARB(target, v);
        }
        public static void MultiTexCoord1hNV(Enums.NV_half_float target, GLhalfNV s)
        {
            Delegates.glMultiTexCoord1hNV(target, s);
        }
        public static void MultiTexCoord1hvNV(Enums.NV_half_float target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1hvNV(Enums.NV_half_float target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1hvNV(target, v);
        }
        public static void MultiTexCoord1i(Enums.VERSION_1_3 target, GLint s)
        {
            Delegates.glMultiTexCoord1i(target, s);
        }
        public static void MultiTexCoord1iARB(Enums.ARB_multitexture target, GLint s)
        {
            Delegates.glMultiTexCoord1iARB(target, s);
        }
        public static void MultiTexCoord1iv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1iv(target, v);
        }
        public static void MultiTexCoord1iv(Enums.VERSION_1_3 target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1ivARB(Enums.ARB_multitexture target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1ivARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1ivARB(target, v);
        }
        public static void MultiTexCoord1s(Enums.VERSION_1_3 target, GLshort s)
        {
            Delegates.glMultiTexCoord1s(target, s);
        }
        public static void MultiTexCoord1sARB(Enums.ARB_multitexture target, GLshort s)
        {
            Delegates.glMultiTexCoord1sARB(target, s);
        }
        public static void MultiTexCoord1sv(Enums.VERSION_1_3 target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord1sv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1sv(target, v);
        }
        public static void MultiTexCoord1svARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1svARB(target, v);
        }
        public static void MultiTexCoord1svARB(Enums.ARB_multitexture target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t)
        {
            Delegates.glMultiTexCoord2d(target, s, t);
        }
        public static void MultiTexCoord2dARB(Enums.ARB_multitexture target, GLdouble s, GLdouble t)
        {
            Delegates.glMultiTexCoord2dARB(target, s, t);
        }
        public static void MultiTexCoord2dv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2dv(target, v);
        }
        public static void MultiTexCoord2dv(Enums.VERSION_1_3 target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2dvARB(Enums.ARB_multitexture target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2dvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2dvARB(target, v);
        }
        public static void MultiTexCoord2f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t)
        {
            Delegates.glMultiTexCoord2f(target, s, t);
        }
        public static void MultiTexCoord2fARB(Enums.ARB_multitexture target, GLfloat s, GLfloat t)
        {
            Delegates.glMultiTexCoord2fARB(target, s, t);
        }
        public static void MultiTexCoord2fv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2fv(target, v);
        }
        public static void MultiTexCoord2fv(Enums.VERSION_1_3 target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2fvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2fvARB(target, v);
        }
        public static void MultiTexCoord2fvARB(Enums.ARB_multitexture target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2hNV(Enums.NV_half_float target, GLhalfNV s, GLhalfNV t)
        {
            Delegates.glMultiTexCoord2hNV(target, s, t);
        }
        public static void MultiTexCoord2hvNV(Enums.NV_half_float target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2hvNV(target, v);
        }
        public static void MultiTexCoord2hvNV(Enums.NV_half_float target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2i(Enums.VERSION_1_3 target, GLint s, GLint t)
        {
            Delegates.glMultiTexCoord2i(target, s, t);
        }
        public static void MultiTexCoord2iARB(Enums.ARB_multitexture target, GLint s, GLint t)
        {
            Delegates.glMultiTexCoord2iARB(target, s, t);
        }
        public static void MultiTexCoord2iv(Enums.VERSION_1_3 target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2iv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2iv(target, v);
        }
        public static void MultiTexCoord2ivARB(Enums.ARB_multitexture target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2ivARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2ivARB(target, v);
        }
        public static void MultiTexCoord2s(Enums.VERSION_1_3 target, GLshort s, GLshort t)
        {
            Delegates.glMultiTexCoord2s(target, s, t);
        }
        public static void MultiTexCoord2sARB(Enums.ARB_multitexture target, GLshort s, GLshort t)
        {
            Delegates.glMultiTexCoord2sARB(target, s, t);
        }
        public static void MultiTexCoord2sv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2sv(target, v);
        }
        public static void MultiTexCoord2sv(Enums.VERSION_1_3 target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2svARB(Enums.ARB_multitexture target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord2svARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2svARB(target, v);
        }
        public static void MultiTexCoord3d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glMultiTexCoord3d(target, s, t, r);
        }
        public static void MultiTexCoord3dARB(Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glMultiTexCoord3dARB(target, s, t, r);
        }
        public static void MultiTexCoord3dv(Enums.VERSION_1_3 target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3dv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3dv(target, v);
        }
        public static void MultiTexCoord3dvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3dvARB(target, v);
        }
        public static void MultiTexCoord3dvARB(Enums.ARB_multitexture target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glMultiTexCoord3f(target, s, t, r);
        }
        public static void MultiTexCoord3fARB(Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glMultiTexCoord3fARB(target, s, t, r);
        }
        public static void MultiTexCoord3fv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3fv(target, v);
        }
        public static void MultiTexCoord3fv(Enums.VERSION_1_3 target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3fvARB(Enums.ARB_multitexture target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3fvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3fvARB(target, v);
        }
        public static void MultiTexCoord3hNV(Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
        {
            Delegates.glMultiTexCoord3hNV(target, s, t, r);
        }
        public static void MultiTexCoord3hvNV(Enums.NV_half_float target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3hvNV(target, v);
        }
        public static void MultiTexCoord3hvNV(Enums.NV_half_float target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3i(Enums.VERSION_1_3 target, GLint s, GLint t, GLint r)
        {
            Delegates.glMultiTexCoord3i(target, s, t, r);
        }
        public static void MultiTexCoord3iARB(Enums.ARB_multitexture target, GLint s, GLint t, GLint r)
        {
            Delegates.glMultiTexCoord3iARB(target, s, t, r);
        }
        public static void MultiTexCoord3iv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3iv(target, v);
        }
        public static void MultiTexCoord3iv(Enums.VERSION_1_3 target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3ivARB(Enums.ARB_multitexture target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3ivARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3ivARB(target, v);
        }
        public static void MultiTexCoord3s(Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r)
        {
            Delegates.glMultiTexCoord3s(target, s, t, r);
        }
        public static void MultiTexCoord3sARB(Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r)
        {
            Delegates.glMultiTexCoord3sARB(target, s, t, r);
        }
        public static void MultiTexCoord3sv(Enums.VERSION_1_3 target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord3sv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3sv(target, v);
        }
        public static void MultiTexCoord3svARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3svARB(target, v);
        }
        public static void MultiTexCoord3svARB(Enums.ARB_multitexture target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glMultiTexCoord4d(target, s, t, r, q);
        }
        public static void MultiTexCoord4dARB(Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glMultiTexCoord4dARB(target, s, t, r, q);
        }
        public static void MultiTexCoord4dv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4dv(target, v);
        }
        public static void MultiTexCoord4dv(Enums.VERSION_1_3 target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4dvARB(Enums.ARB_multitexture target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4dvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4dvARB(target, v);
        }
        public static void MultiTexCoord4f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glMultiTexCoord4f(target, s, t, r, q);
        }
        public static void MultiTexCoord4fARB(Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glMultiTexCoord4fARB(target, s, t, r, q);
        }
        public static void MultiTexCoord4fv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4fv(target, v);
        }
        public static void MultiTexCoord4fv(Enums.VERSION_1_3 target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4fvARB(Enums.ARB_multitexture target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4fvARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4fvARB(target, v);
        }
        public static void MultiTexCoord4hNV(Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
        {
            Delegates.glMultiTexCoord4hNV(target, s, t, r, q);
        }
        public static void MultiTexCoord4hvNV(Enums.NV_half_float target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4hvNV(Enums.NV_half_float target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4hvNV(target, v);
        }
        public static void MultiTexCoord4i(Enums.VERSION_1_3 target, GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glMultiTexCoord4i(target, s, t, r, q);
        }
        public static void MultiTexCoord4iARB(Enums.ARB_multitexture target, GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glMultiTexCoord4iARB(target, s, t, r, q);
        }
        public static void MultiTexCoord4iv(Enums.VERSION_1_3 target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4iv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4iv(target, v);
        }
        public static void MultiTexCoord4ivARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4ivARB(target, v);
        }
        public static void MultiTexCoord4ivARB(Enums.ARB_multitexture target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4s(Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glMultiTexCoord4s(target, s, t, r, q);
        }
        public static void MultiTexCoord4sARB(Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glMultiTexCoord4sARB(target, s, t, r, q);
        }
        public static void MultiTexCoord4sv(Enums.VERSION_1_3 target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultiTexCoord4sv(Enums.VERSION_1_3 target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4sv(target, v);
        }
        public static void MultiTexCoord4svARB(Enums.ARB_multitexture target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4svARB(target, v);
        }
        public static void MultiTexCoord4svARB(Enums.ARB_multitexture target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultMatrixd(System.IntPtr m)
        {
            Delegates.glMultMatrixd(m);
        }
        public static void MultMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultMatrixf(System.IntPtr m)
        {
            Delegates.glMultMatrixf(m);
        }
        public static void MultTransposeMatrixd(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixd(m);
        }
        public static void MultTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultTransposeMatrixdARB(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixdARB(m);
        }
        public static void MultTransposeMatrixf(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixf(m);
        }
        public static void MultTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void MultTransposeMatrixfARB(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixfARB(m);
        }
        public static void NewList(GLuint list, Enums.ListMode mode)
        {
            Delegates.glNewList(list, mode);
        }
        public static GLuint NewObjectBufferATI(GLsizei size, object pointer, Enums.ATI_vertex_array_object usage)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                return Delegates.glNewObjectBufferATI(size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLuint NewObjectBufferATI(GLsizei size, System.IntPtr pointer, Enums.ATI_vertex_array_object usage)
        {
            return Delegates.glNewObjectBufferATI(size, pointer, usage);
        }
        public static void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz)
        {
            Delegates.glNormal3b(nx, ny, nz);
        }
        public static void Normal3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3bv(System.IntPtr v)
        {
            Delegates.glNormal3bv(v);
        }
        public static void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz)
        {
            Delegates.glNormal3d(nx, ny, nz);
        }
        public static void Normal3dv(System.IntPtr v)
        {
            Delegates.glNormal3dv(v);
        }
        public static void Normal3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz)
        {
            Delegates.glNormal3f(nx, ny, nz);
        }
        public static void Normal3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3fv(System.IntPtr v)
        {
            Delegates.glNormal3fv(v);
        }
        public static void Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
        }
        public static void Normal3fVertex3fvSUN(System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Normal3fVertex3fvSUN(System.IntPtr n, System.IntPtr v)
        {
            Delegates.glNormal3fVertex3fvSUN(n, v);
        }
        public static void Normal3fVertex3fvSUN(GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
        {
            Delegates.glNormal3hNV(nx, ny, nz);
        }
        public static void Normal3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3hvNV(System.IntPtr v)
        {
            Delegates.glNormal3hvNV(v);
        }
        public static void Normal3i(GLint nx, GLint ny, GLint nz)
        {
            Delegates.glNormal3i(nx, ny, nz);
        }
        public static void Normal3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3iv(System.IntPtr v)
        {
            Delegates.glNormal3iv(v);
        }
        public static void Normal3s(GLshort nx, GLshort ny, GLshort nz)
        {
            Delegates.glNormal3s(nx, ny, nz);
        }
        public static void Normal3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Normal3sv(System.IntPtr v)
        {
            Delegates.glNormal3sv(v);
        }
        public static void NormalPointer(Enums.NormalPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalPointer(Enums.NormalPointerType type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glNormalPointer(type, stride, pointer);
        }
        public static void NormalPointerEXT(Enums.NormalPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointerEXT(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalPointerEXT(Enums.NormalPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glNormalPointerEXT(type, stride, count, pointer);
        }
        public static void NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointerListIBM(type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glNormalPointerListIBM(type, stride, pointer, ptrstride);
        }
        public static void NormalPointervINTEL(Enums.NormalPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointervINTEL(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalPointervINTEL(Enums.NormalPointerType type, System.IntPtr pointer)
        {
            Delegates.glNormalPointervINTEL(type, pointer);
        }
        public static void NormalStream3bATI(Enums.ATI_vertex_streams stream, GLbyte nx, GLbyte ny, GLbyte nz)
        {
            Delegates.glNormalStream3bATI(stream, nx, ny, nz);
        }
        public static void NormalStream3bvATI(Enums.ATI_vertex_streams stream, GLbyte[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3bvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalStream3bvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3bvATI(stream, coords);
        }
        public static void NormalStream3dATI(Enums.ATI_vertex_streams stream, GLdouble nx, GLdouble ny, GLdouble nz)
        {
            Delegates.glNormalStream3dATI(stream, nx, ny, nz);
        }
        public static void NormalStream3dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3dvATI(stream, coords);
        }
        public static void NormalStream3dvATI(Enums.ATI_vertex_streams stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalStream3fATI(Enums.ATI_vertex_streams stream, GLfloat nx, GLfloat ny, GLfloat nz)
        {
            Delegates.glNormalStream3fATI(stream, nx, ny, nz);
        }
        public static void NormalStream3fvATI(Enums.ATI_vertex_streams stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalStream3fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3fvATI(stream, coords);
        }
        public static void NormalStream3iATI(Enums.ATI_vertex_streams stream, GLint nx, GLint ny, GLint nz)
        {
            Delegates.glNormalStream3iATI(stream, nx, ny, nz);
        }
        public static void NormalStream3ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3ivATI(stream, coords);
        }
        public static void NormalStream3ivATI(Enums.ATI_vertex_streams stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void NormalStream3sATI(Enums.ATI_vertex_streams stream, GLshort nx, GLshort ny, GLshort nz)
        {
            Delegates.glNormalStream3sATI(stream, nx, ny, nz);
        }
        public static void NormalStream3svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3svATI(stream, coords);
        }
        public static void NormalStream3svATI(Enums.ATI_vertex_streams stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glOrtho(left, right, bottom, top, zNear, zFar);
        }
        public static void PassTexCoordATI(GLuint dst, GLuint coord, Enums.ATI_fragment_shader swizzle)
        {
            Delegates.glPassTexCoordATI(dst, coord, swizzle);
        }
        public static void PassThrough(GLfloat token)
        {
            Delegates.glPassThrough(token);
        }
        public static void PixelDataRangeNV(Enums.NV_pixel_data_range target, GLsizei length, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glPixelDataRangeNV(target, length, pointer);
        }
        public static void PixelDataRangeNV(Enums.NV_pixel_data_range target, GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelDataRangeNV(target, length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelMapfv(Enums.PixelMap map, GLint mapsize, System.IntPtr values)
        {
            Delegates.glPixelMapfv(map, mapsize, values);
        }
        public static void PixelMapfv(Enums.PixelMap map, GLint mapsize, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapfv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelMapuiv(Enums.PixelMap map, GLint mapsize, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapuiv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelMapuiv(Enums.PixelMap map, GLint mapsize, System.IntPtr values)
        {
            Delegates.glPixelMapuiv(map, mapsize, values);
        }
        public static void PixelMapusv(Enums.PixelMap map, GLint mapsize, System.IntPtr values)
        {
            Delegates.glPixelMapusv(map, mapsize, values);
        }
        public static void PixelMapusv(Enums.PixelMap map, GLint mapsize, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapusv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelStoref(Enums.PixelStoreParameter pname, GLfloat param)
        {
            Delegates.glPixelStoref(pname, param);
        }
        public static void PixelStorei(Enums.PixelStoreParameter pname, GLint param)
        {
            Delegates.glPixelStorei(pname, param);
        }
        public static void PixelTexGenParameterfSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat param)
        {
            Delegates.glPixelTexGenParameterfSGIS(pname, param);
        }
        public static void PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, System.IntPtr @params)
        {
            Delegates.glPixelTexGenParameterfvSGIS(pname, @params);
        }
        public static void PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelTexGenParameteriSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint param)
        {
            Delegates.glPixelTexGenParameteriSGIS(pname, param);
        }
        public static void PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, System.IntPtr @params)
        {
            Delegates.glPixelTexGenParameterivSGIS(pname, @params);
        }
        public static void PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelTexGenSGIX(Enums.SGIX_pixel_texture mode)
        {
            Delegates.glPixelTexGenSGIX(mode);
        }
        public static void PixelTransferf(Enums.PixelTransferParameter pname, GLfloat param)
        {
            Delegates.glPixelTransferf(pname, param);
        }
        public static void PixelTransferi(Enums.PixelTransferParameter pname, GLint param)
        {
            Delegates.glPixelTransferi(pname, param);
        }
        public static void PixelTransformParameterfEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, GLfloat param)
        {
            Delegates.glPixelTransformParameterfEXT(target, pname, param);
        }
        public static void PixelTransformParameterfvEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelTransformParameterfvEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, System.IntPtr @params)
        {
            Delegates.glPixelTransformParameterfvEXT(target, pname, @params);
        }
        public static void PixelTransformParameteriEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, GLint param)
        {
            Delegates.glPixelTransformParameteriEXT(target, pname, param);
        }
        public static void PixelTransformParameterivEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PixelTransformParameterivEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, System.IntPtr @params)
        {
            Delegates.glPixelTransformParameterivEXT(target, pname, @params);
        }
        public static void PixelZoom(GLfloat xfactor, GLfloat yfactor)
        {
            Delegates.glPixelZoom(xfactor, yfactor);
        }
        public static void PNTrianglesfATI(Enums.ATI_pn_triangles pname, GLfloat param)
        {
            Delegates.glPNTrianglesfATI(pname, param);
        }
        public static void PNTrianglesiATI(Enums.ATI_pn_triangles pname, GLint param)
        {
            Delegates.glPNTrianglesiATI(pname, param);
        }
        public static void PointParameterf(Enums.VERSION_1_4 pname, GLfloat param)
        {
            Delegates.glPointParameterf(pname, param);
        }
        public static void PointParameterfARB(Enums.ARB_point_parameters pname, GLfloat param)
        {
            Delegates.glPointParameterfARB(pname, param);
        }
        public static void PointParameterfEXT(Enums.EXT_point_parameters pname, GLfloat param)
        {
            Delegates.glPointParameterfEXT(pname, param);
        }
        public static void PointParameterfSGIS(Enums.SGIS_point_parameters pname, GLfloat param)
        {
            Delegates.glPointParameterfSGIS(pname, param);
        }
        public static void PointParameterfv(Enums.VERSION_1_4 pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PointParameterfv(Enums.VERSION_1_4 pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfv(pname, @params);
        }
        public static void PointParameterfvARB(Enums.ARB_point_parameters pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvARB(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PointParameterfvARB(Enums.ARB_point_parameters pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfvARB(pname, @params);
        }
        public static void PointParameterfvEXT(Enums.EXT_point_parameters pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PointParameterfvEXT(Enums.EXT_point_parameters pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfvEXT(pname, @params);
        }
        public static void PointParameterfvSGIS(Enums.SGIS_point_parameters pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PointParameterfvSGIS(Enums.SGIS_point_parameters pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfvSGIS(pname, @params);
        }
        public static void PointParameteri(Enums.VERSION_1_4 pname, GLint param)
        {
            Delegates.glPointParameteri(pname, param);
        }
        public static void PointParameteriNV(Enums.NV_point_sprite pname, GLint param)
        {
            Delegates.glPointParameteriNV(pname, param);
        }
        public static void PointParameteriv(Enums.VERSION_1_4 pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameteriv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PointParameteriv(Enums.VERSION_1_4 pname, System.IntPtr @params)
        {
            Delegates.glPointParameteriv(pname, @params);
        }
        public static void PointParameterivNV(Enums.NV_point_sprite pname, System.IntPtr @params)
        {
            Delegates.glPointParameterivNV(pname, @params);
        }
        public static void PointParameterivNV(Enums.NV_point_sprite pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PointSize(GLfloat size)
        {
            Delegates.glPointSize(size);
        }
        public static GLint PollAsyncSGIX([In, Out()] System.IntPtr markerp)
        {
            return Delegates.glPollAsyncSGIX(markerp);
        }
        public static GLint PollAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                return Delegates.glPollAsyncSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint PollInstrumentsSGIX(GLint[] marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                return Delegates.glPollInstrumentsSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint PollInstrumentsSGIX([In, Out()] System.IntPtr marker_p)
        {
            return Delegates.glPollInstrumentsSGIX(marker_p);
        }
        public static void PolygonMode(Enums.MaterialFace face, Enums.PolygonMode mode)
        {
            Delegates.glPolygonMode(face, mode);
        }
        public static void PolygonOffset(GLfloat factor, GLfloat units)
        {
            Delegates.glPolygonOffset(factor, units);
        }
        public static void PolygonOffsetEXT(GLfloat factor, GLfloat bias)
        {
            Delegates.glPolygonOffsetEXT(factor, bias);
        }
        public static void PolygonStipple(System.IntPtr mask)
        {
            Delegates.glPolygonStipple(mask);
        }
        public static void PolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PopAttrib()
        {
            Delegates.glPopAttrib();
        }
        public static void PopClientAttrib()
        {
            Delegates.glPopClientAttrib();
        }
        public static void PopMatrix()
        {
            Delegates.glPopMatrix();
        }
        public static void PopName()
        {
            Delegates.glPopName();
        }
        public static void PrimitiveRestartIndexNV(GLuint index)
        {
            Delegates.glPrimitiveRestartIndexNV(index);
        }
        public static void PrimitiveRestartNV()
        {
            Delegates.glPrimitiveRestartNV();
        }
        public static void PrioritizeTextures(GLsizei n, System.IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PrioritizeTextures(GLsizei n, System.IntPtr textures, System.IntPtr priorities)
        {
            Delegates.glPrioritizeTextures(n, textures, priorities);
        }
        public static void PrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void PrioritizeTextures(GLsizei n, GLuint[] textures, System.IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PrioritizeTexturesEXT(GLsizei n, System.IntPtr textures, System.IntPtr priorities)
        {
            Delegates.glPrioritizeTexturesEXT(n, textures, priorities);
        }
        public static void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, System.IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void PrioritizeTexturesEXT(GLsizei n, System.IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramBufferParametersfvNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramBufferParametersfvNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, @params);
        }
        public static void ProgramBufferParametersIivNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramBufferParametersIivNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, @params);
        }
        public static void ProgramBufferParametersIuivNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramBufferParametersIuivNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, @params);
        }
        public static void ProgramEnvParameter4dARB(Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramEnvParameter4dARB(target, index, x, y, z, w);
        }
        public static void ProgramEnvParameter4dvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameter4dvARB(target, index, @params);
        }
        public static void ProgramEnvParameter4dvARB(Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramEnvParameter4fARB(Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramEnvParameter4fARB(target, index, x, y, z, w);
        }
        public static void ProgramEnvParameter4fvARB(Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramEnvParameter4fvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameter4fvARB(target, index, @params);
        }
        public static void ProgramEnvParameterI4iNV(Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glProgramEnvParameterI4iNV(target, index, x, y, z, w);
        }
        public static void ProgramEnvParameterI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameterI4ivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramEnvParameterI4ivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameterI4ivNV(target, index, @params);
        }
        public static void ProgramEnvParameterI4uiNV(Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
        {
            Delegates.glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
        }
        public static void ProgramEnvParameterI4uivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameterI4uivNV(target, index, @params);
        }
        public static void ProgramEnvParameterI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameterI4uivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramEnvParameters4fvEXT(Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameters4fvEXT(target, index, count, @params);
        }
        public static void ProgramEnvParameters4fvEXT(Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramEnvParametersI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramEnvParametersI4ivNV(target, index, count, @params);
        }
        public static void ProgramEnvParametersI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParametersI4ivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramEnvParametersI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParametersI4uivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramEnvParametersI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramEnvParametersI4uivNV(target, index, count, @params);
        }
        public static void ProgramLocalParameter4dARB(Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramLocalParameter4dARB(target, index, x, y, z, w);
        }
        public static void ProgramLocalParameter4dvARB(Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramLocalParameter4dvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameter4dvARB(target, index, @params);
        }
        public static void ProgramLocalParameter4fARB(Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramLocalParameter4fARB(target, index, x, y, z, w);
        }
        public static void ProgramLocalParameter4fvARB(Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramLocalParameter4fvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameter4fvARB(target, index, @params);
        }
        public static void ProgramLocalParameterI4iNV(Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glProgramLocalParameterI4iNV(target, index, x, y, z, w);
        }
        public static void ProgramLocalParameterI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameterI4ivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramLocalParameterI4ivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameterI4ivNV(target, index, @params);
        }
        public static void ProgramLocalParameterI4uiNV(Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
        {
            Delegates.glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
        }
        public static void ProgramLocalParameterI4uivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameterI4uivNV(target, index, @params);
        }
        public static void ProgramLocalParameterI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameterI4uivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramLocalParameters4fvEXT(Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramLocalParameters4fvEXT(Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameters4fvEXT(target, index, count, @params);
        }
        public static void ProgramLocalParametersI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParametersI4ivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramLocalParametersI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramLocalParametersI4ivNV(target, index, count, @params);
        }
        public static void ProgramLocalParametersI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramLocalParametersI4uivNV(target, index, count, @params);
        }
        public static void ProgramLocalParametersI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParametersI4uivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramNamedParameter4dNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
        }
        public static void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v)
        {
            Delegates.glProgramNamedParameter4dvNV(id, len, name, v);
        }
        public static void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramNamedParameter4fNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
        }
        public static void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v)
        {
            Delegates.glProgramNamedParameter4fvNV(id, len, name, v);
        }
        public static void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramParameter4dNV(Enums.NV_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramParameter4dNV(target, index, x, y, z, w);
        }
        public static void ProgramParameter4dvNV(Enums.NV_vertex_program target, GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4dvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramParameter4dvNV(Enums.NV_vertex_program target, GLuint index, System.IntPtr v)
        {
            Delegates.glProgramParameter4dvNV(target, index, v);
        }
        public static void ProgramParameter4fNV(Enums.NV_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramParameter4fNV(target, index, x, y, z, w);
        }
        public static void ProgramParameter4fvNV(Enums.NV_vertex_program target, GLuint index, System.IntPtr v)
        {
            Delegates.glProgramParameter4fvNV(target, index, v);
        }
        public static void ProgramParameter4fvNV(Enums.NV_vertex_program target, GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4fvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramParameteriEXT(GLuint program, Enums.EXT_geometry_shader4 pname, GLint value)
        {
            Delegates.glProgramParameteriEXT(program, pname, value);
        }
        public static void ProgramParameters4dvNV(Enums.NV_vertex_program target, GLuint index, GLuint count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4dvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramParameters4dvNV(Enums.NV_vertex_program target, GLuint index, GLuint count, System.IntPtr v)
        {
            Delegates.glProgramParameters4dvNV(target, index, count, v);
        }
        public static void ProgramParameters4fvNV(Enums.NV_vertex_program target, GLuint index, GLuint count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4fvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramParameters4fvNV(Enums.NV_vertex_program target, GLuint index, GLuint count, System.IntPtr v)
        {
            Delegates.glProgramParameters4fvNV(target, index, count, v);
        }
        public static void ProgramStringARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program format, GLsizei len, System.IntPtr @string)
        {
            Delegates.glProgramStringARB(target, format, len, @string);
        }
        public static void ProgramStringARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program format, GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramStringARB(target, format, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ProgramVertexLimitNV(Enums.NV_geometry_program4 target, GLint limit)
        {
            Delegates.glProgramVertexLimitNV(target, limit);
        }
        public static void PushAttrib(Enums.AttribMask mask)
        {
            Delegates.glPushAttrib(mask);
        }
        public static void PushClientAttrib(Enums.ClientAttribMask mask)
        {
            Delegates.glPushClientAttrib(mask);
        }
        public static void PushMatrix()
        {
            Delegates.glPushMatrix();
        }
        public static void PushName(GLuint name)
        {
            Delegates.glPushName(name);
        }
        public static void RasterPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glRasterPos2d(x, y);
        }
        public static void RasterPos2dv(System.IntPtr v)
        {
            Delegates.glRasterPos2dv(v);
        }
        public static void RasterPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glRasterPos2f(x, y);
        }
        public static void RasterPos2fv(System.IntPtr v)
        {
            Delegates.glRasterPos2fv(v);
        }
        public static void RasterPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos2i(GLint x, GLint y)
        {
            Delegates.glRasterPos2i(x, y);
        }
        public static void RasterPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos2iv(System.IntPtr v)
        {
            Delegates.glRasterPos2iv(v);
        }
        public static void RasterPos2s(GLshort x, GLshort y)
        {
            Delegates.glRasterPos2s(x, y);
        }
        public static void RasterPos2sv(System.IntPtr v)
        {
            Delegates.glRasterPos2sv(v);
        }
        public static void RasterPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRasterPos3d(x, y, z);
        }
        public static void RasterPos3dv(System.IntPtr v)
        {
            Delegates.glRasterPos3dv(v);
        }
        public static void RasterPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRasterPos3f(x, y, z);
        }
        public static void RasterPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos3fv(System.IntPtr v)
        {
            Delegates.glRasterPos3fv(v);
        }
        public static void RasterPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glRasterPos3i(x, y, z);
        }
        public static void RasterPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos3iv(System.IntPtr v)
        {
            Delegates.glRasterPos3iv(v);
        }
        public static void RasterPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glRasterPos3s(x, y, z);
        }
        public static void RasterPos3sv(System.IntPtr v)
        {
            Delegates.glRasterPos3sv(v);
        }
        public static void RasterPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glRasterPos4d(x, y, z, w);
        }
        public static void RasterPos4dv(System.IntPtr v)
        {
            Delegates.glRasterPos4dv(v);
        }
        public static void RasterPos4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glRasterPos4f(x, y, z, w);
        }
        public static void RasterPos4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos4fv(System.IntPtr v)
        {
            Delegates.glRasterPos4fv(v);
        }
        public static void RasterPos4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glRasterPos4i(x, y, z, w);
        }
        public static void RasterPos4iv(System.IntPtr v)
        {
            Delegates.glRasterPos4iv(v);
        }
        public static void RasterPos4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glRasterPos4s(x, y, z, w);
        }
        public static void RasterPos4sv(System.IntPtr v)
        {
            Delegates.glRasterPos4sv(v);
        }
        public static void RasterPos4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReadBuffer(Enums.ReadBufferMode mode)
        {
            Delegates.glReadBuffer(mode);
        }
        public static void ReadInstrumentsSGIX(GLint marker)
        {
            Delegates.glReadInstrumentsSGIX(marker);
        }
        public static void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels(x, y, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr pixels)
        {
            Delegates.glReadPixels(x, y, width, height, format, type, pixels);
        }
        public static void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
        {
            Delegates.glRectd(x1, y1, x2, y2);
        }
        public static void Rectdv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectdv(v1, v2);
        }
        public static void Rectdv(GLdouble[] v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Rectdv(GLdouble[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Rectdv(System.IntPtr v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
        {
            Delegates.glRectf(x1, y1, x2, y2);
        }
        public static void Rectfv(System.IntPtr v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Rectfv(GLfloat[] v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Rectfv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectfv(v1, v2);
        }
        public static void Rectfv(GLfloat[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Recti(GLint x1, GLint y1, GLint x2, GLint y2)
        {
            Delegates.glRecti(x1, y1, x2, y2);
        }
        public static void Rectiv(GLint[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Rectiv(System.IntPtr v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Rectiv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectiv(v1, v2);
        }
        public static void Rectiv(GLint[] v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
        {
            Delegates.glRects(x1, y1, x2, y2);
        }
        public static void Rectsv(System.IntPtr v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Rectsv(GLshort[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Rectsv(GLshort[] v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void Rectsv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectsv(v1, v2);
        }
        public static void ReferencePlaneSGIX(System.IntPtr equation)
        {
            Delegates.glReferencePlaneSGIX(equation);
        }
        public static void ReferencePlaneSGIX(GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glReferencePlaneSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void RenderbufferStorageEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageEXT(target, internalformat, width, height);
        }
        public static void RenderbufferStorageMultisampleCoverageNV(Enums.NV_framebuffer_multisample_coverage target, GLsizei coverageSamples, GLsizei colorSamples, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
        }
        public static void RenderbufferStorageMultisampleEXT(Enums.EXT_framebuffer_multisample target, GLsizei samples, Enums.EXT_framebuffer_multisample internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
        }
        public static GLint RenderMode(Enums.RenderingMode mode)
        {
            return Delegates.glRenderMode(mode);
        }
        public static void ReplacementCodePointerSUN(Enums.SUN_triangle_list type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glReplacementCodePointerSUN(type, stride, pointer);
        }
        public static void ReplacementCodePointerSUN(Enums.SUN_triangle_list type, GLsizei stride, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodePointerSUN(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeubSUN(GLubyte code)
        {
            Delegates.glReplacementCodeubSUN(code);
        }
        public static void ReplacementCodeubvSUN(System.IntPtr code)
        {
            Delegates.glReplacementCodeubvSUN(code);
        }
        public static void ReplacementCodeubvSUN(GLubyte[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeubvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiSUN(GLuint code)
        {
            Delegates.glReplacementCodeuiSUN(code);
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
        }
        public static void ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiVertex3fSUN(rc, x, y, z);
        }
        public static void ReplacementCodeuiVertex3fvSUN(System.IntPtr rc, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiVertex3fvSUN(rc, v);
        }
        public static void ReplacementCodeuiVertex3fvSUN(System.IntPtr rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuivSUN(GLuint[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuivSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeuivSUN(System.IntPtr code)
        {
            Delegates.glReplacementCodeuivSUN(code);
        }
        public static void ReplacementCodeusSUN(GLushort code)
        {
            Delegates.glReplacementCodeusSUN(code);
        }
        public static void ReplacementCodeusvSUN(GLushort[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeusvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ReplacementCodeusvSUN(System.IntPtr code)
        {
            Delegates.glReplacementCodeusvSUN(code);
        }
        public static void RequestResidentProgramsNV(GLsizei n, System.IntPtr programs)
        {
            Delegates.glRequestResidentProgramsNV(n, programs);
        }
        public static void RequestResidentProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glRequestResidentProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ResetHistogram(Enums.VERSION_1_2 target)
        {
            Delegates.glResetHistogram(target);
        }
        public static void ResetHistogramEXT(Enums.HistogramTargetEXT target)
        {
            Delegates.glResetHistogramEXT(target);
        }
        public static void ResetMinmax(Enums.VERSION_1_2 target)
        {
            Delegates.glResetMinmax(target);
        }
        public static void ResetMinmaxEXT(Enums.MinmaxTargetEXT target)
        {
            Delegates.glResetMinmaxEXT(target);
        }
        public static void ResizeBuffersMESA()
        {
            Delegates.glResizeBuffersMESA();
        }
        public static void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRotated(angle, x, y, z);
        }
        public static void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRotatef(angle, x, y, z);
        }
        public static void SampleCoverage(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert)
        {
            Delegates.glSampleCoverage(value, invert);
        }
        public static void SampleCoverageARB(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert)
        {
            Delegates.glSampleCoverageARB(value, invert);
        }
        public static void SampleMapATI(GLuint dst, GLuint interp, Enums.ATI_fragment_shader swizzle)
        {
            Delegates.glSampleMapATI(dst, interp, swizzle);
        }
        public static void SampleMaskEXT(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert)
        {
            Delegates.glSampleMaskEXT(value, invert);
        }
        public static void SampleMaskSGIS(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert)
        {
            Delegates.glSampleMaskSGIS(value, invert);
        }
        public static void SamplePatternEXT(Enums.EXT_multisample pattern)
        {
            Delegates.glSamplePatternEXT(pattern);
        }
        public static void SamplePatternSGIS(Enums.SamplePatternSGIS pattern)
        {
            Delegates.glSamplePatternSGIS(pattern);
        }
        public static void Scaled(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glScaled(x, y, z);
        }
        public static void Scalef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glScalef(x, y, z);
        }
        public static void Scissor(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glScissor(x, y, width, height);
        }
        public static void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glSecondaryColor3b(red, green, blue);
        }
        public static void SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glSecondaryColor3bEXT(red, green, blue);
        }
        public static void SecondaryColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3bv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3bv(v);
        }
        public static void SecondaryColor3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3bvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3bvEXT(v);
        }
        public static void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glSecondaryColor3d(red, green, blue);
        }
        public static void SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glSecondaryColor3dEXT(red, green, blue);
        }
        public static void SecondaryColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3dv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3dv(v);
        }
        public static void SecondaryColor3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3dvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3dvEXT(v);
        }
        public static void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glSecondaryColor3f(red, green, blue);
        }
        public static void SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glSecondaryColor3fEXT(red, green, blue);
        }
        public static void SecondaryColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3fv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3fv(v);
        }
        public static void SecondaryColor3fvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3fvEXT(v);
        }
        public static void SecondaryColor3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
        {
            Delegates.glSecondaryColor3hNV(red, green, blue);
        }
        public static void SecondaryColor3hvNV(System.IntPtr v)
        {
            Delegates.glSecondaryColor3hvNV(v);
        }
        public static void SecondaryColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glSecondaryColor3i(red, green, blue);
        }
        public static void SecondaryColor3iEXT(GLint red, GLint green, GLint blue)
        {
            Delegates.glSecondaryColor3iEXT(red, green, blue);
        }
        public static void SecondaryColor3iv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3iv(v);
        }
        public static void SecondaryColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3ivEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3ivEXT(v);
        }
        public static void SecondaryColor3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glSecondaryColor3s(red, green, blue);
        }
        public static void SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glSecondaryColor3sEXT(red, green, blue);
        }
        public static void SecondaryColor3sv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3sv(v);
        }
        public static void SecondaryColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3svEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3svEXT(v);
        }
        public static void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glSecondaryColor3ub(red, green, blue);
        }
        public static void SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glSecondaryColor3ubEXT(red, green, blue);
        }
        public static void SecondaryColor3ubv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3ubv(v);
        }
        public static void SecondaryColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3ubvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3ubvEXT(v);
        }
        public static void SecondaryColor3ubvEXT(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glSecondaryColor3ui(red, green, blue);
        }
        public static void SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glSecondaryColor3uiEXT(red, green, blue);
        }
        public static void SecondaryColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3uiv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3uiv(v);
        }
        public static void SecondaryColor3uivEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3uivEXT(v);
        }
        public static void SecondaryColor3uivEXT(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glSecondaryColor3us(red, green, blue);
        }
        public static void SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glSecondaryColor3usEXT(red, green, blue);
        }
        public static void SecondaryColor3usv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3usv(v);
        }
        public static void SecondaryColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3usvEXT(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColor3usvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3usvEXT(v);
        }
        public static void SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glSecondaryColorPointer(size, type, stride, pointer);
        }
        public static void SecondaryColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glSecondaryColorPointerEXT(size, type, stride, pointer);
        }
        public static void SecondaryColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointerEXT(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColorPointerListIBM(GLint size, Enums.IBM_vertex_array_lists type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SecondaryColorPointerListIBM(GLint size, Enums.IBM_vertex_array_lists type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void SelectBuffer(GLsizei size, GLuint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glSelectBuffer(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SelectBuffer(GLsizei size, [In, Out()] System.IntPtr buffer)
        {
            Delegates.glSelectBuffer(size, buffer);
        }
        public static void SeparableFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, System.IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SeparableFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void SeparableFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, System.IntPtr column)
        {
            Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
        }
        public static void SeparableFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, System.IntPtr column)
        {
            Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
        }
        public static void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object row, System.IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SetFenceAPPLE(GLuint fence)
        {
            Delegates.glSetFenceAPPLE(fence);
        }
        public static void SetFenceNV(GLuint fence, Enums.NV_fence condition)
        {
            Delegates.glSetFenceNV(fence, condition);
        }
        public static void SetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glSetFragmentShaderConstantATI(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SetFragmentShaderConstantATI(GLuint dst, System.IntPtr value)
        {
            Delegates.glSetFragmentShaderConstantATI(dst, value);
        }
        public static void SetInvariantEXT(GLuint id, Enums.EXT_vertex_shader type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glSetInvariantEXT(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SetInvariantEXT(GLuint id, Enums.EXT_vertex_shader type, System.IntPtr addr)
        {
            Delegates.glSetInvariantEXT(id, type, addr);
        }
        public static void SetLocalConstantEXT(GLuint id, Enums.EXT_vertex_shader type, System.IntPtr addr)
        {
            Delegates.glSetLocalConstantEXT(id, type, addr);
        }
        public static void SetLocalConstantEXT(GLuint id, Enums.EXT_vertex_shader type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glSetLocalConstantEXT(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ShadeModel(Enums.ShadingModel mode)
        {
            Delegates.glShadeModel(mode);
        }
        public static void ShaderOp1EXT(Enums.EXT_vertex_shader op, GLuint res, GLuint arg1)
        {
            Delegates.glShaderOp1EXT(op, res, arg1);
        }
        public static void ShaderOp2EXT(Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2)
        {
            Delegates.glShaderOp2EXT(op, res, arg1, arg2);
        }
        public static void ShaderOp3EXT(Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
        {
            Delegates.glShaderOp3EXT(op, res, arg1, arg2, arg3);
        }
        public static void ShaderSource(GLuint shader, GLsizei count, string[] @string, System.IntPtr length)
        {
            Delegates.glShaderSource(shader, count, @string, length);
        }
        public static void ShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSource(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, System.IntPtr length)
        {
            Delegates.glShaderSourceARB(shaderObj, count, @string, length);
        }
        public static void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSourceARB(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glSharpenTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, System.IntPtr points)
        {
            Delegates.glSharpenTexFuncSGIS(target, n, points);
        }
        public static void SpriteParameterfSGIX(Enums.SGIX_sprite pname, GLfloat param)
        {
            Delegates.glSpriteParameterfSGIX(pname, param);
        }
        public static void SpriteParameterfvSGIX(Enums.SGIX_sprite pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SpriteParameterfvSGIX(Enums.SGIX_sprite pname, System.IntPtr @params)
        {
            Delegates.glSpriteParameterfvSGIX(pname, @params);
        }
        public static void SpriteParameteriSGIX(Enums.SGIX_sprite pname, GLint param)
        {
            Delegates.glSpriteParameteriSGIX(pname, param);
        }
        public static void SpriteParameterivSGIX(Enums.SGIX_sprite pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SpriteParameterivSGIX(Enums.SGIX_sprite pname, System.IntPtr @params)
        {
            Delegates.glSpriteParameterivSGIX(pname, @params);
        }
        public static void StartInstrumentsSGIX()
        {
            Delegates.glStartInstrumentsSGIX();
        }
        public static void StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
        {
            Delegates.glStencilClearTagEXT(stencilTagBits, stencilClearTag);
        }
        public static void StencilFunc(Enums.StencilFunction func, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFunc(func, @ref, mask);
        }
        public static void StencilFuncSeparate(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFuncSeparate(frontfunc, backfunc, @ref, mask);
        }
        public static void StencilFuncSeparateATI(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFuncSeparateATI(frontfunc, backfunc, @ref, mask);
        }
        public static void StencilMask(GLuint mask)
        {
            Delegates.glStencilMask(mask);
        }
        public static void StencilMaskSeparate(Enums.VERSION_2_0 face, GLuint mask)
        {
            Delegates.glStencilMaskSeparate(face, mask);
        }
        public static void StencilOp(Enums.StencilOp fail, Enums.StencilOp zfail, Enums.StencilOp zpass)
        {
            Delegates.glStencilOp(fail, zfail, zpass);
        }
        public static void StencilOpSeparate(Enums.VERSION_2_0 face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass)
        {
            Delegates.glStencilOpSeparate(face, sfail, dpfail, dppass);
        }
        public static void StencilOpSeparateATI(Enums.ATI_separate_stencil face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass)
        {
            Delegates.glStencilOpSeparateATI(face, sfail, dpfail, dppass);
        }
        public static void StopInstrumentsSGIX(GLint marker)
        {
            Delegates.glStopInstrumentsSGIX(marker);
        }
        public static void StringMarkerGREMEDY(GLsizei len, System.IntPtr @string)
        {
            Delegates.glStringMarkerGREMEDY(len, @string);
        }
        public static void StringMarkerGREMEDY(GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glStringMarkerGREMEDY(len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void SwizzleEXT(GLuint res, GLuint @in, Enums.EXT_vertex_shader outX, Enums.EXT_vertex_shader outY, Enums.EXT_vertex_shader outZ, Enums.EXT_vertex_shader outW)
        {
            Delegates.glSwizzleEXT(res, @in, outX, outY, outZ, outW);
        }
        public static void TagSampleBufferSGIX()
        {
            Delegates.glTagSampleBufferSGIX();
        }
        public static void Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
        {
            Delegates.glTangent3bEXT(tx, ty, tz);
        }
        public static void Tangent3bvEXT(System.IntPtr v)
        {
            Delegates.glTangent3bvEXT(v);
        }
        public static void Tangent3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
        {
            Delegates.glTangent3dEXT(tx, ty, tz);
        }
        public static void Tangent3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Tangent3dvEXT(System.IntPtr v)
        {
            Delegates.glTangent3dvEXT(v);
        }
        public static void Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
        {
            Delegates.glTangent3fEXT(tx, ty, tz);
        }
        public static void Tangent3fvEXT(System.IntPtr v)
        {
            Delegates.glTangent3fvEXT(v);
        }
        public static void Tangent3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Tangent3iEXT(GLint tx, GLint ty, GLint tz)
        {
            Delegates.glTangent3iEXT(tx, ty, tz);
        }
        public static void Tangent3ivEXT(System.IntPtr v)
        {
            Delegates.glTangent3ivEXT(v);
        }
        public static void Tangent3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
        {
            Delegates.glTangent3sEXT(tx, ty, tz);
        }
        public static void Tangent3svEXT(System.IntPtr v)
        {
            Delegates.glTangent3svEXT(v);
        }
        public static void Tangent3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TangentPointerEXT(Enums.EXT_coordinate_frame type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glTangentPointerEXT(type, stride, pointer);
        }
        public static void TangentPointerEXT(Enums.EXT_coordinate_frame type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTangentPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TbufferMask3DFX(GLuint mask)
        {
            Delegates.glTbufferMask3DFX(mask);
        }
        public static GLboolean TestFenceAPPLE(GLuint fence)
        {
            return Delegates.glTestFenceAPPLE(fence);
        }
        public static GLboolean TestFenceNV(GLuint fence)
        {
            return Delegates.glTestFenceNV(fence);
        }
        public static GLboolean TestObjectAPPLE(Enums.APPLE_fence @object, GLuint name)
        {
            return Delegates.glTestObjectAPPLE(@object, name);
        }
        public static void TexBufferEXT(Enums.TextureTarget target, Enums.EXT_texture_buffer_object internalformat, GLuint buffer)
        {
            Delegates.glTexBufferEXT(target, internalformat, buffer);
        }
        public static void TexBumpParameterfvATI(Enums.ATI_envmap_bumpmap pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexBumpParameterfvATI(Enums.ATI_envmap_bumpmap pname, System.IntPtr param)
        {
            Delegates.glTexBumpParameterfvATI(pname, param);
        }
        public static void TexBumpParameterivATI(Enums.ATI_envmap_bumpmap pname, System.IntPtr param)
        {
            Delegates.glTexBumpParameterivATI(pname, param);
        }
        public static void TexBumpParameterivATI(Enums.ATI_envmap_bumpmap pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord1d(GLdouble s)
        {
            Delegates.glTexCoord1d(s);
        }
        public static void TexCoord1dv(System.IntPtr v)
        {
            Delegates.glTexCoord1dv(v);
        }
        public static void TexCoord1dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord1f(GLfloat s)
        {
            Delegates.glTexCoord1f(s);
        }
        public static void TexCoord1fv(System.IntPtr v)
        {
            Delegates.glTexCoord1fv(v);
        }
        public static void TexCoord1fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord1hNV(GLhalfNV s)
        {
            Delegates.glTexCoord1hNV(s);
        }
        public static void TexCoord1hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord1hvNV(v);
        }
        public static void TexCoord1hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord1i(GLint s)
        {
            Delegates.glTexCoord1i(s);
        }
        public static void TexCoord1iv(System.IntPtr v)
        {
            Delegates.glTexCoord1iv(v);
        }
        public static void TexCoord1iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord1s(GLshort s)
        {
            Delegates.glTexCoord1s(s);
        }
        public static void TexCoord1sv(System.IntPtr v)
        {
            Delegates.glTexCoord1sv(v);
        }
        public static void TexCoord1sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2d(GLdouble s, GLdouble t)
        {
            Delegates.glTexCoord2d(s, t);
        }
        public static void TexCoord2dv(System.IntPtr v)
        {
            Delegates.glTexCoord2dv(v);
        }
        public static void TexCoord2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2f(GLfloat s, GLfloat t)
        {
            Delegates.glTexCoord2f(s, t);
        }
        public static void TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
        }
        public static void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
        }
        public static void TexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
        }
        public static void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fv(System.IntPtr v)
        {
            Delegates.glTexCoord2fv(v);
        }
        public static void TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fVertex3fSUN(s, t, x, y, z);
        }
        public static void TexCoord2fVertex3fvSUN(System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2fVertex3fvSUN(System.IntPtr tc, System.IntPtr v)
        {
            Delegates.glTexCoord2fVertex3fvSUN(tc, v);
        }
        public static void TexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord2fVertex3fvSUN(GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2hNV(GLhalfNV s, GLhalfNV t)
        {
            Delegates.glTexCoord2hNV(s, t);
        }
        public static void TexCoord2hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord2hvNV(v);
        }
        public static void TexCoord2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2i(GLint s, GLint t)
        {
            Delegates.glTexCoord2i(s, t);
        }
        public static void TexCoord2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord2iv(System.IntPtr v)
        {
            Delegates.glTexCoord2iv(v);
        }
        public static void TexCoord2s(GLshort s, GLshort t)
        {
            Delegates.glTexCoord2s(s, t);
        }
        public static void TexCoord2sv(System.IntPtr v)
        {
            Delegates.glTexCoord2sv(v);
        }
        public static void TexCoord2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord3d(GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glTexCoord3d(s, t, r);
        }
        public static void TexCoord3dv(System.IntPtr v)
        {
            Delegates.glTexCoord3dv(v);
        }
        public static void TexCoord3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord3f(GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glTexCoord3f(s, t, r);
        }
        public static void TexCoord3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord3fv(System.IntPtr v)
        {
            Delegates.glTexCoord3fv(v);
        }
        public static void TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
        {
            Delegates.glTexCoord3hNV(s, t, r);
        }
        public static void TexCoord3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord3hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord3hvNV(v);
        }
        public static void TexCoord3i(GLint s, GLint t, GLint r)
        {
            Delegates.glTexCoord3i(s, t, r);
        }
        public static void TexCoord3iv(System.IntPtr v)
        {
            Delegates.glTexCoord3iv(v);
        }
        public static void TexCoord3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord3s(GLshort s, GLshort t, GLshort r)
        {
            Delegates.glTexCoord3s(s, t, r);
        }
        public static void TexCoord3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord3sv(System.IntPtr v)
        {
            Delegates.glTexCoord3sv(v);
        }
        public static void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glTexCoord4d(s, t, r, q);
        }
        public static void TexCoord4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4dv(System.IntPtr v)
        {
            Delegates.glTexCoord4dv(v);
        }
        public static void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glTexCoord4f(s, t, r, q);
        }
        public static void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void TexCoord4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4fv(System.IntPtr v)
        {
            Delegates.glTexCoord4fv(v);
        }
        public static void TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
        }
        public static void TexCoord4fVertex4fvSUN(System.IntPtr tc, System.IntPtr v)
        {
            Delegates.glTexCoord4fVertex4fvSUN(tc, v);
        }
        public static void TexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void TexCoord4fVertex4fvSUN(GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4fVertex4fvSUN(System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
        {
            Delegates.glTexCoord4hNV(s, t, r, q);
        }
        public static void TexCoord4hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord4hvNV(v);
        }
        public static void TexCoord4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4i(GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glTexCoord4i(s, t, r, q);
        }
        public static void TexCoord4iv(System.IntPtr v)
        {
            Delegates.glTexCoord4iv(v);
        }
        public static void TexCoord4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glTexCoord4s(s, t, r, q);
        }
        public static void TexCoord4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoord4sv(System.IntPtr v)
        {
            Delegates.glTexCoord4sv(v);
        }
        public static void TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glTexCoordPointer(size, type, stride, pointer);
        }
        public static void TexCoordPointerEXT(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glTexCoordPointerEXT(size, type, stride, count, pointer);
        }
        public static void TexCoordPointerEXT(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, System.IntPtr pointer)
        {
            Delegates.glTexCoordPointervINTEL(size, type, pointer);
        }
        public static void TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexEnvf(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat param)
        {
            Delegates.glTexEnvf(target, pname, param);
        }
        public static void TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params)
        {
            Delegates.glTexEnvfv(target, pname, @params);
        }
        public static void TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexEnvi(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint param)
        {
            Delegates.glTexEnvi(target, pname, param);
        }
        public static void TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params)
        {
            Delegates.glTexEnviv(target, pname, @params);
        }
        public static void TexFilterFuncSGIS(Enums.TextureTarget target, Enums.SGIS_texture_filter4 filter, GLsizei n, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glTexFilterFuncSGIS(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexFilterFuncSGIS(Enums.TextureTarget target, Enums.SGIS_texture_filter4 filter, GLsizei n, System.IntPtr weights)
        {
            Delegates.glTexFilterFuncSGIS(target, filter, n, weights);
        }
        public static void TexGend(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble param)
        {
            Delegates.glTexGend(coord, pname, param);
        }
        public static void TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params)
        {
            Delegates.glTexGendv(coord, pname, @params);
        }
        public static void TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexGenf(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat param)
        {
            Delegates.glTexGenf(coord, pname, param);
        }
        public static void TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params)
        {
            Delegates.glTexGenfv(coord, pname, @params);
        }
        public static void TexGeni(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint param)
        {
            Delegates.glTexGeni(coord, pname, param);
        }
        public static void TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params)
        {
            Delegates.glTexGeniv(coord, pname, @params);
        }
        public static void TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        }
        public static void TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexImage3DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexImage3DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void TexImage4DSGIS(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexImage4DSGIS(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }
        public static void TexParameterf(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat param)
        {
            Delegates.glTexParameterf(target, pname, param);
        }
        public static void TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params)
        {
            Delegates.glTexParameterfv(target, pname, @params);
        }
        public static void TexParameteri(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint param)
        {
            Delegates.glTexParameteri(target, pname, param);
        }
        public static void TexParameterIivEXT(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterIivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexParameterIivEXT(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params)
        {
            Delegates.glTexParameterIivEXT(target, pname, @params);
        }
        public static void TexParameterIuivEXT(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params)
        {
            Delegates.glTexParameterIuivEXT(target, pname, @params);
        }
        public static void TexParameterIuivEXT(Enums.TextureTarget target, Enums.TextureParameterName pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterIuivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params)
        {
            Delegates.glTexParameteriv(target, pname, @params);
        }
        public static void TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        }
        public static void TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
        }
        public static void TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void TexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void TexSubImage4DSGIS(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }
        public static void TexSubImage4DSGIS(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TextureColorMaskSGIS([MarshalAs(UnmanagedType.Bool)] bool red, [MarshalAs(UnmanagedType.Bool)] bool green, [MarshalAs(UnmanagedType.Bool)] bool blue, [MarshalAs(UnmanagedType.Bool)] bool alpha)
        {
            Delegates.glTextureColorMaskSGIS(red, green, blue, alpha);
        }
        public static void TextureLightEXT(Enums.EXT_light_texture pname)
        {
            Delegates.glTextureLightEXT(pname);
        }
        public static void TextureMaterialEXT(Enums.MaterialFace face, Enums.MaterialParameter mode)
        {
            Delegates.glTextureMaterialEXT(face, mode);
        }
        public static void TextureNormalEXT(Enums.EXT_texture_perturb_normal mode)
        {
            Delegates.glTextureNormalEXT(mode);
        }
        public static void TrackMatrixNV(Enums.NV_vertex_program target, GLuint address, Enums.NV_vertex_program matrix, Enums.NV_vertex_program transform)
        {
            Delegates.glTrackMatrixNV(target, address, matrix, transform);
        }
        public static void TransformFeedbackAttribsNV(GLuint count, System.IntPtr attribs, Enums.NV_transform_feedback bufferMode)
        {
            Delegates.glTransformFeedbackAttribsNV(count, attribs, bufferMode);
        }
        public static void TransformFeedbackAttribsNV(GLuint count, GLint[] attribs, Enums.NV_transform_feedback bufferMode)
        {
            GCHandle h0 = GCHandle.Alloc(attribs, GCHandleType.Pinned);
            try
            {
                Delegates.glTransformFeedbackAttribsNV(count, h0.AddrOfPinnedObject(), bufferMode);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, System.IntPtr locations, Enums.NV_transform_feedback bufferMode)
        {
            Delegates.glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
        }
        public static void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, GLint[] locations, Enums.NV_transform_feedback bufferMode)
        {
            GCHandle h0 = GCHandle.Alloc(locations, GCHandleType.Pinned);
            try
            {
                Delegates.glTransformFeedbackVaryingsNV(program, count, h0.AddrOfPinnedObject(), bufferMode);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Translated(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glTranslated(x, y, z);
        }
        public static void Translatef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTranslatef(x, y, z);
        }
        public static void Uniform1f(GLint location, GLfloat v0)
        {
            Delegates.glUniform1f(location, v0);
        }
        public static void Uniform1fARB(GLint location, GLfloat v0)
        {
            Delegates.glUniform1fARB(location, v0);
        }
        public static void Uniform1fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1fv(location, count, value);
        }
        public static void Uniform1fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform1fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1fvARB(location, count, value);
        }
        public static void Uniform1fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform1i(GLint location, GLint v0)
        {
            Delegates.glUniform1i(location, v0);
        }
        public static void Uniform1iARB(GLint location, GLint v0)
        {
            Delegates.glUniform1iARB(location, v0);
        }
        public static void Uniform1iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1iv(location, count, value);
        }
        public static void Uniform1iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform1ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1ivARB(location, count, value);
        }
        public static void Uniform1ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform1uiEXT(GLint location, GLuint v0)
        {
            Delegates.glUniform1uiEXT(location, v0);
        }
        public static void Uniform1uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform1uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1uivEXT(location, count, value);
        }
        public static void Uniform2f(GLint location, GLfloat v0, GLfloat v1)
        {
            Delegates.glUniform2f(location, v0, v1);
        }
        public static void Uniform2fARB(GLint location, GLfloat v0, GLfloat v1)
        {
            Delegates.glUniform2fARB(location, v0, v1);
        }
        public static void Uniform2fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform2fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2fv(location, count, value);
        }
        public static void Uniform2fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2fvARB(location, count, value);
        }
        public static void Uniform2fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform2i(GLint location, GLint v0, GLint v1)
        {
            Delegates.glUniform2i(location, v0, v1);
        }
        public static void Uniform2iARB(GLint location, GLint v0, GLint v1)
        {
            Delegates.glUniform2iARB(location, v0, v1);
        }
        public static void Uniform2iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2iv(location, count, value);
        }
        public static void Uniform2iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform2ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2ivARB(location, count, value);
        }
        public static void Uniform2ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform2uiEXT(GLint location, GLuint v0, GLuint v1)
        {
            Delegates.glUniform2uiEXT(location, v0, v1);
        }
        public static void Uniform2uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2uivEXT(location, count, value);
        }
        public static void Uniform2uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        {
            Delegates.glUniform3f(location, v0, v1, v2);
        }
        public static void Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        {
            Delegates.glUniform3fARB(location, v0, v1, v2);
        }
        public static void Uniform3fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3fv(location, count, value);
        }
        public static void Uniform3fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform3fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform3fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3fvARB(location, count, value);
        }
        public static void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2)
        {
            Delegates.glUniform3i(location, v0, v1, v2);
        }
        public static void Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
        {
            Delegates.glUniform3iARB(location, v0, v1, v2);
        }
        public static void Uniform3iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform3iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3iv(location, count, value);
        }
        public static void Uniform3ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3ivARB(location, count, value);
        }
        public static void Uniform3ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
        {
            Delegates.glUniform3uiEXT(location, v0, v1, v2);
        }
        public static void Uniform3uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform3uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3uivEXT(location, count, value);
        }
        public static void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        {
            Delegates.glUniform4f(location, v0, v1, v2, v3);
        }
        public static void Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        {
            Delegates.glUniform4fARB(location, v0, v1, v2, v3);
        }
        public static void Uniform4fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4fv(location, count, value);
        }
        public static void Uniform4fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform4fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4fvARB(location, count, value);
        }
        public static void Uniform4fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        {
            Delegates.glUniform4i(location, v0, v1, v2, v3);
        }
        public static void Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        {
            Delegates.glUniform4iARB(location, v0, v1, v2, v3);
        }
        public static void Uniform4iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4iv(location, count, value);
        }
        public static void Uniform4iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform4ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform4ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4ivARB(location, count, value);
        }
        public static void Uniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
        {
            Delegates.glUniform4uiEXT(location, v0, v1, v2, v3);
        }
        public static void Uniform4uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Uniform4uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4uivEXT(location, count, value);
        }
        public static void UniformBufferEXT(GLuint program, GLint location, GLuint buffer)
        {
            Delegates.glUniformBufferEXT(program, location, buffer);
        }
        public static void UniformMatrix2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2fv(location, count, transpose, value);
        }
        public static void UniformMatrix2fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix2fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2fvARB(location, count, transpose, value);
        }
        public static void UniformMatrix2x3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2x3fv(location, count, transpose, value);
        }
        public static void UniformMatrix2x3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix2x4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2x4fv(location, count, transpose, value);
        }
        public static void UniformMatrix2x4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3fv(location, count, transpose, value);
        }
        public static void UniformMatrix3fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3fvARB(location, count, transpose, value);
        }
        public static void UniformMatrix3fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix3x2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3x2fv(location, count, transpose, value);
        }
        public static void UniformMatrix3x2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix3x4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix3x4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3x4fv(location, count, transpose, value);
        }
        public static void UniformMatrix4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4fv(location, count, transpose, value);
        }
        public static void UniformMatrix4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix4fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4fvARB(location, count, transpose, value);
        }
        public static void UniformMatrix4fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix4x2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix4x2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4x2fv(location, count, transpose, value);
        }
        public static void UniformMatrix4x3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UniformMatrix4x3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4x3fv(location, count, transpose, value);
        }
        public static void UnlockArraysEXT()
        {
            Delegates.glUnlockArraysEXT();
        }
        public static GLboolean UnmapBuffer(Enums.VERSION_1_5 target)
        {
            return Delegates.glUnmapBuffer(target);
        }
        public static GLboolean UnmapBufferARB(Enums.ARB_vertex_buffer_object target)
        {
            return Delegates.glUnmapBufferARB(target);
        }
        public static void UnmapObjectBufferATI(GLuint buffer)
        {
            Delegates.glUnmapObjectBufferATI(buffer);
        }
        public static void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, Enums.ATI_vertex_array_object preserve)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glUpdateObjectBufferATI(buffer, offset, size, h0.AddrOfPinnedObject(), preserve);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, System.IntPtr pointer, Enums.ATI_vertex_array_object preserve)
        {
            Delegates.glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
        }
        public static void UseProgram(GLuint program)
        {
            Delegates.glUseProgram(program);
        }
        public static void UseProgramObjectARB(GLhandleARB programObj)
        {
            Delegates.glUseProgramObjectARB(programObj);
        }
        public static void ValidateProgram(GLuint program)
        {
            Delegates.glValidateProgram(program);
        }
        public static void ValidateProgramARB(GLhandleARB programObj)
        {
            Delegates.glValidateProgramARB(programObj);
        }
        public static void VariantArrayObjectATI(GLuint id, Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glVariantArrayObjectATI(id, type, stride, buffer, offset);
        }
        public static void VariantbvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantbvEXT(id, addr);
        }
        public static void VariantbvEXT(GLuint id, GLbyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantbvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantdvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantdvEXT(id, addr);
        }
        public static void VariantdvEXT(GLuint id, GLdouble[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantdvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantfvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantfvEXT(id, addr);
        }
        public static void VariantfvEXT(GLuint id, GLfloat[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantfvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantivEXT(GLuint id, GLint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantivEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantivEXT(id, addr);
        }
        public static void VariantPointerEXT(GLuint id, Enums.EXT_vertex_shader type, GLuint stride, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantPointerEXT(id, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantPointerEXT(GLuint id, Enums.EXT_vertex_shader type, GLuint stride, System.IntPtr addr)
        {
            Delegates.glVariantPointerEXT(id, type, stride, addr);
        }
        public static void VariantsvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantsvEXT(id, addr);
        }
        public static void VariantsvEXT(GLuint id, GLshort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantsvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantubvEXT(GLuint id, GLubyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantubvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantubvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantubvEXT(id, addr);
        }
        public static void VariantuivEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantuivEXT(id, addr);
        }
        public static void VariantuivEXT(GLuint id, GLuint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantuivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantusvEXT(GLuint id, GLushort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantusvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VariantusvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantusvEXT(id, addr);
        }
        public static void Vertex2d(GLdouble x, GLdouble y)
        {
            Delegates.glVertex2d(x, y);
        }
        public static void Vertex2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex2dv(System.IntPtr v)
        {
            Delegates.glVertex2dv(v);
        }
        public static void Vertex2f(GLfloat x, GLfloat y)
        {
            Delegates.glVertex2f(x, y);
        }
        public static void Vertex2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex2fv(System.IntPtr v)
        {
            Delegates.glVertex2fv(v);
        }
        public static void Vertex2hNV(GLhalfNV x, GLhalfNV y)
        {
            Delegates.glVertex2hNV(x, y);
        }
        public static void Vertex2hvNV(System.IntPtr v)
        {
            Delegates.glVertex2hvNV(v);
        }
        public static void Vertex2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex2i(GLint x, GLint y)
        {
            Delegates.glVertex2i(x, y);
        }
        public static void Vertex2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex2iv(System.IntPtr v)
        {
            Delegates.glVertex2iv(v);
        }
        public static void Vertex2s(GLshort x, GLshort y)
        {
            Delegates.glVertex2s(x, y);
        }
        public static void Vertex2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex2sv(System.IntPtr v)
        {
            Delegates.glVertex2sv(v);
        }
        public static void Vertex3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertex3d(x, y, z);
        }
        public static void Vertex3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex3dv(System.IntPtr v)
        {
            Delegates.glVertex3dv(v);
        }
        public static void Vertex3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertex3f(x, y, z);
        }
        public static void Vertex3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex3fv(System.IntPtr v)
        {
            Delegates.glVertex3fv(v);
        }
        public static void Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
        {
            Delegates.glVertex3hNV(x, y, z);
        }
        public static void Vertex3hvNV(System.IntPtr v)
        {
            Delegates.glVertex3hvNV(v);
        }
        public static void Vertex3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex3i(GLint x, GLint y, GLint z)
        {
            Delegates.glVertex3i(x, y, z);
        }
        public static void Vertex3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex3iv(System.IntPtr v)
        {
            Delegates.glVertex3iv(v);
        }
        public static void Vertex3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertex3s(x, y, z);
        }
        public static void Vertex3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex3sv(System.IntPtr v)
        {
            Delegates.glVertex3sv(v);
        }
        public static void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertex4d(x, y, z, w);
        }
        public static void Vertex4dv(System.IntPtr v)
        {
            Delegates.glVertex4dv(v);
        }
        public static void Vertex4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertex4f(x, y, z, w);
        }
        public static void Vertex4fv(System.IntPtr v)
        {
            Delegates.glVertex4fv(v);
        }
        public static void Vertex4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
        {
            Delegates.glVertex4hNV(x, y, z, w);
        }
        public static void Vertex4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex4hvNV(System.IntPtr v)
        {
            Delegates.glVertex4hvNV(v);
        }
        public static void Vertex4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertex4i(x, y, z, w);
        }
        public static void Vertex4iv(System.IntPtr v)
        {
            Delegates.glVertex4iv(v);
        }
        public static void Vertex4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertex4s(x, y, z, w);
        }
        public static void Vertex4sv(System.IntPtr v)
        {
            Delegates.glVertex4sv(v);
        }
        public static void Vertex4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexArrayParameteriAPPLE(Enums.APPLE_vertex_array_range pname, GLint param)
        {
            Delegates.glVertexArrayParameteriAPPLE(pname, param);
        }
        public static void VertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexArrayRangeAPPLE(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glVertexArrayRangeAPPLE(length, pointer);
        }
        public static void VertexArrayRangeNV(GLsizei length, System.IntPtr pointer)
        {
            Delegates.glVertexArrayRangeNV(length, pointer);
        }
        public static void VertexArrayRangeNV(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexArrayRangeNV(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1d(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1d(index, x);
        }
        public static void VertexAttrib1dARB(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1dARB(index, x);
        }
        public static void VertexAttrib1dNV(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1dNV(index, x);
        }
        public static void VertexAttrib1dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1dv(index, v);
        }
        public static void VertexAttrib1dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1dvARB(index, v);
        }
        public static void VertexAttrib1dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1dvNV(index, v);
        }
        public static void VertexAttrib1dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1f(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1f(index, x);
        }
        public static void VertexAttrib1fARB(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1fARB(index, x);
        }
        public static void VertexAttrib1fNV(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1fNV(index, x);
        }
        public static void VertexAttrib1fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1fv(index, v);
        }
        public static void VertexAttrib1fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1fvARB(index, v);
        }
        public static void VertexAttrib1fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1fvNV(index, v);
        }
        public static void VertexAttrib1fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1hNV(GLuint index, GLhalfNV x)
        {
            Delegates.glVertexAttrib1hNV(index, x);
        }
        public static void VertexAttrib1hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1hvNV(index, v);
        }
        public static void VertexAttrib1hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1s(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1s(index, x);
        }
        public static void VertexAttrib1sARB(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1sARB(index, x);
        }
        public static void VertexAttrib1sNV(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1sNV(index, x);
        }
        public static void VertexAttrib1sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1sv(index, v);
        }
        public static void VertexAttrib1svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1svARB(index, v);
        }
        public static void VertexAttrib1svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib1svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1svNV(index, v);
        }
        public static void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2d(index, x, y);
        }
        public static void VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2dARB(index, x, y);
        }
        public static void VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2dNV(index, x, y);
        }
        public static void VertexAttrib2dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2dv(index, v);
        }
        public static void VertexAttrib2dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2dvARB(index, v);
        }
        public static void VertexAttrib2dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2dvNV(index, v);
        }
        public static void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2f(index, x, y);
        }
        public static void VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2fARB(index, x, y);
        }
        public static void VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2fNV(index, x, y);
        }
        public static void VertexAttrib2fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2fv(index, v);
        }
        public static void VertexAttrib2fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2fvARB(index, v);
        }
        public static void VertexAttrib2fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2fvNV(index, v);
        }
        public static void VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
        {
            Delegates.glVertexAttrib2hNV(index, x, y);
        }
        public static void VertexAttrib2hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2hvNV(index, v);
        }
        public static void VertexAttrib2s(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2s(index, x, y);
        }
        public static void VertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2sARB(index, x, y);
        }
        public static void VertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2sNV(index, x, y);
        }
        public static void VertexAttrib2sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2sv(index, v);
        }
        public static void VertexAttrib2sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib2svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2svARB(index, v);
        }
        public static void VertexAttrib2svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2svNV(index, v);
        }
        public static void VertexAttrib2svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3d(index, x, y, z);
        }
        public static void VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3dARB(index, x, y, z);
        }
        public static void VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3dNV(index, x, y, z);
        }
        public static void VertexAttrib3dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3dv(index, v);
        }
        public static void VertexAttrib3dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3dvARB(index, v);
        }
        public static void VertexAttrib3dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3dvNV(index, v);
        }
        public static void VertexAttrib3dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3f(index, x, y, z);
        }
        public static void VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3fARB(index, x, y, z);
        }
        public static void VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3fNV(index, x, y, z);
        }
        public static void VertexAttrib3fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3fv(index, v);
        }
        public static void VertexAttrib3fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3fvARB(index, v);
        }
        public static void VertexAttrib3fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3fvNV(index, v);
        }
        public static void VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
        {
            Delegates.glVertexAttrib3hNV(index, x, y, z);
        }
        public static void VertexAttrib3hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3hvNV(index, v);
        }
        public static void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3s(index, x, y, z);
        }
        public static void VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3sARB(index, x, y, z);
        }
        public static void VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3sNV(index, x, y, z);
        }
        public static void VertexAttrib3sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3sv(index, v);
        }
        public static void VertexAttrib3svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3svARB(index, v);
        }
        public static void VertexAttrib3svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib3svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3svNV(index, v);
        }
        public static void VertexAttrib4bv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4bv(index, v);
        }
        public static void VertexAttrib4bv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4bvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4bvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4bvARB(index, v);
        }
        public static void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4d(index, x, y, z, w);
        }
        public static void VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4dARB(index, x, y, z, w);
        }
        public static void VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4dNV(index, x, y, z, w);
        }
        public static void VertexAttrib4dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4dv(index, v);
        }
        public static void VertexAttrib4dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4dvARB(index, v);
        }
        public static void VertexAttrib4dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4dvNV(index, v);
        }
        public static void VertexAttrib4dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4f(index, x, y, z, w);
        }
        public static void VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4fARB(index, x, y, z, w);
        }
        public static void VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4fNV(index, x, y, z, w);
        }
        public static void VertexAttrib4fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4fv(index, v);
        }
        public static void VertexAttrib4fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4fvARB(index, v);
        }
        public static void VertexAttrib4fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4fvNV(index, v);
        }
        public static void VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
        {
            Delegates.glVertexAttrib4hNV(index, x, y, z, w);
        }
        public static void VertexAttrib4hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4hvNV(index, v);
        }
        public static void VertexAttrib4iv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4iv(index, v);
        }
        public static void VertexAttrib4iv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4iv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4ivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ivARB(index, v);
        }
        public static void VertexAttrib4ivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4Nbv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nbv(index, v);
        }
        public static void VertexAttrib4Nbv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nbv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4NbvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NbvARB(index, v);
        }
        public static void VertexAttrib4NbvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NbvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4Niv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Niv(index, v);
        }
        public static void VertexAttrib4Niv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Niv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4NivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4NivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NivARB(index, v);
        }
        public static void VertexAttrib4Nsv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nsv(index, v);
        }
        public static void VertexAttrib4Nsv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nsv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4NsvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NsvARB(index, v);
        }
        public static void VertexAttrib4NsvARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NsvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4Nub(index, x, y, z, w);
        }
        public static void VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4NubARB(index, x, y, z, w);
        }
        public static void VertexAttrib4Nubv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nubv(index, v);
        }
        public static void VertexAttrib4Nubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4NubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4NubvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NubvARB(index, v);
        }
        public static void VertexAttrib4Nuiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nuiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4Nuiv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nuiv(index, v);
        }
        public static void VertexAttrib4NuivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NuivARB(index, v);
        }
        public static void VertexAttrib4NuivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NuivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4Nusv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nusv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4Nusv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nusv(index, v);
        }
        public static void VertexAttrib4NusvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NusvARB(index, v);
        }
        public static void VertexAttrib4NusvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NusvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4s(index, x, y, z, w);
        }
        public static void VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4sARB(index, x, y, z, w);
        }
        public static void VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4sNV(index, x, y, z, w);
        }
        public static void VertexAttrib4sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4sv(index, v);
        }
        public static void VertexAttrib4sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4svARB(index, v);
        }
        public static void VertexAttrib4svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4svNV(index, v);
        }
        public static void VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4ubNV(index, x, y, z, w);
        }
        public static void VertexAttrib4ubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4ubv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ubv(index, v);
        }
        public static void VertexAttrib4ubvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ubvARB(index, v);
        }
        public static void VertexAttrib4ubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4ubvNV(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4ubvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ubvNV(index, v);
        }
        public static void VertexAttrib4uiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4uiv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4uiv(index, v);
        }
        public static void VertexAttrib4uivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4uivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4uivARB(index, v);
        }
        public static void VertexAttrib4usv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4usv(index, v);
        }
        public static void VertexAttrib4usv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4usvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttrib4usvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4usvARB(index, v);
        }
        public static void VertexAttribArrayObjectATI(GLuint index, GLint size, Enums.ATI_vertex_attrib_array_object type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
        }
        public static void VertexAttribI1iEXT(GLuint index, GLint x)
        {
            Delegates.glVertexAttribI1iEXT(index, x);
        }
        public static void VertexAttribI1ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI1ivEXT(index, v);
        }
        public static void VertexAttribI1ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI1ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI1uiEXT(GLuint index, GLuint x)
        {
            Delegates.glVertexAttribI1uiEXT(index, x);
        }
        public static void VertexAttribI1uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI1uivEXT(index, v);
        }
        public static void VertexAttribI1uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI1uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI2iEXT(GLuint index, GLint x, GLint y)
        {
            Delegates.glVertexAttribI2iEXT(index, x, y);
        }
        public static void VertexAttribI2ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI2ivEXT(index, v);
        }
        public static void VertexAttribI2ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI2ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
        {
            Delegates.glVertexAttribI2uiEXT(index, x, y);
        }
        public static void VertexAttribI2uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI2uivEXT(index, v);
        }
        public static void VertexAttribI2uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI2uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
        {
            Delegates.glVertexAttribI3iEXT(index, x, y, z);
        }
        public static void VertexAttribI3ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI3ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI3ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI3ivEXT(index, v);
        }
        public static void VertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
        {
            Delegates.glVertexAttribI3uiEXT(index, x, y, z);
        }
        public static void VertexAttribI3uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI3uivEXT(index, v);
        }
        public static void VertexAttribI3uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI3uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI4bvEXT(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4bvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI4bvEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4bvEXT(index, v);
        }
        public static void VertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertexAttribI4iEXT(index, x, y, z, w);
        }
        public static void VertexAttribI4ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4ivEXT(index, v);
        }
        public static void VertexAttribI4ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI4svEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4svEXT(index, v);
        }
        public static void VertexAttribI4svEXT(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4svEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI4ubvEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4ubvEXT(index, v);
        }
        public static void VertexAttribI4ubvEXT(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4ubvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
        {
            Delegates.glVertexAttribI4uiEXT(index, x, y, z, w);
        }
        public static void VertexAttribI4uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI4uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4uivEXT(index, v);
        }
        public static void VertexAttribI4usvEXT(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4usvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribI4usvEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4usvEXT(index, v);
        }
        public static void VertexAttribIPointerEXT(GLuint index, GLint size, Enums.NV_vertex_program4 type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointerEXT(index, size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribIPointerEXT(GLuint index, GLint size, Enums.NV_vertex_program4 type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribIPointerEXT(index, size, type, stride, pointer);
        }
        public static void VertexAttribPointer(GLuint index, GLint size, Enums.VERSION_2_0 type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        }
        public static void VertexAttribPointer(GLuint index, GLint size, Enums.VERSION_2_0 type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribPointerARB(GLuint index, GLint size, Enums.ARB_vertex_program type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
        }
        public static void VertexAttribPointerARB(GLuint index, GLint size, Enums.ARB_vertex_program type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribPointerNV(GLuint index, GLint fsize, Enums.NV_vertex_program type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointerNV(index, fsize, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribPointerNV(GLuint index, GLint fsize, Enums.NV_vertex_program type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribPointerNV(index, fsize, type, stride, pointer);
        }
        public static void VertexAttribs1dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs1dvNV(index, count, v);
        }
        public static void VertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs1fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs1fvNV(index, count, v);
        }
        public static void VertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs1hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs1hvNV(index, n, v);
        }
        public static void VertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs1svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs1svNV(index, count, v);
        }
        public static void VertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs2dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs2dvNV(index, count, v);
        }
        public static void VertexAttribs2fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs2fvNV(index, count, v);
        }
        public static void VertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs2hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs2hvNV(index, n, v);
        }
        public static void VertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs2svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs2svNV(index, count, v);
        }
        public static void VertexAttribs3dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs3dvNV(index, count, v);
        }
        public static void VertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs3fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs3fvNV(index, count, v);
        }
        public static void VertexAttribs3hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs3hvNV(index, n, v);
        }
        public static void VertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs3svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs3svNV(index, count, v);
        }
        public static void VertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs4dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4dvNV(index, count, v);
        }
        public static void VertexAttribs4fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4fvNV(index, count, v);
        }
        public static void VertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs4hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs4hvNV(index, n, v);
        }
        public static void VertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexAttribs4svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4svNV(index, count, v);
        }
        public static void VertexAttribs4ubvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4ubvNV(index, count, v);
        }
        public static void VertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4ubvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexBlendARB(GLint count)
        {
            Delegates.glVertexBlendARB(count);
        }
        public static void VertexBlendEnvfATI(Enums.ATI_vertex_streams pname, GLfloat param)
        {
            Delegates.glVertexBlendEnvfATI(pname, param);
        }
        public static void VertexBlendEnviATI(Enums.ATI_vertex_streams pname, GLint param)
        {
            Delegates.glVertexBlendEnviATI(pname, param);
        }
        public static void VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexPointer(size, type, stride, pointer);
        }
        public static void VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexPointerEXT(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexPointerEXT(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glVertexPointerEXT(size, type, stride, count, pointer);
        }
        public static void VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, IntPtr[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointerListIBM(size, type, stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexPointervINTEL(GLint size, Enums.VertexPointerType type, IntPtr[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointervINTEL(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexPointervINTEL(GLint size, Enums.VertexPointerType type, System.IntPtr pointer)
        {
            Delegates.glVertexPointervINTEL(size, type, pointer);
        }
        public static void VertexStream1dATI(Enums.ATI_vertex_streams stream, GLdouble x)
        {
            Delegates.glVertexStream1dATI(stream, x);
        }
        public static void VertexStream1dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1dvATI(stream, coords);
        }
        public static void VertexStream1dvATI(Enums.ATI_vertex_streams stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream1fATI(Enums.ATI_vertex_streams stream, GLfloat x)
        {
            Delegates.glVertexStream1fATI(stream, x);
        }
        public static void VertexStream1fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1fvATI(stream, coords);
        }
        public static void VertexStream1fvATI(Enums.ATI_vertex_streams stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream1iATI(Enums.ATI_vertex_streams stream, GLint x)
        {
            Delegates.glVertexStream1iATI(stream, x);
        }
        public static void VertexStream1ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1ivATI(stream, coords);
        }
        public static void VertexStream1ivATI(Enums.ATI_vertex_streams stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream1sATI(Enums.ATI_vertex_streams stream, GLshort x)
        {
            Delegates.glVertexStream1sATI(stream, x);
        }
        public static void VertexStream1svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1svATI(stream, coords);
        }
        public static void VertexStream1svATI(Enums.ATI_vertex_streams stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream2dATI(Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y)
        {
            Delegates.glVertexStream2dATI(stream, x, y);
        }
        public static void VertexStream2dvATI(Enums.ATI_vertex_streams stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream2dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2dvATI(stream, coords);
        }
        public static void VertexStream2fATI(Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y)
        {
            Delegates.glVertexStream2fATI(stream, x, y);
        }
        public static void VertexStream2fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2fvATI(stream, coords);
        }
        public static void VertexStream2fvATI(Enums.ATI_vertex_streams stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream2iATI(Enums.ATI_vertex_streams stream, GLint x, GLint y)
        {
            Delegates.glVertexStream2iATI(stream, x, y);
        }
        public static void VertexStream2ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2ivATI(stream, coords);
        }
        public static void VertexStream2ivATI(Enums.ATI_vertex_streams stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream2sATI(Enums.ATI_vertex_streams stream, GLshort x, GLshort y)
        {
            Delegates.glVertexStream2sATI(stream, x, y);
        }
        public static void VertexStream2svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2svATI(stream, coords);
        }
        public static void VertexStream2svATI(Enums.ATI_vertex_streams stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream3dATI(Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexStream3dATI(stream, x, y, z);
        }
        public static void VertexStream3dvATI(Enums.ATI_vertex_streams stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream3dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3dvATI(stream, coords);
        }
        public static void VertexStream3fATI(Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexStream3fATI(stream, x, y, z);
        }
        public static void VertexStream3fvATI(Enums.ATI_vertex_streams stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream3fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3fvATI(stream, coords);
        }
        public static void VertexStream3iATI(Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z)
        {
            Delegates.glVertexStream3iATI(stream, x, y, z);
        }
        public static void VertexStream3ivATI(Enums.ATI_vertex_streams stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream3ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3ivATI(stream, coords);
        }
        public static void VertexStream3sATI(Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexStream3sATI(stream, x, y, z);
        }
        public static void VertexStream3svATI(Enums.ATI_vertex_streams stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream3svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3svATI(stream, coords);
        }
        public static void VertexStream4dATI(Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexStream4dATI(stream, x, y, z, w);
        }
        public static void VertexStream4dvATI(Enums.ATI_vertex_streams stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream4dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4dvATI(stream, coords);
        }
        public static void VertexStream4fATI(Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexStream4fATI(stream, x, y, z, w);
        }
        public static void VertexStream4fvATI(Enums.ATI_vertex_streams stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream4fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4fvATI(stream, coords);
        }
        public static void VertexStream4iATI(Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertexStream4iATI(stream, x, y, z, w);
        }
        public static void VertexStream4ivATI(Enums.ATI_vertex_streams stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexStream4ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4ivATI(stream, coords);
        }
        public static void VertexStream4sATI(Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexStream4sATI(stream, x, y, z, w);
        }
        public static void VertexStream4svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4svATI(stream, coords);
        }
        public static void VertexStream4svATI(Enums.ATI_vertex_streams stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexWeightfEXT(GLfloat weight)
        {
            Delegates.glVertexWeightfEXT(weight);
        }
        public static void VertexWeightfvEXT(System.IntPtr weight)
        {
            Delegates.glVertexWeightfvEXT(weight);
        }
        public static void VertexWeightfvEXT(GLfloat[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexWeighthNV(GLhalfNV weight)
        {
            Delegates.glVertexWeighthNV(weight);
        }
        public static void VertexWeighthvNV(GLhalfNV[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeighthvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void VertexWeighthvNV(System.IntPtr weight)
        {
            Delegates.glVertexWeighthvNV(weight);
        }
        public static void VertexWeightPointerEXT(GLsizei size, Enums.EXT_vertex_weighting type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexWeightPointerEXT(size, type, stride, pointer);
        }
        public static void VertexWeightPointerEXT(GLsizei size, Enums.EXT_vertex_weighting type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightPointerEXT(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void Viewport(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glViewport(x, y, width, height);
        }
        public static void WeightbvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightbvARB(size, weights);
        }
        public static void WeightbvARB(GLint size, GLbyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightbvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightdvARB(GLint size, GLdouble[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightdvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightdvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightdvARB(size, weights);
        }
        public static void WeightfvARB(GLint size, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightfvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightfvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightfvARB(size, weights);
        }
        public static void WeightivARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightivARB(size, weights);
        }
        public static void WeightivARB(GLint size, GLint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightPointerARB(GLint size, Enums.ARB_vertex_blend type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightPointerARB(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightPointerARB(GLint size, Enums.ARB_vertex_blend type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glWeightPointerARB(size, type, stride, pointer);
        }
        public static void WeightsvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightsvARB(size, weights);
        }
        public static void WeightsvARB(GLint size, GLshort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightsvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightubvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightubvARB(size, weights);
        }
        public static void WeightubvARB(GLint size, GLubyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightuivARB(GLint size, GLuint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightuivARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightuivARB(size, weights);
        }
        public static void WeightusvARB(GLint size, GLushort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WeightusvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightusvARB(size, weights);
        }
        public static void WindowPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2d(x, y);
        }
        public static void WindowPos2dARB(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2dARB(x, y);
        }
        public static void WindowPos2dMESA(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2dMESA(x, y);
        }
        public static void WindowPos2dv(System.IntPtr v)
        {
            Delegates.glWindowPos2dv(v);
        }
        public static void WindowPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2dvARB(System.IntPtr v)
        {
            Delegates.glWindowPos2dvARB(v);
        }
        public static void WindowPos2dvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2dvMESA(v);
        }
        public static void WindowPos2dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2f(x, y);
        }
        public static void WindowPos2fARB(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2fARB(x, y);
        }
        public static void WindowPos2fMESA(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2fMESA(x, y);
        }
        public static void WindowPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2fv(System.IntPtr v)
        {
            Delegates.glWindowPos2fv(v);
        }
        public static void WindowPos2fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2fvARB(System.IntPtr v)
        {
            Delegates.glWindowPos2fvARB(v);
        }
        public static void WindowPos2fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2fvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2fvMESA(v);
        }
        public static void WindowPos2i(GLint x, GLint y)
        {
            Delegates.glWindowPos2i(x, y);
        }
        public static void WindowPos2iARB(GLint x, GLint y)
        {
            Delegates.glWindowPos2iARB(x, y);
        }
        public static void WindowPos2iMESA(GLint x, GLint y)
        {
            Delegates.glWindowPos2iMESA(x, y);
        }
        public static void WindowPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2iv(System.IntPtr v)
        {
            Delegates.glWindowPos2iv(v);
        }
        public static void WindowPos2ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2ivARB(System.IntPtr v)
        {
            Delegates.glWindowPos2ivARB(v);
        }
        public static void WindowPos2ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2ivMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2ivMESA(v);
        }
        public static void WindowPos2s(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2s(x, y);
        }
        public static void WindowPos2sARB(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2sARB(x, y);
        }
        public static void WindowPos2sMESA(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2sMESA(x, y);
        }
        public static void WindowPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2sv(System.IntPtr v)
        {
            Delegates.glWindowPos2sv(v);
        }
        public static void WindowPos2svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2svARB(System.IntPtr v)
        {
            Delegates.glWindowPos2svARB(v);
        }
        public static void WindowPos2svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos2svMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2svMESA(v);
        }
        public static void WindowPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3d(x, y, z);
        }
        public static void WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3dARB(x, y, z);
        }
        public static void WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3dMESA(x, y, z);
        }
        public static void WindowPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3dv(System.IntPtr v)
        {
            Delegates.glWindowPos3dv(v);
        }
        public static void WindowPos3dvARB(System.IntPtr v)
        {
            Delegates.glWindowPos3dvARB(v);
        }
        public static void WindowPos3dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3dvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3dvMESA(v);
        }
        public static void WindowPos3dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3f(x, y, z);
        }
        public static void WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3fARB(x, y, z);
        }
        public static void WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3fMESA(x, y, z);
        }
        public static void WindowPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3fv(System.IntPtr v)
        {
            Delegates.glWindowPos3fv(v);
        }
        public static void WindowPos3fvARB(System.IntPtr v)
        {
            Delegates.glWindowPos3fvARB(v);
        }
        public static void WindowPos3fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3fvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3fvMESA(v);
        }
        public static void WindowPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3i(x, y, z);
        }
        public static void WindowPos3iARB(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3iARB(x, y, z);
        }
        public static void WindowPos3iMESA(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3iMESA(x, y, z);
        }
        public static void WindowPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3iv(System.IntPtr v)
        {
            Delegates.glWindowPos3iv(v);
        }
        public static void WindowPos3ivARB(System.IntPtr v)
        {
            Delegates.glWindowPos3ivARB(v);
        }
        public static void WindowPos3ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3ivMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3ivMESA(v);
        }
        public static void WindowPos3ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3s(x, y, z);
        }
        public static void WindowPos3sARB(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3sARB(x, y, z);
        }
        public static void WindowPos3sMESA(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3sMESA(x, y, z);
        }
        public static void WindowPos3sv(System.IntPtr v)
        {
            Delegates.glWindowPos3sv(v);
        }
        public static void WindowPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3svARB(System.IntPtr v)
        {
            Delegates.glWindowPos3svARB(v);
        }
        public static void WindowPos3svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos3svMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3svMESA(v);
        }
        public static void WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glWindowPos4dMESA(x, y, z, w);
        }
        public static void WindowPos4dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos4dvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4dvMESA(v);
        }
        public static void WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glWindowPos4fMESA(x, y, z, w);
        }
        public static void WindowPos4fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos4fvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4fvMESA(v);
        }
        public static void WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glWindowPos4iMESA(x, y, z, w);
        }
        public static void WindowPos4ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos4ivMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4ivMESA(v);
        }
        public static void WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glWindowPos4sMESA(x, y, z, w);
        }
        public static void WindowPos4svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void WindowPos4svMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4svMESA(v);
        }
        public static void WriteMaskEXT(GLuint res, GLuint @in, Enums.EXT_vertex_shader outX, Enums.EXT_vertex_shader outY, Enums.EXT_vertex_shader outZ, Enums.EXT_vertex_shader outW)
        {
            Delegates.glWriteMaskEXT(res, @in, outX, outY, outZ, outW);
        }
        #endregion
    }
    #endregion
    #region Delegates
    internal class Delegates
    {
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Accum(Enums.AccumOp op, GLfloat value);
        public static Accum glAccum = ((Accum)(GL.GetDelegateForExtensionMethod("glAccum", typeof(Accum)))) ?? new Accum(Imports.Accum);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveStencilFaceEXT(Enums.EXT_stencil_two_side face);
        public static ActiveStencilFaceEXT glActiveStencilFaceEXT = ((ActiveStencilFaceEXT)(GL.GetDelegateForExtensionMethod("glActiveStencilFaceEXT", typeof(ActiveStencilFaceEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveTexture(Enums.VERSION_1_3 texture);
        public static ActiveTexture glActiveTexture = ((ActiveTexture)(GL.GetDelegateForExtensionMethod("glActiveTexture", typeof(ActiveTexture)))) ?? new ActiveTexture(Imports.ActiveTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveTextureARB(Enums.ARB_multitexture texture);
        public static ActiveTextureARB glActiveTextureARB = ((ActiveTextureARB)(GL.GetDelegateForExtensionMethod("glActiveTextureARB", typeof(ActiveTextureARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveVaryingNV(GLuint program, string name);
        public static ActiveVaryingNV glActiveVaryingNV = ((ActiveVaryingNV)(GL.GetDelegateForExtensionMethod("glActiveVaryingNV", typeof(ActiveVaryingNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFragmentOp1ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
        public static AlphaFragmentOp1ATI glAlphaFragmentOp1ATI = ((AlphaFragmentOp1ATI)(GL.GetDelegateForExtensionMethod("glAlphaFragmentOp1ATI", typeof(AlphaFragmentOp1ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFragmentOp2ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
        public static AlphaFragmentOp2ATI glAlphaFragmentOp2ATI = ((AlphaFragmentOp2ATI)(GL.GetDelegateForExtensionMethod("glAlphaFragmentOp2ATI", typeof(AlphaFragmentOp2ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFragmentOp3ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
        public static AlphaFragmentOp3ATI glAlphaFragmentOp3ATI = ((AlphaFragmentOp3ATI)(GL.GetDelegateForExtensionMethod("glAlphaFragmentOp3ATI", typeof(AlphaFragmentOp3ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFunc(Enums.AlphaFunction func, GLclampf @ref);
        public static AlphaFunc glAlphaFunc = ((AlphaFunc)(GL.GetDelegateForExtensionMethod("glAlphaFunc", typeof(AlphaFunc)))) ?? new AlphaFunc(Imports.AlphaFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ApplyTextureEXT(Enums.EXT_light_texture mode);
        public static ApplyTextureEXT glApplyTextureEXT = ((ApplyTextureEXT)(GL.GetDelegateForExtensionMethod("glApplyTextureEXT", typeof(ApplyTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean AreProgramsResidentNV(GLsizei n, System.IntPtr programs, [In, Out()] System.IntPtr residences);
        public static AreProgramsResidentNV glAreProgramsResidentNV = ((AreProgramsResidentNV)(GL.GetDelegateForExtensionMethod("glAreProgramsResidentNV", typeof(AreProgramsResidentNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean AreTexturesResident(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences);
        public static AreTexturesResident glAreTexturesResident = ((AreTexturesResident)(GL.GetDelegateForExtensionMethod("glAreTexturesResident", typeof(AreTexturesResident)))) ?? new AreTexturesResident(Imports.AreTexturesResident);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean AreTexturesResidentEXT(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences);
        public static AreTexturesResidentEXT glAreTexturesResidentEXT = ((AreTexturesResidentEXT)(GL.GetDelegateForExtensionMethod("glAreTexturesResidentEXT", typeof(AreTexturesResidentEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ArrayElement(GLint i);
        public static ArrayElement glArrayElement = ((ArrayElement)(GL.GetDelegateForExtensionMethod("glArrayElement", typeof(ArrayElement)))) ?? new ArrayElement(Imports.ArrayElement);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ArrayElementEXT(GLint i);
        public static ArrayElementEXT glArrayElementEXT = ((ArrayElementEXT)(GL.GetDelegateForExtensionMethod("glArrayElementEXT", typeof(ArrayElementEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ArrayObjectATI(Enums.EnableCap array, GLint size, Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset);
        public static ArrayObjectATI glArrayObjectATI = ((ArrayObjectATI)(GL.GetDelegateForExtensionMethod("glArrayObjectATI", typeof(ArrayObjectATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AsyncMarkerSGIX(GLuint marker);
        public static AsyncMarkerSGIX glAsyncMarkerSGIX = ((AsyncMarkerSGIX)(GL.GetDelegateForExtensionMethod("glAsyncMarkerSGIX", typeof(AsyncMarkerSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
        public static AttachObjectARB glAttachObjectARB = ((AttachObjectARB)(GL.GetDelegateForExtensionMethod("glAttachObjectARB", typeof(AttachObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AttachShader(GLuint program, GLuint shader);
        public static AttachShader glAttachShader = ((AttachShader)(GL.GetDelegateForExtensionMethod("glAttachShader", typeof(AttachShader)))) ?? new AttachShader(Imports.AttachShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Begin(Enums.BeginMode mode);
        public static Begin glBegin = ((Begin)(GL.GetDelegateForExtensionMethod("glBegin", typeof(Begin)))) ?? new Begin(Imports.Begin);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginFragmentShaderATI();
        public static BeginFragmentShaderATI glBeginFragmentShaderATI = ((BeginFragmentShaderATI)(GL.GetDelegateForExtensionMethod("glBeginFragmentShaderATI", typeof(BeginFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginOcclusionQueryNV(GLuint id);
        public static BeginOcclusionQueryNV glBeginOcclusionQueryNV = ((BeginOcclusionQueryNV)(GL.GetDelegateForExtensionMethod("glBeginOcclusionQueryNV", typeof(BeginOcclusionQueryNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginQuery(Enums.VERSION_1_5 target, GLuint id);
        public static BeginQuery glBeginQuery = ((BeginQuery)(GL.GetDelegateForExtensionMethod("glBeginQuery", typeof(BeginQuery)))) ?? new BeginQuery(Imports.BeginQuery);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginQueryARB(Enums.ARB_occlusion_query target, GLuint id);
        public static BeginQueryARB glBeginQueryARB = ((BeginQueryARB)(GL.GetDelegateForExtensionMethod("glBeginQueryARB", typeof(BeginQueryARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginTransformFeedbackNV(Enums.NV_transform_feedback primitiveMode);
        public static BeginTransformFeedbackNV glBeginTransformFeedbackNV = ((BeginTransformFeedbackNV)(GL.GetDelegateForExtensionMethod("glBeginTransformFeedbackNV", typeof(BeginTransformFeedbackNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginVertexShaderEXT();
        public static BeginVertexShaderEXT glBeginVertexShaderEXT = ((BeginVertexShaderEXT)(GL.GetDelegateForExtensionMethod("glBeginVertexShaderEXT", typeof(BeginVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindAttribLocation(GLuint program, GLuint index, string name);
        public static BindAttribLocation glBindAttribLocation = ((BindAttribLocation)(GL.GetDelegateForExtensionMethod("glBindAttribLocation", typeof(BindAttribLocation)))) ?? new BindAttribLocation(Imports.BindAttribLocation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindAttribLocationARB(GLhandleARB programObj, GLuint index, string name);
        public static BindAttribLocationARB glBindAttribLocationARB = ((BindAttribLocationARB)(GL.GetDelegateForExtensionMethod("glBindAttribLocationARB", typeof(BindAttribLocationARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBuffer(Enums.VERSION_1_5 target, GLuint buffer);
        public static BindBuffer glBindBuffer = ((BindBuffer)(GL.GetDelegateForExtensionMethod("glBindBuffer", typeof(BindBuffer)))) ?? new BindBuffer(Imports.BindBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferARB(Enums.ARB_vertex_buffer_object target, GLuint buffer);
        public static BindBufferARB glBindBufferARB = ((BindBufferARB)(GL.GetDelegateForExtensionMethod("glBindBufferARB", typeof(BindBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferBaseNV(Enums.NV_transform_feedback target, GLuint index, GLuint buffer);
        public static BindBufferBaseNV glBindBufferBaseNV = ((BindBufferBaseNV)(GL.GetDelegateForExtensionMethod("glBindBufferBaseNV", typeof(BindBufferBaseNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferOffsetNV(Enums.NV_transform_feedback target, GLuint index, GLuint buffer, GLintptr offset);
        public static BindBufferOffsetNV glBindBufferOffsetNV = ((BindBufferOffsetNV)(GL.GetDelegateForExtensionMethod("glBindBufferOffsetNV", typeof(BindBufferOffsetNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferRangeNV(Enums.NV_transform_feedback target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
        public static BindBufferRangeNV glBindBufferRangeNV = ((BindBufferRangeNV)(GL.GetDelegateForExtensionMethod("glBindBufferRangeNV", typeof(BindBufferRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindFragDataLocationEXT(GLuint program, GLuint color, string name);
        public static BindFragDataLocationEXT glBindFragDataLocationEXT = ((BindFragDataLocationEXT)(GL.GetDelegateForExtensionMethod("glBindFragDataLocationEXT", typeof(BindFragDataLocationEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindFragmentShaderATI(GLuint id);
        public static BindFragmentShaderATI glBindFragmentShaderATI = ((BindFragmentShaderATI)(GL.GetDelegateForExtensionMethod("glBindFragmentShaderATI", typeof(BindFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindFramebufferEXT(Enums.EXT_framebuffer_object target, GLuint framebuffer);
        public static BindFramebufferEXT glBindFramebufferEXT = ((BindFramebufferEXT)(GL.GetDelegateForExtensionMethod("glBindFramebufferEXT", typeof(BindFramebufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindLightParameterEXT(Enums.LightName light, Enums.LightParameter value);
        public static BindLightParameterEXT glBindLightParameterEXT = ((BindLightParameterEXT)(GL.GetDelegateForExtensionMethod("glBindLightParameterEXT", typeof(BindLightParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindMaterialParameterEXT(Enums.MaterialFace face, Enums.MaterialParameter value);
        public static BindMaterialParameterEXT glBindMaterialParameterEXT = ((BindMaterialParameterEXT)(GL.GetDelegateForExtensionMethod("glBindMaterialParameterEXT", typeof(BindMaterialParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindParameterEXT(Enums.EXT_vertex_shader value);
        public static BindParameterEXT glBindParameterEXT = ((BindParameterEXT)(GL.GetDelegateForExtensionMethod("glBindParameterEXT", typeof(BindParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindProgramARB(Enums.ARB_vertex_program target, GLuint program);
        public static BindProgramARB glBindProgramARB = ((BindProgramARB)(GL.GetDelegateForExtensionMethod("glBindProgramARB", typeof(BindProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindProgramNV(Enums.NV_vertex_program target, GLuint id);
        public static BindProgramNV glBindProgramNV = ((BindProgramNV)(GL.GetDelegateForExtensionMethod("glBindProgramNV", typeof(BindProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindRenderbufferEXT(Enums.EXT_framebuffer_object target, GLuint renderbuffer);
        public static BindRenderbufferEXT glBindRenderbufferEXT = ((BindRenderbufferEXT)(GL.GetDelegateForExtensionMethod("glBindRenderbufferEXT", typeof(BindRenderbufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindTexGenParameterEXT(Enums.EXT_vertex_shader unit, Enums.TextureCoordName coord, Enums.TextureGenParameter value);
        public static BindTexGenParameterEXT glBindTexGenParameterEXT = ((BindTexGenParameterEXT)(GL.GetDelegateForExtensionMethod("glBindTexGenParameterEXT", typeof(BindTexGenParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindTexture(Enums.TextureTarget target, GLuint texture);
        public static BindTexture glBindTexture = ((BindTexture)(GL.GetDelegateForExtensionMethod("glBindTexture", typeof(BindTexture)))) ?? new BindTexture(Imports.BindTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindTextureEXT(Enums.TextureTarget target, GLuint texture);
        public static BindTextureEXT glBindTextureEXT = ((BindTextureEXT)(GL.GetDelegateForExtensionMethod("glBindTextureEXT", typeof(BindTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindTextureUnitParameterEXT(Enums.EXT_vertex_shader unit, Enums.EXT_vertex_shader value);
        public static BindTextureUnitParameterEXT glBindTextureUnitParameterEXT = ((BindTextureUnitParameterEXT)(GL.GetDelegateForExtensionMethod("glBindTextureUnitParameterEXT", typeof(BindTextureUnitParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindVertexArrayAPPLE(GLuint array);
        public static BindVertexArrayAPPLE glBindVertexArrayAPPLE = ((BindVertexArrayAPPLE)(GL.GetDelegateForExtensionMethod("glBindVertexArrayAPPLE", typeof(BindVertexArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindVertexShaderEXT(GLuint id);
        public static BindVertexShaderEXT glBindVertexShaderEXT = ((BindVertexShaderEXT)(GL.GetDelegateForExtensionMethod("glBindVertexShaderEXT", typeof(BindVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);
        public static Binormal3bEXT glBinormal3bEXT = ((Binormal3bEXT)(GL.GetDelegateForExtensionMethod("glBinormal3bEXT", typeof(Binormal3bEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3bvEXT(System.IntPtr v);
        public static Binormal3bvEXT glBinormal3bvEXT = ((Binormal3bvEXT)(GL.GetDelegateForExtensionMethod("glBinormal3bvEXT", typeof(Binormal3bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);
        public static Binormal3dEXT glBinormal3dEXT = ((Binormal3dEXT)(GL.GetDelegateForExtensionMethod("glBinormal3dEXT", typeof(Binormal3dEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3dvEXT(System.IntPtr v);
        public static Binormal3dvEXT glBinormal3dvEXT = ((Binormal3dvEXT)(GL.GetDelegateForExtensionMethod("glBinormal3dvEXT", typeof(Binormal3dvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);
        public static Binormal3fEXT glBinormal3fEXT = ((Binormal3fEXT)(GL.GetDelegateForExtensionMethod("glBinormal3fEXT", typeof(Binormal3fEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3fvEXT(System.IntPtr v);
        public static Binormal3fvEXT glBinormal3fvEXT = ((Binormal3fvEXT)(GL.GetDelegateForExtensionMethod("glBinormal3fvEXT", typeof(Binormal3fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3iEXT(GLint bx, GLint by, GLint bz);
        public static Binormal3iEXT glBinormal3iEXT = ((Binormal3iEXT)(GL.GetDelegateForExtensionMethod("glBinormal3iEXT", typeof(Binormal3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3ivEXT(System.IntPtr v);
        public static Binormal3ivEXT glBinormal3ivEXT = ((Binormal3ivEXT)(GL.GetDelegateForExtensionMethod("glBinormal3ivEXT", typeof(Binormal3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3sEXT(GLshort bx, GLshort by, GLshort bz);
        public static Binormal3sEXT glBinormal3sEXT = ((Binormal3sEXT)(GL.GetDelegateForExtensionMethod("glBinormal3sEXT", typeof(Binormal3sEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3svEXT(System.IntPtr v);
        public static Binormal3svEXT glBinormal3svEXT = ((Binormal3svEXT)(GL.GetDelegateForExtensionMethod("glBinormal3svEXT", typeof(Binormal3svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BinormalPointerEXT(Enums.EXT_coordinate_frame type, GLsizei stride, System.IntPtr pointer);
        public static BinormalPointerEXT glBinormalPointerEXT = ((BinormalPointerEXT)(GL.GetDelegateForExtensionMethod("glBinormalPointerEXT", typeof(BinormalPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, System.IntPtr bitmap);
        public static Bitmap glBitmap = ((Bitmap)(GL.GetDelegateForExtensionMethod("glBitmap", typeof(Bitmap)))) ?? new Bitmap(Imports.Bitmap);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        public static BlendColor glBlendColor = ((BlendColor)(GL.GetDelegateForExtensionMethod("glBlendColor", typeof(BlendColor)))) ?? new BlendColor(Imports.BlendColor);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        public static BlendColorEXT glBlendColorEXT = ((BlendColorEXT)(GL.GetDelegateForExtensionMethod("glBlendColorEXT", typeof(BlendColorEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquation(Enums.VERSION_1_2 mode);
        public static BlendEquation glBlendEquation = ((BlendEquation)(GL.GetDelegateForExtensionMethod("glBlendEquation", typeof(BlendEquation)))) ?? new BlendEquation(Imports.BlendEquation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquationEXT(Enums.BlendEquationModeEXT mode);
        public static BlendEquationEXT glBlendEquationEXT = ((BlendEquationEXT)(GL.GetDelegateForExtensionMethod("glBlendEquationEXT", typeof(BlendEquationEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquationSeparate(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha);
        public static BlendEquationSeparate glBlendEquationSeparate = ((BlendEquationSeparate)(GL.GetDelegateForExtensionMethod("glBlendEquationSeparate", typeof(BlendEquationSeparate)))) ?? new BlendEquationSeparate(Imports.BlendEquationSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquationSeparateEXT(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha);
        public static BlendEquationSeparateEXT glBlendEquationSeparateEXT = ((BlendEquationSeparateEXT)(GL.GetDelegateForExtensionMethod("glBlendEquationSeparateEXT", typeof(BlendEquationSeparateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFunc(Enums.BlendingFactorSrc sfactor, Enums.BlendingFactorDest dfactor);
        public static BlendFunc glBlendFunc = ((BlendFunc)(GL.GetDelegateForExtensionMethod("glBlendFunc", typeof(BlendFunc)))) ?? new BlendFunc(Imports.BlendFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFuncSeparate(Enums.VERSION_1_4 sfactorRGB, Enums.VERSION_1_4 dfactorRGB, Enums.VERSION_1_4 sfactorAlpha, Enums.VERSION_1_4 dfactorAlpha);
        public static BlendFuncSeparate glBlendFuncSeparate = ((BlendFuncSeparate)(GL.GetDelegateForExtensionMethod("glBlendFuncSeparate", typeof(BlendFuncSeparate)))) ?? new BlendFuncSeparate(Imports.BlendFuncSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFuncSeparateEXT(Enums.EXT_blend_func_separate sfactorRGB, Enums.EXT_blend_func_separate dfactorRGB, Enums.EXT_blend_func_separate sfactorAlpha, Enums.EXT_blend_func_separate dfactorAlpha);
        public static BlendFuncSeparateEXT glBlendFuncSeparateEXT = ((BlendFuncSeparateEXT)(GL.GetDelegateForExtensionMethod("glBlendFuncSeparateEXT", typeof(BlendFuncSeparateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
        public static BlendFuncSeparateINGR glBlendFuncSeparateINGR = ((BlendFuncSeparateINGR)(GL.GetDelegateForExtensionMethod("glBlendFuncSeparateINGR", typeof(BlendFuncSeparateINGR))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, Enums.ClearBufferMask mask, Enums.EXT_framebuffer_blit filter);
        public static BlitFramebufferEXT glBlitFramebufferEXT = ((BlitFramebufferEXT)(GL.GetDelegateForExtensionMethod("glBlitFramebufferEXT", typeof(BlitFramebufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferData(Enums.VERSION_1_5 target, GLsizeiptr size, System.IntPtr data, Enums.VERSION_1_5 usage);
        public static BufferData glBufferData = ((BufferData)(GL.GetDelegateForExtensionMethod("glBufferData", typeof(BufferData)))) ?? new BufferData(Imports.BufferData);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferDataARB(Enums.ARB_vertex_buffer_object target, GLsizeiptrARB size, System.IntPtr data, Enums.ARB_vertex_buffer_object usage);
        public static BufferDataARB glBufferDataARB = ((BufferDataARB)(GL.GetDelegateForExtensionMethod("glBufferDataARB", typeof(BufferDataARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferParameteriAPPLE(Enums.APPLE_flush_buffer_range target, Enums.APPLE_flush_buffer_range pname, GLint param);
        public static BufferParameteriAPPLE glBufferParameteriAPPLE = ((BufferParameteriAPPLE)(GL.GetDelegateForExtensionMethod("glBufferParameteriAPPLE", typeof(BufferParameteriAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, System.IntPtr data);
        public static BufferSubData glBufferSubData = ((BufferSubData)(GL.GetDelegateForExtensionMethod("glBufferSubData", typeof(BufferSubData)))) ?? new BufferSubData(Imports.BufferSubData);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferSubDataARB(Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, System.IntPtr data);
        public static BufferSubDataARB glBufferSubDataARB = ((BufferSubDataARB)(GL.GetDelegateForExtensionMethod("glBufferSubDataARB", typeof(BufferSubDataARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CallList(GLuint list);
        public static CallList glCallList = ((CallList)(GL.GetDelegateForExtensionMethod("glCallList", typeof(CallList)))) ?? new CallList(Imports.CallList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CallLists(GLsizei n, Enums.ListNameType type, System.IntPtr lists);
        public static CallLists glCallLists = ((CallLists)(GL.GetDelegateForExtensionMethod("glCallLists", typeof(CallLists)))) ?? new CallLists(Imports.CallLists);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLenum CheckFramebufferStatusEXT(Enums.EXT_framebuffer_object target);
        public static CheckFramebufferStatusEXT glCheckFramebufferStatusEXT = ((CheckFramebufferStatusEXT)(GL.GetDelegateForExtensionMethod("glCheckFramebufferStatusEXT", typeof(CheckFramebufferStatusEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClampColorARB(Enums.ARB_color_buffer_float target, Enums.ARB_color_buffer_float clamp);
        public static ClampColorARB glClampColorARB = ((ClampColorARB)(GL.GetDelegateForExtensionMethod("glClampColorARB", typeof(ClampColorARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Clear(Enums.ClearBufferMask mask);
        public static Clear glClear = ((Clear)(GL.GetDelegateForExtensionMethod("glClear", typeof(Clear)))) ?? new Clear(Imports.Clear);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        public static ClearAccum glClearAccum = ((ClearAccum)(GL.GetDelegateForExtensionMethod("glClearAccum", typeof(ClearAccum)))) ?? new ClearAccum(Imports.ClearAccum);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        public static ClearColor glClearColor = ((ClearColor)(GL.GetDelegateForExtensionMethod("glClearColor", typeof(ClearColor)))) ?? new ClearColor(Imports.ClearColor);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha);
        public static ClearColorIiEXT glClearColorIiEXT = ((ClearColorIiEXT)(GL.GetDelegateForExtensionMethod("glClearColorIiEXT", typeof(ClearColorIiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        public static ClearColorIuiEXT glClearColorIuiEXT = ((ClearColorIuiEXT)(GL.GetDelegateForExtensionMethod("glClearColorIuiEXT", typeof(ClearColorIuiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearDepth(GLclampd depth);
        public static ClearDepth glClearDepth = ((ClearDepth)(GL.GetDelegateForExtensionMethod("glClearDepth", typeof(ClearDepth)))) ?? new ClearDepth(Imports.ClearDepth);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearDepthdNV(GLdouble depth);
        public static ClearDepthdNV glClearDepthdNV = ((ClearDepthdNV)(GL.GetDelegateForExtensionMethod("glClearDepthdNV", typeof(ClearDepthdNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearIndex(GLfloat c);
        public static ClearIndex glClearIndex = ((ClearIndex)(GL.GetDelegateForExtensionMethod("glClearIndex", typeof(ClearIndex)))) ?? new ClearIndex(Imports.ClearIndex);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearStencil(GLint s);
        public static ClearStencil glClearStencil = ((ClearStencil)(GL.GetDelegateForExtensionMethod("glClearStencil", typeof(ClearStencil)))) ?? new ClearStencil(Imports.ClearStencil);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClientActiveTexture(Enums.VERSION_1_3 texture);
        public static ClientActiveTexture glClientActiveTexture = ((ClientActiveTexture)(GL.GetDelegateForExtensionMethod("glClientActiveTexture", typeof(ClientActiveTexture)))) ?? new ClientActiveTexture(Imports.ClientActiveTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClientActiveTextureARB(Enums.ARB_multitexture texture);
        public static ClientActiveTextureARB glClientActiveTextureARB = ((ClientActiveTextureARB)(GL.GetDelegateForExtensionMethod("glClientActiveTextureARB", typeof(ClientActiveTextureARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClientActiveVertexStreamATI(Enums.ATI_vertex_streams stream);
        public static ClientActiveVertexStreamATI glClientActiveVertexStreamATI = ((ClientActiveVertexStreamATI)(GL.GetDelegateForExtensionMethod("glClientActiveVertexStreamATI", typeof(ClientActiveVertexStreamATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClipPlane(Enums.ClipPlaneName plane, System.IntPtr equation);
        public static ClipPlane glClipPlane = ((ClipPlane)(GL.GetDelegateForExtensionMethod("glClipPlane", typeof(ClipPlane)))) ?? new ClipPlane(Imports.ClipPlane);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3b(GLbyte red, GLbyte green, GLbyte blue);
        public static Color3b glColor3b = ((Color3b)(GL.GetDelegateForExtensionMethod("glColor3b", typeof(Color3b)))) ?? new Color3b(Imports.Color3b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3bv(System.IntPtr v);
        public static Color3bv glColor3bv = ((Color3bv)(GL.GetDelegateForExtensionMethod("glColor3bv", typeof(Color3bv)))) ?? new Color3bv(Imports.Color3bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3d(GLdouble red, GLdouble green, GLdouble blue);
        public static Color3d glColor3d = ((Color3d)(GL.GetDelegateForExtensionMethod("glColor3d", typeof(Color3d)))) ?? new Color3d(Imports.Color3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3dv(System.IntPtr v);
        public static Color3dv glColor3dv = ((Color3dv)(GL.GetDelegateForExtensionMethod("glColor3dv", typeof(Color3dv)))) ?? new Color3dv(Imports.Color3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3f(GLfloat red, GLfloat green, GLfloat blue);
        public static Color3f glColor3f = ((Color3f)(GL.GetDelegateForExtensionMethod("glColor3f", typeof(Color3f)))) ?? new Color3f(Imports.Color3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3fv(System.IntPtr v);
        public static Color3fv glColor3fv = ((Color3fv)(GL.GetDelegateForExtensionMethod("glColor3fv", typeof(Color3fv)))) ?? new Color3fv(Imports.Color3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        public static Color3fVertex3fSUN glColor3fVertex3fSUN = ((Color3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glColor3fVertex3fSUN", typeof(Color3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3fVertex3fvSUN(System.IntPtr c, System.IntPtr v);
        public static Color3fVertex3fvSUN glColor3fVertex3fvSUN = ((Color3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glColor3fVertex3fvSUN", typeof(Color3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
        public static Color3hNV glColor3hNV = ((Color3hNV)(GL.GetDelegateForExtensionMethod("glColor3hNV", typeof(Color3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3hvNV(System.IntPtr v);
        public static Color3hvNV glColor3hvNV = ((Color3hvNV)(GL.GetDelegateForExtensionMethod("glColor3hvNV", typeof(Color3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3i(GLint red, GLint green, GLint blue);
        public static Color3i glColor3i = ((Color3i)(GL.GetDelegateForExtensionMethod("glColor3i", typeof(Color3i)))) ?? new Color3i(Imports.Color3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3iv(System.IntPtr v);
        public static Color3iv glColor3iv = ((Color3iv)(GL.GetDelegateForExtensionMethod("glColor3iv", typeof(Color3iv)))) ?? new Color3iv(Imports.Color3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3s(GLshort red, GLshort green, GLshort blue);
        public static Color3s glColor3s = ((Color3s)(GL.GetDelegateForExtensionMethod("glColor3s", typeof(Color3s)))) ?? new Color3s(Imports.Color3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3sv(System.IntPtr v);
        public static Color3sv glColor3sv = ((Color3sv)(GL.GetDelegateForExtensionMethod("glColor3sv", typeof(Color3sv)))) ?? new Color3sv(Imports.Color3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
        public static Color3ub glColor3ub = ((Color3ub)(GL.GetDelegateForExtensionMethod("glColor3ub", typeof(Color3ub)))) ?? new Color3ub(Imports.Color3ub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3ubv(System.IntPtr v);
        public static Color3ubv glColor3ubv = ((Color3ubv)(GL.GetDelegateForExtensionMethod("glColor3ubv", typeof(Color3ubv)))) ?? new Color3ubv(Imports.Color3ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3ui(GLuint red, GLuint green, GLuint blue);
        public static Color3ui glColor3ui = ((Color3ui)(GL.GetDelegateForExtensionMethod("glColor3ui", typeof(Color3ui)))) ?? new Color3ui(Imports.Color3ui);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3uiv(System.IntPtr v);
        public static Color3uiv glColor3uiv = ((Color3uiv)(GL.GetDelegateForExtensionMethod("glColor3uiv", typeof(Color3uiv)))) ?? new Color3uiv(Imports.Color3uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3us(GLushort red, GLushort green, GLushort blue);
        public static Color3us glColor3us = ((Color3us)(GL.GetDelegateForExtensionMethod("glColor3us", typeof(Color3us)))) ?? new Color3us(Imports.Color3us);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3usv(System.IntPtr v);
        public static Color3usv glColor3usv = ((Color3usv)(GL.GetDelegateForExtensionMethod("glColor3usv", typeof(Color3usv)))) ?? new Color3usv(Imports.Color3usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
        public static Color4b glColor4b = ((Color4b)(GL.GetDelegateForExtensionMethod("glColor4b", typeof(Color4b)))) ?? new Color4b(Imports.Color4b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4bv(System.IntPtr v);
        public static Color4bv glColor4bv = ((Color4bv)(GL.GetDelegateForExtensionMethod("glColor4bv", typeof(Color4bv)))) ?? new Color4bv(Imports.Color4bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
        public static Color4d glColor4d = ((Color4d)(GL.GetDelegateForExtensionMethod("glColor4d", typeof(Color4d)))) ?? new Color4d(Imports.Color4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4dv(System.IntPtr v);
        public static Color4dv glColor4dv = ((Color4dv)(GL.GetDelegateForExtensionMethod("glColor4dv", typeof(Color4dv)))) ?? new Color4dv(Imports.Color4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        public static Color4f glColor4f = ((Color4f)(GL.GetDelegateForExtensionMethod("glColor4f", typeof(Color4f)))) ?? new Color4f(Imports.Color4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static Color4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN = ((Color4fNormal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glColor4fNormal3fVertex3fSUN", typeof(Color4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4fNormal3fVertex3fvSUN(System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static Color4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN = ((Color4fNormal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glColor4fNormal3fVertex3fvSUN", typeof(Color4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4fv(System.IntPtr v);
        public static Color4fv glColor4fv = ((Color4fv)(GL.GetDelegateForExtensionMethod("glColor4fv", typeof(Color4fv)))) ?? new Color4fv(Imports.Color4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
        public static Color4hNV glColor4hNV = ((Color4hNV)(GL.GetDelegateForExtensionMethod("glColor4hNV", typeof(Color4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4hvNV(System.IntPtr v);
        public static Color4hvNV glColor4hvNV = ((Color4hvNV)(GL.GetDelegateForExtensionMethod("glColor4hvNV", typeof(Color4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
        public static Color4i glColor4i = ((Color4i)(GL.GetDelegateForExtensionMethod("glColor4i", typeof(Color4i)))) ?? new Color4i(Imports.Color4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4iv(System.IntPtr v);
        public static Color4iv glColor4iv = ((Color4iv)(GL.GetDelegateForExtensionMethod("glColor4iv", typeof(Color4iv)))) ?? new Color4iv(Imports.Color4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
        public static Color4s glColor4s = ((Color4s)(GL.GetDelegateForExtensionMethod("glColor4s", typeof(Color4s)))) ?? new Color4s(Imports.Color4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4sv(System.IntPtr v);
        public static Color4sv glColor4sv = ((Color4sv)(GL.GetDelegateForExtensionMethod("glColor4sv", typeof(Color4sv)))) ?? new Color4sv(Imports.Color4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
        public static Color4ub glColor4ub = ((Color4ub)(GL.GetDelegateForExtensionMethod("glColor4ub", typeof(Color4ub)))) ?? new Color4ub(Imports.Color4ub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubv(System.IntPtr v);
        public static Color4ubv glColor4ubv = ((Color4ubv)(GL.GetDelegateForExtensionMethod("glColor4ubv", typeof(Color4ubv)))) ?? new Color4ubv(Imports.Color4ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
        public static Color4ubVertex2fSUN glColor4ubVertex2fSUN = ((Color4ubVertex2fSUN)(GL.GetDelegateForExtensionMethod("glColor4ubVertex2fSUN", typeof(Color4ubVertex2fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex2fvSUN(System.IntPtr c, System.IntPtr v);
        public static Color4ubVertex2fvSUN glColor4ubVertex2fvSUN = ((Color4ubVertex2fvSUN)(GL.GetDelegateForExtensionMethod("glColor4ubVertex2fvSUN", typeof(Color4ubVertex2fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        public static Color4ubVertex3fSUN glColor4ubVertex3fSUN = ((Color4ubVertex3fSUN)(GL.GetDelegateForExtensionMethod("glColor4ubVertex3fSUN", typeof(Color4ubVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex3fvSUN(System.IntPtr c, System.IntPtr v);
        public static Color4ubVertex3fvSUN glColor4ubVertex3fvSUN = ((Color4ubVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glColor4ubVertex3fvSUN", typeof(Color4ubVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        public static Color4ui glColor4ui = ((Color4ui)(GL.GetDelegateForExtensionMethod("glColor4ui", typeof(Color4ui)))) ?? new Color4ui(Imports.Color4ui);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4uiv(System.IntPtr v);
        public static Color4uiv glColor4uiv = ((Color4uiv)(GL.GetDelegateForExtensionMethod("glColor4uiv", typeof(Color4uiv)))) ?? new Color4uiv(Imports.Color4uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
        public static Color4us glColor4us = ((Color4us)(GL.GetDelegateForExtensionMethod("glColor4us", typeof(Color4us)))) ?? new Color4us(Imports.Color4us);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4usv(System.IntPtr v);
        public static Color4usv glColor4usv = ((Color4usv)(GL.GetDelegateForExtensionMethod("glColor4usv", typeof(Color4usv)))) ?? new Color4usv(Imports.Color4usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorFragmentOp1ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
        public static ColorFragmentOp1ATI glColorFragmentOp1ATI = ((ColorFragmentOp1ATI)(GL.GetDelegateForExtensionMethod("glColorFragmentOp1ATI", typeof(ColorFragmentOp1ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorFragmentOp2ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
        public static ColorFragmentOp2ATI glColorFragmentOp2ATI = ((ColorFragmentOp2ATI)(GL.GetDelegateForExtensionMethod("glColorFragmentOp2ATI", typeof(ColorFragmentOp2ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorFragmentOp3ATI(Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
        public static ColorFragmentOp3ATI glColorFragmentOp3ATI = ((ColorFragmentOp3ATI)(GL.GetDelegateForExtensionMethod("glColorFragmentOp3ATI", typeof(ColorFragmentOp3ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorMask([MarshalAs(UnmanagedType.Bool)] bool red, [MarshalAs(UnmanagedType.Bool)] bool green, [MarshalAs(UnmanagedType.Bool)] bool blue, [MarshalAs(UnmanagedType.Bool)] bool alpha);
        public static ColorMask glColorMask = ((ColorMask)(GL.GetDelegateForExtensionMethod("glColorMask", typeof(ColorMask)))) ?? new ColorMask(Imports.ColorMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorMaskIndexedEXT(GLuint index, [MarshalAs(UnmanagedType.Bool)] bool r, [MarshalAs(UnmanagedType.Bool)] bool g, [MarshalAs(UnmanagedType.Bool)] bool b, [MarshalAs(UnmanagedType.Bool)] bool a);
        public static ColorMaskIndexedEXT glColorMaskIndexedEXT = ((ColorMaskIndexedEXT)(GL.GetDelegateForExtensionMethod("glColorMaskIndexedEXT", typeof(ColorMaskIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorMaterial(Enums.MaterialFace face, Enums.ColorMaterialParameter mode);
        public static ColorMaterial glColorMaterial = ((ColorMaterial)(GL.GetDelegateForExtensionMethod("glColorMaterial", typeof(ColorMaterial)))) ?? new ColorMaterial(Imports.ColorMaterial);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer);
        public static ColorPointer glColorPointer = ((ColorPointer)(GL.GetDelegateForExtensionMethod("glColorPointer", typeof(ColorPointer)))) ?? new ColorPointer(Imports.ColorPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static ColorPointerEXT glColorPointerEXT = ((ColorPointerEXT)(GL.GetDelegateForExtensionMethod("glColorPointerEXT", typeof(ColorPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointerListIBM(GLint size, Enums.ColorPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static ColorPointerListIBM glColorPointerListIBM = ((ColorPointerListIBM)(GL.GetDelegateForExtensionMethod("glColorPointerListIBM", typeof(ColorPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointervINTEL(GLint size, Enums.VertexPointerType type, System.IntPtr pointer);
        public static ColorPointervINTEL glColorPointervINTEL = ((ColorPointervINTEL)(GL.GetDelegateForExtensionMethod("glColorPointervINTEL", typeof(ColorPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorSubTable(Enums.VERSION_1_2 target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr data);
        public static ColorSubTable glColorSubTable = ((ColorSubTable)(GL.GetDelegateForExtensionMethod("glColorSubTable", typeof(ColorSubTable)))) ?? new ColorSubTable(Imports.ColorSubTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorSubTableEXT(Enums.EXT_color_subtable target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr data);
        public static ColorSubTableEXT glColorSubTableEXT = ((ColorSubTableEXT)(GL.GetDelegateForExtensionMethod("glColorSubTableEXT", typeof(ColorSubTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTable(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table);
        public static ColorTable glColorTable = ((ColorTable)(GL.GetDelegateForExtensionMethod("glColorTable", typeof(ColorTable)))) ?? new ColorTable(Imports.ColorTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableEXT(Enums.EXT_paletted_texture target, Enums.PixelInternalFormat internalFormat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table);
        public static ColorTableEXT glColorTableEXT = ((ColorTableEXT)(GL.GetDelegateForExtensionMethod("glColorTableEXT", typeof(ColorTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        public static ColorTableParameterfv glColorTableParameterfv = ((ColorTableParameterfv)(GL.GetDelegateForExtensionMethod("glColorTableParameterfv", typeof(ColorTableParameterfv)))) ?? new ColorTableParameterfv(Imports.ColorTableParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, System.IntPtr @params);
        public static ColorTableParameterfvSGI glColorTableParameterfvSGI = ((ColorTableParameterfvSGI)(GL.GetDelegateForExtensionMethod("glColorTableParameterfvSGI", typeof(ColorTableParameterfvSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        public static ColorTableParameteriv glColorTableParameteriv = ((ColorTableParameteriv)(GL.GetDelegateForExtensionMethod("glColorTableParameteriv", typeof(ColorTableParameteriv)))) ?? new ColorTableParameteriv(Imports.ColorTableParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.ColorTableParameterPNameSGI pname, System.IntPtr @params);
        public static ColorTableParameterivSGI glColorTableParameterivSGI = ((ColorTableParameterivSGI)(GL.GetDelegateForExtensionMethod("glColorTableParameterivSGI", typeof(ColorTableParameterivSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table);
        public static ColorTableSGI glColorTableSGI = ((ColorTableSGI)(GL.GetDelegateForExtensionMethod("glColorTableSGI", typeof(ColorTableSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerInputNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners input, Enums.NV_register_combiners mapping, Enums.NV_register_combiners componentUsage);
        public static CombinerInputNV glCombinerInputNV = ((CombinerInputNV)(GL.GetDelegateForExtensionMethod("glCombinerInputNV", typeof(CombinerInputNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerOutputNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners abOutput, Enums.NV_register_combiners cdOutput, Enums.NV_register_combiners sumOutput, Enums.NV_register_combiners scale, Enums.NV_register_combiners bias, [MarshalAs(UnmanagedType.Bool)] bool abDotProduct, [MarshalAs(UnmanagedType.Bool)] bool cdDotProduct, [MarshalAs(UnmanagedType.Bool)] bool muxSum);
        public static CombinerOutputNV glCombinerOutputNV = ((CombinerOutputNV)(GL.GetDelegateForExtensionMethod("glCombinerOutputNV", typeof(CombinerOutputNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameterfNV(Enums.NV_register_combiners pname, GLfloat param);
        public static CombinerParameterfNV glCombinerParameterfNV = ((CombinerParameterfNV)(GL.GetDelegateForExtensionMethod("glCombinerParameterfNV", typeof(CombinerParameterfNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameterfvNV(Enums.NV_register_combiners pname, System.IntPtr @params);
        public static CombinerParameterfvNV glCombinerParameterfvNV = ((CombinerParameterfvNV)(GL.GetDelegateForExtensionMethod("glCombinerParameterfvNV", typeof(CombinerParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameteriNV(Enums.NV_register_combiners pname, GLint param);
        public static CombinerParameteriNV glCombinerParameteriNV = ((CombinerParameteriNV)(GL.GetDelegateForExtensionMethod("glCombinerParameteriNV", typeof(CombinerParameteriNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameterivNV(Enums.NV_register_combiners pname, System.IntPtr @params);
        public static CombinerParameterivNV glCombinerParameterivNV = ((CombinerParameterivNV)(GL.GetDelegateForExtensionMethod("glCombinerParameterivNV", typeof(CombinerParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerStageParameterfvNV(Enums.NV_register_combiners2 stage, Enums.NV_register_combiners2 pname, System.IntPtr @params);
        public static CombinerStageParameterfvNV glCombinerStageParameterfvNV = ((CombinerStageParameterfvNV)(GL.GetDelegateForExtensionMethod("glCombinerStageParameterfvNV", typeof(CombinerStageParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompileShader(GLuint shader);
        public static CompileShader glCompileShader = ((CompileShader)(GL.GetDelegateForExtensionMethod("glCompileShader", typeof(CompileShader)))) ?? new CompileShader(Imports.CompileShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompileShaderARB(GLhandleARB shaderObj);
        public static CompileShaderARB glCompileShaderARB = ((CompileShaderARB)(GL.GetDelegateForExtensionMethod("glCompileShaderARB", typeof(CompileShaderARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage1D glCompressedTexImage1D = ((CompressedTexImage1D)(GL.GetDelegateForExtensionMethod("glCompressedTexImage1D", typeof(CompressedTexImage1D)))) ?? new CompressedTexImage1D(Imports.CompressedTexImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage1DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage1DARB glCompressedTexImage1DARB = ((CompressedTexImage1DARB)(GL.GetDelegateForExtensionMethod("glCompressedTexImage1DARB", typeof(CompressedTexImage1DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage2D glCompressedTexImage2D = ((CompressedTexImage2D)(GL.GetDelegateForExtensionMethod("glCompressedTexImage2D", typeof(CompressedTexImage2D)))) ?? new CompressedTexImage2D(Imports.CompressedTexImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage2DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage2DARB glCompressedTexImage2DARB = ((CompressedTexImage2DARB)(GL.GetDelegateForExtensionMethod("glCompressedTexImage2DARB", typeof(CompressedTexImage2DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage3D glCompressedTexImage3D = ((CompressedTexImage3D)(GL.GetDelegateForExtensionMethod("glCompressedTexImage3D", typeof(CompressedTexImage3D)))) ?? new CompressedTexImage3D(Imports.CompressedTexImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage3DARB(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage3DARB glCompressedTexImage3DARB = ((CompressedTexImage3DARB)(GL.GetDelegateForExtensionMethod("glCompressedTexImage3DARB", typeof(CompressedTexImage3DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage1D glCompressedTexSubImage1D = ((CompressedTexSubImage1D)(GL.GetDelegateForExtensionMethod("glCompressedTexSubImage1D", typeof(CompressedTexSubImage1D)))) ?? new CompressedTexSubImage1D(Imports.CompressedTexSubImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage1DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage1DARB glCompressedTexSubImage1DARB = ((CompressedTexSubImage1DARB)(GL.GetDelegateForExtensionMethod("glCompressedTexSubImage1DARB", typeof(CompressedTexSubImage1DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage2D glCompressedTexSubImage2D = ((CompressedTexSubImage2D)(GL.GetDelegateForExtensionMethod("glCompressedTexSubImage2D", typeof(CompressedTexSubImage2D)))) ?? new CompressedTexSubImage2D(Imports.CompressedTexSubImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage2DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage2DARB glCompressedTexSubImage2DARB = ((CompressedTexSubImage2DARB)(GL.GetDelegateForExtensionMethod("glCompressedTexSubImage2DARB", typeof(CompressedTexSubImage2DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage3D glCompressedTexSubImage3D = ((CompressedTexSubImage3D)(GL.GetDelegateForExtensionMethod("glCompressedTexSubImage3D", typeof(CompressedTexSubImage3D)))) ?? new CompressedTexSubImage3D(Imports.CompressedTexSubImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage3DARB(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage3DARB glCompressedTexSubImage3DARB = ((CompressedTexSubImage3DARB)(GL.GetDelegateForExtensionMethod("glCompressedTexSubImage3DARB", typeof(CompressedTexSubImage3DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter1D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image);
        public static ConvolutionFilter1D glConvolutionFilter1D = ((ConvolutionFilter1D)(GL.GetDelegateForExtensionMethod("glConvolutionFilter1D", typeof(ConvolutionFilter1D)))) ?? new ConvolutionFilter1D(Imports.ConvolutionFilter1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image);
        public static ConvolutionFilter1DEXT glConvolutionFilter1DEXT = ((ConvolutionFilter1DEXT)(GL.GetDelegateForExtensionMethod("glConvolutionFilter1DEXT", typeof(ConvolutionFilter1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image);
        public static ConvolutionFilter2D glConvolutionFilter2D = ((ConvolutionFilter2D)(GL.GetDelegateForExtensionMethod("glConvolutionFilter2D", typeof(ConvolutionFilter2D)))) ?? new ConvolutionFilter2D(Imports.ConvolutionFilter2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image);
        public static ConvolutionFilter2DEXT glConvolutionFilter2DEXT = ((ConvolutionFilter2DEXT)(GL.GetDelegateForExtensionMethod("glConvolutionFilter2DEXT", typeof(ConvolutionFilter2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterf(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat @params);
        public static ConvolutionParameterf glConvolutionParameterf = ((ConvolutionParameterf)(GL.GetDelegateForExtensionMethod("glConvolutionParameterf", typeof(ConvolutionParameterf)))) ?? new ConvolutionParameterf(Imports.ConvolutionParameterf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterfEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLfloat @params);
        public static ConvolutionParameterfEXT glConvolutionParameterfEXT = ((ConvolutionParameterfEXT)(GL.GetDelegateForExtensionMethod("glConvolutionParameterfEXT", typeof(ConvolutionParameterfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        public static ConvolutionParameterfv glConvolutionParameterfv = ((ConvolutionParameterfv)(GL.GetDelegateForExtensionMethod("glConvolutionParameterfv", typeof(ConvolutionParameterfv)))) ?? new ConvolutionParameterfv(Imports.ConvolutionParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, System.IntPtr @params);
        public static ConvolutionParameterfvEXT glConvolutionParameterfvEXT = ((ConvolutionParameterfvEXT)(GL.GetDelegateForExtensionMethod("glConvolutionParameterfvEXT", typeof(ConvolutionParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameteri(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint @params);
        public static ConvolutionParameteri glConvolutionParameteri = ((ConvolutionParameteri)(GL.GetDelegateForExtensionMethod("glConvolutionParameteri", typeof(ConvolutionParameteri)))) ?? new ConvolutionParameteri(Imports.ConvolutionParameteri);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameteriEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, GLint @params);
        public static ConvolutionParameteriEXT glConvolutionParameteriEXT = ((ConvolutionParameteriEXT)(GL.GetDelegateForExtensionMethod("glConvolutionParameteriEXT", typeof(ConvolutionParameteriEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        public static ConvolutionParameteriv glConvolutionParameteriv = ((ConvolutionParameteriv)(GL.GetDelegateForExtensionMethod("glConvolutionParameteriv", typeof(ConvolutionParameteriv)))) ?? new ConvolutionParameteriv(Imports.ConvolutionParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, System.IntPtr @params);
        public static ConvolutionParameterivEXT glConvolutionParameterivEXT = ((ConvolutionParameterivEXT)(GL.GetDelegateForExtensionMethod("glConvolutionParameterivEXT", typeof(ConvolutionParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorSubTable(Enums.VERSION_1_2 target, GLsizei start, GLint x, GLint y, GLsizei width);
        public static CopyColorSubTable glCopyColorSubTable = ((CopyColorSubTable)(GL.GetDelegateForExtensionMethod("glCopyColorSubTable", typeof(CopyColorSubTable)))) ?? new CopyColorSubTable(Imports.CopyColorSubTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorSubTableEXT(Enums.EXT_color_subtable target, GLsizei start, GLint x, GLint y, GLsizei width);
        public static CopyColorSubTableEXT glCopyColorSubTableEXT = ((CopyColorSubTableEXT)(GL.GetDelegateForExtensionMethod("glCopyColorSubTableEXT", typeof(CopyColorSubTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorTable(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        public static CopyColorTable glCopyColorTable = ((CopyColorTable)(GL.GetDelegateForExtensionMethod("glCopyColorTable", typeof(CopyColorTable)))) ?? new CopyColorTable(Imports.CopyColorTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        public static CopyColorTableSGI glCopyColorTableSGI = ((CopyColorTableSGI)(GL.GetDelegateForExtensionMethod("glCopyColorTableSGI", typeof(CopyColorTableSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter1D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        public static CopyConvolutionFilter1D glCopyConvolutionFilter1D = ((CopyConvolutionFilter1D)(GL.GetDelegateForExtensionMethod("glCopyConvolutionFilter1D", typeof(CopyConvolutionFilter1D)))) ?? new CopyConvolutionFilter1D(Imports.CopyConvolutionFilter1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter1DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        public static CopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT = ((CopyConvolutionFilter1DEXT)(GL.GetDelegateForExtensionMethod("glCopyConvolutionFilter1DEXT", typeof(CopyConvolutionFilter1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyConvolutionFilter2D glCopyConvolutionFilter2D = ((CopyConvolutionFilter2D)(GL.GetDelegateForExtensionMethod("glCopyConvolutionFilter2D", typeof(CopyConvolutionFilter2D)))) ?? new CopyConvolutionFilter2D(Imports.CopyConvolutionFilter2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter2DEXT(Enums.ConvolutionTargetEXT target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT = ((CopyConvolutionFilter2DEXT)(GL.GetDelegateForExtensionMethod("glCopyConvolutionFilter2DEXT", typeof(CopyConvolutionFilter2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelCopyType type);
        public static CopyPixels glCopyPixels = ((CopyPixels)(GL.GetDelegateForExtensionMethod("glCopyPixels", typeof(CopyPixels)))) ?? new CopyPixels(Imports.CopyPixels);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
        public static CopyTexImage1D glCopyTexImage1D = ((CopyTexImage1D)(GL.GetDelegateForExtensionMethod("glCopyTexImage1D", typeof(CopyTexImage1D)))) ?? new CopyTexImage1D(Imports.CopyTexImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage1DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
        public static CopyTexImage1DEXT glCopyTexImage1DEXT = ((CopyTexImage1DEXT)(GL.GetDelegateForExtensionMethod("glCopyTexImage1DEXT", typeof(CopyTexImage1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        public static CopyTexImage2D glCopyTexImage2D = ((CopyTexImage2D)(GL.GetDelegateForExtensionMethod("glCopyTexImage2D", typeof(CopyTexImage2D)))) ?? new CopyTexImage2D(Imports.CopyTexImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage2DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        public static CopyTexImage2DEXT glCopyTexImage2DEXT = ((CopyTexImage2DEXT)(GL.GetDelegateForExtensionMethod("glCopyTexImage2DEXT", typeof(CopyTexImage2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        public static CopyTexSubImage1D glCopyTexSubImage1D = ((CopyTexSubImage1D)(GL.GetDelegateForExtensionMethod("glCopyTexSubImage1D", typeof(CopyTexSubImage1D)))) ?? new CopyTexSubImage1D(Imports.CopyTexSubImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        public static CopyTexSubImage1DEXT glCopyTexSubImage1DEXT = ((CopyTexSubImage1DEXT)(GL.GetDelegateForExtensionMethod("glCopyTexSubImage1DEXT", typeof(CopyTexSubImage1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage2D glCopyTexSubImage2D = ((CopyTexSubImage2D)(GL.GetDelegateForExtensionMethod("glCopyTexSubImage2D", typeof(CopyTexSubImage2D)))) ?? new CopyTexSubImage2D(Imports.CopyTexSubImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage2DEXT glCopyTexSubImage2DEXT = ((CopyTexSubImage2DEXT)(GL.GetDelegateForExtensionMethod("glCopyTexSubImage2DEXT", typeof(CopyTexSubImage2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage3D glCopyTexSubImage3D = ((CopyTexSubImage3D)(GL.GetDelegateForExtensionMethod("glCopyTexSubImage3D", typeof(CopyTexSubImage3D)))) ?? new CopyTexSubImage3D(Imports.CopyTexSubImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage3DEXT glCopyTexSubImage3DEXT = ((CopyTexSubImage3DEXT)(GL.GetDelegateForExtensionMethod("glCopyTexSubImage3DEXT", typeof(CopyTexSubImage3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint CreateProgram();
        public static CreateProgram glCreateProgram = ((CreateProgram)(GL.GetDelegateForExtensionMethod("glCreateProgram", typeof(CreateProgram)))) ?? new CreateProgram(Imports.CreateProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLhandleARB CreateProgramObjectARB();
        public static CreateProgramObjectARB glCreateProgramObjectARB = ((CreateProgramObjectARB)(GL.GetDelegateForExtensionMethod("glCreateProgramObjectARB", typeof(CreateProgramObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint CreateShader(Enums.VERSION_2_0 type);
        public static CreateShader glCreateShader = ((CreateShader)(GL.GetDelegateForExtensionMethod("glCreateShader", typeof(CreateShader)))) ?? new CreateShader(Imports.CreateShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLhandleARB CreateShaderObjectARB(Enums.ARB_shader_objects shaderType);
        public static CreateShaderObjectARB glCreateShaderObjectARB = ((CreateShaderObjectARB)(GL.GetDelegateForExtensionMethod("glCreateShaderObjectARB", typeof(CreateShaderObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CullFace(Enums.CullFaceMode mode);
        public static CullFace glCullFace = ((CullFace)(GL.GetDelegateForExtensionMethod("glCullFace", typeof(CullFace)))) ?? new CullFace(Imports.CullFace);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CullParameterdvEXT(Enums.EXT_cull_vertex pname, [In, Out()] System.IntPtr @params);
        public static CullParameterdvEXT glCullParameterdvEXT = ((CullParameterdvEXT)(GL.GetDelegateForExtensionMethod("glCullParameterdvEXT", typeof(CullParameterdvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CullParameterfvEXT(Enums.EXT_cull_vertex pname, [In, Out()] System.IntPtr @params);
        public static CullParameterfvEXT glCullParameterfvEXT = ((CullParameterfvEXT)(GL.GetDelegateForExtensionMethod("glCullParameterfvEXT", typeof(CullParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CurrentPaletteMatrixARB(GLint index);
        public static CurrentPaletteMatrixARB glCurrentPaletteMatrixARB = ((CurrentPaletteMatrixARB)(GL.GetDelegateForExtensionMethod("glCurrentPaletteMatrixARB", typeof(CurrentPaletteMatrixARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeformationMap3dSGIX(Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, System.IntPtr points);
        public static DeformationMap3dSGIX glDeformationMap3dSGIX = ((DeformationMap3dSGIX)(GL.GetDelegateForExtensionMethod("glDeformationMap3dSGIX", typeof(DeformationMap3dSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeformationMap3fSGIX(Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, System.IntPtr points);
        public static DeformationMap3fSGIX glDeformationMap3fSGIX = ((DeformationMap3fSGIX)(GL.GetDelegateForExtensionMethod("glDeformationMap3fSGIX", typeof(DeformationMap3fSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeformSGIX(Enums.FfdMaskSGIX mask);
        public static DeformSGIX glDeformSGIX = ((DeformSGIX)(GL.GetDelegateForExtensionMethod("glDeformSGIX", typeof(DeformSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
        public static DeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX = ((DeleteAsyncMarkersSGIX)(GL.GetDelegateForExtensionMethod("glDeleteAsyncMarkersSGIX", typeof(DeleteAsyncMarkersSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteBuffers(GLsizei n, System.IntPtr buffers);
        public static DeleteBuffers glDeleteBuffers = ((DeleteBuffers)(GL.GetDelegateForExtensionMethod("glDeleteBuffers", typeof(DeleteBuffers)))) ?? new DeleteBuffers(Imports.DeleteBuffers);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteBuffersARB(GLsizei n, System.IntPtr buffers);
        public static DeleteBuffersARB glDeleteBuffersARB = ((DeleteBuffersARB)(GL.GetDelegateForExtensionMethod("glDeleteBuffersARB", typeof(DeleteBuffersARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFencesAPPLE(GLsizei n, System.IntPtr fences);
        public static DeleteFencesAPPLE glDeleteFencesAPPLE = ((DeleteFencesAPPLE)(GL.GetDelegateForExtensionMethod("glDeleteFencesAPPLE", typeof(DeleteFencesAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFencesNV(GLsizei n, System.IntPtr fences);
        public static DeleteFencesNV glDeleteFencesNV = ((DeleteFencesNV)(GL.GetDelegateForExtensionMethod("glDeleteFencesNV", typeof(DeleteFencesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFragmentShaderATI(GLuint id);
        public static DeleteFragmentShaderATI glDeleteFragmentShaderATI = ((DeleteFragmentShaderATI)(GL.GetDelegateForExtensionMethod("glDeleteFragmentShaderATI", typeof(DeleteFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFramebuffersEXT(GLsizei n, System.IntPtr framebuffers);
        public static DeleteFramebuffersEXT glDeleteFramebuffersEXT = ((DeleteFramebuffersEXT)(GL.GetDelegateForExtensionMethod("glDeleteFramebuffersEXT", typeof(DeleteFramebuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteLists(GLuint list, GLsizei range);
        public static DeleteLists glDeleteLists = ((DeleteLists)(GL.GetDelegateForExtensionMethod("glDeleteLists", typeof(DeleteLists)))) ?? new DeleteLists(Imports.DeleteLists);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteObjectARB(GLhandleARB obj);
        public static DeleteObjectARB glDeleteObjectARB = ((DeleteObjectARB)(GL.GetDelegateForExtensionMethod("glDeleteObjectARB", typeof(DeleteObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteOcclusionQueriesNV(GLsizei n, System.IntPtr ids);
        public static DeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV = ((DeleteOcclusionQueriesNV)(GL.GetDelegateForExtensionMethod("glDeleteOcclusionQueriesNV", typeof(DeleteOcclusionQueriesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteProgram(GLuint program);
        public static DeleteProgram glDeleteProgram = ((DeleteProgram)(GL.GetDelegateForExtensionMethod("glDeleteProgram", typeof(DeleteProgram)))) ?? new DeleteProgram(Imports.DeleteProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteProgramsARB(GLsizei n, System.IntPtr programs);
        public static DeleteProgramsARB glDeleteProgramsARB = ((DeleteProgramsARB)(GL.GetDelegateForExtensionMethod("glDeleteProgramsARB", typeof(DeleteProgramsARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteProgramsNV(GLsizei n, System.IntPtr programs);
        public static DeleteProgramsNV glDeleteProgramsNV = ((DeleteProgramsNV)(GL.GetDelegateForExtensionMethod("glDeleteProgramsNV", typeof(DeleteProgramsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteQueries(GLsizei n, System.IntPtr ids);
        public static DeleteQueries glDeleteQueries = ((DeleteQueries)(GL.GetDelegateForExtensionMethod("glDeleteQueries", typeof(DeleteQueries)))) ?? new DeleteQueries(Imports.DeleteQueries);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteQueriesARB(GLsizei n, System.IntPtr ids);
        public static DeleteQueriesARB glDeleteQueriesARB = ((DeleteQueriesARB)(GL.GetDelegateForExtensionMethod("glDeleteQueriesARB", typeof(DeleteQueriesARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteRenderbuffersEXT(GLsizei n, System.IntPtr renderbuffers);
        public static DeleteRenderbuffersEXT glDeleteRenderbuffersEXT = ((DeleteRenderbuffersEXT)(GL.GetDelegateForExtensionMethod("glDeleteRenderbuffersEXT", typeof(DeleteRenderbuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteShader(GLuint shader);
        public static DeleteShader glDeleteShader = ((DeleteShader)(GL.GetDelegateForExtensionMethod("glDeleteShader", typeof(DeleteShader)))) ?? new DeleteShader(Imports.DeleteShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteTextures(GLsizei n, System.IntPtr textures);
        public static DeleteTextures glDeleteTextures = ((DeleteTextures)(GL.GetDelegateForExtensionMethod("glDeleteTextures", typeof(DeleteTextures)))) ?? new DeleteTextures(Imports.DeleteTextures);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteTexturesEXT(GLsizei n, System.IntPtr textures);
        public static DeleteTexturesEXT glDeleteTexturesEXT = ((DeleteTexturesEXT)(GL.GetDelegateForExtensionMethod("glDeleteTexturesEXT", typeof(DeleteTexturesEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteVertexArraysAPPLE(GLsizei n, System.IntPtr arrays);
        public static DeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE = ((DeleteVertexArraysAPPLE)(GL.GetDelegateForExtensionMethod("glDeleteVertexArraysAPPLE", typeof(DeleteVertexArraysAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteVertexShaderEXT(GLuint id);
        public static DeleteVertexShaderEXT glDeleteVertexShaderEXT = ((DeleteVertexShaderEXT)(GL.GetDelegateForExtensionMethod("glDeleteVertexShaderEXT", typeof(DeleteVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthBoundsdNV(GLdouble zmin, GLdouble zmax);
        public static DepthBoundsdNV glDepthBoundsdNV = ((DepthBoundsdNV)(GL.GetDelegateForExtensionMethod("glDepthBoundsdNV", typeof(DepthBoundsdNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthBoundsEXT(GLclampd zmin, GLclampd zmax);
        public static DepthBoundsEXT glDepthBoundsEXT = ((DepthBoundsEXT)(GL.GetDelegateForExtensionMethod("glDepthBoundsEXT", typeof(DepthBoundsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthFunc(Enums.DepthFunction func);
        public static DepthFunc glDepthFunc = ((DepthFunc)(GL.GetDelegateForExtensionMethod("glDepthFunc", typeof(DepthFunc)))) ?? new DepthFunc(Imports.DepthFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthMask([MarshalAs(UnmanagedType.Bool)] bool flag);
        public static DepthMask glDepthMask = ((DepthMask)(GL.GetDelegateForExtensionMethod("glDepthMask", typeof(DepthMask)))) ?? new DepthMask(Imports.DepthMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthRange(GLclampd near, GLclampd far);
        public static DepthRange glDepthRange = ((DepthRange)(GL.GetDelegateForExtensionMethod("glDepthRange", typeof(DepthRange)))) ?? new DepthRange(Imports.DepthRange);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthRangedNV(GLdouble zNear, GLdouble zFar);
        public static DepthRangedNV glDepthRangedNV = ((DepthRangedNV)(GL.GetDelegateForExtensionMethod("glDepthRangedNV", typeof(DepthRangedNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
        public static DetachObjectARB glDetachObjectARB = ((DetachObjectARB)(GL.GetDelegateForExtensionMethod("glDetachObjectARB", typeof(DetachObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DetachShader(GLuint program, GLuint shader);
        public static DetachShader glDetachShader = ((DetachShader)(GL.GetDelegateForExtensionMethod("glDetachShader", typeof(DetachShader)))) ?? new DetachShader(Imports.DetachShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DetailTexFuncSGIS(Enums.TextureTarget target, GLsizei n, System.IntPtr points);
        public static DetailTexFuncSGIS glDetailTexFuncSGIS = ((DetailTexFuncSGIS)(GL.GetDelegateForExtensionMethod("glDetailTexFuncSGIS", typeof(DetailTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Disable(Enums.EnableCap cap);
        public static Disable glDisable = ((Disable)(GL.GetDelegateForExtensionMethod("glDisable", typeof(Disable)))) ?? new Disable(Imports.Disable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableClientState(Enums.EnableCap array);
        public static DisableClientState glDisableClientState = ((DisableClientState)(GL.GetDelegateForExtensionMethod("glDisableClientState", typeof(DisableClientState)))) ?? new DisableClientState(Imports.DisableClientState);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableIndexedEXT(Enums.EXT_draw_buffers2 target, GLuint index);
        public static DisableIndexedEXT glDisableIndexedEXT = ((DisableIndexedEXT)(GL.GetDelegateForExtensionMethod("glDisableIndexedEXT", typeof(DisableIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableVariantClientStateEXT(GLuint id);
        public static DisableVariantClientStateEXT glDisableVariantClientStateEXT = ((DisableVariantClientStateEXT)(GL.GetDelegateForExtensionMethod("glDisableVariantClientStateEXT", typeof(DisableVariantClientStateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableVertexAttribArray(GLuint index);
        public static DisableVertexAttribArray glDisableVertexAttribArray = ((DisableVertexAttribArray)(GL.GetDelegateForExtensionMethod("glDisableVertexAttribArray", typeof(DisableVertexAttribArray)))) ?? new DisableVertexAttribArray(Imports.DisableVertexAttribArray);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableVertexAttribArrayARB(GLuint index);
        public static DisableVertexAttribArrayARB glDisableVertexAttribArrayARB = ((DisableVertexAttribArrayARB)(GL.GetDelegateForExtensionMethod("glDisableVertexAttribArrayARB", typeof(DisableVertexAttribArrayARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawArrays(Enums.BeginMode mode, GLint first, GLsizei count);
        public static DrawArrays glDrawArrays = ((DrawArrays)(GL.GetDelegateForExtensionMethod("glDrawArrays", typeof(DrawArrays)))) ?? new DrawArrays(Imports.DrawArrays);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawArraysEXT(Enums.BeginMode mode, GLint first, GLsizei count);
        public static DrawArraysEXT glDrawArraysEXT = ((DrawArraysEXT)(GL.GetDelegateForExtensionMethod("glDrawArraysEXT", typeof(DrawArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawArraysInstancedEXT(Enums.BeginMode mode, GLint start, GLsizei count, GLsizei primcount);
        public static DrawArraysInstancedEXT glDrawArraysInstancedEXT = ((DrawArraysInstancedEXT)(GL.GetDelegateForExtensionMethod("glDrawArraysInstancedEXT", typeof(DrawArraysInstancedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffer(Enums.DrawBufferMode mode);
        public static DrawBuffer glDrawBuffer = ((DrawBuffer)(GL.GetDelegateForExtensionMethod("glDrawBuffer", typeof(DrawBuffer)))) ?? new DrawBuffer(Imports.DrawBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffers(GLsizei n, System.IntPtr bufs);
        public static DrawBuffers glDrawBuffers = ((DrawBuffers)(GL.GetDelegateForExtensionMethod("glDrawBuffers", typeof(DrawBuffers)))) ?? new DrawBuffers(Imports.DrawBuffers);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffersARB(GLsizei n, System.IntPtr bufs);
        public static DrawBuffersARB glDrawBuffersARB = ((DrawBuffersARB)(GL.GetDelegateForExtensionMethod("glDrawBuffersARB", typeof(DrawBuffersARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffersATI(GLsizei n, System.IntPtr bufs);
        public static DrawBuffersATI glDrawBuffersATI = ((DrawBuffersATI)(GL.GetDelegateForExtensionMethod("glDrawBuffersATI", typeof(DrawBuffersATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElementArrayAPPLE(Enums.BeginMode mode, GLint first, GLsizei count);
        public static DrawElementArrayAPPLE glDrawElementArrayAPPLE = ((DrawElementArrayAPPLE)(GL.GetDelegateForExtensionMethod("glDrawElementArrayAPPLE", typeof(DrawElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElementArrayATI(Enums.BeginMode mode, GLsizei count);
        public static DrawElementArrayATI glDrawElementArrayATI = ((DrawElementArrayATI)(GL.GetDelegateForExtensionMethod("glDrawElementArrayATI", typeof(DrawElementArrayATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, System.IntPtr indices);
        public static DrawElements glDrawElements = ((DrawElements)(GL.GetDelegateForExtensionMethod("glDrawElements", typeof(DrawElements)))) ?? new DrawElements(Imports.DrawElements);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElementsInstancedEXT(Enums.BeginMode mode, GLsizei count, Enums.EXT_draw_instanced type, System.IntPtr indices, GLsizei primcount);
        public static DrawElementsInstancedEXT glDrawElementsInstancedEXT = ((DrawElementsInstancedEXT)(GL.GetDelegateForExtensionMethod("glDrawElementsInstancedEXT", typeof(DrawElementsInstancedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawMeshArraysSUN(Enums.BeginMode mode, GLint first, GLsizei count, GLsizei width);
        public static DrawMeshArraysSUN glDrawMeshArraysSUN = ((DrawMeshArraysSUN)(GL.GetDelegateForExtensionMethod("glDrawMeshArraysSUN", typeof(DrawMeshArraysSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static DrawPixels glDrawPixels = ((DrawPixels)(GL.GetDelegateForExtensionMethod("glDrawPixels", typeof(DrawPixels)))) ?? new DrawPixels(Imports.DrawPixels);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, GLint first, GLsizei count);
        public static DrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE = ((DrawRangeElementArrayAPPLE)(GL.GetDelegateForExtensionMethod("glDrawRangeElementArrayAPPLE", typeof(DrawRangeElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElementArrayATI(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count);
        public static DrawRangeElementArrayATI glDrawRangeElementArrayATI = ((DrawRangeElementArrayATI)(GL.GetDelegateForExtensionMethod("glDrawRangeElementArrayATI", typeof(DrawRangeElementArrayATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, Enums.VERSION_1_2 type, System.IntPtr indices);
        public static DrawRangeElements glDrawRangeElements = ((DrawRangeElements)(GL.GetDelegateForExtensionMethod("glDrawRangeElements", typeof(DrawRangeElements)))) ?? new DrawRangeElements(Imports.DrawRangeElements);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElementsEXT(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, Enums.EXT_draw_range_elements type, System.IntPtr indices);
        public static DrawRangeElementsEXT glDrawRangeElementsEXT = ((DrawRangeElementsEXT)(GL.GetDelegateForExtensionMethod("glDrawRangeElementsEXT", typeof(DrawRangeElementsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlag([MarshalAs(UnmanagedType.Bool)] bool flag);
        public static EdgeFlag glEdgeFlag = ((EdgeFlag)(GL.GetDelegateForExtensionMethod("glEdgeFlag", typeof(EdgeFlag)))) ?? new EdgeFlag(Imports.EdgeFlag);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagPointer(GLsizei stride, System.IntPtr pointer);
        public static EdgeFlagPointer glEdgeFlagPointer = ((EdgeFlagPointer)(GL.GetDelegateForExtensionMethod("glEdgeFlagPointer", typeof(EdgeFlagPointer)))) ?? new EdgeFlagPointer(Imports.EdgeFlagPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static EdgeFlagPointerEXT glEdgeFlagPointerEXT = ((EdgeFlagPointerEXT)(GL.GetDelegateForExtensionMethod("glEdgeFlagPointerEXT", typeof(EdgeFlagPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagPointerListIBM(GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static EdgeFlagPointerListIBM glEdgeFlagPointerListIBM = ((EdgeFlagPointerListIBM)(GL.GetDelegateForExtensionMethod("glEdgeFlagPointerListIBM", typeof(EdgeFlagPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagv(System.IntPtr flag);
        public static EdgeFlagv glEdgeFlagv = ((EdgeFlagv)(GL.GetDelegateForExtensionMethod("glEdgeFlagv", typeof(EdgeFlagv)))) ?? new EdgeFlagv(Imports.EdgeFlagv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ElementPointerAPPLE(Enums.APPLE_element_array type, System.IntPtr pointer);
        public static ElementPointerAPPLE glElementPointerAPPLE = ((ElementPointerAPPLE)(GL.GetDelegateForExtensionMethod("glElementPointerAPPLE", typeof(ElementPointerAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ElementPointerATI(Enums.ATI_element_array type, System.IntPtr pointer);
        public static ElementPointerATI glElementPointerATI = ((ElementPointerATI)(GL.GetDelegateForExtensionMethod("glElementPointerATI", typeof(ElementPointerATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Enable(Enums.EnableCap cap);
        public static Enable glEnable = ((Enable)(GL.GetDelegateForExtensionMethod("glEnable", typeof(Enable)))) ?? new Enable(Imports.Enable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableClientState(Enums.EnableCap array);
        public static EnableClientState glEnableClientState = ((EnableClientState)(GL.GetDelegateForExtensionMethod("glEnableClientState", typeof(EnableClientState)))) ?? new EnableClientState(Imports.EnableClientState);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableIndexedEXT(Enums.EXT_draw_buffers2 target, GLuint index);
        public static EnableIndexedEXT glEnableIndexedEXT = ((EnableIndexedEXT)(GL.GetDelegateForExtensionMethod("glEnableIndexedEXT", typeof(EnableIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableVariantClientStateEXT(GLuint id);
        public static EnableVariantClientStateEXT glEnableVariantClientStateEXT = ((EnableVariantClientStateEXT)(GL.GetDelegateForExtensionMethod("glEnableVariantClientStateEXT", typeof(EnableVariantClientStateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableVertexAttribArray(GLuint index);
        public static EnableVertexAttribArray glEnableVertexAttribArray = ((EnableVertexAttribArray)(GL.GetDelegateForExtensionMethod("glEnableVertexAttribArray", typeof(EnableVertexAttribArray)))) ?? new EnableVertexAttribArray(Imports.EnableVertexAttribArray);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableVertexAttribArrayARB(GLuint index);
        public static EnableVertexAttribArrayARB glEnableVertexAttribArrayARB = ((EnableVertexAttribArrayARB)(GL.GetDelegateForExtensionMethod("glEnableVertexAttribArrayARB", typeof(EnableVertexAttribArrayARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void End();
        public static End glEnd = ((End)(GL.GetDelegateForExtensionMethod("glEnd", typeof(End)))) ?? new End(Imports.End);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndFragmentShaderATI();
        public static EndFragmentShaderATI glEndFragmentShaderATI = ((EndFragmentShaderATI)(GL.GetDelegateForExtensionMethod("glEndFragmentShaderATI", typeof(EndFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndList();
        public static EndList glEndList = ((EndList)(GL.GetDelegateForExtensionMethod("glEndList", typeof(EndList)))) ?? new EndList(Imports.EndList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndOcclusionQueryNV();
        public static EndOcclusionQueryNV glEndOcclusionQueryNV = ((EndOcclusionQueryNV)(GL.GetDelegateForExtensionMethod("glEndOcclusionQueryNV", typeof(EndOcclusionQueryNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndQuery(Enums.VERSION_1_5 target);
        public static EndQuery glEndQuery = ((EndQuery)(GL.GetDelegateForExtensionMethod("glEndQuery", typeof(EndQuery)))) ?? new EndQuery(Imports.EndQuery);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndQueryARB(Enums.ARB_occlusion_query target);
        public static EndQueryARB glEndQueryARB = ((EndQueryARB)(GL.GetDelegateForExtensionMethod("glEndQueryARB", typeof(EndQueryARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndTransformFeedbackNV();
        public static EndTransformFeedbackNV glEndTransformFeedbackNV = ((EndTransformFeedbackNV)(GL.GetDelegateForExtensionMethod("glEndTransformFeedbackNV", typeof(EndTransformFeedbackNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndVertexShaderEXT();
        public static EndVertexShaderEXT glEndVertexShaderEXT = ((EndVertexShaderEXT)(GL.GetDelegateForExtensionMethod("glEndVertexShaderEXT", typeof(EndVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1d(GLdouble u);
        public static EvalCoord1d glEvalCoord1d = ((EvalCoord1d)(GL.GetDelegateForExtensionMethod("glEvalCoord1d", typeof(EvalCoord1d)))) ?? new EvalCoord1d(Imports.EvalCoord1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1dv(System.IntPtr u);
        public static EvalCoord1dv glEvalCoord1dv = ((EvalCoord1dv)(GL.GetDelegateForExtensionMethod("glEvalCoord1dv", typeof(EvalCoord1dv)))) ?? new EvalCoord1dv(Imports.EvalCoord1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1f(GLfloat u);
        public static EvalCoord1f glEvalCoord1f = ((EvalCoord1f)(GL.GetDelegateForExtensionMethod("glEvalCoord1f", typeof(EvalCoord1f)))) ?? new EvalCoord1f(Imports.EvalCoord1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1fv(System.IntPtr u);
        public static EvalCoord1fv glEvalCoord1fv = ((EvalCoord1fv)(GL.GetDelegateForExtensionMethod("glEvalCoord1fv", typeof(EvalCoord1fv)))) ?? new EvalCoord1fv(Imports.EvalCoord1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2d(GLdouble u, GLdouble v);
        public static EvalCoord2d glEvalCoord2d = ((EvalCoord2d)(GL.GetDelegateForExtensionMethod("glEvalCoord2d", typeof(EvalCoord2d)))) ?? new EvalCoord2d(Imports.EvalCoord2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2dv(System.IntPtr u);
        public static EvalCoord2dv glEvalCoord2dv = ((EvalCoord2dv)(GL.GetDelegateForExtensionMethod("glEvalCoord2dv", typeof(EvalCoord2dv)))) ?? new EvalCoord2dv(Imports.EvalCoord2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2f(GLfloat u, GLfloat v);
        public static EvalCoord2f glEvalCoord2f = ((EvalCoord2f)(GL.GetDelegateForExtensionMethod("glEvalCoord2f", typeof(EvalCoord2f)))) ?? new EvalCoord2f(Imports.EvalCoord2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2fv(System.IntPtr u);
        public static EvalCoord2fv glEvalCoord2fv = ((EvalCoord2fv)(GL.GetDelegateForExtensionMethod("glEvalCoord2fv", typeof(EvalCoord2fv)))) ?? new EvalCoord2fv(Imports.EvalCoord2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalMapsNV(Enums.NV_evaluators target, Enums.NV_evaluators mode);
        public static EvalMapsNV glEvalMapsNV = ((EvalMapsNV)(GL.GetDelegateForExtensionMethod("glEvalMapsNV", typeof(EvalMapsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalMesh1(Enums.MeshMode1 mode, GLint i1, GLint i2);
        public static EvalMesh1 glEvalMesh1 = ((EvalMesh1)(GL.GetDelegateForExtensionMethod("glEvalMesh1", typeof(EvalMesh1)))) ?? new EvalMesh1(Imports.EvalMesh1);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalMesh2(Enums.MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2);
        public static EvalMesh2 glEvalMesh2 = ((EvalMesh2)(GL.GetDelegateForExtensionMethod("glEvalMesh2", typeof(EvalMesh2)))) ?? new EvalMesh2(Imports.EvalMesh2);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalPoint1(GLint i);
        public static EvalPoint1 glEvalPoint1 = ((EvalPoint1)(GL.GetDelegateForExtensionMethod("glEvalPoint1", typeof(EvalPoint1)))) ?? new EvalPoint1(Imports.EvalPoint1);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalPoint2(GLint i, GLint j);
        public static EvalPoint2 glEvalPoint2 = ((EvalPoint2)(GL.GetDelegateForExtensionMethod("glEvalPoint2", typeof(EvalPoint2)))) ?? new EvalPoint2(Imports.EvalPoint2);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ExecuteProgramNV(Enums.NV_vertex_program target, GLuint id, System.IntPtr @params);
        public static ExecuteProgramNV glExecuteProgramNV = ((ExecuteProgramNV)(GL.GetDelegateForExtensionMethod("glExecuteProgramNV", typeof(ExecuteProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ExtractComponentEXT(GLuint res, GLuint src, GLuint num);
        public static ExtractComponentEXT glExtractComponentEXT = ((ExtractComponentEXT)(GL.GetDelegateForExtensionMethod("glExtractComponentEXT", typeof(ExtractComponentEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FeedbackBuffer(GLsizei size, Enums.FeedbackType type, [In, Out()] System.IntPtr buffer);
        public static FeedbackBuffer glFeedbackBuffer = ((FeedbackBuffer)(GL.GetDelegateForExtensionMethod("glFeedbackBuffer", typeof(FeedbackBuffer)))) ?? new FeedbackBuffer(Imports.FeedbackBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinalCombinerInputNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners input, Enums.NV_register_combiners mapping, Enums.NV_register_combiners componentUsage);
        public static FinalCombinerInputNV glFinalCombinerInputNV = ((FinalCombinerInputNV)(GL.GetDelegateForExtensionMethod("glFinalCombinerInputNV", typeof(FinalCombinerInputNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Finish();
        public static Finish glFinish = ((Finish)(GL.GetDelegateForExtensionMethod("glFinish", typeof(Finish)))) ?? new Finish(Imports.Finish);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint FinishAsyncSGIX([In, Out()] System.IntPtr markerp);
        public static FinishAsyncSGIX glFinishAsyncSGIX = ((FinishAsyncSGIX)(GL.GetDelegateForExtensionMethod("glFinishAsyncSGIX", typeof(FinishAsyncSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishFenceAPPLE(GLuint fence);
        public static FinishFenceAPPLE glFinishFenceAPPLE = ((FinishFenceAPPLE)(GL.GetDelegateForExtensionMethod("glFinishFenceAPPLE", typeof(FinishFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishFenceNV(GLuint fence);
        public static FinishFenceNV glFinishFenceNV = ((FinishFenceNV)(GL.GetDelegateForExtensionMethod("glFinishFenceNV", typeof(FinishFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishObjectAPPLE(Enums.APPLE_fence @object, GLint name);
        public static FinishObjectAPPLE glFinishObjectAPPLE = ((FinishObjectAPPLE)(GL.GetDelegateForExtensionMethod("glFinishObjectAPPLE", typeof(FinishObjectAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishTextureSUNX();
        public static FinishTextureSUNX glFinishTextureSUNX = ((FinishTextureSUNX)(GL.GetDelegateForExtensionMethod("glFinishTextureSUNX", typeof(FinishTextureSUNX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Flush();
        public static Flush glFlush = ((Flush)(GL.GetDelegateForExtensionMethod("glFlush", typeof(Flush)))) ?? new Flush(Imports.Flush);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushMappedBufferRangeAPPLE(Enums.APPLE_flush_buffer_range target, GLintptr offset, GLsizeiptr size);
        public static FlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE = ((FlushMappedBufferRangeAPPLE)(GL.GetDelegateForExtensionMethod("glFlushMappedBufferRangeAPPLE", typeof(FlushMappedBufferRangeAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushPixelDataRangeNV(Enums.NV_pixel_data_range target);
        public static FlushPixelDataRangeNV glFlushPixelDataRangeNV = ((FlushPixelDataRangeNV)(GL.GetDelegateForExtensionMethod("glFlushPixelDataRangeNV", typeof(FlushPixelDataRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushRasterSGIX();
        public static FlushRasterSGIX glFlushRasterSGIX = ((FlushRasterSGIX)(GL.GetDelegateForExtensionMethod("glFlushRasterSGIX", typeof(FlushRasterSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushVertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer);
        public static FlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE = ((FlushVertexArrayRangeAPPLE)(GL.GetDelegateForExtensionMethod("glFlushVertexArrayRangeAPPLE", typeof(FlushVertexArrayRangeAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushVertexArrayRangeNV();
        public static FlushVertexArrayRangeNV glFlushVertexArrayRangeNV = ((FlushVertexArrayRangeNV)(GL.GetDelegateForExtensionMethod("glFlushVertexArrayRangeNV", typeof(FlushVertexArrayRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordd(GLdouble coord);
        public static FogCoordd glFogCoordd = ((FogCoordd)(GL.GetDelegateForExtensionMethod("glFogCoordd", typeof(FogCoordd)))) ?? new FogCoordd(Imports.FogCoordd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoorddEXT(GLdouble coord);
        public static FogCoorddEXT glFogCoorddEXT = ((FogCoorddEXT)(GL.GetDelegateForExtensionMethod("glFogCoorddEXT", typeof(FogCoorddEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoorddv(System.IntPtr coord);
        public static FogCoorddv glFogCoorddv = ((FogCoorddv)(GL.GetDelegateForExtensionMethod("glFogCoorddv", typeof(FogCoorddv)))) ?? new FogCoorddv(Imports.FogCoorddv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoorddvEXT(System.IntPtr coord);
        public static FogCoorddvEXT glFogCoorddvEXT = ((FogCoorddvEXT)(GL.GetDelegateForExtensionMethod("glFogCoorddvEXT", typeof(FogCoorddvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordf(GLfloat coord);
        public static FogCoordf glFogCoordf = ((FogCoordf)(GL.GetDelegateForExtensionMethod("glFogCoordf", typeof(FogCoordf)))) ?? new FogCoordf(Imports.FogCoordf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordfEXT(GLfloat coord);
        public static FogCoordfEXT glFogCoordfEXT = ((FogCoordfEXT)(GL.GetDelegateForExtensionMethod("glFogCoordfEXT", typeof(FogCoordfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordfv(System.IntPtr coord);
        public static FogCoordfv glFogCoordfv = ((FogCoordfv)(GL.GetDelegateForExtensionMethod("glFogCoordfv", typeof(FogCoordfv)))) ?? new FogCoordfv(Imports.FogCoordfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordfvEXT(System.IntPtr coord);
        public static FogCoordfvEXT glFogCoordfvEXT = ((FogCoordfvEXT)(GL.GetDelegateForExtensionMethod("glFogCoordfvEXT", typeof(FogCoordfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordhNV(GLhalfNV fog);
        public static FogCoordhNV glFogCoordhNV = ((FogCoordhNV)(GL.GetDelegateForExtensionMethod("glFogCoordhNV", typeof(FogCoordhNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordhvNV(System.IntPtr fog);
        public static FogCoordhvNV glFogCoordhvNV = ((FogCoordhvNV)(GL.GetDelegateForExtensionMethod("glFogCoordhvNV", typeof(FogCoordhvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordPointer(Enums.VERSION_1_4 type, GLsizei stride, System.IntPtr pointer);
        public static FogCoordPointer glFogCoordPointer = ((FogCoordPointer)(GL.GetDelegateForExtensionMethod("glFogCoordPointer", typeof(FogCoordPointer)))) ?? new FogCoordPointer(Imports.FogCoordPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordPointerEXT(Enums.EXT_fog_coord type, GLsizei stride, System.IntPtr pointer);
        public static FogCoordPointerEXT glFogCoordPointerEXT = ((FogCoordPointerEXT)(GL.GetDelegateForExtensionMethod("glFogCoordPointerEXT", typeof(FogCoordPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordPointerListIBM(Enums.IBM_vertex_array_lists type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static FogCoordPointerListIBM glFogCoordPointerListIBM = ((FogCoordPointerListIBM)(GL.GetDelegateForExtensionMethod("glFogCoordPointerListIBM", typeof(FogCoordPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogf(Enums.FogParameter pname, GLfloat param);
        public static Fogf glFogf = ((Fogf)(GL.GetDelegateForExtensionMethod("glFogf", typeof(Fogf)))) ?? new Fogf(Imports.Fogf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogFuncSGIS(GLsizei n, System.IntPtr points);
        public static FogFuncSGIS glFogFuncSGIS = ((FogFuncSGIS)(GL.GetDelegateForExtensionMethod("glFogFuncSGIS", typeof(FogFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogfv(Enums.FogParameter pname, System.IntPtr @params);
        public static Fogfv glFogfv = ((Fogfv)(GL.GetDelegateForExtensionMethod("glFogfv", typeof(Fogfv)))) ?? new Fogfv(Imports.Fogfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogi(Enums.FogParameter pname, GLint param);
        public static Fogi glFogi = ((Fogi)(GL.GetDelegateForExtensionMethod("glFogi", typeof(Fogi)))) ?? new Fogi(Imports.Fogi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogiv(Enums.FogParameter pname, System.IntPtr @params);
        public static Fogiv glFogiv = ((Fogiv)(GL.GetDelegateForExtensionMethod("glFogiv", typeof(Fogiv)))) ?? new Fogiv(Imports.Fogiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentColorMaterialSGIX(Enums.MaterialFace face, Enums.MaterialParameter mode);
        public static FragmentColorMaterialSGIX glFragmentColorMaterialSGIX = ((FragmentColorMaterialSGIX)(GL.GetDelegateForExtensionMethod("glFragmentColorMaterialSGIX", typeof(FragmentColorMaterialSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightfSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLfloat param);
        public static FragmentLightfSGIX glFragmentLightfSGIX = ((FragmentLightfSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightfSGIX", typeof(FragmentLightfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightfvSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, System.IntPtr @params);
        public static FragmentLightfvSGIX glFragmentLightfvSGIX = ((FragmentLightfvSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightfvSGIX", typeof(FragmentLightfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightiSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, GLint param);
        public static FragmentLightiSGIX glFragmentLightiSGIX = ((FragmentLightiSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightiSGIX", typeof(FragmentLightiSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightivSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, System.IntPtr @params);
        public static FragmentLightivSGIX glFragmentLightivSGIX = ((FragmentLightivSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightivSGIX", typeof(FragmentLightivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModelfSGIX(Enums.FragmentLightModelParameterSGIX pname, GLfloat param);
        public static FragmentLightModelfSGIX glFragmentLightModelfSGIX = ((FragmentLightModelfSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightModelfSGIX", typeof(FragmentLightModelfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModelfvSGIX(Enums.FragmentLightModelParameterSGIX pname, System.IntPtr @params);
        public static FragmentLightModelfvSGIX glFragmentLightModelfvSGIX = ((FragmentLightModelfvSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightModelfvSGIX", typeof(FragmentLightModelfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModeliSGIX(Enums.FragmentLightModelParameterSGIX pname, GLint param);
        public static FragmentLightModeliSGIX glFragmentLightModeliSGIX = ((FragmentLightModeliSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightModeliSGIX", typeof(FragmentLightModeliSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModelivSGIX(Enums.FragmentLightModelParameterSGIX pname, System.IntPtr @params);
        public static FragmentLightModelivSGIX glFragmentLightModelivSGIX = ((FragmentLightModelivSGIX)(GL.GetDelegateForExtensionMethod("glFragmentLightModelivSGIX", typeof(FragmentLightModelivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialfSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param);
        public static FragmentMaterialfSGIX glFragmentMaterialfSGIX = ((FragmentMaterialfSGIX)(GL.GetDelegateForExtensionMethod("glFragmentMaterialfSGIX", typeof(FragmentMaterialfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        public static FragmentMaterialfvSGIX glFragmentMaterialfvSGIX = ((FragmentMaterialfvSGIX)(GL.GetDelegateForExtensionMethod("glFragmentMaterialfvSGIX", typeof(FragmentMaterialfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialiSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param);
        public static FragmentMaterialiSGIX glFragmentMaterialiSGIX = ((FragmentMaterialiSGIX)(GL.GetDelegateForExtensionMethod("glFragmentMaterialiSGIX", typeof(FragmentMaterialiSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        public static FragmentMaterialivSGIX glFragmentMaterialivSGIX = ((FragmentMaterialivSGIX)(GL.GetDelegateForExtensionMethod("glFragmentMaterialivSGIX", typeof(FragmentMaterialivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferRenderbufferEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object renderbuffertarget, GLuint renderbuffer);
        public static FramebufferRenderbufferEXT glFramebufferRenderbufferEXT = ((FramebufferRenderbufferEXT)(GL.GetDelegateForExtensionMethod("glFramebufferRenderbufferEXT", typeof(FramebufferRenderbufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTexture1DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level);
        public static FramebufferTexture1DEXT glFramebufferTexture1DEXT = ((FramebufferTexture1DEXT)(GL.GetDelegateForExtensionMethod("glFramebufferTexture1DEXT", typeof(FramebufferTexture1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTexture2DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level);
        public static FramebufferTexture2DEXT glFramebufferTexture2DEXT = ((FramebufferTexture2DEXT)(GL.GetDelegateForExtensionMethod("glFramebufferTexture2DEXT", typeof(FramebufferTexture2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTexture3DEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level, GLint zoffset);
        public static FramebufferTexture3DEXT glFramebufferTexture3DEXT = ((FramebufferTexture3DEXT)(GL.GetDelegateForExtensionMethod("glFramebufferTexture3DEXT", typeof(FramebufferTexture3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTextureEXT(Enums.NV_geometry_program4 target, Enums.NV_geometry_program4 attachment, GLuint texture, GLint level);
        public static FramebufferTextureEXT glFramebufferTextureEXT = ((FramebufferTextureEXT)(GL.GetDelegateForExtensionMethod("glFramebufferTextureEXT", typeof(FramebufferTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTextureFaceEXT(Enums.NV_geometry_program4 target, Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, Enums.TextureTarget face);
        public static FramebufferTextureFaceEXT glFramebufferTextureFaceEXT = ((FramebufferTextureFaceEXT)(GL.GetDelegateForExtensionMethod("glFramebufferTextureFaceEXT", typeof(FramebufferTextureFaceEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTextureLayerEXT(Enums.NV_geometry_program4 target, Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, GLint layer);
        public static FramebufferTextureLayerEXT glFramebufferTextureLayerEXT = ((FramebufferTextureLayerEXT)(GL.GetDelegateForExtensionMethod("glFramebufferTextureLayerEXT", typeof(FramebufferTextureLayerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FrameZoomSGIX(GLint factor);
        public static FrameZoomSGIX glFrameZoomSGIX = ((FrameZoomSGIX)(GL.GetDelegateForExtensionMethod("glFrameZoomSGIX", typeof(FrameZoomSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FreeObjectBufferATI(GLuint buffer);
        public static FreeObjectBufferATI glFreeObjectBufferATI = ((FreeObjectBufferATI)(GL.GetDelegateForExtensionMethod("glFreeObjectBufferATI", typeof(FreeObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FrontFace(Enums.FrontFaceDirection mode);
        public static FrontFace glFrontFace = ((FrontFace)(GL.GetDelegateForExtensionMethod("glFrontFace", typeof(FrontFace)))) ?? new FrontFace(Imports.FrontFace);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        public static Frustum glFrustum = ((Frustum)(GL.GetDelegateForExtensionMethod("glFrustum", typeof(Frustum)))) ?? new Frustum(Imports.Frustum);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenAsyncMarkersSGIX(GLsizei range);
        public static GenAsyncMarkersSGIX glGenAsyncMarkersSGIX = ((GenAsyncMarkersSGIX)(GL.GetDelegateForExtensionMethod("glGenAsyncMarkersSGIX", typeof(GenAsyncMarkersSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenBuffers(GLsizei n, [In, Out()] System.IntPtr buffers);
        public static GenBuffers glGenBuffers = ((GenBuffers)(GL.GetDelegateForExtensionMethod("glGenBuffers", typeof(GenBuffers)))) ?? new GenBuffers(Imports.GenBuffers);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenBuffersARB(GLsizei n, [In, Out()] System.IntPtr buffers);
        public static GenBuffersARB glGenBuffersARB = ((GenBuffersARB)(GL.GetDelegateForExtensionMethod("glGenBuffersARB", typeof(GenBuffersARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenerateMipmapEXT(Enums.EXT_framebuffer_object target);
        public static GenerateMipmapEXT glGenerateMipmapEXT = ((GenerateMipmapEXT)(GL.GetDelegateForExtensionMethod("glGenerateMipmapEXT", typeof(GenerateMipmapEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenFencesAPPLE(GLsizei n, [In, Out()] System.IntPtr fences);
        public static GenFencesAPPLE glGenFencesAPPLE = ((GenFencesAPPLE)(GL.GetDelegateForExtensionMethod("glGenFencesAPPLE", typeof(GenFencesAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenFencesNV(GLsizei n, [In, Out()] System.IntPtr fences);
        public static GenFencesNV glGenFencesNV = ((GenFencesNV)(GL.GetDelegateForExtensionMethod("glGenFencesNV", typeof(GenFencesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenFragmentShadersATI(GLuint range);
        public static GenFragmentShadersATI glGenFragmentShadersATI = ((GenFragmentShadersATI)(GL.GetDelegateForExtensionMethod("glGenFragmentShadersATI", typeof(GenFragmentShadersATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenFramebuffersEXT(GLsizei n, [In, Out()] System.IntPtr framebuffers);
        public static GenFramebuffersEXT glGenFramebuffersEXT = ((GenFramebuffersEXT)(GL.GetDelegateForExtensionMethod("glGenFramebuffersEXT", typeof(GenFramebuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenLists(GLsizei range);
        public static GenLists glGenLists = ((GenLists)(GL.GetDelegateForExtensionMethod("glGenLists", typeof(GenLists)))) ?? new GenLists(Imports.GenLists);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenOcclusionQueriesNV(GLsizei n, [In, Out()] System.IntPtr ids);
        public static GenOcclusionQueriesNV glGenOcclusionQueriesNV = ((GenOcclusionQueriesNV)(GL.GetDelegateForExtensionMethod("glGenOcclusionQueriesNV", typeof(GenOcclusionQueriesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenProgramsARB(GLsizei n, [In, Out()] System.IntPtr programs);
        public static GenProgramsARB glGenProgramsARB = ((GenProgramsARB)(GL.GetDelegateForExtensionMethod("glGenProgramsARB", typeof(GenProgramsARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenProgramsNV(GLsizei n, [In, Out()] System.IntPtr programs);
        public static GenProgramsNV glGenProgramsNV = ((GenProgramsNV)(GL.GetDelegateForExtensionMethod("glGenProgramsNV", typeof(GenProgramsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenQueries(GLsizei n, [In, Out()] System.IntPtr ids);
        public static GenQueries glGenQueries = ((GenQueries)(GL.GetDelegateForExtensionMethod("glGenQueries", typeof(GenQueries)))) ?? new GenQueries(Imports.GenQueries);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenQueriesARB(GLsizei n, [In, Out()] System.IntPtr ids);
        public static GenQueriesARB glGenQueriesARB = ((GenQueriesARB)(GL.GetDelegateForExtensionMethod("glGenQueriesARB", typeof(GenQueriesARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenRenderbuffersEXT(GLsizei n, [In, Out()] System.IntPtr renderbuffers);
        public static GenRenderbuffersEXT glGenRenderbuffersEXT = ((GenRenderbuffersEXT)(GL.GetDelegateForExtensionMethod("glGenRenderbuffersEXT", typeof(GenRenderbuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenSymbolsEXT(Enums.EXT_vertex_shader datatype, Enums.EXT_vertex_shader storagetype, Enums.EXT_vertex_shader range, GLuint components);
        public static GenSymbolsEXT glGenSymbolsEXT = ((GenSymbolsEXT)(GL.GetDelegateForExtensionMethod("glGenSymbolsEXT", typeof(GenSymbolsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenTextures(GLsizei n, [In, Out()] System.IntPtr textures);
        public static GenTextures glGenTextures = ((GenTextures)(GL.GetDelegateForExtensionMethod("glGenTextures", typeof(GenTextures)))) ?? new GenTextures(Imports.GenTextures);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenTexturesEXT(GLsizei n, [In, Out()] System.IntPtr textures);
        public static GenTexturesEXT glGenTexturesEXT = ((GenTexturesEXT)(GL.GetDelegateForExtensionMethod("glGenTexturesEXT", typeof(GenTexturesEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenVertexArraysAPPLE(GLsizei n, [In, Out()] System.IntPtr arrays);
        public static GenVertexArraysAPPLE glGenVertexArraysAPPLE = ((GenVertexArraysAPPLE)(GL.GetDelegateForExtensionMethod("glGenVertexArraysAPPLE", typeof(GenVertexArraysAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenVertexShadersEXT(GLuint range);
        public static GenVertexShadersEXT glGenVertexShadersEXT = ((GenVertexShadersEXT)(GL.GetDelegateForExtensionMethod("glGenVertexShadersEXT", typeof(GenVertexShadersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveAttrib glGetActiveAttrib = ((GetActiveAttrib)(GL.GetDelegateForExtensionMethod("glGetActiveAttrib", typeof(GetActiveAttrib)))) ?? new GetActiveAttrib(Imports.GetActiveAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveAttribARB glGetActiveAttribARB = ((GetActiveAttribARB)(GL.GetDelegateForExtensionMethod("glGetActiveAttribARB", typeof(GetActiveAttribARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveUniform glGetActiveUniform = ((GetActiveUniform)(GL.GetDelegateForExtensionMethod("glGetActiveUniform", typeof(GetActiveUniform)))) ?? new GetActiveUniform(Imports.GetActiveUniform);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveUniformARB glGetActiveUniformARB = ((GetActiveUniformARB)(GL.GetDelegateForExtensionMethod("glGetActiveUniformARB", typeof(GetActiveUniformARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveVaryingNV glGetActiveVaryingNV = ((GetActiveVaryingNV)(GL.GetDelegateForExtensionMethod("glGetActiveVaryingNV", typeof(GetActiveVaryingNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetArrayObjectfvATI(Enums.EnableCap array, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetArrayObjectfvATI glGetArrayObjectfvATI = ((GetArrayObjectfvATI)(GL.GetDelegateForExtensionMethod("glGetArrayObjectfvATI", typeof(GetArrayObjectfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetArrayObjectivATI(Enums.EnableCap array, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetArrayObjectivATI glGetArrayObjectivATI = ((GetArrayObjectivATI)(GL.GetDelegateForExtensionMethod("glGetArrayObjectivATI", typeof(GetArrayObjectivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj);
        public static GetAttachedObjectsARB glGetAttachedObjectsARB = ((GetAttachedObjectsARB)(GL.GetDelegateForExtensionMethod("glGetAttachedObjectsARB", typeof(GetAttachedObjectsARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetAttachedShaders(GLuint program, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj);
        public static GetAttachedShaders glGetAttachedShaders = ((GetAttachedShaders)(GL.GetDelegateForExtensionMethod("glGetAttachedShaders", typeof(GetAttachedShaders)))) ?? new GetAttachedShaders(Imports.GetAttachedShaders);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetAttribLocation(GLuint program, string name);
        public static GetAttribLocation glGetAttribLocation = ((GetAttribLocation)(GL.GetDelegateForExtensionMethod("glGetAttribLocation", typeof(GetAttribLocation)))) ?? new GetAttribLocation(Imports.GetAttribLocation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetAttribLocationARB(GLhandleARB programObj, string name);
        public static GetAttribLocationARB glGetAttribLocationARB = ((GetAttribLocationARB)(GL.GetDelegateForExtensionMethod("glGetAttribLocationARB", typeof(GetAttribLocationARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBooleanIndexedvEXT(Enums.EXT_draw_buffers2 target, GLuint index, [In, Out()] System.IntPtr data);
        public static GetBooleanIndexedvEXT glGetBooleanIndexedvEXT = ((GetBooleanIndexedvEXT)(GL.GetDelegateForExtensionMethod("glGetBooleanIndexedvEXT", typeof(GetBooleanIndexedvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBooleanv(Enums.GetPName pname, [In, Out()] System.IntPtr @params);
        public static GetBooleanv glGetBooleanv = ((GetBooleanv)(GL.GetDelegateForExtensionMethod("glGetBooleanv", typeof(GetBooleanv)))) ?? new GetBooleanv(Imports.GetBooleanv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferParameteriv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params);
        public static GetBufferParameteriv glGetBufferParameteriv = ((GetBufferParameteriv)(GL.GetDelegateForExtensionMethod("glGetBufferParameteriv", typeof(GetBufferParameteriv)))) ?? new GetBufferParameteriv(Imports.GetBufferParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferParameterivARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object pname, [In, Out()] System.IntPtr @params);
        public static GetBufferParameterivARB glGetBufferParameterivARB = ((GetBufferParameterivARB)(GL.GetDelegateForExtensionMethod("glGetBufferParameterivARB", typeof(GetBufferParameterivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferPointerv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params);
        public static GetBufferPointerv glGetBufferPointerv = ((GetBufferPointerv)(GL.GetDelegateForExtensionMethod("glGetBufferPointerv", typeof(GetBufferPointerv)))) ?? new GetBufferPointerv(Imports.GetBufferPointerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferPointervARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object pname, [In, Out()] System.IntPtr @params);
        public static GetBufferPointervARB glGetBufferPointervARB = ((GetBufferPointervARB)(GL.GetDelegateForExtensionMethod("glGetBufferPointervARB", typeof(GetBufferPointervARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, [In, Out()] System.IntPtr data);
        public static GetBufferSubData glGetBufferSubData = ((GetBufferSubData)(GL.GetDelegateForExtensionMethod("glGetBufferSubData", typeof(GetBufferSubData)))) ?? new GetBufferSubData(Imports.GetBufferSubData);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferSubDataARB(Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, [In, Out()] System.IntPtr data);
        public static GetBufferSubDataARB glGetBufferSubDataARB = ((GetBufferSubDataARB)(GL.GetDelegateForExtensionMethod("glGetBufferSubDataARB", typeof(GetBufferSubDataARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetClipPlane(Enums.ClipPlaneName plane, [In, Out()] System.IntPtr equation);
        public static GetClipPlane glGetClipPlane = ((GetClipPlane)(GL.GetDelegateForExtensionMethod("glGetClipPlane", typeof(GetClipPlane)))) ?? new GetClipPlane(Imports.GetClipPlane);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTable(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr table);
        public static GetColorTable glGetColorTable = ((GetColorTable)(GL.GetDelegateForExtensionMethod("glGetColorTable", typeof(GetColorTable)))) ?? new GetColorTable(Imports.GetColorTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableEXT(Enums.EXT_paletted_texture target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr data);
        public static GetColorTableEXT glGetColorTableEXT = ((GetColorTableEXT)(GL.GetDelegateForExtensionMethod("glGetColorTableEXT", typeof(GetColorTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterfv glGetColorTableParameterfv = ((GetColorTableParameterfv)(GL.GetDelegateForExtensionMethod("glGetColorTableParameterfv", typeof(GetColorTableParameterfv)))) ?? new GetColorTableParameterfv(Imports.GetColorTableParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterfvEXT(Enums.EXT_paletted_texture target, Enums.EXT_paletted_texture pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterfvEXT glGetColorTableParameterfvEXT = ((GetColorTableParameterfvEXT)(GL.GetDelegateForExtensionMethod("glGetColorTableParameterfvEXT", typeof(GetColorTableParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterfvSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterfvSGI glGetColorTableParameterfvSGI = ((GetColorTableParameterfvSGI)(GL.GetDelegateForExtensionMethod("glGetColorTableParameterfvSGI", typeof(GetColorTableParameterfvSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameteriv glGetColorTableParameteriv = ((GetColorTableParameteriv)(GL.GetDelegateForExtensionMethod("glGetColorTableParameteriv", typeof(GetColorTableParameteriv)))) ?? new GetColorTableParameteriv(Imports.GetColorTableParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterivEXT(Enums.EXT_paletted_texture target, Enums.EXT_paletted_texture pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterivEXT glGetColorTableParameterivEXT = ((GetColorTableParameterivEXT)(GL.GetDelegateForExtensionMethod("glGetColorTableParameterivEXT", typeof(GetColorTableParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterivSGI(Enums.ColorTableTargetSGI target, Enums.GetColorTableParameterPNameSGI pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterivSGI glGetColorTableParameterivSGI = ((GetColorTableParameterivSGI)(GL.GetDelegateForExtensionMethod("glGetColorTableParameterivSGI", typeof(GetColorTableParameterivSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableSGI(Enums.ColorTableTargetSGI target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr table);
        public static GetColorTableSGI glGetColorTableSGI = ((GetColorTableSGI)(GL.GetDelegateForExtensionMethod("glGetColorTableSGI", typeof(GetColorTableSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerInputParameterfvNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV = ((GetCombinerInputParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetCombinerInputParameterfvNV", typeof(GetCombinerInputParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerInputParameterivNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerInputParameterivNV glGetCombinerInputParameterivNV = ((GetCombinerInputParameterivNV)(GL.GetDelegateForExtensionMethod("glGetCombinerInputParameterivNV", typeof(GetCombinerInputParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerOutputParameterfvNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV = ((GetCombinerOutputParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetCombinerOutputParameterfvNV", typeof(GetCombinerOutputParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerOutputParameterivNV(Enums.NV_register_combiners stage, Enums.NV_register_combiners portion, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV = ((GetCombinerOutputParameterivNV)(GL.GetDelegateForExtensionMethod("glGetCombinerOutputParameterivNV", typeof(GetCombinerOutputParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerStageParameterfvNV(Enums.NV_register_combiners2 stage, Enums.NV_register_combiners2 pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV = ((GetCombinerStageParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetCombinerStageParameterfvNV", typeof(GetCombinerStageParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCompressedTexImage(Enums.TextureTarget target, GLint level, [In, Out()] System.IntPtr img);
        public static GetCompressedTexImage glGetCompressedTexImage = ((GetCompressedTexImage)(GL.GetDelegateForExtensionMethod("glGetCompressedTexImage", typeof(GetCompressedTexImage)))) ?? new GetCompressedTexImage(Imports.GetCompressedTexImage);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCompressedTexImageARB(Enums.TextureTarget target, GLint level, [In, Out()] System.IntPtr img);
        public static GetCompressedTexImageARB glGetCompressedTexImageARB = ((GetCompressedTexImageARB)(GL.GetDelegateForExtensionMethod("glGetCompressedTexImageARB", typeof(GetCompressedTexImageARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr image);
        public static GetConvolutionFilter glGetConvolutionFilter = ((GetConvolutionFilter)(GL.GetDelegateForExtensionMethod("glGetConvolutionFilter", typeof(GetConvolutionFilter)))) ?? new GetConvolutionFilter(Imports.GetConvolutionFilter);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionFilterEXT(Enums.ConvolutionTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr image);
        public static GetConvolutionFilterEXT glGetConvolutionFilterEXT = ((GetConvolutionFilterEXT)(GL.GetDelegateForExtensionMethod("glGetConvolutionFilterEXT", typeof(GetConvolutionFilterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameterfv glGetConvolutionParameterfv = ((GetConvolutionParameterfv)(GL.GetDelegateForExtensionMethod("glGetConvolutionParameterfv", typeof(GetConvolutionParameterfv)))) ?? new GetConvolutionParameterfv(Imports.GetConvolutionParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameterfvEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT = ((GetConvolutionParameterfvEXT)(GL.GetDelegateForExtensionMethod("glGetConvolutionParameterfvEXT", typeof(GetConvolutionParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameteriv glGetConvolutionParameteriv = ((GetConvolutionParameteriv)(GL.GetDelegateForExtensionMethod("glGetConvolutionParameteriv", typeof(GetConvolutionParameteriv)))) ?? new GetConvolutionParameteriv(Imports.GetConvolutionParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameterivEXT(Enums.ConvolutionTargetEXT target, Enums.ConvolutionParameterEXT pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameterivEXT glGetConvolutionParameterivEXT = ((GetConvolutionParameterivEXT)(GL.GetDelegateForExtensionMethod("glGetConvolutionParameterivEXT", typeof(GetConvolutionParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetDetailTexFuncSGIS(Enums.TextureTarget target, [In, Out()] System.IntPtr points);
        public static GetDetailTexFuncSGIS glGetDetailTexFuncSGIS = ((GetDetailTexFuncSGIS)(GL.GetDelegateForExtensionMethod("glGetDetailTexFuncSGIS", typeof(GetDetailTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetDoublev(Enums.GetPName pname, [In, Out()] System.IntPtr @params);
        public static GetDoublev glGetDoublev = ((GetDoublev)(GL.GetDelegateForExtensionMethod("glGetDoublev", typeof(GetDoublev)))) ?? new GetDoublev(Imports.GetDoublev);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLenum GetError();
        public static GetError glGetError = ((GetError)(GL.GetDelegateForExtensionMethod("glGetError", typeof(GetError)))) ?? new GetError(Imports.GetError);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFenceivNV(GLuint fence, Enums.NV_fence pname, [In, Out()] System.IntPtr @params);
        public static GetFenceivNV glGetFenceivNV = ((GetFenceivNV)(GL.GetDelegateForExtensionMethod("glGetFenceivNV", typeof(GetFenceivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFinalCombinerInputParameterfvNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params);
        public static GetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV = ((GetFinalCombinerInputParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetFinalCombinerInputParameterfvNV", typeof(GetFinalCombinerInputParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFinalCombinerInputParameterivNV(Enums.NV_register_combiners variable, Enums.NV_register_combiners pname, [In, Out()] System.IntPtr @params);
        public static GetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV = ((GetFinalCombinerInputParameterivNV)(GL.GetDelegateForExtensionMethod("glGetFinalCombinerInputParameterivNV", typeof(GetFinalCombinerInputParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFloatv(Enums.GetPName pname, [In, Out()] System.IntPtr @params);
        public static GetFloatv glGetFloatv = ((GetFloatv)(GL.GetDelegateForExtensionMethod("glGetFloatv", typeof(GetFloatv)))) ?? new GetFloatv(Imports.GetFloatv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFogFuncSGIS([In, Out()] System.IntPtr points);
        public static GetFogFuncSGIS glGetFogFuncSGIS = ((GetFogFuncSGIS)(GL.GetDelegateForExtensionMethod("glGetFogFuncSGIS", typeof(GetFogFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetFragDataLocationEXT(GLuint program, string name);
        public static GetFragDataLocationEXT glGetFragDataLocationEXT = ((GetFragDataLocationEXT)(GL.GetDelegateForExtensionMethod("glGetFragDataLocationEXT", typeof(GetFragDataLocationEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentLightfvSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentLightfvSGIX glGetFragmentLightfvSGIX = ((GetFragmentLightfvSGIX)(GL.GetDelegateForExtensionMethod("glGetFragmentLightfvSGIX", typeof(GetFragmentLightfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentLightivSGIX(Enums.SGIX_fragment_lighting light, Enums.SGIX_fragment_lighting pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentLightivSGIX glGetFragmentLightivSGIX = ((GetFragmentLightivSGIX)(GL.GetDelegateForExtensionMethod("glGetFragmentLightivSGIX", typeof(GetFragmentLightivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentMaterialfvSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX = ((GetFragmentMaterialfvSGIX)(GL.GetDelegateForExtensionMethod("glGetFragmentMaterialfvSGIX", typeof(GetFragmentMaterialfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentMaterialivSGIX(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX = ((GetFragmentMaterialivSGIX)(GL.GetDelegateForExtensionMethod("glGetFragmentMaterialivSGIX", typeof(GetFragmentMaterialivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFramebufferAttachmentParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object attachment, Enums.EXT_framebuffer_object pname, [In, Out()] System.IntPtr @params);
        public static GetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT = ((GetFramebufferAttachmentParameterivEXT)(GL.GetDelegateForExtensionMethod("glGetFramebufferAttachmentParameterivEXT", typeof(GetFramebufferAttachmentParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLhandleARB GetHandleARB(Enums.ARB_shader_objects pname);
        public static GetHandleARB glGetHandleARB = ((GetHandleARB)(GL.GetDelegateForExtensionMethod("glGetHandleARB", typeof(GetHandleARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogram(Enums.VERSION_1_2 target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values);
        public static GetHistogram glGetHistogram = ((GetHistogram)(GL.GetDelegateForExtensionMethod("glGetHistogram", typeof(GetHistogram)))) ?? new GetHistogram(Imports.GetHistogram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramEXT(Enums.HistogramTargetEXT target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values);
        public static GetHistogramEXT glGetHistogramEXT = ((GetHistogramEXT)(GL.GetDelegateForExtensionMethod("glGetHistogramEXT", typeof(GetHistogramEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameterfv glGetHistogramParameterfv = ((GetHistogramParameterfv)(GL.GetDelegateForExtensionMethod("glGetHistogramParameterfv", typeof(GetHistogramParameterfv)))) ?? new GetHistogramParameterfv(Imports.GetHistogramParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameterfvEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameterfvEXT glGetHistogramParameterfvEXT = ((GetHistogramParameterfvEXT)(GL.GetDelegateForExtensionMethod("glGetHistogramParameterfvEXT", typeof(GetHistogramParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameteriv glGetHistogramParameteriv = ((GetHistogramParameteriv)(GL.GetDelegateForExtensionMethod("glGetHistogramParameteriv", typeof(GetHistogramParameteriv)))) ?? new GetHistogramParameteriv(Imports.GetHistogramParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameterivEXT(Enums.HistogramTargetEXT target, Enums.GetHistogramParameterPNameEXT pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameterivEXT glGetHistogramParameterivEXT = ((GetHistogramParameterivEXT)(GL.GetDelegateForExtensionMethod("glGetHistogramParameterivEXT", typeof(GetHistogramParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetImageTransformParameterfvHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, [In, Out()] System.IntPtr @params);
        public static GetImageTransformParameterfvHP glGetImageTransformParameterfvHP = ((GetImageTransformParameterfvHP)(GL.GetDelegateForExtensionMethod("glGetImageTransformParameterfvHP", typeof(GetImageTransformParameterfvHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetImageTransformParameterivHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, [In, Out()] System.IntPtr @params);
        public static GetImageTransformParameterivHP glGetImageTransformParameterivHP = ((GetImageTransformParameterivHP)(GL.GetDelegateForExtensionMethod("glGetImageTransformParameterivHP", typeof(GetImageTransformParameterivHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog);
        public static GetInfoLogARB glGetInfoLogARB = ((GetInfoLogARB)(GL.GetDelegateForExtensionMethod("glGetInfoLogARB", typeof(GetInfoLogARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetInstrumentsSGIX();
        public static GetInstrumentsSGIX glGetInstrumentsSGIX = ((GetInstrumentsSGIX)(GL.GetDelegateForExtensionMethod("glGetInstrumentsSGIX", typeof(GetInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetIntegerIndexedvEXT(Enums.EXT_draw_buffers2 target, GLuint index, [In, Out()] System.IntPtr data);
        public static GetIntegerIndexedvEXT glGetIntegerIndexedvEXT = ((GetIntegerIndexedvEXT)(GL.GetDelegateForExtensionMethod("glGetIntegerIndexedvEXT", typeof(GetIntegerIndexedvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetIntegerv(Enums.GetPName pname, [In, Out()] System.IntPtr @params);
        public static GetIntegerv glGetIntegerv = ((GetIntegerv)(GL.GetDelegateForExtensionMethod("glGetIntegerv", typeof(GetIntegerv)))) ?? new GetIntegerv(Imports.GetIntegerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInvariantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetInvariantBooleanvEXT glGetInvariantBooleanvEXT = ((GetInvariantBooleanvEXT)(GL.GetDelegateForExtensionMethod("glGetInvariantBooleanvEXT", typeof(GetInvariantBooleanvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInvariantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetInvariantFloatvEXT glGetInvariantFloatvEXT = ((GetInvariantFloatvEXT)(GL.GetDelegateForExtensionMethod("glGetInvariantFloatvEXT", typeof(GetInvariantFloatvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInvariantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetInvariantIntegervEXT glGetInvariantIntegervEXT = ((GetInvariantIntegervEXT)(GL.GetDelegateForExtensionMethod("glGetInvariantIntegervEXT", typeof(GetInvariantIntegervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLightfv(Enums.LightName light, Enums.LightParameter pname, [In, Out()] System.IntPtr @params);
        public static GetLightfv glGetLightfv = ((GetLightfv)(GL.GetDelegateForExtensionMethod("glGetLightfv", typeof(GetLightfv)))) ?? new GetLightfv(Imports.GetLightfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLightiv(Enums.LightName light, Enums.LightParameter pname, [In, Out()] System.IntPtr @params);
        public static GetLightiv glGetLightiv = ((GetLightiv)(GL.GetDelegateForExtensionMethod("glGetLightiv", typeof(GetLightiv)))) ?? new GetLightiv(Imports.GetLightiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, [In, Out()] System.IntPtr @params);
        public static GetListParameterfvSGIX glGetListParameterfvSGIX = ((GetListParameterfvSGIX)(GL.GetDelegateForExtensionMethod("glGetListParameterfvSGIX", typeof(GetListParameterfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetListParameterivSGIX(GLuint list, Enums.ListParameterName pname, [In, Out()] System.IntPtr @params);
        public static GetListParameterivSGIX glGetListParameterivSGIX = ((GetListParameterivSGIX)(GL.GetDelegateForExtensionMethod("glGetListParameterivSGIX", typeof(GetListParameterivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLocalConstantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT = ((GetLocalConstantBooleanvEXT)(GL.GetDelegateForExtensionMethod("glGetLocalConstantBooleanvEXT", typeof(GetLocalConstantBooleanvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLocalConstantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT = ((GetLocalConstantFloatvEXT)(GL.GetDelegateForExtensionMethod("glGetLocalConstantFloatvEXT", typeof(GetLocalConstantFloatvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLocalConstantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT = ((GetLocalConstantIntegervEXT)(GL.GetDelegateForExtensionMethod("glGetLocalConstantIntegervEXT", typeof(GetLocalConstantIntegervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapAttribParameterfvNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params);
        public static GetMapAttribParameterfvNV glGetMapAttribParameterfvNV = ((GetMapAttribParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetMapAttribParameterfvNV", typeof(GetMapAttribParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapAttribParameterivNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params);
        public static GetMapAttribParameterivNV glGetMapAttribParameterivNV = ((GetMapAttribParameterivNV)(GL.GetDelegateForExtensionMethod("glGetMapAttribParameterivNV", typeof(GetMapAttribParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapControlPointsNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, [MarshalAs(UnmanagedType.Bool)] bool packed, [In, Out()] System.IntPtr points);
        public static GetMapControlPointsNV glGetMapControlPointsNV = ((GetMapControlPointsNV)(GL.GetDelegateForExtensionMethod("glGetMapControlPointsNV", typeof(GetMapControlPointsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, [In, Out()] System.IntPtr v);
        public static GetMapdv glGetMapdv = ((GetMapdv)(GL.GetDelegateForExtensionMethod("glGetMapdv", typeof(GetMapdv)))) ?? new GetMapdv(Imports.GetMapdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, [In, Out()] System.IntPtr v);
        public static GetMapfv glGetMapfv = ((GetMapfv)(GL.GetDelegateForExtensionMethod("glGetMapfv", typeof(GetMapfv)))) ?? new GetMapfv(Imports.GetMapfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, [In, Out()] System.IntPtr v);
        public static GetMapiv glGetMapiv = ((GetMapiv)(GL.GetDelegateForExtensionMethod("glGetMapiv", typeof(GetMapiv)))) ?? new GetMapiv(Imports.GetMapiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapParameterfvNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params);
        public static GetMapParameterfvNV glGetMapParameterfvNV = ((GetMapParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetMapParameterfvNV", typeof(GetMapParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapParameterivNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, [In, Out()] System.IntPtr @params);
        public static GetMapParameterivNV glGetMapParameterivNV = ((GetMapParameterivNV)(GL.GetDelegateForExtensionMethod("glGetMapParameterivNV", typeof(GetMapParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params);
        public static GetMaterialfv glGetMaterialfv = ((GetMaterialfv)(GL.GetDelegateForExtensionMethod("glGetMaterialfv", typeof(GetMaterialfv)))) ?? new GetMaterialfv(Imports.GetMaterialfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, [In, Out()] System.IntPtr @params);
        public static GetMaterialiv glGetMaterialiv = ((GetMaterialiv)(GL.GetDelegateForExtensionMethod("glGetMaterialiv", typeof(GetMaterialiv)))) ?? new GetMaterialiv(Imports.GetMaterialiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmax(Enums.VERSION_1_2 target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values);
        public static GetMinmax glGetMinmax = ((GetMinmax)(GL.GetDelegateForExtensionMethod("glGetMinmax", typeof(GetMinmax)))) ?? new GetMinmax(Imports.GetMinmax);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxEXT(Enums.MinmaxTargetEXT target, [MarshalAs(UnmanagedType.Bool)] bool reset, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr values);
        public static GetMinmaxEXT glGetMinmaxEXT = ((GetMinmaxEXT)(GL.GetDelegateForExtensionMethod("glGetMinmaxEXT", typeof(GetMinmaxEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameterfv glGetMinmaxParameterfv = ((GetMinmaxParameterfv)(GL.GetDelegateForExtensionMethod("glGetMinmaxParameterfv", typeof(GetMinmaxParameterfv)))) ?? new GetMinmaxParameterfv(Imports.GetMinmaxParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameterfvEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT = ((GetMinmaxParameterfvEXT)(GL.GetDelegateForExtensionMethod("glGetMinmaxParameterfvEXT", typeof(GetMinmaxParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameteriv glGetMinmaxParameteriv = ((GetMinmaxParameteriv)(GL.GetDelegateForExtensionMethod("glGetMinmaxParameteriv", typeof(GetMinmaxParameteriv)))) ?? new GetMinmaxParameteriv(Imports.GetMinmaxParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameterivEXT(Enums.MinmaxTargetEXT target, Enums.GetMinmaxParameterPNameEXT pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameterivEXT glGetMinmaxParameterivEXT = ((GetMinmaxParameterivEXT)(GL.GetDelegateForExtensionMethod("glGetMinmaxParameterivEXT", typeof(GetMinmaxParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectBufferfvATI(GLuint buffer, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetObjectBufferfvATI glGetObjectBufferfvATI = ((GetObjectBufferfvATI)(GL.GetDelegateForExtensionMethod("glGetObjectBufferfvATI", typeof(GetObjectBufferfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectBufferivATI(GLuint buffer, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetObjectBufferivATI glGetObjectBufferivATI = ((GetObjectBufferivATI)(GL.GetDelegateForExtensionMethod("glGetObjectBufferivATI", typeof(GetObjectBufferivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectParameterfvARB(GLhandleARB obj, Enums.ARB_shader_objects pname, [In, Out()] System.IntPtr @params);
        public static GetObjectParameterfvARB glGetObjectParameterfvARB = ((GetObjectParameterfvARB)(GL.GetDelegateForExtensionMethod("glGetObjectParameterfvARB", typeof(GetObjectParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectParameterivARB(GLhandleARB obj, Enums.ARB_shader_objects pname, [In, Out()] System.IntPtr @params);
        public static GetObjectParameterivARB glGetObjectParameterivARB = ((GetObjectParameterivARB)(GL.GetDelegateForExtensionMethod("glGetObjectParameterivARB", typeof(GetObjectParameterivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetOcclusionQueryivNV(GLuint id, Enums.NV_occlusion_query pname, [In, Out()] System.IntPtr @params);
        public static GetOcclusionQueryivNV glGetOcclusionQueryivNV = ((GetOcclusionQueryivNV)(GL.GetDelegateForExtensionMethod("glGetOcclusionQueryivNV", typeof(GetOcclusionQueryivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetOcclusionQueryuivNV(GLuint id, Enums.NV_occlusion_query pname, [In, Out()] System.IntPtr @params);
        public static GetOcclusionQueryuivNV glGetOcclusionQueryuivNV = ((GetOcclusionQueryuivNV)(GL.GetDelegateForExtensionMethod("glGetOcclusionQueryuivNV", typeof(GetOcclusionQueryuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelMapfv(Enums.PixelMap map, [In, Out()] System.IntPtr values);
        public static GetPixelMapfv glGetPixelMapfv = ((GetPixelMapfv)(GL.GetDelegateForExtensionMethod("glGetPixelMapfv", typeof(GetPixelMapfv)))) ?? new GetPixelMapfv(Imports.GetPixelMapfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelMapuiv(Enums.PixelMap map, [In, Out()] System.IntPtr values);
        public static GetPixelMapuiv glGetPixelMapuiv = ((GetPixelMapuiv)(GL.GetDelegateForExtensionMethod("glGetPixelMapuiv", typeof(GetPixelMapuiv)))) ?? new GetPixelMapuiv(Imports.GetPixelMapuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelMapusv(Enums.PixelMap map, [In, Out()] System.IntPtr values);
        public static GetPixelMapusv glGetPixelMapusv = ((GetPixelMapusv)(GL.GetDelegateForExtensionMethod("glGetPixelMapusv", typeof(GetPixelMapusv)))) ?? new GetPixelMapusv(Imports.GetPixelMapusv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, [In, Out()] System.IntPtr @params);
        public static GetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS = ((GetPixelTexGenParameterfvSGIS)(GL.GetDelegateForExtensionMethod("glGetPixelTexGenParameterfvSGIS", typeof(GetPixelTexGenParameterfvSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, [In, Out()] System.IntPtr @params);
        public static GetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS = ((GetPixelTexGenParameterivSGIS)(GL.GetDelegateForExtensionMethod("glGetPixelTexGenParameterivSGIS", typeof(GetPixelTexGenParameterivSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPointerv(Enums.GetPointervPName pname, [In, Out()] System.IntPtr @params);
        public static GetPointerv glGetPointerv = ((GetPointerv)(GL.GetDelegateForExtensionMethod("glGetPointerv", typeof(GetPointerv)))) ?? new GetPointerv(Imports.GetPointerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPointervEXT(Enums.GetPointervPName pname, [In, Out()] System.IntPtr @params);
        public static GetPointervEXT glGetPointervEXT = ((GetPointervEXT)(GL.GetDelegateForExtensionMethod("glGetPointervEXT", typeof(GetPointervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPolygonStipple([In, Out()] System.IntPtr mask);
        public static GetPolygonStipple glGetPolygonStipple = ((GetPolygonStipple)(GL.GetDelegateForExtensionMethod("glGetPolygonStipple", typeof(GetPolygonStipple)))) ?? new GetPolygonStipple(Imports.GetPolygonStipple);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterdvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB = ((GetProgramEnvParameterdvARB)(GL.GetDelegateForExtensionMethod("glGetProgramEnvParameterdvARB", typeof(GetProgramEnvParameterdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterfvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB = ((GetProgramEnvParameterfvARB)(GL.GetDelegateForExtensionMethod("glGetProgramEnvParameterfvARB", typeof(GetProgramEnvParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterIivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV = ((GetProgramEnvParameterIivNV)(GL.GetDelegateForExtensionMethod("glGetProgramEnvParameterIivNV", typeof(GetProgramEnvParameterIivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterIuivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV = ((GetProgramEnvParameterIuivNV)(GL.GetDelegateForExtensionMethod("glGetProgramEnvParameterIuivNV", typeof(GetProgramEnvParameterIuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramInfoLog(GLuint program, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog);
        public static GetProgramInfoLog glGetProgramInfoLog = ((GetProgramInfoLog)(GL.GetDelegateForExtensionMethod("glGetProgramInfoLog", typeof(GetProgramInfoLog)))) ?? new GetProgramInfoLog(Imports.GetProgramInfoLog);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params);
        public static GetProgramiv glGetProgramiv = ((GetProgramiv)(GL.GetDelegateForExtensionMethod("glGetProgramiv", typeof(GetProgramiv)))) ?? new GetProgramiv(Imports.GetProgramiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramivARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetProgramivARB glGetProgramivARB = ((GetProgramivARB)(GL.GetDelegateForExtensionMethod("glGetProgramivARB", typeof(GetProgramivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramivNV(GLuint id, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetProgramivNV glGetProgramivNV = ((GetProgramivNV)(GL.GetDelegateForExtensionMethod("glGetProgramivNV", typeof(GetProgramivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterdvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB = ((GetProgramLocalParameterdvARB)(GL.GetDelegateForExtensionMethod("glGetProgramLocalParameterdvARB", typeof(GetProgramLocalParameterdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterfvARB(Enums.ARB_vertex_program target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB = ((GetProgramLocalParameterfvARB)(GL.GetDelegateForExtensionMethod("glGetProgramLocalParameterfvARB", typeof(GetProgramLocalParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterIivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV = ((GetProgramLocalParameterIivNV)(GL.GetDelegateForExtensionMethod("glGetProgramLocalParameterIivNV", typeof(GetProgramLocalParameterIivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterIuivNV(Enums.NV_gpu_program4 target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV = ((GetProgramLocalParameterIuivNV)(GL.GetDelegateForExtensionMethod("glGetProgramLocalParameterIuivNV", typeof(GetProgramLocalParameterIuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params);
        public static GetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV = ((GetProgramNamedParameterdvNV)(GL.GetDelegateForExtensionMethod("glGetProgramNamedParameterdvNV", typeof(GetProgramNamedParameterdvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params);
        public static GetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV = ((GetProgramNamedParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetProgramNamedParameterfvNV", typeof(GetProgramNamedParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramParameterdvNV(Enums.NV_vertex_program target, GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetProgramParameterdvNV glGetProgramParameterdvNV = ((GetProgramParameterdvNV)(GL.GetDelegateForExtensionMethod("glGetProgramParameterdvNV", typeof(GetProgramParameterdvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramParameterfvNV(Enums.NV_vertex_program target, GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetProgramParameterfvNV glGetProgramParameterfvNV = ((GetProgramParameterfvNV)(GL.GetDelegateForExtensionMethod("glGetProgramParameterfvNV", typeof(GetProgramParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramStringARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @string);
        public static GetProgramStringARB glGetProgramStringARB = ((GetProgramStringARB)(GL.GetDelegateForExtensionMethod("glGetProgramStringARB", typeof(GetProgramStringARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramStringNV(GLuint id, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr program);
        public static GetProgramStringNV glGetProgramStringNV = ((GetProgramStringNV)(GL.GetDelegateForExtensionMethod("glGetProgramStringNV", typeof(GetProgramStringNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params);
        public static GetQueryiv glGetQueryiv = ((GetQueryiv)(GL.GetDelegateForExtensionMethod("glGetQueryiv", typeof(GetQueryiv)))) ?? new GetQueryiv(Imports.GetQueryiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryivARB(Enums.ARB_occlusion_query target, Enums.ARB_occlusion_query pname, [In, Out()] System.IntPtr @params);
        public static GetQueryivARB glGetQueryivARB = ((GetQueryivARB)(GL.GetDelegateForExtensionMethod("glGetQueryivARB", typeof(GetQueryivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjecti64vEXT(GLuint id, Enums.EXT_timer_query pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjecti64vEXT glGetQueryObjecti64vEXT = ((GetQueryObjecti64vEXT)(GL.GetDelegateForExtensionMethod("glGetQueryObjecti64vEXT", typeof(GetQueryObjecti64vEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectiv glGetQueryObjectiv = ((GetQueryObjectiv)(GL.GetDelegateForExtensionMethod("glGetQueryObjectiv", typeof(GetQueryObjectiv)))) ?? new GetQueryObjectiv(Imports.GetQueryObjectiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectivARB(GLuint id, Enums.ARB_occlusion_query pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectivARB glGetQueryObjectivARB = ((GetQueryObjectivARB)(GL.GetDelegateForExtensionMethod("glGetQueryObjectivARB", typeof(GetQueryObjectivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectui64vEXT(GLuint id, Enums.EXT_timer_query pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectui64vEXT glGetQueryObjectui64vEXT = ((GetQueryObjectui64vEXT)(GL.GetDelegateForExtensionMethod("glGetQueryObjectui64vEXT", typeof(GetQueryObjectui64vEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectuiv glGetQueryObjectuiv = ((GetQueryObjectuiv)(GL.GetDelegateForExtensionMethod("glGetQueryObjectuiv", typeof(GetQueryObjectuiv)))) ?? new GetQueryObjectuiv(Imports.GetQueryObjectuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectuivARB(GLuint id, Enums.ARB_occlusion_query pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectuivARB glGetQueryObjectuivARB = ((GetQueryObjectuivARB)(GL.GetDelegateForExtensionMethod("glGetQueryObjectuivARB", typeof(GetQueryObjectuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetRenderbufferParameterivEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object pname, [In, Out()] System.IntPtr @params);
        public static GetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT = ((GetRenderbufferParameterivEXT)(GL.GetDelegateForExtensionMethod("glGetRenderbufferParameterivEXT", typeof(GetRenderbufferParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span);
        public static GetSeparableFilter glGetSeparableFilter = ((GetSeparableFilter)(GL.GetDelegateForExtensionMethod("glGetSeparableFilter", typeof(GetSeparableFilter)))) ?? new GetSeparableFilter(Imports.GetSeparableFilter);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetSeparableFilterEXT(Enums.SeparableTargetEXT target, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span);
        public static GetSeparableFilterEXT glGetSeparableFilterEXT = ((GetSeparableFilterEXT)(GL.GetDelegateForExtensionMethod("glGetSeparableFilterEXT", typeof(GetSeparableFilterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderInfoLog(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog);
        public static GetShaderInfoLog glGetShaderInfoLog = ((GetShaderInfoLog)(GL.GetDelegateForExtensionMethod("glGetShaderInfoLog", typeof(GetShaderInfoLog)))) ?? new GetShaderInfoLog(Imports.GetShaderInfoLog);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params);
        public static GetShaderiv glGetShaderiv = ((GetShaderiv)(GL.GetDelegateForExtensionMethod("glGetShaderiv", typeof(GetShaderiv)))) ?? new GetShaderiv(Imports.GetShaderiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderSource(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source);
        public static GetShaderSource glGetShaderSource = ((GetShaderSource)(GL.GetDelegateForExtensionMethod("glGetShaderSource", typeof(GetShaderSource)))) ?? new GetShaderSource(Imports.GetShaderSource);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source);
        public static GetShaderSourceARB glGetShaderSourceARB = ((GetShaderSourceARB)(GL.GetDelegateForExtensionMethod("glGetShaderSourceARB", typeof(GetShaderSourceARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetSharpenTexFuncSGIS(Enums.TextureTarget target, [In, Out()] System.IntPtr points);
        public static GetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS = ((GetSharpenTexFuncSGIS)(GL.GetDelegateForExtensionMethod("glGetSharpenTexFuncSGIS", typeof(GetSharpenTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr GetString(Enums.StringName name);
        public static GetString glGetString = ((GetString)(GL.GetDelegateForExtensionMethod("glGetString", typeof(GetString)))) ?? new GetString(Imports.GetString);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexBumpParameterfvATI(Enums.ATI_envmap_bumpmap pname, [In, Out()] System.IntPtr param);
        public static GetTexBumpParameterfvATI glGetTexBumpParameterfvATI = ((GetTexBumpParameterfvATI)(GL.GetDelegateForExtensionMethod("glGetTexBumpParameterfvATI", typeof(GetTexBumpParameterfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexBumpParameterivATI(Enums.ATI_envmap_bumpmap pname, [In, Out()] System.IntPtr param);
        public static GetTexBumpParameterivATI glGetTexBumpParameterivATI = ((GetTexBumpParameterivATI)(GL.GetDelegateForExtensionMethod("glGetTexBumpParameterivATI", typeof(GetTexBumpParameterivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexEnvfv glGetTexEnvfv = ((GetTexEnvfv)(GL.GetDelegateForExtensionMethod("glGetTexEnvfv", typeof(GetTexEnvfv)))) ?? new GetTexEnvfv(Imports.GetTexEnvfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexEnviv glGetTexEnviv = ((GetTexEnviv)(GL.GetDelegateForExtensionMethod("glGetTexEnviv", typeof(GetTexEnviv)))) ?? new GetTexEnviv(Imports.GetTexEnviv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexFilterFuncSGIS(Enums.TextureTarget target, Enums.SGIS_texture_filter4 filter, [In, Out()] System.IntPtr weights);
        public static GetTexFilterFuncSGIS glGetTexFilterFuncSGIS = ((GetTexFilterFuncSGIS)(GL.GetDelegateForExtensionMethod("glGetTexFilterFuncSGIS", typeof(GetTexFilterFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexGendv glGetTexGendv = ((GetTexGendv)(GL.GetDelegateForExtensionMethod("glGetTexGendv", typeof(GetTexGendv)))) ?? new GetTexGendv(Imports.GetTexGendv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexGenfv glGetTexGenfv = ((GetTexGenfv)(GL.GetDelegateForExtensionMethod("glGetTexGenfv", typeof(GetTexGenfv)))) ?? new GetTexGenfv(Imports.GetTexGenfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexGeniv glGetTexGeniv = ((GetTexGeniv)(GL.GetDelegateForExtensionMethod("glGetTexGeniv", typeof(GetTexGeniv)))) ?? new GetTexGeniv(Imports.GetTexGeniv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr pixels);
        public static GetTexImage glGetTexImage = ((GetTexImage)(GL.GetDelegateForExtensionMethod("glGetTexImage", typeof(GetTexImage)))) ?? new GetTexImage(Imports.GetTexImage);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexLevelParameterfv glGetTexLevelParameterfv = ((GetTexLevelParameterfv)(GL.GetDelegateForExtensionMethod("glGetTexLevelParameterfv", typeof(GetTexLevelParameterfv)))) ?? new GetTexLevelParameterfv(Imports.GetTexLevelParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexLevelParameteriv glGetTexLevelParameteriv = ((GetTexLevelParameteriv)(GL.GetDelegateForExtensionMethod("glGetTexLevelParameteriv", typeof(GetTexLevelParameteriv)))) ?? new GetTexLevelParameteriv(Imports.GetTexLevelParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameterfv glGetTexParameterfv = ((GetTexParameterfv)(GL.GetDelegateForExtensionMethod("glGetTexParameterfv", typeof(GetTexParameterfv)))) ?? new GetTexParameterfv(Imports.GetTexParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameterIivEXT(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameterIivEXT glGetTexParameterIivEXT = ((GetTexParameterIivEXT)(GL.GetDelegateForExtensionMethod("glGetTexParameterIivEXT", typeof(GetTexParameterIivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameterIuivEXT(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameterIuivEXT glGetTexParameterIuivEXT = ((GetTexParameterIuivEXT)(GL.GetDelegateForExtensionMethod("glGetTexParameterIuivEXT", typeof(GetTexParameterIuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameteriv glGetTexParameteriv = ((GetTexParameteriv)(GL.GetDelegateForExtensionMethod("glGetTexParameteriv", typeof(GetTexParameteriv)))) ?? new GetTexParameteriv(Imports.GetTexParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTrackMatrixivNV(Enums.NV_vertex_program target, GLuint address, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetTrackMatrixivNV glGetTrackMatrixivNV = ((GetTrackMatrixivNV)(GL.GetDelegateForExtensionMethod("glGetTrackMatrixivNV", typeof(GetTrackMatrixivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, [In, Out()] System.IntPtr location);
        public static GetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV = ((GetTransformFeedbackVaryingNV)(GL.GetDelegateForExtensionMethod("glGetTransformFeedbackVaryingNV", typeof(GetTransformFeedbackVaryingNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetUniformBufferSizeEXT(GLuint program, GLint location);
        public static GetUniformBufferSizeEXT glGetUniformBufferSizeEXT = ((GetUniformBufferSizeEXT)(GL.GetDelegateForExtensionMethod("glGetUniformBufferSizeEXT", typeof(GetUniformBufferSizeEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformfv(GLuint program, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformfv glGetUniformfv = ((GetUniformfv)(GL.GetDelegateForExtensionMethod("glGetUniformfv", typeof(GetUniformfv)))) ?? new GetUniformfv(Imports.GetUniformfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformfvARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformfvARB glGetUniformfvARB = ((GetUniformfvARB)(GL.GetDelegateForExtensionMethod("glGetUniformfvARB", typeof(GetUniformfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformiv(GLuint program, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformiv glGetUniformiv = ((GetUniformiv)(GL.GetDelegateForExtensionMethod("glGetUniformiv", typeof(GetUniformiv)))) ?? new GetUniformiv(Imports.GetUniformiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformivARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformivARB glGetUniformivARB = ((GetUniformivARB)(GL.GetDelegateForExtensionMethod("glGetUniformivARB", typeof(GetUniformivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetUniformLocation(GLuint program, string name);
        public static GetUniformLocation glGetUniformLocation = ((GetUniformLocation)(GL.GetDelegateForExtensionMethod("glGetUniformLocation", typeof(GetUniformLocation)))) ?? new GetUniformLocation(Imports.GetUniformLocation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetUniformLocationARB(GLhandleARB programObj, string name);
        public static GetUniformLocationARB glGetUniformLocationARB = ((GetUniformLocationARB)(GL.GetDelegateForExtensionMethod("glGetUniformLocationARB", typeof(GetUniformLocationARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLintptr GetUniformOffsetEXT(GLuint program, GLint location);
        public static GetUniformOffsetEXT glGetUniformOffsetEXT = ((GetUniformOffsetEXT)(GL.GetDelegateForExtensionMethod("glGetUniformOffsetEXT", typeof(GetUniformOffsetEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformuivEXT(GLuint program, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformuivEXT glGetUniformuivEXT = ((GetUniformuivEXT)(GL.GetDelegateForExtensionMethod("glGetUniformuivEXT", typeof(GetUniformuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantArrayObjectfvATI(GLuint id, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI = ((GetVariantArrayObjectfvATI)(GL.GetDelegateForExtensionMethod("glGetVariantArrayObjectfvATI", typeof(GetVariantArrayObjectfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantArrayObjectivATI(GLuint id, Enums.ATI_vertex_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetVariantArrayObjectivATI glGetVariantArrayObjectivATI = ((GetVariantArrayObjectivATI)(GL.GetDelegateForExtensionMethod("glGetVariantArrayObjectivATI", typeof(GetVariantArrayObjectivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantBooleanvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetVariantBooleanvEXT glGetVariantBooleanvEXT = ((GetVariantBooleanvEXT)(GL.GetDelegateForExtensionMethod("glGetVariantBooleanvEXT", typeof(GetVariantBooleanvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantFloatvEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetVariantFloatvEXT glGetVariantFloatvEXT = ((GetVariantFloatvEXT)(GL.GetDelegateForExtensionMethod("glGetVariantFloatvEXT", typeof(GetVariantFloatvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantIntegervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetVariantIntegervEXT glGetVariantIntegervEXT = ((GetVariantIntegervEXT)(GL.GetDelegateForExtensionMethod("glGetVariantIntegervEXT", typeof(GetVariantIntegervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantPointervEXT(GLuint id, Enums.EXT_vertex_shader value, [In, Out()] System.IntPtr data);
        public static GetVariantPointervEXT glGetVariantPointervEXT = ((GetVariantPointervEXT)(GL.GetDelegateForExtensionMethod("glGetVariantPointervEXT", typeof(GetVariantPointervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetVaryingLocationNV(GLuint program, string name);
        public static GetVaryingLocationNV glGetVaryingLocationNV = ((GetVaryingLocationNV)(GL.GetDelegateForExtensionMethod("glGetVaryingLocationNV", typeof(GetVaryingLocationNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribArrayObjectfvATI(GLuint index, Enums.ATI_vertex_attrib_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI = ((GetVertexAttribArrayObjectfvATI)(GL.GetDelegateForExtensionMethod("glGetVertexAttribArrayObjectfvATI", typeof(GetVertexAttribArrayObjectfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribArrayObjectivATI(GLuint index, Enums.ATI_vertex_attrib_array_object pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI = ((GetVertexAttribArrayObjectivATI)(GL.GetDelegateForExtensionMethod("glGetVertexAttribArrayObjectivATI", typeof(GetVertexAttribArrayObjectivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribdv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribdv glGetVertexAttribdv = ((GetVertexAttribdv)(GL.GetDelegateForExtensionMethod("glGetVertexAttribdv", typeof(GetVertexAttribdv)))) ?? new GetVertexAttribdv(Imports.GetVertexAttribdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribdvARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribdvARB glGetVertexAttribdvARB = ((GetVertexAttribdvARB)(GL.GetDelegateForExtensionMethod("glGetVertexAttribdvARB", typeof(GetVertexAttribdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribdvNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribdvNV glGetVertexAttribdvNV = ((GetVertexAttribdvNV)(GL.GetDelegateForExtensionMethod("glGetVertexAttribdvNV", typeof(GetVertexAttribdvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribfv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribfv glGetVertexAttribfv = ((GetVertexAttribfv)(GL.GetDelegateForExtensionMethod("glGetVertexAttribfv", typeof(GetVertexAttribfv)))) ?? new GetVertexAttribfv(Imports.GetVertexAttribfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribfvARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribfvARB glGetVertexAttribfvARB = ((GetVertexAttribfvARB)(GL.GetDelegateForExtensionMethod("glGetVertexAttribfvARB", typeof(GetVertexAttribfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribfvNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribfvNV glGetVertexAttribfvNV = ((GetVertexAttribfvNV)(GL.GetDelegateForExtensionMethod("glGetVertexAttribfvNV", typeof(GetVertexAttribfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribIivEXT(GLuint index, Enums.NV_vertex_program4 pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribIivEXT glGetVertexAttribIivEXT = ((GetVertexAttribIivEXT)(GL.GetDelegateForExtensionMethod("glGetVertexAttribIivEXT", typeof(GetVertexAttribIivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribIuivEXT(GLuint index, Enums.NV_vertex_program4 pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribIuivEXT glGetVertexAttribIuivEXT = ((GetVertexAttribIuivEXT)(GL.GetDelegateForExtensionMethod("glGetVertexAttribIuivEXT", typeof(GetVertexAttribIuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribiv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribiv glGetVertexAttribiv = ((GetVertexAttribiv)(GL.GetDelegateForExtensionMethod("glGetVertexAttribiv", typeof(GetVertexAttribiv)))) ?? new GetVertexAttribiv(Imports.GetVertexAttribiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribivARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribivARB glGetVertexAttribivARB = ((GetVertexAttribivARB)(GL.GetDelegateForExtensionMethod("glGetVertexAttribivARB", typeof(GetVertexAttribivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribivNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribivNV glGetVertexAttribivNV = ((GetVertexAttribivNV)(GL.GetDelegateForExtensionMethod("glGetVertexAttribivNV", typeof(GetVertexAttribivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribPointerv(GLuint index, Enums.VERSION_2_0 pname, [In, Out()] System.IntPtr pointer);
        public static GetVertexAttribPointerv glGetVertexAttribPointerv = ((GetVertexAttribPointerv)(GL.GetDelegateForExtensionMethod("glGetVertexAttribPointerv", typeof(GetVertexAttribPointerv)))) ?? new GetVertexAttribPointerv(Imports.GetVertexAttribPointerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribPointervARB(GLuint index, Enums.ARB_vertex_program pname, [In, Out()] System.IntPtr pointer);
        public static GetVertexAttribPointervARB glGetVertexAttribPointervARB = ((GetVertexAttribPointervARB)(GL.GetDelegateForExtensionMethod("glGetVertexAttribPointervARB", typeof(GetVertexAttribPointervARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribPointervNV(GLuint index, Enums.NV_vertex_program pname, [In, Out()] System.IntPtr pointer);
        public static GetVertexAttribPointervNV glGetVertexAttribPointervNV = ((GetVertexAttribPointervNV)(GL.GetDelegateForExtensionMethod("glGetVertexAttribPointervNV", typeof(GetVertexAttribPointervNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorbSUN(GLbyte factor);
        public static GlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN = ((GlobalAlphaFactorbSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactorbSUN", typeof(GlobalAlphaFactorbSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactordSUN(GLdouble factor);
        public static GlobalAlphaFactordSUN glGlobalAlphaFactordSUN = ((GlobalAlphaFactordSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactordSUN", typeof(GlobalAlphaFactordSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorfSUN(GLfloat factor);
        public static GlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN = ((GlobalAlphaFactorfSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactorfSUN", typeof(GlobalAlphaFactorfSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactoriSUN(GLint factor);
        public static GlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN = ((GlobalAlphaFactoriSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactoriSUN", typeof(GlobalAlphaFactoriSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorsSUN(GLshort factor);
        public static GlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN = ((GlobalAlphaFactorsSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactorsSUN", typeof(GlobalAlphaFactorsSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorubSUN(GLubyte factor);
        public static GlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN = ((GlobalAlphaFactorubSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactorubSUN", typeof(GlobalAlphaFactorubSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactoruiSUN(GLuint factor);
        public static GlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN = ((GlobalAlphaFactoruiSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactoruiSUN", typeof(GlobalAlphaFactoruiSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorusSUN(GLushort factor);
        public static GlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN = ((GlobalAlphaFactorusSUN)(GL.GetDelegateForExtensionMethod("glGlobalAlphaFactorusSUN", typeof(GlobalAlphaFactorusSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Hint(Enums.HintTarget target, Enums.HintMode mode);
        public static Hint glHint = ((Hint)(GL.GetDelegateForExtensionMethod("glHint", typeof(Hint)))) ?? new Hint(Imports.Hint);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void HintPGI(Enums.PGI_misc_hints target, GLint mode);
        public static HintPGI glHintPGI = ((HintPGI)(GL.GetDelegateForExtensionMethod("glHintPGI", typeof(HintPGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Histogram(Enums.VERSION_1_2 target, GLsizei width, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink);
        public static Histogram glHistogram = ((Histogram)(GL.GetDelegateForExtensionMethod("glHistogram", typeof(Histogram)))) ?? new Histogram(Imports.Histogram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void HistogramEXT(Enums.HistogramTargetEXT target, GLsizei width, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink);
        public static HistogramEXT glHistogramEXT = ((HistogramEXT)(GL.GetDelegateForExtensionMethod("glHistogramEXT", typeof(HistogramEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IglooInterfaceSGIX(GLenum pname, System.IntPtr @params);
        public static IglooInterfaceSGIX glIglooInterfaceSGIX = ((IglooInterfaceSGIX)(GL.GetDelegateForExtensionMethod("glIglooInterfaceSGIX", typeof(IglooInterfaceSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameterfHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLfloat param);
        public static ImageTransformParameterfHP glImageTransformParameterfHP = ((ImageTransformParameterfHP)(GL.GetDelegateForExtensionMethod("glImageTransformParameterfHP", typeof(ImageTransformParameterfHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameterfvHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, System.IntPtr @params);
        public static ImageTransformParameterfvHP glImageTransformParameterfvHP = ((ImageTransformParameterfvHP)(GL.GetDelegateForExtensionMethod("glImageTransformParameterfvHP", typeof(ImageTransformParameterfvHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameteriHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, GLint param);
        public static ImageTransformParameteriHP glImageTransformParameteriHP = ((ImageTransformParameteriHP)(GL.GetDelegateForExtensionMethod("glImageTransformParameteriHP", typeof(ImageTransformParameteriHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameterivHP(Enums.HP_image_transform target, Enums.HP_image_transform pname, System.IntPtr @params);
        public static ImageTransformParameterivHP glImageTransformParameterivHP = ((ImageTransformParameterivHP)(GL.GetDelegateForExtensionMethod("glImageTransformParameterivHP", typeof(ImageTransformParameterivHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexd(GLdouble c);
        public static Indexd glIndexd = ((Indexd)(GL.GetDelegateForExtensionMethod("glIndexd", typeof(Indexd)))) ?? new Indexd(Imports.Indexd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexdv(System.IntPtr c);
        public static Indexdv glIndexdv = ((Indexdv)(GL.GetDelegateForExtensionMethod("glIndexdv", typeof(Indexdv)))) ?? new Indexdv(Imports.Indexdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexf(GLfloat c);
        public static Indexf glIndexf = ((Indexf)(GL.GetDelegateForExtensionMethod("glIndexf", typeof(Indexf)))) ?? new Indexf(Imports.Indexf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexFuncEXT(Enums.EXT_index_func func, GLclampf @ref);
        public static IndexFuncEXT glIndexFuncEXT = ((IndexFuncEXT)(GL.GetDelegateForExtensionMethod("glIndexFuncEXT", typeof(IndexFuncEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexfv(System.IntPtr c);
        public static Indexfv glIndexfv = ((Indexfv)(GL.GetDelegateForExtensionMethod("glIndexfv", typeof(Indexfv)))) ?? new Indexfv(Imports.Indexfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexi(GLint c);
        public static Indexi glIndexi = ((Indexi)(GL.GetDelegateForExtensionMethod("glIndexi", typeof(Indexi)))) ?? new Indexi(Imports.Indexi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexiv(System.IntPtr c);
        public static Indexiv glIndexiv = ((Indexiv)(GL.GetDelegateForExtensionMethod("glIndexiv", typeof(Indexiv)))) ?? new Indexiv(Imports.Indexiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexMask(GLuint mask);
        public static IndexMask glIndexMask = ((IndexMask)(GL.GetDelegateForExtensionMethod("glIndexMask", typeof(IndexMask)))) ?? new IndexMask(Imports.IndexMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexMaterialEXT(Enums.MaterialFace face, Enums.EXT_index_material mode);
        public static IndexMaterialEXT glIndexMaterialEXT = ((IndexMaterialEXT)(GL.GetDelegateForExtensionMethod("glIndexMaterialEXT", typeof(IndexMaterialEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexPointer(Enums.IndexPointerType type, GLsizei stride, System.IntPtr pointer);
        public static IndexPointer glIndexPointer = ((IndexPointer)(GL.GetDelegateForExtensionMethod("glIndexPointer", typeof(IndexPointer)))) ?? new IndexPointer(Imports.IndexPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexPointerEXT(Enums.IndexPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static IndexPointerEXT glIndexPointerEXT = ((IndexPointerEXT)(GL.GetDelegateForExtensionMethod("glIndexPointerEXT", typeof(IndexPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexPointerListIBM(Enums.IndexPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static IndexPointerListIBM glIndexPointerListIBM = ((IndexPointerListIBM)(GL.GetDelegateForExtensionMethod("glIndexPointerListIBM", typeof(IndexPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexs(GLshort c);
        public static Indexs glIndexs = ((Indexs)(GL.GetDelegateForExtensionMethod("glIndexs", typeof(Indexs)))) ?? new Indexs(Imports.Indexs);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexsv(System.IntPtr c);
        public static Indexsv glIndexsv = ((Indexsv)(GL.GetDelegateForExtensionMethod("glIndexsv", typeof(Indexsv)))) ?? new Indexsv(Imports.Indexsv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexub(GLubyte c);
        public static Indexub glIndexub = ((Indexub)(GL.GetDelegateForExtensionMethod("glIndexub", typeof(Indexub)))) ?? new Indexub(Imports.Indexub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexubv(System.IntPtr c);
        public static Indexubv glIndexubv = ((Indexubv)(GL.GetDelegateForExtensionMethod("glIndexubv", typeof(Indexubv)))) ?? new Indexubv(Imports.Indexubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InitNames();
        public static InitNames glInitNames = ((InitNames)(GL.GetDelegateForExtensionMethod("glInitNames", typeof(InitNames)))) ?? new InitNames(Imports.InitNames);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InsertComponentEXT(GLuint res, GLuint src, GLuint num);
        public static InsertComponentEXT glInsertComponentEXT = ((InsertComponentEXT)(GL.GetDelegateForExtensionMethod("glInsertComponentEXT", typeof(InsertComponentEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InstrumentsBufferSGIX(GLsizei size, [In, Out()] System.IntPtr buffer);
        public static InstrumentsBufferSGIX glInstrumentsBufferSGIX = ((InstrumentsBufferSGIX)(GL.GetDelegateForExtensionMethod("glInstrumentsBufferSGIX", typeof(InstrumentsBufferSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, System.IntPtr pointer);
        public static InterleavedArrays glInterleavedArrays = ((InterleavedArrays)(GL.GetDelegateForExtensionMethod("glInterleavedArrays", typeof(InterleavedArrays)))) ?? new InterleavedArrays(Imports.InterleavedArrays);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsAsyncMarkerSGIX(GLuint marker);
        public static IsAsyncMarkerSGIX glIsAsyncMarkerSGIX = ((IsAsyncMarkerSGIX)(GL.GetDelegateForExtensionMethod("glIsAsyncMarkerSGIX", typeof(IsAsyncMarkerSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsBuffer(GLuint buffer);
        public static IsBuffer glIsBuffer = ((IsBuffer)(GL.GetDelegateForExtensionMethod("glIsBuffer", typeof(IsBuffer)))) ?? new IsBuffer(Imports.IsBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsBufferARB(GLuint buffer);
        public static IsBufferARB glIsBufferARB = ((IsBufferARB)(GL.GetDelegateForExtensionMethod("glIsBufferARB", typeof(IsBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsEnabled(Enums.EnableCap cap);
        public static IsEnabled glIsEnabled = ((IsEnabled)(GL.GetDelegateForExtensionMethod("glIsEnabled", typeof(IsEnabled)))) ?? new IsEnabled(Imports.IsEnabled);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsEnabledIndexedEXT(Enums.EXT_draw_buffers2 target, GLuint index);
        public static IsEnabledIndexedEXT glIsEnabledIndexedEXT = ((IsEnabledIndexedEXT)(GL.GetDelegateForExtensionMethod("glIsEnabledIndexedEXT", typeof(IsEnabledIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsFenceAPPLE(GLuint fence);
        public static IsFenceAPPLE glIsFenceAPPLE = ((IsFenceAPPLE)(GL.GetDelegateForExtensionMethod("glIsFenceAPPLE", typeof(IsFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsFenceNV(GLuint fence);
        public static IsFenceNV glIsFenceNV = ((IsFenceNV)(GL.GetDelegateForExtensionMethod("glIsFenceNV", typeof(IsFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsFramebufferEXT(GLuint framebuffer);
        public static IsFramebufferEXT glIsFramebufferEXT = ((IsFramebufferEXT)(GL.GetDelegateForExtensionMethod("glIsFramebufferEXT", typeof(IsFramebufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsList(GLuint list);
        public static IsList glIsList = ((IsList)(GL.GetDelegateForExtensionMethod("glIsList", typeof(IsList)))) ?? new IsList(Imports.IsList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsObjectBufferATI(GLuint buffer);
        public static IsObjectBufferATI glIsObjectBufferATI = ((IsObjectBufferATI)(GL.GetDelegateForExtensionMethod("glIsObjectBufferATI", typeof(IsObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsOcclusionQueryNV(GLuint id);
        public static IsOcclusionQueryNV glIsOcclusionQueryNV = ((IsOcclusionQueryNV)(GL.GetDelegateForExtensionMethod("glIsOcclusionQueryNV", typeof(IsOcclusionQueryNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsProgram(GLuint program);
        public static IsProgram glIsProgram = ((IsProgram)(GL.GetDelegateForExtensionMethod("glIsProgram", typeof(IsProgram)))) ?? new IsProgram(Imports.IsProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsProgramARB(GLuint program);
        public static IsProgramARB glIsProgramARB = ((IsProgramARB)(GL.GetDelegateForExtensionMethod("glIsProgramARB", typeof(IsProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsProgramNV(GLuint id);
        public static IsProgramNV glIsProgramNV = ((IsProgramNV)(GL.GetDelegateForExtensionMethod("glIsProgramNV", typeof(IsProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsQuery(GLuint id);
        public static IsQuery glIsQuery = ((IsQuery)(GL.GetDelegateForExtensionMethod("glIsQuery", typeof(IsQuery)))) ?? new IsQuery(Imports.IsQuery);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsQueryARB(GLuint id);
        public static IsQueryARB glIsQueryARB = ((IsQueryARB)(GL.GetDelegateForExtensionMethod("glIsQueryARB", typeof(IsQueryARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsRenderbufferEXT(GLuint renderbuffer);
        public static IsRenderbufferEXT glIsRenderbufferEXT = ((IsRenderbufferEXT)(GL.GetDelegateForExtensionMethod("glIsRenderbufferEXT", typeof(IsRenderbufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsShader(GLuint shader);
        public static IsShader glIsShader = ((IsShader)(GL.GetDelegateForExtensionMethod("glIsShader", typeof(IsShader)))) ?? new IsShader(Imports.IsShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsTexture(GLuint texture);
        public static IsTexture glIsTexture = ((IsTexture)(GL.GetDelegateForExtensionMethod("glIsTexture", typeof(IsTexture)))) ?? new IsTexture(Imports.IsTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsTextureEXT(GLuint texture);
        public static IsTextureEXT glIsTextureEXT = ((IsTextureEXT)(GL.GetDelegateForExtensionMethod("glIsTextureEXT", typeof(IsTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsVariantEnabledEXT(GLuint id, Enums.EXT_vertex_shader cap);
        public static IsVariantEnabledEXT glIsVariantEnabledEXT = ((IsVariantEnabledEXT)(GL.GetDelegateForExtensionMethod("glIsVariantEnabledEXT", typeof(IsVariantEnabledEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsVertexArrayAPPLE(GLuint array);
        public static IsVertexArrayAPPLE glIsVertexArrayAPPLE = ((IsVertexArrayAPPLE)(GL.GetDelegateForExtensionMethod("glIsVertexArrayAPPLE", typeof(IsVertexArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightEnviSGIX(Enums.LightEnvParameterSGIX pname, GLint param);
        public static LightEnviSGIX glLightEnviSGIX = ((LightEnviSGIX)(GL.GetDelegateForExtensionMethod("glLightEnviSGIX", typeof(LightEnviSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lightf(Enums.LightName light, Enums.LightParameter pname, GLfloat param);
        public static Lightf glLightf = ((Lightf)(GL.GetDelegateForExtensionMethod("glLightf", typeof(Lightf)))) ?? new Lightf(Imports.Lightf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lightfv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params);
        public static Lightfv glLightfv = ((Lightfv)(GL.GetDelegateForExtensionMethod("glLightfv", typeof(Lightfv)))) ?? new Lightfv(Imports.Lightfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lighti(Enums.LightName light, Enums.LightParameter pname, GLint param);
        public static Lighti glLighti = ((Lighti)(GL.GetDelegateForExtensionMethod("glLighti", typeof(Lighti)))) ?? new Lighti(Imports.Lighti);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lightiv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params);
        public static Lightiv glLightiv = ((Lightiv)(GL.GetDelegateForExtensionMethod("glLightiv", typeof(Lightiv)))) ?? new Lightiv(Imports.Lightiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModelf(Enums.LightModelParameter pname, GLfloat param);
        public static LightModelf glLightModelf = ((LightModelf)(GL.GetDelegateForExtensionMethod("glLightModelf", typeof(LightModelf)))) ?? new LightModelf(Imports.LightModelf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModelfv(Enums.LightModelParameter pname, System.IntPtr @params);
        public static LightModelfv glLightModelfv = ((LightModelfv)(GL.GetDelegateForExtensionMethod("glLightModelfv", typeof(LightModelfv)))) ?? new LightModelfv(Imports.LightModelfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModeli(Enums.LightModelParameter pname, GLint param);
        public static LightModeli glLightModeli = ((LightModeli)(GL.GetDelegateForExtensionMethod("glLightModeli", typeof(LightModeli)))) ?? new LightModeli(Imports.LightModeli);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModeliv(Enums.LightModelParameter pname, System.IntPtr @params);
        public static LightModeliv glLightModeliv = ((LightModeliv)(GL.GetDelegateForExtensionMethod("glLightModeliv", typeof(LightModeliv)))) ?? new LightModeliv(Imports.LightModeliv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LineStipple(GLint factor, GLushort pattern);
        public static LineStipple glLineStipple = ((LineStipple)(GL.GetDelegateForExtensionMethod("glLineStipple", typeof(LineStipple)))) ?? new LineStipple(Imports.LineStipple);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LineWidth(GLfloat width);
        public static LineWidth glLineWidth = ((LineWidth)(GL.GetDelegateForExtensionMethod("glLineWidth", typeof(LineWidth)))) ?? new LineWidth(Imports.LineWidth);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LinkProgram(GLuint program);
        public static LinkProgram glLinkProgram = ((LinkProgram)(GL.GetDelegateForExtensionMethod("glLinkProgram", typeof(LinkProgram)))) ?? new LinkProgram(Imports.LinkProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LinkProgramARB(GLhandleARB programObj);
        public static LinkProgramARB glLinkProgramARB = ((LinkProgramARB)(GL.GetDelegateForExtensionMethod("glLinkProgramARB", typeof(LinkProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListBase(GLuint @base);
        public static ListBase glListBase = ((ListBase)(GL.GetDelegateForExtensionMethod("glListBase", typeof(ListBase)))) ?? new ListBase(Imports.ListBase);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameterfSGIX(GLuint list, Enums.ListParameterName pname, GLfloat param);
        public static ListParameterfSGIX glListParameterfSGIX = ((ListParameterfSGIX)(GL.GetDelegateForExtensionMethod("glListParameterfSGIX", typeof(ListParameterfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameterfvSGIX(GLuint list, Enums.ListParameterName pname, System.IntPtr @params);
        public static ListParameterfvSGIX glListParameterfvSGIX = ((ListParameterfvSGIX)(GL.GetDelegateForExtensionMethod("glListParameterfvSGIX", typeof(ListParameterfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameteriSGIX(GLuint list, Enums.ListParameterName pname, GLint param);
        public static ListParameteriSGIX glListParameteriSGIX = ((ListParameteriSGIX)(GL.GetDelegateForExtensionMethod("glListParameteriSGIX", typeof(ListParameteriSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameterivSGIX(GLuint list, Enums.ListParameterName pname, System.IntPtr @params);
        public static ListParameterivSGIX glListParameterivSGIX = ((ListParameterivSGIX)(GL.GetDelegateForExtensionMethod("glListParameterivSGIX", typeof(ListParameterivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadIdentity();
        public static LoadIdentity glLoadIdentity = ((LoadIdentity)(GL.GetDelegateForExtensionMethod("glLoadIdentity", typeof(LoadIdentity)))) ?? new LoadIdentity(Imports.LoadIdentity);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadIdentityDeformationMapSGIX(Enums.FfdMaskSGIX mask);
        public static LoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX = ((LoadIdentityDeformationMapSGIX)(GL.GetDelegateForExtensionMethod("glLoadIdentityDeformationMapSGIX", typeof(LoadIdentityDeformationMapSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadMatrixd(System.IntPtr m);
        public static LoadMatrixd glLoadMatrixd = ((LoadMatrixd)(GL.GetDelegateForExtensionMethod("glLoadMatrixd", typeof(LoadMatrixd)))) ?? new LoadMatrixd(Imports.LoadMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadMatrixf(System.IntPtr m);
        public static LoadMatrixf glLoadMatrixf = ((LoadMatrixf)(GL.GetDelegateForExtensionMethod("glLoadMatrixf", typeof(LoadMatrixf)))) ?? new LoadMatrixf(Imports.LoadMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadName(GLuint name);
        public static LoadName glLoadName = ((LoadName)(GL.GetDelegateForExtensionMethod("glLoadName", typeof(LoadName)))) ?? new LoadName(Imports.LoadName);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadProgramNV(Enums.NV_vertex_program target, GLuint id, GLsizei len, System.IntPtr program);
        public static LoadProgramNV glLoadProgramNV = ((LoadProgramNV)(GL.GetDelegateForExtensionMethod("glLoadProgramNV", typeof(LoadProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixd(System.IntPtr m);
        public static LoadTransposeMatrixd glLoadTransposeMatrixd = ((LoadTransposeMatrixd)(GL.GetDelegateForExtensionMethod("glLoadTransposeMatrixd", typeof(LoadTransposeMatrixd)))) ?? new LoadTransposeMatrixd(Imports.LoadTransposeMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixdARB(System.IntPtr m);
        public static LoadTransposeMatrixdARB glLoadTransposeMatrixdARB = ((LoadTransposeMatrixdARB)(GL.GetDelegateForExtensionMethod("glLoadTransposeMatrixdARB", typeof(LoadTransposeMatrixdARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixf(System.IntPtr m);
        public static LoadTransposeMatrixf glLoadTransposeMatrixf = ((LoadTransposeMatrixf)(GL.GetDelegateForExtensionMethod("glLoadTransposeMatrixf", typeof(LoadTransposeMatrixf)))) ?? new LoadTransposeMatrixf(Imports.LoadTransposeMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixfARB(System.IntPtr m);
        public static LoadTransposeMatrixfARB glLoadTransposeMatrixfARB = ((LoadTransposeMatrixfARB)(GL.GetDelegateForExtensionMethod("glLoadTransposeMatrixfARB", typeof(LoadTransposeMatrixfARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LockArraysEXT(GLint first, GLsizei count);
        public static LockArraysEXT glLockArraysEXT = ((LockArraysEXT)(GL.GetDelegateForExtensionMethod("glLockArraysEXT", typeof(LockArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LogicOp(Enums.LogicOp opcode);
        public static LogicOp glLogicOp = ((LogicOp)(GL.GetDelegateForExtensionMethod("glLogicOp", typeof(LogicOp)))) ?? new LogicOp(Imports.LogicOp);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, System.IntPtr points);
        public static Map1d glMap1d = ((Map1d)(GL.GetDelegateForExtensionMethod("glMap1d", typeof(Map1d)))) ?? new Map1d(Imports.Map1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, System.IntPtr points);
        public static Map1f glMap1f = ((Map1f)(GL.GetDelegateForExtensionMethod("glMap1f", typeof(Map1f)))) ?? new Map1f(Imports.Map1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, System.IntPtr points);
        public static Map2d glMap2d = ((Map2d)(GL.GetDelegateForExtensionMethod("glMap2d", typeof(Map2d)))) ?? new Map2d(Imports.Map2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, System.IntPtr points);
        public static Map2f glMap2f = ((Map2f)(GL.GetDelegateForExtensionMethod("glMap2f", typeof(Map2f)))) ?? new Map2f(Imports.Map2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr MapBuffer(Enums.VERSION_1_5 target, Enums.VERSION_1_5 access);
        public static MapBuffer glMapBuffer = ((MapBuffer)(GL.GetDelegateForExtensionMethod("glMapBuffer", typeof(MapBuffer)))) ?? new MapBuffer(Imports.MapBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr MapBufferARB(Enums.ARB_vertex_buffer_object target, Enums.ARB_vertex_buffer_object access);
        public static MapBufferARB glMapBufferARB = ((MapBufferARB)(GL.GetDelegateForExtensionMethod("glMapBufferARB", typeof(MapBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapControlPointsNV(Enums.NV_evaluators target, GLuint index, Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, [MarshalAs(UnmanagedType.Bool)] bool packed, System.IntPtr points);
        public static MapControlPointsNV glMapControlPointsNV = ((MapControlPointsNV)(GL.GetDelegateForExtensionMethod("glMapControlPointsNV", typeof(MapControlPointsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
        public static MapGrid1d glMapGrid1d = ((MapGrid1d)(GL.GetDelegateForExtensionMethod("glMapGrid1d", typeof(MapGrid1d)))) ?? new MapGrid1d(Imports.MapGrid1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
        public static MapGrid1f glMapGrid1f = ((MapGrid1f)(GL.GetDelegateForExtensionMethod("glMapGrid1f", typeof(MapGrid1f)))) ?? new MapGrid1f(Imports.MapGrid1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
        public static MapGrid2d glMapGrid2d = ((MapGrid2d)(GL.GetDelegateForExtensionMethod("glMapGrid2d", typeof(MapGrid2d)))) ?? new MapGrid2d(Imports.MapGrid2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
        public static MapGrid2f glMapGrid2f = ((MapGrid2f)(GL.GetDelegateForExtensionMethod("glMapGrid2f", typeof(MapGrid2f)))) ?? new MapGrid2f(Imports.MapGrid2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr MapObjectBufferATI(GLuint buffer);
        public static MapObjectBufferATI glMapObjectBufferATI = ((MapObjectBufferATI)(GL.GetDelegateForExtensionMethod("glMapObjectBufferATI", typeof(MapObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapParameterfvNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, System.IntPtr @params);
        public static MapParameterfvNV glMapParameterfvNV = ((MapParameterfvNV)(GL.GetDelegateForExtensionMethod("glMapParameterfvNV", typeof(MapParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapParameterivNV(Enums.NV_evaluators target, Enums.NV_evaluators pname, System.IntPtr @params);
        public static MapParameterivNV glMapParameterivNV = ((MapParameterivNV)(GL.GetDelegateForExtensionMethod("glMapParameterivNV", typeof(MapParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materialf(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param);
        public static Materialf glMaterialf = ((Materialf)(GL.GetDelegateForExtensionMethod("glMaterialf", typeof(Materialf)))) ?? new Materialf(Imports.Materialf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        public static Materialfv glMaterialfv = ((Materialfv)(GL.GetDelegateForExtensionMethod("glMaterialfv", typeof(Materialfv)))) ?? new Materialfv(Imports.Materialfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materiali(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param);
        public static Materiali glMateriali = ((Materiali)(GL.GetDelegateForExtensionMethod("glMateriali", typeof(Materiali)))) ?? new Materiali(Imports.Materiali);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        public static Materialiv glMaterialiv = ((Materialiv)(GL.GetDelegateForExtensionMethod("glMaterialiv", typeof(Materialiv)))) ?? new Materialiv(Imports.Materialiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexPointerARB(GLint size, Enums.ARB_matrix_palette type, GLsizei stride, System.IntPtr pointer);
        public static MatrixIndexPointerARB glMatrixIndexPointerARB = ((MatrixIndexPointerARB)(GL.GetDelegateForExtensionMethod("glMatrixIndexPointerARB", typeof(MatrixIndexPointerARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexubvARB(GLint size, System.IntPtr indices);
        public static MatrixIndexubvARB glMatrixIndexubvARB = ((MatrixIndexubvARB)(GL.GetDelegateForExtensionMethod("glMatrixIndexubvARB", typeof(MatrixIndexubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexuivARB(GLint size, System.IntPtr indices);
        public static MatrixIndexuivARB glMatrixIndexuivARB = ((MatrixIndexuivARB)(GL.GetDelegateForExtensionMethod("glMatrixIndexuivARB", typeof(MatrixIndexuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexusvARB(GLint size, System.IntPtr indices);
        public static MatrixIndexusvARB glMatrixIndexusvARB = ((MatrixIndexusvARB)(GL.GetDelegateForExtensionMethod("glMatrixIndexusvARB", typeof(MatrixIndexusvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixMode(Enums.MatrixMode mode);
        public static MatrixMode glMatrixMode = ((MatrixMode)(GL.GetDelegateForExtensionMethod("glMatrixMode", typeof(MatrixMode)))) ?? new MatrixMode(Imports.MatrixMode);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Minmax(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink);
        public static Minmax glMinmax = ((Minmax)(GL.GetDelegateForExtensionMethod("glMinmax", typeof(Minmax)))) ?? new Minmax(Imports.Minmax);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MinmaxEXT(Enums.MinmaxTargetEXT target, Enums.PixelInternalFormat internalformat, [MarshalAs(UnmanagedType.Bool)] bool sink);
        public static MinmaxEXT glMinmaxEXT = ((MinmaxEXT)(GL.GetDelegateForExtensionMethod("glMinmaxEXT", typeof(MinmaxEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawArrays(Enums.BeginMode mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount);
        public static MultiDrawArrays glMultiDrawArrays = ((MultiDrawArrays)(GL.GetDelegateForExtensionMethod("glMultiDrawArrays", typeof(MultiDrawArrays)))) ?? new MultiDrawArrays(Imports.MultiDrawArrays);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawArraysEXT(Enums.BeginMode mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount);
        public static MultiDrawArraysEXT glMultiDrawArraysEXT = ((MultiDrawArraysEXT)(GL.GetDelegateForExtensionMethod("glMultiDrawArraysEXT", typeof(MultiDrawArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawElementArrayAPPLE(Enums.BeginMode mode, System.IntPtr first, System.IntPtr count, GLsizei primcount);
        public static MultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE = ((MultiDrawElementArrayAPPLE)(GL.GetDelegateForExtensionMethod("glMultiDrawElementArrayAPPLE", typeof(MultiDrawElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawElements(Enums.BeginMode mode, System.IntPtr count, Enums.VERSION_1_4 type, System.IntPtr indices, GLsizei primcount);
        public static MultiDrawElements glMultiDrawElements = ((MultiDrawElements)(GL.GetDelegateForExtensionMethod("glMultiDrawElements", typeof(MultiDrawElements)))) ?? new MultiDrawElements(Imports.MultiDrawElements);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawElementsEXT(Enums.BeginMode mode, System.IntPtr count, Enums.EXT_multi_draw_arrays type, System.IntPtr indices, GLsizei primcount);
        public static MultiDrawElementsEXT glMultiDrawElementsEXT = ((MultiDrawElementsEXT)(GL.GetDelegateForExtensionMethod("glMultiDrawElementsEXT", typeof(MultiDrawElementsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawRangeElementArrayAPPLE(Enums.BeginMode mode, GLuint start, GLuint end, System.IntPtr first, System.IntPtr count, GLsizei primcount);
        public static MultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE = ((MultiDrawRangeElementArrayAPPLE)(GL.GetDelegateForExtensionMethod("glMultiDrawRangeElementArrayAPPLE", typeof(MultiDrawRangeElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiModeDrawArraysIBM(System.IntPtr mode, System.IntPtr first, System.IntPtr count, GLsizei primcount, GLint modestride);
        public static MultiModeDrawArraysIBM glMultiModeDrawArraysIBM = ((MultiModeDrawArraysIBM)(GL.GetDelegateForExtensionMethod("glMultiModeDrawArraysIBM", typeof(MultiModeDrawArraysIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiModeDrawElementsIBM(System.IntPtr mode, System.IntPtr count, Enums.IBM_multimode_draw_arrays type, System.IntPtr indices, GLsizei primcount, GLint modestride);
        public static MultiModeDrawElementsIBM glMultiModeDrawElementsIBM = ((MultiModeDrawElementsIBM)(GL.GetDelegateForExtensionMethod("glMultiModeDrawElementsIBM", typeof(MultiModeDrawElementsIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1d(Enums.VERSION_1_3 target, GLdouble s);
        public static MultiTexCoord1d glMultiTexCoord1d = ((MultiTexCoord1d)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1d", typeof(MultiTexCoord1d)))) ?? new MultiTexCoord1d(Imports.MultiTexCoord1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1dARB(Enums.ARB_multitexture target, GLdouble s);
        public static MultiTexCoord1dARB glMultiTexCoord1dARB = ((MultiTexCoord1dARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1dARB", typeof(MultiTexCoord1dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1dv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord1dv glMultiTexCoord1dv = ((MultiTexCoord1dv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1dv", typeof(MultiTexCoord1dv)))) ?? new MultiTexCoord1dv(Imports.MultiTexCoord1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1dvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord1dvARB glMultiTexCoord1dvARB = ((MultiTexCoord1dvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1dvARB", typeof(MultiTexCoord1dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1f(Enums.VERSION_1_3 target, GLfloat s);
        public static MultiTexCoord1f glMultiTexCoord1f = ((MultiTexCoord1f)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1f", typeof(MultiTexCoord1f)))) ?? new MultiTexCoord1f(Imports.MultiTexCoord1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1fARB(Enums.ARB_multitexture target, GLfloat s);
        public static MultiTexCoord1fARB glMultiTexCoord1fARB = ((MultiTexCoord1fARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1fARB", typeof(MultiTexCoord1fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1fv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord1fv glMultiTexCoord1fv = ((MultiTexCoord1fv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1fv", typeof(MultiTexCoord1fv)))) ?? new MultiTexCoord1fv(Imports.MultiTexCoord1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1fvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord1fvARB glMultiTexCoord1fvARB = ((MultiTexCoord1fvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1fvARB", typeof(MultiTexCoord1fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1hNV(Enums.NV_half_float target, GLhalfNV s);
        public static MultiTexCoord1hNV glMultiTexCoord1hNV = ((MultiTexCoord1hNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1hNV", typeof(MultiTexCoord1hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1hvNV(Enums.NV_half_float target, System.IntPtr v);
        public static MultiTexCoord1hvNV glMultiTexCoord1hvNV = ((MultiTexCoord1hvNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1hvNV", typeof(MultiTexCoord1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1i(Enums.VERSION_1_3 target, GLint s);
        public static MultiTexCoord1i glMultiTexCoord1i = ((MultiTexCoord1i)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1i", typeof(MultiTexCoord1i)))) ?? new MultiTexCoord1i(Imports.MultiTexCoord1i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1iARB(Enums.ARB_multitexture target, GLint s);
        public static MultiTexCoord1iARB glMultiTexCoord1iARB = ((MultiTexCoord1iARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1iARB", typeof(MultiTexCoord1iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1iv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord1iv glMultiTexCoord1iv = ((MultiTexCoord1iv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1iv", typeof(MultiTexCoord1iv)))) ?? new MultiTexCoord1iv(Imports.MultiTexCoord1iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1ivARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord1ivARB glMultiTexCoord1ivARB = ((MultiTexCoord1ivARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1ivARB", typeof(MultiTexCoord1ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1s(Enums.VERSION_1_3 target, GLshort s);
        public static MultiTexCoord1s glMultiTexCoord1s = ((MultiTexCoord1s)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1s", typeof(MultiTexCoord1s)))) ?? new MultiTexCoord1s(Imports.MultiTexCoord1s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1sARB(Enums.ARB_multitexture target, GLshort s);
        public static MultiTexCoord1sARB glMultiTexCoord1sARB = ((MultiTexCoord1sARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1sARB", typeof(MultiTexCoord1sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1sv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord1sv glMultiTexCoord1sv = ((MultiTexCoord1sv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1sv", typeof(MultiTexCoord1sv)))) ?? new MultiTexCoord1sv(Imports.MultiTexCoord1sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1svARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord1svARB glMultiTexCoord1svARB = ((MultiTexCoord1svARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord1svARB", typeof(MultiTexCoord1svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t);
        public static MultiTexCoord2d glMultiTexCoord2d = ((MultiTexCoord2d)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2d", typeof(MultiTexCoord2d)))) ?? new MultiTexCoord2d(Imports.MultiTexCoord2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2dARB(Enums.ARB_multitexture target, GLdouble s, GLdouble t);
        public static MultiTexCoord2dARB glMultiTexCoord2dARB = ((MultiTexCoord2dARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2dARB", typeof(MultiTexCoord2dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2dv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord2dv glMultiTexCoord2dv = ((MultiTexCoord2dv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2dv", typeof(MultiTexCoord2dv)))) ?? new MultiTexCoord2dv(Imports.MultiTexCoord2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2dvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord2dvARB glMultiTexCoord2dvARB = ((MultiTexCoord2dvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2dvARB", typeof(MultiTexCoord2dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t);
        public static MultiTexCoord2f glMultiTexCoord2f = ((MultiTexCoord2f)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2f", typeof(MultiTexCoord2f)))) ?? new MultiTexCoord2f(Imports.MultiTexCoord2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2fARB(Enums.ARB_multitexture target, GLfloat s, GLfloat t);
        public static MultiTexCoord2fARB glMultiTexCoord2fARB = ((MultiTexCoord2fARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2fARB", typeof(MultiTexCoord2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2fv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord2fv glMultiTexCoord2fv = ((MultiTexCoord2fv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2fv", typeof(MultiTexCoord2fv)))) ?? new MultiTexCoord2fv(Imports.MultiTexCoord2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2fvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord2fvARB glMultiTexCoord2fvARB = ((MultiTexCoord2fvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2fvARB", typeof(MultiTexCoord2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2hNV(Enums.NV_half_float target, GLhalfNV s, GLhalfNV t);
        public static MultiTexCoord2hNV glMultiTexCoord2hNV = ((MultiTexCoord2hNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2hNV", typeof(MultiTexCoord2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2hvNV(Enums.NV_half_float target, System.IntPtr v);
        public static MultiTexCoord2hvNV glMultiTexCoord2hvNV = ((MultiTexCoord2hvNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2hvNV", typeof(MultiTexCoord2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2i(Enums.VERSION_1_3 target, GLint s, GLint t);
        public static MultiTexCoord2i glMultiTexCoord2i = ((MultiTexCoord2i)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2i", typeof(MultiTexCoord2i)))) ?? new MultiTexCoord2i(Imports.MultiTexCoord2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2iARB(Enums.ARB_multitexture target, GLint s, GLint t);
        public static MultiTexCoord2iARB glMultiTexCoord2iARB = ((MultiTexCoord2iARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2iARB", typeof(MultiTexCoord2iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2iv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord2iv glMultiTexCoord2iv = ((MultiTexCoord2iv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2iv", typeof(MultiTexCoord2iv)))) ?? new MultiTexCoord2iv(Imports.MultiTexCoord2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2ivARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord2ivARB glMultiTexCoord2ivARB = ((MultiTexCoord2ivARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2ivARB", typeof(MultiTexCoord2ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2s(Enums.VERSION_1_3 target, GLshort s, GLshort t);
        public static MultiTexCoord2s glMultiTexCoord2s = ((MultiTexCoord2s)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2s", typeof(MultiTexCoord2s)))) ?? new MultiTexCoord2s(Imports.MultiTexCoord2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2sARB(Enums.ARB_multitexture target, GLshort s, GLshort t);
        public static MultiTexCoord2sARB glMultiTexCoord2sARB = ((MultiTexCoord2sARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2sARB", typeof(MultiTexCoord2sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2sv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord2sv glMultiTexCoord2sv = ((MultiTexCoord2sv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2sv", typeof(MultiTexCoord2sv)))) ?? new MultiTexCoord2sv(Imports.MultiTexCoord2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2svARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord2svARB glMultiTexCoord2svARB = ((MultiTexCoord2svARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord2svARB", typeof(MultiTexCoord2svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r);
        public static MultiTexCoord3d glMultiTexCoord3d = ((MultiTexCoord3d)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3d", typeof(MultiTexCoord3d)))) ?? new MultiTexCoord3d(Imports.MultiTexCoord3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3dARB(Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r);
        public static MultiTexCoord3dARB glMultiTexCoord3dARB = ((MultiTexCoord3dARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3dARB", typeof(MultiTexCoord3dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3dv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord3dv glMultiTexCoord3dv = ((MultiTexCoord3dv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3dv", typeof(MultiTexCoord3dv)))) ?? new MultiTexCoord3dv(Imports.MultiTexCoord3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3dvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord3dvARB glMultiTexCoord3dvARB = ((MultiTexCoord3dvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3dvARB", typeof(MultiTexCoord3dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r);
        public static MultiTexCoord3f glMultiTexCoord3f = ((MultiTexCoord3f)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3f", typeof(MultiTexCoord3f)))) ?? new MultiTexCoord3f(Imports.MultiTexCoord3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3fARB(Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r);
        public static MultiTexCoord3fARB glMultiTexCoord3fARB = ((MultiTexCoord3fARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3fARB", typeof(MultiTexCoord3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3fv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord3fv glMultiTexCoord3fv = ((MultiTexCoord3fv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3fv", typeof(MultiTexCoord3fv)))) ?? new MultiTexCoord3fv(Imports.MultiTexCoord3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3fvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord3fvARB glMultiTexCoord3fvARB = ((MultiTexCoord3fvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3fvARB", typeof(MultiTexCoord3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3hNV(Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
        public static MultiTexCoord3hNV glMultiTexCoord3hNV = ((MultiTexCoord3hNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3hNV", typeof(MultiTexCoord3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3hvNV(Enums.NV_half_float target, System.IntPtr v);
        public static MultiTexCoord3hvNV glMultiTexCoord3hvNV = ((MultiTexCoord3hvNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3hvNV", typeof(MultiTexCoord3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3i(Enums.VERSION_1_3 target, GLint s, GLint t, GLint r);
        public static MultiTexCoord3i glMultiTexCoord3i = ((MultiTexCoord3i)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3i", typeof(MultiTexCoord3i)))) ?? new MultiTexCoord3i(Imports.MultiTexCoord3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3iARB(Enums.ARB_multitexture target, GLint s, GLint t, GLint r);
        public static MultiTexCoord3iARB glMultiTexCoord3iARB = ((MultiTexCoord3iARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3iARB", typeof(MultiTexCoord3iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3iv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord3iv glMultiTexCoord3iv = ((MultiTexCoord3iv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3iv", typeof(MultiTexCoord3iv)))) ?? new MultiTexCoord3iv(Imports.MultiTexCoord3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3ivARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord3ivARB glMultiTexCoord3ivARB = ((MultiTexCoord3ivARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3ivARB", typeof(MultiTexCoord3ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3s(Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r);
        public static MultiTexCoord3s glMultiTexCoord3s = ((MultiTexCoord3s)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3s", typeof(MultiTexCoord3s)))) ?? new MultiTexCoord3s(Imports.MultiTexCoord3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3sARB(Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r);
        public static MultiTexCoord3sARB glMultiTexCoord3sARB = ((MultiTexCoord3sARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3sARB", typeof(MultiTexCoord3sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3sv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord3sv glMultiTexCoord3sv = ((MultiTexCoord3sv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3sv", typeof(MultiTexCoord3sv)))) ?? new MultiTexCoord3sv(Imports.MultiTexCoord3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3svARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord3svARB glMultiTexCoord3svARB = ((MultiTexCoord3svARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord3svARB", typeof(MultiTexCoord3svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        public static MultiTexCoord4d glMultiTexCoord4d = ((MultiTexCoord4d)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4d", typeof(MultiTexCoord4d)))) ?? new MultiTexCoord4d(Imports.MultiTexCoord4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4dARB(Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        public static MultiTexCoord4dARB glMultiTexCoord4dARB = ((MultiTexCoord4dARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4dARB", typeof(MultiTexCoord4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4dv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord4dv glMultiTexCoord4dv = ((MultiTexCoord4dv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4dv", typeof(MultiTexCoord4dv)))) ?? new MultiTexCoord4dv(Imports.MultiTexCoord4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4dvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord4dvARB glMultiTexCoord4dvARB = ((MultiTexCoord4dvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4dvARB", typeof(MultiTexCoord4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        public static MultiTexCoord4f glMultiTexCoord4f = ((MultiTexCoord4f)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4f", typeof(MultiTexCoord4f)))) ?? new MultiTexCoord4f(Imports.MultiTexCoord4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4fARB(Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        public static MultiTexCoord4fARB glMultiTexCoord4fARB = ((MultiTexCoord4fARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4fARB", typeof(MultiTexCoord4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4fv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord4fv glMultiTexCoord4fv = ((MultiTexCoord4fv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4fv", typeof(MultiTexCoord4fv)))) ?? new MultiTexCoord4fv(Imports.MultiTexCoord4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4fvARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord4fvARB glMultiTexCoord4fvARB = ((MultiTexCoord4fvARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4fvARB", typeof(MultiTexCoord4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4hNV(Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
        public static MultiTexCoord4hNV glMultiTexCoord4hNV = ((MultiTexCoord4hNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4hNV", typeof(MultiTexCoord4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4hvNV(Enums.NV_half_float target, System.IntPtr v);
        public static MultiTexCoord4hvNV glMultiTexCoord4hvNV = ((MultiTexCoord4hvNV)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4hvNV", typeof(MultiTexCoord4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4i(Enums.VERSION_1_3 target, GLint s, GLint t, GLint r, GLint q);
        public static MultiTexCoord4i glMultiTexCoord4i = ((MultiTexCoord4i)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4i", typeof(MultiTexCoord4i)))) ?? new MultiTexCoord4i(Imports.MultiTexCoord4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4iARB(Enums.ARB_multitexture target, GLint s, GLint t, GLint r, GLint q);
        public static MultiTexCoord4iARB glMultiTexCoord4iARB = ((MultiTexCoord4iARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4iARB", typeof(MultiTexCoord4iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4iv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord4iv glMultiTexCoord4iv = ((MultiTexCoord4iv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4iv", typeof(MultiTexCoord4iv)))) ?? new MultiTexCoord4iv(Imports.MultiTexCoord4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4ivARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord4ivARB glMultiTexCoord4ivARB = ((MultiTexCoord4ivARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4ivARB", typeof(MultiTexCoord4ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4s(Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r, GLshort q);
        public static MultiTexCoord4s glMultiTexCoord4s = ((MultiTexCoord4s)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4s", typeof(MultiTexCoord4s)))) ?? new MultiTexCoord4s(Imports.MultiTexCoord4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4sARB(Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r, GLshort q);
        public static MultiTexCoord4sARB glMultiTexCoord4sARB = ((MultiTexCoord4sARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4sARB", typeof(MultiTexCoord4sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4sv(Enums.VERSION_1_3 target, System.IntPtr v);
        public static MultiTexCoord4sv glMultiTexCoord4sv = ((MultiTexCoord4sv)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4sv", typeof(MultiTexCoord4sv)))) ?? new MultiTexCoord4sv(Imports.MultiTexCoord4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4svARB(Enums.ARB_multitexture target, System.IntPtr v);
        public static MultiTexCoord4svARB glMultiTexCoord4svARB = ((MultiTexCoord4svARB)(GL.GetDelegateForExtensionMethod("glMultiTexCoord4svARB", typeof(MultiTexCoord4svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultMatrixd(System.IntPtr m);
        public static MultMatrixd glMultMatrixd = ((MultMatrixd)(GL.GetDelegateForExtensionMethod("glMultMatrixd", typeof(MultMatrixd)))) ?? new MultMatrixd(Imports.MultMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultMatrixf(System.IntPtr m);
        public static MultMatrixf glMultMatrixf = ((MultMatrixf)(GL.GetDelegateForExtensionMethod("glMultMatrixf", typeof(MultMatrixf)))) ?? new MultMatrixf(Imports.MultMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixd(System.IntPtr m);
        public static MultTransposeMatrixd glMultTransposeMatrixd = ((MultTransposeMatrixd)(GL.GetDelegateForExtensionMethod("glMultTransposeMatrixd", typeof(MultTransposeMatrixd)))) ?? new MultTransposeMatrixd(Imports.MultTransposeMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixdARB(System.IntPtr m);
        public static MultTransposeMatrixdARB glMultTransposeMatrixdARB = ((MultTransposeMatrixdARB)(GL.GetDelegateForExtensionMethod("glMultTransposeMatrixdARB", typeof(MultTransposeMatrixdARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixf(System.IntPtr m);
        public static MultTransposeMatrixf glMultTransposeMatrixf = ((MultTransposeMatrixf)(GL.GetDelegateForExtensionMethod("glMultTransposeMatrixf", typeof(MultTransposeMatrixf)))) ?? new MultTransposeMatrixf(Imports.MultTransposeMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixfARB(System.IntPtr m);
        public static MultTransposeMatrixfARB glMultTransposeMatrixfARB = ((MultTransposeMatrixfARB)(GL.GetDelegateForExtensionMethod("glMultTransposeMatrixfARB", typeof(MultTransposeMatrixfARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NewList(GLuint list, Enums.ListMode mode);
        public static NewList glNewList = ((NewList)(GL.GetDelegateForExtensionMethod("glNewList", typeof(NewList)))) ?? new NewList(Imports.NewList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint NewObjectBufferATI(GLsizei size, System.IntPtr pointer, Enums.ATI_vertex_array_object usage);
        public static NewObjectBufferATI glNewObjectBufferATI = ((NewObjectBufferATI)(GL.GetDelegateForExtensionMethod("glNewObjectBufferATI", typeof(NewObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
        public static Normal3b glNormal3b = ((Normal3b)(GL.GetDelegateForExtensionMethod("glNormal3b", typeof(Normal3b)))) ?? new Normal3b(Imports.Normal3b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3bv(System.IntPtr v);
        public static Normal3bv glNormal3bv = ((Normal3bv)(GL.GetDelegateForExtensionMethod("glNormal3bv", typeof(Normal3bv)))) ?? new Normal3bv(Imports.Normal3bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
        public static Normal3d glNormal3d = ((Normal3d)(GL.GetDelegateForExtensionMethod("glNormal3d", typeof(Normal3d)))) ?? new Normal3d(Imports.Normal3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3dv(System.IntPtr v);
        public static Normal3dv glNormal3dv = ((Normal3dv)(GL.GetDelegateForExtensionMethod("glNormal3dv", typeof(Normal3dv)))) ?? new Normal3dv(Imports.Normal3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
        public static Normal3f glNormal3f = ((Normal3f)(GL.GetDelegateForExtensionMethod("glNormal3f", typeof(Normal3f)))) ?? new Normal3f(Imports.Normal3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3fv(System.IntPtr v);
        public static Normal3fv glNormal3fv = ((Normal3fv)(GL.GetDelegateForExtensionMethod("glNormal3fv", typeof(Normal3fv)))) ?? new Normal3fv(Imports.Normal3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static Normal3fVertex3fSUN glNormal3fVertex3fSUN = ((Normal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glNormal3fVertex3fSUN", typeof(Normal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3fVertex3fvSUN(System.IntPtr n, System.IntPtr v);
        public static Normal3fVertex3fvSUN glNormal3fVertex3fvSUN = ((Normal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glNormal3fVertex3fvSUN", typeof(Normal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
        public static Normal3hNV glNormal3hNV = ((Normal3hNV)(GL.GetDelegateForExtensionMethod("glNormal3hNV", typeof(Normal3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3hvNV(System.IntPtr v);
        public static Normal3hvNV glNormal3hvNV = ((Normal3hvNV)(GL.GetDelegateForExtensionMethod("glNormal3hvNV", typeof(Normal3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3i(GLint nx, GLint ny, GLint nz);
        public static Normal3i glNormal3i = ((Normal3i)(GL.GetDelegateForExtensionMethod("glNormal3i", typeof(Normal3i)))) ?? new Normal3i(Imports.Normal3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3iv(System.IntPtr v);
        public static Normal3iv glNormal3iv = ((Normal3iv)(GL.GetDelegateForExtensionMethod("glNormal3iv", typeof(Normal3iv)))) ?? new Normal3iv(Imports.Normal3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3s(GLshort nx, GLshort ny, GLshort nz);
        public static Normal3s glNormal3s = ((Normal3s)(GL.GetDelegateForExtensionMethod("glNormal3s", typeof(Normal3s)))) ?? new Normal3s(Imports.Normal3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3sv(System.IntPtr v);
        public static Normal3sv glNormal3sv = ((Normal3sv)(GL.GetDelegateForExtensionMethod("glNormal3sv", typeof(Normal3sv)))) ?? new Normal3sv(Imports.Normal3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointer(Enums.NormalPointerType type, GLsizei stride, System.IntPtr pointer);
        public static NormalPointer glNormalPointer = ((NormalPointer)(GL.GetDelegateForExtensionMethod("glNormalPointer", typeof(NormalPointer)))) ?? new NormalPointer(Imports.NormalPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointerEXT(Enums.NormalPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static NormalPointerEXT glNormalPointerEXT = ((NormalPointerEXT)(GL.GetDelegateForExtensionMethod("glNormalPointerEXT", typeof(NormalPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointerListIBM(Enums.NormalPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static NormalPointerListIBM glNormalPointerListIBM = ((NormalPointerListIBM)(GL.GetDelegateForExtensionMethod("glNormalPointerListIBM", typeof(NormalPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointervINTEL(Enums.NormalPointerType type, System.IntPtr pointer);
        public static NormalPointervINTEL glNormalPointervINTEL = ((NormalPointervINTEL)(GL.GetDelegateForExtensionMethod("glNormalPointervINTEL", typeof(NormalPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3bATI(Enums.ATI_vertex_streams stream, GLbyte nx, GLbyte ny, GLbyte nz);
        public static NormalStream3bATI glNormalStream3bATI = ((NormalStream3bATI)(GL.GetDelegateForExtensionMethod("glNormalStream3bATI", typeof(NormalStream3bATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3bvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static NormalStream3bvATI glNormalStream3bvATI = ((NormalStream3bvATI)(GL.GetDelegateForExtensionMethod("glNormalStream3bvATI", typeof(NormalStream3bvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3dATI(Enums.ATI_vertex_streams stream, GLdouble nx, GLdouble ny, GLdouble nz);
        public static NormalStream3dATI glNormalStream3dATI = ((NormalStream3dATI)(GL.GetDelegateForExtensionMethod("glNormalStream3dATI", typeof(NormalStream3dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static NormalStream3dvATI glNormalStream3dvATI = ((NormalStream3dvATI)(GL.GetDelegateForExtensionMethod("glNormalStream3dvATI", typeof(NormalStream3dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3fATI(Enums.ATI_vertex_streams stream, GLfloat nx, GLfloat ny, GLfloat nz);
        public static NormalStream3fATI glNormalStream3fATI = ((NormalStream3fATI)(GL.GetDelegateForExtensionMethod("glNormalStream3fATI", typeof(NormalStream3fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static NormalStream3fvATI glNormalStream3fvATI = ((NormalStream3fvATI)(GL.GetDelegateForExtensionMethod("glNormalStream3fvATI", typeof(NormalStream3fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3iATI(Enums.ATI_vertex_streams stream, GLint nx, GLint ny, GLint nz);
        public static NormalStream3iATI glNormalStream3iATI = ((NormalStream3iATI)(GL.GetDelegateForExtensionMethod("glNormalStream3iATI", typeof(NormalStream3iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static NormalStream3ivATI glNormalStream3ivATI = ((NormalStream3ivATI)(GL.GetDelegateForExtensionMethod("glNormalStream3ivATI", typeof(NormalStream3ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3sATI(Enums.ATI_vertex_streams stream, GLshort nx, GLshort ny, GLshort nz);
        public static NormalStream3sATI glNormalStream3sATI = ((NormalStream3sATI)(GL.GetDelegateForExtensionMethod("glNormalStream3sATI", typeof(NormalStream3sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static NormalStream3svATI glNormalStream3svATI = ((NormalStream3svATI)(GL.GetDelegateForExtensionMethod("glNormalStream3svATI", typeof(NormalStream3svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        public static Ortho glOrtho = ((Ortho)(GL.GetDelegateForExtensionMethod("glOrtho", typeof(Ortho)))) ?? new Ortho(Imports.Ortho);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PassTexCoordATI(GLuint dst, GLuint coord, Enums.ATI_fragment_shader swizzle);
        public static PassTexCoordATI glPassTexCoordATI = ((PassTexCoordATI)(GL.GetDelegateForExtensionMethod("glPassTexCoordATI", typeof(PassTexCoordATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PassThrough(GLfloat token);
        public static PassThrough glPassThrough = ((PassThrough)(GL.GetDelegateForExtensionMethod("glPassThrough", typeof(PassThrough)))) ?? new PassThrough(Imports.PassThrough);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelDataRangeNV(Enums.NV_pixel_data_range target, GLsizei length, [In, Out()] System.IntPtr pointer);
        public static PixelDataRangeNV glPixelDataRangeNV = ((PixelDataRangeNV)(GL.GetDelegateForExtensionMethod("glPixelDataRangeNV", typeof(PixelDataRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelMapfv(Enums.PixelMap map, GLint mapsize, System.IntPtr values);
        public static PixelMapfv glPixelMapfv = ((PixelMapfv)(GL.GetDelegateForExtensionMethod("glPixelMapfv", typeof(PixelMapfv)))) ?? new PixelMapfv(Imports.PixelMapfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelMapuiv(Enums.PixelMap map, GLint mapsize, System.IntPtr values);
        public static PixelMapuiv glPixelMapuiv = ((PixelMapuiv)(GL.GetDelegateForExtensionMethod("glPixelMapuiv", typeof(PixelMapuiv)))) ?? new PixelMapuiv(Imports.PixelMapuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelMapusv(Enums.PixelMap map, GLint mapsize, System.IntPtr values);
        public static PixelMapusv glPixelMapusv = ((PixelMapusv)(GL.GetDelegateForExtensionMethod("glPixelMapusv", typeof(PixelMapusv)))) ?? new PixelMapusv(Imports.PixelMapusv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelStoref(Enums.PixelStoreParameter pname, GLfloat param);
        public static PixelStoref glPixelStoref = ((PixelStoref)(GL.GetDelegateForExtensionMethod("glPixelStoref", typeof(PixelStoref)))) ?? new PixelStoref(Imports.PixelStoref);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelStorei(Enums.PixelStoreParameter pname, GLint param);
        public static PixelStorei glPixelStorei = ((PixelStorei)(GL.GetDelegateForExtensionMethod("glPixelStorei", typeof(PixelStorei)))) ?? new PixelStorei(Imports.PixelStorei);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameterfSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLfloat param);
        public static PixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS = ((PixelTexGenParameterfSGIS)(GL.GetDelegateForExtensionMethod("glPixelTexGenParameterfSGIS", typeof(PixelTexGenParameterfSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameterfvSGIS(Enums.PixelTexGenParameterNameSGIS pname, System.IntPtr @params);
        public static PixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS = ((PixelTexGenParameterfvSGIS)(GL.GetDelegateForExtensionMethod("glPixelTexGenParameterfvSGIS", typeof(PixelTexGenParameterfvSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameteriSGIS(Enums.PixelTexGenParameterNameSGIS pname, GLint param);
        public static PixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS = ((PixelTexGenParameteriSGIS)(GL.GetDelegateForExtensionMethod("glPixelTexGenParameteriSGIS", typeof(PixelTexGenParameteriSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameterivSGIS(Enums.PixelTexGenParameterNameSGIS pname, System.IntPtr @params);
        public static PixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS = ((PixelTexGenParameterivSGIS)(GL.GetDelegateForExtensionMethod("glPixelTexGenParameterivSGIS", typeof(PixelTexGenParameterivSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenSGIX(Enums.SGIX_pixel_texture mode);
        public static PixelTexGenSGIX glPixelTexGenSGIX = ((PixelTexGenSGIX)(GL.GetDelegateForExtensionMethod("glPixelTexGenSGIX", typeof(PixelTexGenSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransferf(Enums.PixelTransferParameter pname, GLfloat param);
        public static PixelTransferf glPixelTransferf = ((PixelTransferf)(GL.GetDelegateForExtensionMethod("glPixelTransferf", typeof(PixelTransferf)))) ?? new PixelTransferf(Imports.PixelTransferf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransferi(Enums.PixelTransferParameter pname, GLint param);
        public static PixelTransferi glPixelTransferi = ((PixelTransferi)(GL.GetDelegateForExtensionMethod("glPixelTransferi", typeof(PixelTransferi)))) ?? new PixelTransferi(Imports.PixelTransferi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameterfEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, GLfloat param);
        public static PixelTransformParameterfEXT glPixelTransformParameterfEXT = ((PixelTransformParameterfEXT)(GL.GetDelegateForExtensionMethod("glPixelTransformParameterfEXT", typeof(PixelTransformParameterfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameterfvEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, System.IntPtr @params);
        public static PixelTransformParameterfvEXT glPixelTransformParameterfvEXT = ((PixelTransformParameterfvEXT)(GL.GetDelegateForExtensionMethod("glPixelTransformParameterfvEXT", typeof(PixelTransformParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameteriEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, GLint param);
        public static PixelTransformParameteriEXT glPixelTransformParameteriEXT = ((PixelTransformParameteriEXT)(GL.GetDelegateForExtensionMethod("glPixelTransformParameteriEXT", typeof(PixelTransformParameteriEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameterivEXT(Enums.EXT_pixel_transform target, Enums.EXT_pixel_transform pname, System.IntPtr @params);
        public static PixelTransformParameterivEXT glPixelTransformParameterivEXT = ((PixelTransformParameterivEXT)(GL.GetDelegateForExtensionMethod("glPixelTransformParameterivEXT", typeof(PixelTransformParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelZoom(GLfloat xfactor, GLfloat yfactor);
        public static PixelZoom glPixelZoom = ((PixelZoom)(GL.GetDelegateForExtensionMethod("glPixelZoom", typeof(PixelZoom)))) ?? new PixelZoom(Imports.PixelZoom);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PNTrianglesfATI(Enums.ATI_pn_triangles pname, GLfloat param);
        public static PNTrianglesfATI glPNTrianglesfATI = ((PNTrianglesfATI)(GL.GetDelegateForExtensionMethod("glPNTrianglesfATI", typeof(PNTrianglesfATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PNTrianglesiATI(Enums.ATI_pn_triangles pname, GLint param);
        public static PNTrianglesiATI glPNTrianglesiATI = ((PNTrianglesiATI)(GL.GetDelegateForExtensionMethod("glPNTrianglesiATI", typeof(PNTrianglesiATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterf(Enums.VERSION_1_4 pname, GLfloat param);
        public static PointParameterf glPointParameterf = ((PointParameterf)(GL.GetDelegateForExtensionMethod("glPointParameterf", typeof(PointParameterf)))) ?? new PointParameterf(Imports.PointParameterf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfARB(Enums.ARB_point_parameters pname, GLfloat param);
        public static PointParameterfARB glPointParameterfARB = ((PointParameterfARB)(GL.GetDelegateForExtensionMethod("glPointParameterfARB", typeof(PointParameterfARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfEXT(Enums.EXT_point_parameters pname, GLfloat param);
        public static PointParameterfEXT glPointParameterfEXT = ((PointParameterfEXT)(GL.GetDelegateForExtensionMethod("glPointParameterfEXT", typeof(PointParameterfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfSGIS(Enums.SGIS_point_parameters pname, GLfloat param);
        public static PointParameterfSGIS glPointParameterfSGIS = ((PointParameterfSGIS)(GL.GetDelegateForExtensionMethod("glPointParameterfSGIS", typeof(PointParameterfSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfv(Enums.VERSION_1_4 pname, System.IntPtr @params);
        public static PointParameterfv glPointParameterfv = ((PointParameterfv)(GL.GetDelegateForExtensionMethod("glPointParameterfv", typeof(PointParameterfv)))) ?? new PointParameterfv(Imports.PointParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfvARB(Enums.ARB_point_parameters pname, System.IntPtr @params);
        public static PointParameterfvARB glPointParameterfvARB = ((PointParameterfvARB)(GL.GetDelegateForExtensionMethod("glPointParameterfvARB", typeof(PointParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfvEXT(Enums.EXT_point_parameters pname, System.IntPtr @params);
        public static PointParameterfvEXT glPointParameterfvEXT = ((PointParameterfvEXT)(GL.GetDelegateForExtensionMethod("glPointParameterfvEXT", typeof(PointParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfvSGIS(Enums.SGIS_point_parameters pname, System.IntPtr @params);
        public static PointParameterfvSGIS glPointParameterfvSGIS = ((PointParameterfvSGIS)(GL.GetDelegateForExtensionMethod("glPointParameterfvSGIS", typeof(PointParameterfvSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameteri(Enums.VERSION_1_4 pname, GLint param);
        public static PointParameteri glPointParameteri = ((PointParameteri)(GL.GetDelegateForExtensionMethod("glPointParameteri", typeof(PointParameteri)))) ?? new PointParameteri(Imports.PointParameteri);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameteriNV(Enums.NV_point_sprite pname, GLint param);
        public static PointParameteriNV glPointParameteriNV = ((PointParameteriNV)(GL.GetDelegateForExtensionMethod("glPointParameteriNV", typeof(PointParameteriNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameteriv(Enums.VERSION_1_4 pname, System.IntPtr @params);
        public static PointParameteriv glPointParameteriv = ((PointParameteriv)(GL.GetDelegateForExtensionMethod("glPointParameteriv", typeof(PointParameteriv)))) ?? new PointParameteriv(Imports.PointParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterivNV(Enums.NV_point_sprite pname, System.IntPtr @params);
        public static PointParameterivNV glPointParameterivNV = ((PointParameterivNV)(GL.GetDelegateForExtensionMethod("glPointParameterivNV", typeof(PointParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointSize(GLfloat size);
        public static PointSize glPointSize = ((PointSize)(GL.GetDelegateForExtensionMethod("glPointSize", typeof(PointSize)))) ?? new PointSize(Imports.PointSize);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint PollAsyncSGIX([In, Out()] System.IntPtr markerp);
        public static PollAsyncSGIX glPollAsyncSGIX = ((PollAsyncSGIX)(GL.GetDelegateForExtensionMethod("glPollAsyncSGIX", typeof(PollAsyncSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint PollInstrumentsSGIX([In, Out()] System.IntPtr marker_p);
        public static PollInstrumentsSGIX glPollInstrumentsSGIX = ((PollInstrumentsSGIX)(GL.GetDelegateForExtensionMethod("glPollInstrumentsSGIX", typeof(PollInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonMode(Enums.MaterialFace face, Enums.PolygonMode mode);
        public static PolygonMode glPolygonMode = ((PolygonMode)(GL.GetDelegateForExtensionMethod("glPolygonMode", typeof(PolygonMode)))) ?? new PolygonMode(Imports.PolygonMode);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonOffset(GLfloat factor, GLfloat units);
        public static PolygonOffset glPolygonOffset = ((PolygonOffset)(GL.GetDelegateForExtensionMethod("glPolygonOffset", typeof(PolygonOffset)))) ?? new PolygonOffset(Imports.PolygonOffset);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonOffsetEXT(GLfloat factor, GLfloat bias);
        public static PolygonOffsetEXT glPolygonOffsetEXT = ((PolygonOffsetEXT)(GL.GetDelegateForExtensionMethod("glPolygonOffsetEXT", typeof(PolygonOffsetEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonStipple(System.IntPtr mask);
        public static PolygonStipple glPolygonStipple = ((PolygonStipple)(GL.GetDelegateForExtensionMethod("glPolygonStipple", typeof(PolygonStipple)))) ?? new PolygonStipple(Imports.PolygonStipple);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopAttrib();
        public static PopAttrib glPopAttrib = ((PopAttrib)(GL.GetDelegateForExtensionMethod("glPopAttrib", typeof(PopAttrib)))) ?? new PopAttrib(Imports.PopAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopClientAttrib();
        public static PopClientAttrib glPopClientAttrib = ((PopClientAttrib)(GL.GetDelegateForExtensionMethod("glPopClientAttrib", typeof(PopClientAttrib)))) ?? new PopClientAttrib(Imports.PopClientAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopMatrix();
        public static PopMatrix glPopMatrix = ((PopMatrix)(GL.GetDelegateForExtensionMethod("glPopMatrix", typeof(PopMatrix)))) ?? new PopMatrix(Imports.PopMatrix);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopName();
        public static PopName glPopName = ((PopName)(GL.GetDelegateForExtensionMethod("glPopName", typeof(PopName)))) ?? new PopName(Imports.PopName);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrimitiveRestartIndexNV(GLuint index);
        public static PrimitiveRestartIndexNV glPrimitiveRestartIndexNV = ((PrimitiveRestartIndexNV)(GL.GetDelegateForExtensionMethod("glPrimitiveRestartIndexNV", typeof(PrimitiveRestartIndexNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrimitiveRestartNV();
        public static PrimitiveRestartNV glPrimitiveRestartNV = ((PrimitiveRestartNV)(GL.GetDelegateForExtensionMethod("glPrimitiveRestartNV", typeof(PrimitiveRestartNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrioritizeTextures(GLsizei n, System.IntPtr textures, System.IntPtr priorities);
        public static PrioritizeTextures glPrioritizeTextures = ((PrioritizeTextures)(GL.GetDelegateForExtensionMethod("glPrioritizeTextures", typeof(PrioritizeTextures)))) ?? new PrioritizeTextures(Imports.PrioritizeTextures);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrioritizeTexturesEXT(GLsizei n, System.IntPtr textures, System.IntPtr priorities);
        public static PrioritizeTexturesEXT glPrioritizeTexturesEXT = ((PrioritizeTexturesEXT)(GL.GetDelegateForExtensionMethod("glPrioritizeTexturesEXT", typeof(PrioritizeTexturesEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramBufferParametersfvNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramBufferParametersfvNV glProgramBufferParametersfvNV = ((ProgramBufferParametersfvNV)(GL.GetDelegateForExtensionMethod("glProgramBufferParametersfvNV", typeof(ProgramBufferParametersfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramBufferParametersIivNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramBufferParametersIivNV glProgramBufferParametersIivNV = ((ProgramBufferParametersIivNV)(GL.GetDelegateForExtensionMethod("glProgramBufferParametersIivNV", typeof(ProgramBufferParametersIivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramBufferParametersIuivNV(Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramBufferParametersIuivNV glProgramBufferParametersIuivNV = ((ProgramBufferParametersIuivNV)(GL.GetDelegateForExtensionMethod("glProgramBufferParametersIuivNV", typeof(ProgramBufferParametersIuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4dARB(Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramEnvParameter4dARB glProgramEnvParameter4dARB = ((ProgramEnvParameter4dARB)(GL.GetDelegateForExtensionMethod("glProgramEnvParameter4dARB", typeof(ProgramEnvParameter4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4dvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameter4dvARB glProgramEnvParameter4dvARB = ((ProgramEnvParameter4dvARB)(GL.GetDelegateForExtensionMethod("glProgramEnvParameter4dvARB", typeof(ProgramEnvParameter4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4fARB(Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramEnvParameter4fARB glProgramEnvParameter4fARB = ((ProgramEnvParameter4fARB)(GL.GetDelegateForExtensionMethod("glProgramEnvParameter4fARB", typeof(ProgramEnvParameter4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4fvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameter4fvARB glProgramEnvParameter4fvARB = ((ProgramEnvParameter4fvARB)(GL.GetDelegateForExtensionMethod("glProgramEnvParameter4fvARB", typeof(ProgramEnvParameter4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4iNV(Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w);
        public static ProgramEnvParameterI4iNV glProgramEnvParameterI4iNV = ((ProgramEnvParameterI4iNV)(GL.GetDelegateForExtensionMethod("glProgramEnvParameterI4iNV", typeof(ProgramEnvParameterI4iNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4ivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV = ((ProgramEnvParameterI4ivNV)(GL.GetDelegateForExtensionMethod("glProgramEnvParameterI4ivNV", typeof(ProgramEnvParameterI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4uiNV(Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        public static ProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV = ((ProgramEnvParameterI4uiNV)(GL.GetDelegateForExtensionMethod("glProgramEnvParameterI4uiNV", typeof(ProgramEnvParameterI4uiNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4uivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV = ((ProgramEnvParameterI4uivNV)(GL.GetDelegateForExtensionMethod("glProgramEnvParameterI4uivNV", typeof(ProgramEnvParameterI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameters4fvEXT(Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT = ((ProgramEnvParameters4fvEXT)(GL.GetDelegateForExtensionMethod("glProgramEnvParameters4fvEXT", typeof(ProgramEnvParameters4fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParametersI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV = ((ProgramEnvParametersI4ivNV)(GL.GetDelegateForExtensionMethod("glProgramEnvParametersI4ivNV", typeof(ProgramEnvParametersI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParametersI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV = ((ProgramEnvParametersI4uivNV)(GL.GetDelegateForExtensionMethod("glProgramEnvParametersI4uivNV", typeof(ProgramEnvParametersI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4dARB(Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramLocalParameter4dARB glProgramLocalParameter4dARB = ((ProgramLocalParameter4dARB)(GL.GetDelegateForExtensionMethod("glProgramLocalParameter4dARB", typeof(ProgramLocalParameter4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4dvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameter4dvARB glProgramLocalParameter4dvARB = ((ProgramLocalParameter4dvARB)(GL.GetDelegateForExtensionMethod("glProgramLocalParameter4dvARB", typeof(ProgramLocalParameter4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4fARB(Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramLocalParameter4fARB glProgramLocalParameter4fARB = ((ProgramLocalParameter4fARB)(GL.GetDelegateForExtensionMethod("glProgramLocalParameter4fARB", typeof(ProgramLocalParameter4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4fvARB(Enums.ARB_vertex_program target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameter4fvARB glProgramLocalParameter4fvARB = ((ProgramLocalParameter4fvARB)(GL.GetDelegateForExtensionMethod("glProgramLocalParameter4fvARB", typeof(ProgramLocalParameter4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4iNV(Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w);
        public static ProgramLocalParameterI4iNV glProgramLocalParameterI4iNV = ((ProgramLocalParameterI4iNV)(GL.GetDelegateForExtensionMethod("glProgramLocalParameterI4iNV", typeof(ProgramLocalParameterI4iNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4ivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV = ((ProgramLocalParameterI4ivNV)(GL.GetDelegateForExtensionMethod("glProgramLocalParameterI4ivNV", typeof(ProgramLocalParameterI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4uiNV(Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        public static ProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV = ((ProgramLocalParameterI4uiNV)(GL.GetDelegateForExtensionMethod("glProgramLocalParameterI4uiNV", typeof(ProgramLocalParameterI4uiNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4uivNV(Enums.NV_gpu_program4 target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV = ((ProgramLocalParameterI4uivNV)(GL.GetDelegateForExtensionMethod("glProgramLocalParameterI4uivNV", typeof(ProgramLocalParameterI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameters4fvEXT(Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT = ((ProgramLocalParameters4fvEXT)(GL.GetDelegateForExtensionMethod("glProgramLocalParameters4fvEXT", typeof(ProgramLocalParameters4fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParametersI4ivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV = ((ProgramLocalParametersI4ivNV)(GL.GetDelegateForExtensionMethod("glProgramLocalParametersI4ivNV", typeof(ProgramLocalParametersI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParametersI4uivNV(Enums.NV_gpu_program4 target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV = ((ProgramLocalParametersI4uivNV)(GL.GetDelegateForExtensionMethod("glProgramLocalParametersI4uivNV", typeof(ProgramLocalParametersI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4dNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramNamedParameter4dNV glProgramNamedParameter4dNV = ((ProgramNamedParameter4dNV)(GL.GetDelegateForExtensionMethod("glProgramNamedParameter4dNV", typeof(ProgramNamedParameter4dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v);
        public static ProgramNamedParameter4dvNV glProgramNamedParameter4dvNV = ((ProgramNamedParameter4dvNV)(GL.GetDelegateForExtensionMethod("glProgramNamedParameter4dvNV", typeof(ProgramNamedParameter4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4fNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramNamedParameter4fNV glProgramNamedParameter4fNV = ((ProgramNamedParameter4fNV)(GL.GetDelegateForExtensionMethod("glProgramNamedParameter4fNV", typeof(ProgramNamedParameter4fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v);
        public static ProgramNamedParameter4fvNV glProgramNamedParameter4fvNV = ((ProgramNamedParameter4fvNV)(GL.GetDelegateForExtensionMethod("glProgramNamedParameter4fvNV", typeof(ProgramNamedParameter4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4dNV(Enums.NV_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramParameter4dNV glProgramParameter4dNV = ((ProgramParameter4dNV)(GL.GetDelegateForExtensionMethod("glProgramParameter4dNV", typeof(ProgramParameter4dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4dvNV(Enums.NV_vertex_program target, GLuint index, System.IntPtr v);
        public static ProgramParameter4dvNV glProgramParameter4dvNV = ((ProgramParameter4dvNV)(GL.GetDelegateForExtensionMethod("glProgramParameter4dvNV", typeof(ProgramParameter4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4fNV(Enums.NV_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramParameter4fNV glProgramParameter4fNV = ((ProgramParameter4fNV)(GL.GetDelegateForExtensionMethod("glProgramParameter4fNV", typeof(ProgramParameter4fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4fvNV(Enums.NV_vertex_program target, GLuint index, System.IntPtr v);
        public static ProgramParameter4fvNV glProgramParameter4fvNV = ((ProgramParameter4fvNV)(GL.GetDelegateForExtensionMethod("glProgramParameter4fvNV", typeof(ProgramParameter4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameteriEXT(GLuint program, Enums.EXT_geometry_shader4 pname, GLint value);
        public static ProgramParameteriEXT glProgramParameteriEXT = ((ProgramParameteriEXT)(GL.GetDelegateForExtensionMethod("glProgramParameteriEXT", typeof(ProgramParameteriEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameters4dvNV(Enums.NV_vertex_program target, GLuint index, GLuint count, System.IntPtr v);
        public static ProgramParameters4dvNV glProgramParameters4dvNV = ((ProgramParameters4dvNV)(GL.GetDelegateForExtensionMethod("glProgramParameters4dvNV", typeof(ProgramParameters4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameters4fvNV(Enums.NV_vertex_program target, GLuint index, GLuint count, System.IntPtr v);
        public static ProgramParameters4fvNV glProgramParameters4fvNV = ((ProgramParameters4fvNV)(GL.GetDelegateForExtensionMethod("glProgramParameters4fvNV", typeof(ProgramParameters4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramStringARB(Enums.ARB_vertex_program target, Enums.ARB_vertex_program format, GLsizei len, System.IntPtr @string);
        public static ProgramStringARB glProgramStringARB = ((ProgramStringARB)(GL.GetDelegateForExtensionMethod("glProgramStringARB", typeof(ProgramStringARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramVertexLimitNV(Enums.NV_geometry_program4 target, GLint limit);
        public static ProgramVertexLimitNV glProgramVertexLimitNV = ((ProgramVertexLimitNV)(GL.GetDelegateForExtensionMethod("glProgramVertexLimitNV", typeof(ProgramVertexLimitNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushAttrib(Enums.AttribMask mask);
        public static PushAttrib glPushAttrib = ((PushAttrib)(GL.GetDelegateForExtensionMethod("glPushAttrib", typeof(PushAttrib)))) ?? new PushAttrib(Imports.PushAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushClientAttrib(Enums.ClientAttribMask mask);
        public static PushClientAttrib glPushClientAttrib = ((PushClientAttrib)(GL.GetDelegateForExtensionMethod("glPushClientAttrib", typeof(PushClientAttrib)))) ?? new PushClientAttrib(Imports.PushClientAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushMatrix();
        public static PushMatrix glPushMatrix = ((PushMatrix)(GL.GetDelegateForExtensionMethod("glPushMatrix", typeof(PushMatrix)))) ?? new PushMatrix(Imports.PushMatrix);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushName(GLuint name);
        public static PushName glPushName = ((PushName)(GL.GetDelegateForExtensionMethod("glPushName", typeof(PushName)))) ?? new PushName(Imports.PushName);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2d(GLdouble x, GLdouble y);
        public static RasterPos2d glRasterPos2d = ((RasterPos2d)(GL.GetDelegateForExtensionMethod("glRasterPos2d", typeof(RasterPos2d)))) ?? new RasterPos2d(Imports.RasterPos2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2dv(System.IntPtr v);
        public static RasterPos2dv glRasterPos2dv = ((RasterPos2dv)(GL.GetDelegateForExtensionMethod("glRasterPos2dv", typeof(RasterPos2dv)))) ?? new RasterPos2dv(Imports.RasterPos2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2f(GLfloat x, GLfloat y);
        public static RasterPos2f glRasterPos2f = ((RasterPos2f)(GL.GetDelegateForExtensionMethod("glRasterPos2f", typeof(RasterPos2f)))) ?? new RasterPos2f(Imports.RasterPos2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2fv(System.IntPtr v);
        public static RasterPos2fv glRasterPos2fv = ((RasterPos2fv)(GL.GetDelegateForExtensionMethod("glRasterPos2fv", typeof(RasterPos2fv)))) ?? new RasterPos2fv(Imports.RasterPos2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2i(GLint x, GLint y);
        public static RasterPos2i glRasterPos2i = ((RasterPos2i)(GL.GetDelegateForExtensionMethod("glRasterPos2i", typeof(RasterPos2i)))) ?? new RasterPos2i(Imports.RasterPos2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2iv(System.IntPtr v);
        public static RasterPos2iv glRasterPos2iv = ((RasterPos2iv)(GL.GetDelegateForExtensionMethod("glRasterPos2iv", typeof(RasterPos2iv)))) ?? new RasterPos2iv(Imports.RasterPos2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2s(GLshort x, GLshort y);
        public static RasterPos2s glRasterPos2s = ((RasterPos2s)(GL.GetDelegateForExtensionMethod("glRasterPos2s", typeof(RasterPos2s)))) ?? new RasterPos2s(Imports.RasterPos2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2sv(System.IntPtr v);
        public static RasterPos2sv glRasterPos2sv = ((RasterPos2sv)(GL.GetDelegateForExtensionMethod("glRasterPos2sv", typeof(RasterPos2sv)))) ?? new RasterPos2sv(Imports.RasterPos2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
        public static RasterPos3d glRasterPos3d = ((RasterPos3d)(GL.GetDelegateForExtensionMethod("glRasterPos3d", typeof(RasterPos3d)))) ?? new RasterPos3d(Imports.RasterPos3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3dv(System.IntPtr v);
        public static RasterPos3dv glRasterPos3dv = ((RasterPos3dv)(GL.GetDelegateForExtensionMethod("glRasterPos3dv", typeof(RasterPos3dv)))) ?? new RasterPos3dv(Imports.RasterPos3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
        public static RasterPos3f glRasterPos3f = ((RasterPos3f)(GL.GetDelegateForExtensionMethod("glRasterPos3f", typeof(RasterPos3f)))) ?? new RasterPos3f(Imports.RasterPos3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3fv(System.IntPtr v);
        public static RasterPos3fv glRasterPos3fv = ((RasterPos3fv)(GL.GetDelegateForExtensionMethod("glRasterPos3fv", typeof(RasterPos3fv)))) ?? new RasterPos3fv(Imports.RasterPos3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3i(GLint x, GLint y, GLint z);
        public static RasterPos3i glRasterPos3i = ((RasterPos3i)(GL.GetDelegateForExtensionMethod("glRasterPos3i", typeof(RasterPos3i)))) ?? new RasterPos3i(Imports.RasterPos3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3iv(System.IntPtr v);
        public static RasterPos3iv glRasterPos3iv = ((RasterPos3iv)(GL.GetDelegateForExtensionMethod("glRasterPos3iv", typeof(RasterPos3iv)))) ?? new RasterPos3iv(Imports.RasterPos3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3s(GLshort x, GLshort y, GLshort z);
        public static RasterPos3s glRasterPos3s = ((RasterPos3s)(GL.GetDelegateForExtensionMethod("glRasterPos3s", typeof(RasterPos3s)))) ?? new RasterPos3s(Imports.RasterPos3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3sv(System.IntPtr v);
        public static RasterPos3sv glRasterPos3sv = ((RasterPos3sv)(GL.GetDelegateForExtensionMethod("glRasterPos3sv", typeof(RasterPos3sv)))) ?? new RasterPos3sv(Imports.RasterPos3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static RasterPos4d glRasterPos4d = ((RasterPos4d)(GL.GetDelegateForExtensionMethod("glRasterPos4d", typeof(RasterPos4d)))) ?? new RasterPos4d(Imports.RasterPos4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4dv(System.IntPtr v);
        public static RasterPos4dv glRasterPos4dv = ((RasterPos4dv)(GL.GetDelegateForExtensionMethod("glRasterPos4dv", typeof(RasterPos4dv)))) ?? new RasterPos4dv(Imports.RasterPos4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static RasterPos4f glRasterPos4f = ((RasterPos4f)(GL.GetDelegateForExtensionMethod("glRasterPos4f", typeof(RasterPos4f)))) ?? new RasterPos4f(Imports.RasterPos4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4fv(System.IntPtr v);
        public static RasterPos4fv glRasterPos4fv = ((RasterPos4fv)(GL.GetDelegateForExtensionMethod("glRasterPos4fv", typeof(RasterPos4fv)))) ?? new RasterPos4fv(Imports.RasterPos4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
        public static RasterPos4i glRasterPos4i = ((RasterPos4i)(GL.GetDelegateForExtensionMethod("glRasterPos4i", typeof(RasterPos4i)))) ?? new RasterPos4i(Imports.RasterPos4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4iv(System.IntPtr v);
        public static RasterPos4iv glRasterPos4iv = ((RasterPos4iv)(GL.GetDelegateForExtensionMethod("glRasterPos4iv", typeof(RasterPos4iv)))) ?? new RasterPos4iv(Imports.RasterPos4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
        public static RasterPos4s glRasterPos4s = ((RasterPos4s)(GL.GetDelegateForExtensionMethod("glRasterPos4s", typeof(RasterPos4s)))) ?? new RasterPos4s(Imports.RasterPos4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4sv(System.IntPtr v);
        public static RasterPos4sv glRasterPos4sv = ((RasterPos4sv)(GL.GetDelegateForExtensionMethod("glRasterPos4sv", typeof(RasterPos4sv)))) ?? new RasterPos4sv(Imports.RasterPos4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReadBuffer(Enums.ReadBufferMode mode);
        public static ReadBuffer glReadBuffer = ((ReadBuffer)(GL.GetDelegateForExtensionMethod("glReadBuffer", typeof(ReadBuffer)))) ?? new ReadBuffer(Imports.ReadBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReadInstrumentsSGIX(GLint marker);
        public static ReadInstrumentsSGIX glReadInstrumentsSGIX = ((ReadInstrumentsSGIX)(GL.GetDelegateForExtensionMethod("glReadInstrumentsSGIX", typeof(ReadInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, [In, Out()] System.IntPtr pixels);
        public static ReadPixels glReadPixels = ((ReadPixels)(GL.GetDelegateForExtensionMethod("glReadPixels", typeof(ReadPixels)))) ?? new ReadPixels(Imports.ReadPixels);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
        public static Rectd glRectd = ((Rectd)(GL.GetDelegateForExtensionMethod("glRectd", typeof(Rectd)))) ?? new Rectd(Imports.Rectd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectdv(System.IntPtr v1, System.IntPtr v2);
        public static Rectdv glRectdv = ((Rectdv)(GL.GetDelegateForExtensionMethod("glRectdv", typeof(Rectdv)))) ?? new Rectdv(Imports.Rectdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
        public static Rectf glRectf = ((Rectf)(GL.GetDelegateForExtensionMethod("glRectf", typeof(Rectf)))) ?? new Rectf(Imports.Rectf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectfv(System.IntPtr v1, System.IntPtr v2);
        public static Rectfv glRectfv = ((Rectfv)(GL.GetDelegateForExtensionMethod("glRectfv", typeof(Rectfv)))) ?? new Rectfv(Imports.Rectfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
        public static Recti glRecti = ((Recti)(GL.GetDelegateForExtensionMethod("glRecti", typeof(Recti)))) ?? new Recti(Imports.Recti);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectiv(System.IntPtr v1, System.IntPtr v2);
        public static Rectiv glRectiv = ((Rectiv)(GL.GetDelegateForExtensionMethod("glRectiv", typeof(Rectiv)))) ?? new Rectiv(Imports.Rectiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
        public static Rects glRects = ((Rects)(GL.GetDelegateForExtensionMethod("glRects", typeof(Rects)))) ?? new Rects(Imports.Rects);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectsv(System.IntPtr v1, System.IntPtr v2);
        public static Rectsv glRectsv = ((Rectsv)(GL.GetDelegateForExtensionMethod("glRectsv", typeof(Rectsv)))) ?? new Rectsv(Imports.Rectsv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReferencePlaneSGIX(System.IntPtr equation);
        public static ReferencePlaneSGIX glReferencePlaneSGIX = ((ReferencePlaneSGIX)(GL.GetDelegateForExtensionMethod("glReferencePlaneSGIX", typeof(ReferencePlaneSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RenderbufferStorageEXT(Enums.EXT_framebuffer_object target, Enums.EXT_framebuffer_object internalformat, GLsizei width, GLsizei height);
        public static RenderbufferStorageEXT glRenderbufferStorageEXT = ((RenderbufferStorageEXT)(GL.GetDelegateForExtensionMethod("glRenderbufferStorageEXT", typeof(RenderbufferStorageEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RenderbufferStorageMultisampleCoverageNV(Enums.NV_framebuffer_multisample_coverage target, GLsizei coverageSamples, GLsizei colorSamples, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height);
        public static RenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV = ((RenderbufferStorageMultisampleCoverageNV)(GL.GetDelegateForExtensionMethod("glRenderbufferStorageMultisampleCoverageNV", typeof(RenderbufferStorageMultisampleCoverageNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RenderbufferStorageMultisampleEXT(Enums.EXT_framebuffer_multisample target, GLsizei samples, Enums.EXT_framebuffer_multisample internalformat, GLsizei width, GLsizei height);
        public static RenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT = ((RenderbufferStorageMultisampleEXT)(GL.GetDelegateForExtensionMethod("glRenderbufferStorageMultisampleEXT", typeof(RenderbufferStorageMultisampleEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint RenderMode(Enums.RenderingMode mode);
        public static RenderMode glRenderMode = ((RenderMode)(GL.GetDelegateForExtensionMethod("glRenderMode", typeof(RenderMode)))) ?? new RenderMode(Imports.RenderMode);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodePointerSUN(Enums.SUN_triangle_list type, GLsizei stride, System.IntPtr pointer);
        public static ReplacementCodePointerSUN glReplacementCodePointerSUN = ((ReplacementCodePointerSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodePointerSUN", typeof(ReplacementCodePointerSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeubSUN(GLubyte code);
        public static ReplacementCodeubSUN glReplacementCodeubSUN = ((ReplacementCodeubSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeubSUN", typeof(ReplacementCodeubSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeubvSUN(System.IntPtr code);
        public static ReplacementCodeubvSUN glReplacementCodeubvSUN = ((ReplacementCodeubvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeubvSUN", typeof(ReplacementCodeubvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN = ((ReplacementCodeuiColor3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiColor3fVertex3fSUN", typeof(ReplacementCodeuiColor3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v);
        public static ReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN = ((ReplacementCodeuiColor3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiColor3fVertex3fvSUN", typeof(ReplacementCodeuiColor3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN = ((ReplacementCodeuiColor4fNormal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiColor4fNormal3fVertex3fSUN", typeof(ReplacementCodeuiColor4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN = ((ReplacementCodeuiColor4fNormal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", typeof(ReplacementCodeuiColor4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN = ((ReplacementCodeuiColor4ubVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiColor4ubVertex3fSUN", typeof(ReplacementCodeuiColor4ubVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v);
        public static ReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN = ((ReplacementCodeuiColor4ubVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiColor4ubVertex3fvSUN", typeof(ReplacementCodeuiColor4ubVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN = ((ReplacementCodeuiNormal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiNormal3fVertex3fSUN", typeof(ReplacementCodeuiNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN = ((ReplacementCodeuiNormal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiNormal3fVertex3fvSUN", typeof(ReplacementCodeuiNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiSUN(GLuint code);
        public static ReplacementCodeuiSUN glReplacementCodeuiSUN = ((ReplacementCodeuiSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiSUN", typeof(ReplacementCodeuiSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = ((ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", typeof(ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = ((ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = ((ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", typeof(ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = ((ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", typeof(ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN = ((ReplacementCodeuiTexCoord2fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fVertex3fSUN", typeof(ReplacementCodeuiTexCoord2fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr v);
        public static ReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN = ((ReplacementCodeuiTexCoord2fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fVertex3fvSUN", typeof(ReplacementCodeuiTexCoord2fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN = ((ReplacementCodeuiVertex3fSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiVertex3fSUN", typeof(ReplacementCodeuiVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiVertex3fvSUN(System.IntPtr rc, System.IntPtr v);
        public static ReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN = ((ReplacementCodeuiVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuiVertex3fvSUN", typeof(ReplacementCodeuiVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuivSUN(System.IntPtr code);
        public static ReplacementCodeuivSUN glReplacementCodeuivSUN = ((ReplacementCodeuivSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeuivSUN", typeof(ReplacementCodeuivSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeusSUN(GLushort code);
        public static ReplacementCodeusSUN glReplacementCodeusSUN = ((ReplacementCodeusSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeusSUN", typeof(ReplacementCodeusSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeusvSUN(System.IntPtr code);
        public static ReplacementCodeusvSUN glReplacementCodeusvSUN = ((ReplacementCodeusvSUN)(GL.GetDelegateForExtensionMethod("glReplacementCodeusvSUN", typeof(ReplacementCodeusvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RequestResidentProgramsNV(GLsizei n, System.IntPtr programs);
        public static RequestResidentProgramsNV glRequestResidentProgramsNV = ((RequestResidentProgramsNV)(GL.GetDelegateForExtensionMethod("glRequestResidentProgramsNV", typeof(RequestResidentProgramsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetHistogram(Enums.VERSION_1_2 target);
        public static ResetHistogram glResetHistogram = ((ResetHistogram)(GL.GetDelegateForExtensionMethod("glResetHistogram", typeof(ResetHistogram)))) ?? new ResetHistogram(Imports.ResetHistogram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetHistogramEXT(Enums.HistogramTargetEXT target);
        public static ResetHistogramEXT glResetHistogramEXT = ((ResetHistogramEXT)(GL.GetDelegateForExtensionMethod("glResetHistogramEXT", typeof(ResetHistogramEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetMinmax(Enums.VERSION_1_2 target);
        public static ResetMinmax glResetMinmax = ((ResetMinmax)(GL.GetDelegateForExtensionMethod("glResetMinmax", typeof(ResetMinmax)))) ?? new ResetMinmax(Imports.ResetMinmax);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetMinmaxEXT(Enums.MinmaxTargetEXT target);
        public static ResetMinmaxEXT glResetMinmaxEXT = ((ResetMinmaxEXT)(GL.GetDelegateForExtensionMethod("glResetMinmaxEXT", typeof(ResetMinmaxEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResizeBuffersMESA();
        public static ResizeBuffersMESA glResizeBuffersMESA = ((ResizeBuffersMESA)(GL.GetDelegateForExtensionMethod("glResizeBuffersMESA", typeof(ResizeBuffersMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
        public static Rotated glRotated = ((Rotated)(GL.GetDelegateForExtensionMethod("glRotated", typeof(Rotated)))) ?? new Rotated(Imports.Rotated);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
        public static Rotatef glRotatef = ((Rotatef)(GL.GetDelegateForExtensionMethod("glRotatef", typeof(Rotatef)))) ?? new Rotatef(Imports.Rotatef);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleCoverage(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert);
        public static SampleCoverage glSampleCoverage = ((SampleCoverage)(GL.GetDelegateForExtensionMethod("glSampleCoverage", typeof(SampleCoverage)))) ?? new SampleCoverage(Imports.SampleCoverage);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleCoverageARB(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert);
        public static SampleCoverageARB glSampleCoverageARB = ((SampleCoverageARB)(GL.GetDelegateForExtensionMethod("glSampleCoverageARB", typeof(SampleCoverageARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleMapATI(GLuint dst, GLuint interp, Enums.ATI_fragment_shader swizzle);
        public static SampleMapATI glSampleMapATI = ((SampleMapATI)(GL.GetDelegateForExtensionMethod("glSampleMapATI", typeof(SampleMapATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleMaskEXT(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert);
        public static SampleMaskEXT glSampleMaskEXT = ((SampleMaskEXT)(GL.GetDelegateForExtensionMethod("glSampleMaskEXT", typeof(SampleMaskEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleMaskSGIS(GLclampf value, [MarshalAs(UnmanagedType.Bool)] bool invert);
        public static SampleMaskSGIS glSampleMaskSGIS = ((SampleMaskSGIS)(GL.GetDelegateForExtensionMethod("glSampleMaskSGIS", typeof(SampleMaskSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SamplePatternEXT(Enums.EXT_multisample pattern);
        public static SamplePatternEXT glSamplePatternEXT = ((SamplePatternEXT)(GL.GetDelegateForExtensionMethod("glSamplePatternEXT", typeof(SamplePatternEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SamplePatternSGIS(Enums.SamplePatternSGIS pattern);
        public static SamplePatternSGIS glSamplePatternSGIS = ((SamplePatternSGIS)(GL.GetDelegateForExtensionMethod("glSamplePatternSGIS", typeof(SamplePatternSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Scaled(GLdouble x, GLdouble y, GLdouble z);
        public static Scaled glScaled = ((Scaled)(GL.GetDelegateForExtensionMethod("glScaled", typeof(Scaled)))) ?? new Scaled(Imports.Scaled);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Scalef(GLfloat x, GLfloat y, GLfloat z);
        public static Scalef glScalef = ((Scalef)(GL.GetDelegateForExtensionMethod("glScalef", typeof(Scalef)))) ?? new Scalef(Imports.Scalef);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
        public static Scissor glScissor = ((Scissor)(GL.GetDelegateForExtensionMethod("glScissor", typeof(Scissor)))) ?? new Scissor(Imports.Scissor);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
        public static SecondaryColor3b glSecondaryColor3b = ((SecondaryColor3b)(GL.GetDelegateForExtensionMethod("glSecondaryColor3b", typeof(SecondaryColor3b)))) ?? new SecondaryColor3b(Imports.SecondaryColor3b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
        public static SecondaryColor3bEXT glSecondaryColor3bEXT = ((SecondaryColor3bEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3bEXT", typeof(SecondaryColor3bEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3bv(System.IntPtr v);
        public static SecondaryColor3bv glSecondaryColor3bv = ((SecondaryColor3bv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3bv", typeof(SecondaryColor3bv)))) ?? new SecondaryColor3bv(Imports.SecondaryColor3bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3bvEXT(System.IntPtr v);
        public static SecondaryColor3bvEXT glSecondaryColor3bvEXT = ((SecondaryColor3bvEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3bvEXT", typeof(SecondaryColor3bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
        public static SecondaryColor3d glSecondaryColor3d = ((SecondaryColor3d)(GL.GetDelegateForExtensionMethod("glSecondaryColor3d", typeof(SecondaryColor3d)))) ?? new SecondaryColor3d(Imports.SecondaryColor3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
        public static SecondaryColor3dEXT glSecondaryColor3dEXT = ((SecondaryColor3dEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3dEXT", typeof(SecondaryColor3dEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3dv(System.IntPtr v);
        public static SecondaryColor3dv glSecondaryColor3dv = ((SecondaryColor3dv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3dv", typeof(SecondaryColor3dv)))) ?? new SecondaryColor3dv(Imports.SecondaryColor3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3dvEXT(System.IntPtr v);
        public static SecondaryColor3dvEXT glSecondaryColor3dvEXT = ((SecondaryColor3dvEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3dvEXT", typeof(SecondaryColor3dvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
        public static SecondaryColor3f glSecondaryColor3f = ((SecondaryColor3f)(GL.GetDelegateForExtensionMethod("glSecondaryColor3f", typeof(SecondaryColor3f)))) ?? new SecondaryColor3f(Imports.SecondaryColor3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
        public static SecondaryColor3fEXT glSecondaryColor3fEXT = ((SecondaryColor3fEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3fEXT", typeof(SecondaryColor3fEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3fv(System.IntPtr v);
        public static SecondaryColor3fv glSecondaryColor3fv = ((SecondaryColor3fv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3fv", typeof(SecondaryColor3fv)))) ?? new SecondaryColor3fv(Imports.SecondaryColor3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3fvEXT(System.IntPtr v);
        public static SecondaryColor3fvEXT glSecondaryColor3fvEXT = ((SecondaryColor3fvEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3fvEXT", typeof(SecondaryColor3fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
        public static SecondaryColor3hNV glSecondaryColor3hNV = ((SecondaryColor3hNV)(GL.GetDelegateForExtensionMethod("glSecondaryColor3hNV", typeof(SecondaryColor3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3hvNV(System.IntPtr v);
        public static SecondaryColor3hvNV glSecondaryColor3hvNV = ((SecondaryColor3hvNV)(GL.GetDelegateForExtensionMethod("glSecondaryColor3hvNV", typeof(SecondaryColor3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3i(GLint red, GLint green, GLint blue);
        public static SecondaryColor3i glSecondaryColor3i = ((SecondaryColor3i)(GL.GetDelegateForExtensionMethod("glSecondaryColor3i", typeof(SecondaryColor3i)))) ?? new SecondaryColor3i(Imports.SecondaryColor3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3iEXT(GLint red, GLint green, GLint blue);
        public static SecondaryColor3iEXT glSecondaryColor3iEXT = ((SecondaryColor3iEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3iEXT", typeof(SecondaryColor3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3iv(System.IntPtr v);
        public static SecondaryColor3iv glSecondaryColor3iv = ((SecondaryColor3iv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3iv", typeof(SecondaryColor3iv)))) ?? new SecondaryColor3iv(Imports.SecondaryColor3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ivEXT(System.IntPtr v);
        public static SecondaryColor3ivEXT glSecondaryColor3ivEXT = ((SecondaryColor3ivEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3ivEXT", typeof(SecondaryColor3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
        public static SecondaryColor3s glSecondaryColor3s = ((SecondaryColor3s)(GL.GetDelegateForExtensionMethod("glSecondaryColor3s", typeof(SecondaryColor3s)))) ?? new SecondaryColor3s(Imports.SecondaryColor3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
        public static SecondaryColor3sEXT glSecondaryColor3sEXT = ((SecondaryColor3sEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3sEXT", typeof(SecondaryColor3sEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3sv(System.IntPtr v);
        public static SecondaryColor3sv glSecondaryColor3sv = ((SecondaryColor3sv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3sv", typeof(SecondaryColor3sv)))) ?? new SecondaryColor3sv(Imports.SecondaryColor3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3svEXT(System.IntPtr v);
        public static SecondaryColor3svEXT glSecondaryColor3svEXT = ((SecondaryColor3svEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3svEXT", typeof(SecondaryColor3svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
        public static SecondaryColor3ub glSecondaryColor3ub = ((SecondaryColor3ub)(GL.GetDelegateForExtensionMethod("glSecondaryColor3ub", typeof(SecondaryColor3ub)))) ?? new SecondaryColor3ub(Imports.SecondaryColor3ub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
        public static SecondaryColor3ubEXT glSecondaryColor3ubEXT = ((SecondaryColor3ubEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3ubEXT", typeof(SecondaryColor3ubEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ubv(System.IntPtr v);
        public static SecondaryColor3ubv glSecondaryColor3ubv = ((SecondaryColor3ubv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3ubv", typeof(SecondaryColor3ubv)))) ?? new SecondaryColor3ubv(Imports.SecondaryColor3ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ubvEXT(System.IntPtr v);
        public static SecondaryColor3ubvEXT glSecondaryColor3ubvEXT = ((SecondaryColor3ubvEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3ubvEXT", typeof(SecondaryColor3ubvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
        public static SecondaryColor3ui glSecondaryColor3ui = ((SecondaryColor3ui)(GL.GetDelegateForExtensionMethod("glSecondaryColor3ui", typeof(SecondaryColor3ui)))) ?? new SecondaryColor3ui(Imports.SecondaryColor3ui);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
        public static SecondaryColor3uiEXT glSecondaryColor3uiEXT = ((SecondaryColor3uiEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3uiEXT", typeof(SecondaryColor3uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3uiv(System.IntPtr v);
        public static SecondaryColor3uiv glSecondaryColor3uiv = ((SecondaryColor3uiv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3uiv", typeof(SecondaryColor3uiv)))) ?? new SecondaryColor3uiv(Imports.SecondaryColor3uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3uivEXT(System.IntPtr v);
        public static SecondaryColor3uivEXT glSecondaryColor3uivEXT = ((SecondaryColor3uivEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3uivEXT", typeof(SecondaryColor3uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
        public static SecondaryColor3us glSecondaryColor3us = ((SecondaryColor3us)(GL.GetDelegateForExtensionMethod("glSecondaryColor3us", typeof(SecondaryColor3us)))) ?? new SecondaryColor3us(Imports.SecondaryColor3us);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
        public static SecondaryColor3usEXT glSecondaryColor3usEXT = ((SecondaryColor3usEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3usEXT", typeof(SecondaryColor3usEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3usv(System.IntPtr v);
        public static SecondaryColor3usv glSecondaryColor3usv = ((SecondaryColor3usv)(GL.GetDelegateForExtensionMethod("glSecondaryColor3usv", typeof(SecondaryColor3usv)))) ?? new SecondaryColor3usv(Imports.SecondaryColor3usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3usvEXT(System.IntPtr v);
        public static SecondaryColor3usvEXT glSecondaryColor3usvEXT = ((SecondaryColor3usvEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColor3usvEXT", typeof(SecondaryColor3usvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer);
        public static SecondaryColorPointer glSecondaryColorPointer = ((SecondaryColorPointer)(GL.GetDelegateForExtensionMethod("glSecondaryColorPointer", typeof(SecondaryColorPointer)))) ?? new SecondaryColorPointer(Imports.SecondaryColorPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColorPointerEXT(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer);
        public static SecondaryColorPointerEXT glSecondaryColorPointerEXT = ((SecondaryColorPointerEXT)(GL.GetDelegateForExtensionMethod("glSecondaryColorPointerEXT", typeof(SecondaryColorPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColorPointerListIBM(GLint size, Enums.IBM_vertex_array_lists type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static SecondaryColorPointerListIBM glSecondaryColorPointerListIBM = ((SecondaryColorPointerListIBM)(GL.GetDelegateForExtensionMethod("glSecondaryColorPointerListIBM", typeof(SecondaryColorPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SelectBuffer(GLsizei size, [In, Out()] System.IntPtr buffer);
        public static SelectBuffer glSelectBuffer = ((SelectBuffer)(GL.GetDelegateForExtensionMethod("glSelectBuffer", typeof(SelectBuffer)))) ?? new SelectBuffer(Imports.SelectBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SeparableFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, System.IntPtr column);
        public static SeparableFilter2D glSeparableFilter2D = ((SeparableFilter2D)(GL.GetDelegateForExtensionMethod("glSeparableFilter2D", typeof(SeparableFilter2D)))) ?? new SeparableFilter2D(Imports.SeparableFilter2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SeparableFilter2DEXT(Enums.SeparableTargetEXT target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, System.IntPtr column);
        public static SeparableFilter2DEXT glSeparableFilter2DEXT = ((SeparableFilter2DEXT)(GL.GetDelegateForExtensionMethod("glSeparableFilter2DEXT", typeof(SeparableFilter2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetFenceAPPLE(GLuint fence);
        public static SetFenceAPPLE glSetFenceAPPLE = ((SetFenceAPPLE)(GL.GetDelegateForExtensionMethod("glSetFenceAPPLE", typeof(SetFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetFenceNV(GLuint fence, Enums.NV_fence condition);
        public static SetFenceNV glSetFenceNV = ((SetFenceNV)(GL.GetDelegateForExtensionMethod("glSetFenceNV", typeof(SetFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetFragmentShaderConstantATI(GLuint dst, System.IntPtr value);
        public static SetFragmentShaderConstantATI glSetFragmentShaderConstantATI = ((SetFragmentShaderConstantATI)(GL.GetDelegateForExtensionMethod("glSetFragmentShaderConstantATI", typeof(SetFragmentShaderConstantATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetInvariantEXT(GLuint id, Enums.EXT_vertex_shader type, System.IntPtr addr);
        public static SetInvariantEXT glSetInvariantEXT = ((SetInvariantEXT)(GL.GetDelegateForExtensionMethod("glSetInvariantEXT", typeof(SetInvariantEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetLocalConstantEXT(GLuint id, Enums.EXT_vertex_shader type, System.IntPtr addr);
        public static SetLocalConstantEXT glSetLocalConstantEXT = ((SetLocalConstantEXT)(GL.GetDelegateForExtensionMethod("glSetLocalConstantEXT", typeof(SetLocalConstantEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShadeModel(Enums.ShadingModel mode);
        public static ShadeModel glShadeModel = ((ShadeModel)(GL.GetDelegateForExtensionMethod("glShadeModel", typeof(ShadeModel)))) ?? new ShadeModel(Imports.ShadeModel);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderOp1EXT(Enums.EXT_vertex_shader op, GLuint res, GLuint arg1);
        public static ShaderOp1EXT glShaderOp1EXT = ((ShaderOp1EXT)(GL.GetDelegateForExtensionMethod("glShaderOp1EXT", typeof(ShaderOp1EXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderOp2EXT(Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2);
        public static ShaderOp2EXT glShaderOp2EXT = ((ShaderOp2EXT)(GL.GetDelegateForExtensionMethod("glShaderOp2EXT", typeof(ShaderOp2EXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderOp3EXT(Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
        public static ShaderOp3EXT glShaderOp3EXT = ((ShaderOp3EXT)(GL.GetDelegateForExtensionMethod("glShaderOp3EXT", typeof(ShaderOp3EXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderSource(GLuint shader, GLsizei count, string[] @string, System.IntPtr length);
        public static ShaderSource glShaderSource = ((ShaderSource)(GL.GetDelegateForExtensionMethod("glShaderSource", typeof(ShaderSource)))) ?? new ShaderSource(Imports.ShaderSource);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, System.IntPtr length);
        public static ShaderSourceARB glShaderSourceARB = ((ShaderSourceARB)(GL.GetDelegateForExtensionMethod("glShaderSourceARB", typeof(ShaderSourceARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SharpenTexFuncSGIS(Enums.TextureTarget target, GLsizei n, System.IntPtr points);
        public static SharpenTexFuncSGIS glSharpenTexFuncSGIS = ((SharpenTexFuncSGIS)(GL.GetDelegateForExtensionMethod("glSharpenTexFuncSGIS", typeof(SharpenTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameterfSGIX(Enums.SGIX_sprite pname, GLfloat param);
        public static SpriteParameterfSGIX glSpriteParameterfSGIX = ((SpriteParameterfSGIX)(GL.GetDelegateForExtensionMethod("glSpriteParameterfSGIX", typeof(SpriteParameterfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameterfvSGIX(Enums.SGIX_sprite pname, System.IntPtr @params);
        public static SpriteParameterfvSGIX glSpriteParameterfvSGIX = ((SpriteParameterfvSGIX)(GL.GetDelegateForExtensionMethod("glSpriteParameterfvSGIX", typeof(SpriteParameterfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameteriSGIX(Enums.SGIX_sprite pname, GLint param);
        public static SpriteParameteriSGIX glSpriteParameteriSGIX = ((SpriteParameteriSGIX)(GL.GetDelegateForExtensionMethod("glSpriteParameteriSGIX", typeof(SpriteParameteriSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameterivSGIX(Enums.SGIX_sprite pname, System.IntPtr @params);
        public static SpriteParameterivSGIX glSpriteParameterivSGIX = ((SpriteParameterivSGIX)(GL.GetDelegateForExtensionMethod("glSpriteParameterivSGIX", typeof(SpriteParameterivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StartInstrumentsSGIX();
        public static StartInstrumentsSGIX glStartInstrumentsSGIX = ((StartInstrumentsSGIX)(GL.GetDelegateForExtensionMethod("glStartInstrumentsSGIX", typeof(StartInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);
        public static StencilClearTagEXT glStencilClearTagEXT = ((StencilClearTagEXT)(GL.GetDelegateForExtensionMethod("glStencilClearTagEXT", typeof(StencilClearTagEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilFunc(Enums.StencilFunction func, GLint @ref, GLuint mask);
        public static StencilFunc glStencilFunc = ((StencilFunc)(GL.GetDelegateForExtensionMethod("glStencilFunc", typeof(StencilFunc)))) ?? new StencilFunc(Imports.StencilFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilFuncSeparate(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint @ref, GLuint mask);
        public static StencilFuncSeparate glStencilFuncSeparate = ((StencilFuncSeparate)(GL.GetDelegateForExtensionMethod("glStencilFuncSeparate", typeof(StencilFuncSeparate)))) ?? new StencilFuncSeparate(Imports.StencilFuncSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilFuncSeparateATI(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint @ref, GLuint mask);
        public static StencilFuncSeparateATI glStencilFuncSeparateATI = ((StencilFuncSeparateATI)(GL.GetDelegateForExtensionMethod("glStencilFuncSeparateATI", typeof(StencilFuncSeparateATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilMask(GLuint mask);
        public static StencilMask glStencilMask = ((StencilMask)(GL.GetDelegateForExtensionMethod("glStencilMask", typeof(StencilMask)))) ?? new StencilMask(Imports.StencilMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilMaskSeparate(Enums.VERSION_2_0 face, GLuint mask);
        public static StencilMaskSeparate glStencilMaskSeparate = ((StencilMaskSeparate)(GL.GetDelegateForExtensionMethod("glStencilMaskSeparate", typeof(StencilMaskSeparate)))) ?? new StencilMaskSeparate(Imports.StencilMaskSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilOp(Enums.StencilOp fail, Enums.StencilOp zfail, Enums.StencilOp zpass);
        public static StencilOp glStencilOp = ((StencilOp)(GL.GetDelegateForExtensionMethod("glStencilOp", typeof(StencilOp)))) ?? new StencilOp(Imports.StencilOp);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilOpSeparate(Enums.VERSION_2_0 face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass);
        public static StencilOpSeparate glStencilOpSeparate = ((StencilOpSeparate)(GL.GetDelegateForExtensionMethod("glStencilOpSeparate", typeof(StencilOpSeparate)))) ?? new StencilOpSeparate(Imports.StencilOpSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilOpSeparateATI(Enums.ATI_separate_stencil face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass);
        public static StencilOpSeparateATI glStencilOpSeparateATI = ((StencilOpSeparateATI)(GL.GetDelegateForExtensionMethod("glStencilOpSeparateATI", typeof(StencilOpSeparateATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StopInstrumentsSGIX(GLint marker);
        public static StopInstrumentsSGIX glStopInstrumentsSGIX = ((StopInstrumentsSGIX)(GL.GetDelegateForExtensionMethod("glStopInstrumentsSGIX", typeof(StopInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StringMarkerGREMEDY(GLsizei len, System.IntPtr @string);
        public static StringMarkerGREMEDY glStringMarkerGREMEDY = ((StringMarkerGREMEDY)(GL.GetDelegateForExtensionMethod("glStringMarkerGREMEDY", typeof(StringMarkerGREMEDY))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SwizzleEXT(GLuint res, GLuint @in, Enums.EXT_vertex_shader outX, Enums.EXT_vertex_shader outY, Enums.EXT_vertex_shader outZ, Enums.EXT_vertex_shader outW);
        public static SwizzleEXT glSwizzleEXT = ((SwizzleEXT)(GL.GetDelegateForExtensionMethod("glSwizzleEXT", typeof(SwizzleEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TagSampleBufferSGIX();
        public static TagSampleBufferSGIX glTagSampleBufferSGIX = ((TagSampleBufferSGIX)(GL.GetDelegateForExtensionMethod("glTagSampleBufferSGIX", typeof(TagSampleBufferSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);
        public static Tangent3bEXT glTangent3bEXT = ((Tangent3bEXT)(GL.GetDelegateForExtensionMethod("glTangent3bEXT", typeof(Tangent3bEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3bvEXT(System.IntPtr v);
        public static Tangent3bvEXT glTangent3bvEXT = ((Tangent3bvEXT)(GL.GetDelegateForExtensionMethod("glTangent3bvEXT", typeof(Tangent3bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);
        public static Tangent3dEXT glTangent3dEXT = ((Tangent3dEXT)(GL.GetDelegateForExtensionMethod("glTangent3dEXT", typeof(Tangent3dEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3dvEXT(System.IntPtr v);
        public static Tangent3dvEXT glTangent3dvEXT = ((Tangent3dvEXT)(GL.GetDelegateForExtensionMethod("glTangent3dvEXT", typeof(Tangent3dvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);
        public static Tangent3fEXT glTangent3fEXT = ((Tangent3fEXT)(GL.GetDelegateForExtensionMethod("glTangent3fEXT", typeof(Tangent3fEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3fvEXT(System.IntPtr v);
        public static Tangent3fvEXT glTangent3fvEXT = ((Tangent3fvEXT)(GL.GetDelegateForExtensionMethod("glTangent3fvEXT", typeof(Tangent3fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3iEXT(GLint tx, GLint ty, GLint tz);
        public static Tangent3iEXT glTangent3iEXT = ((Tangent3iEXT)(GL.GetDelegateForExtensionMethod("glTangent3iEXT", typeof(Tangent3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3ivEXT(System.IntPtr v);
        public static Tangent3ivEXT glTangent3ivEXT = ((Tangent3ivEXT)(GL.GetDelegateForExtensionMethod("glTangent3ivEXT", typeof(Tangent3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz);
        public static Tangent3sEXT glTangent3sEXT = ((Tangent3sEXT)(GL.GetDelegateForExtensionMethod("glTangent3sEXT", typeof(Tangent3sEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3svEXT(System.IntPtr v);
        public static Tangent3svEXT glTangent3svEXT = ((Tangent3svEXT)(GL.GetDelegateForExtensionMethod("glTangent3svEXT", typeof(Tangent3svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TangentPointerEXT(Enums.EXT_coordinate_frame type, GLsizei stride, System.IntPtr pointer);
        public static TangentPointerEXT glTangentPointerEXT = ((TangentPointerEXT)(GL.GetDelegateForExtensionMethod("glTangentPointerEXT", typeof(TangentPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TbufferMask3DFX(GLuint mask);
        public static TbufferMask3DFX glTbufferMask3DFX = ((TbufferMask3DFX)(GL.GetDelegateForExtensionMethod("glTbufferMask3DFX", typeof(TbufferMask3DFX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean TestFenceAPPLE(GLuint fence);
        public static TestFenceAPPLE glTestFenceAPPLE = ((TestFenceAPPLE)(GL.GetDelegateForExtensionMethod("glTestFenceAPPLE", typeof(TestFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean TestFenceNV(GLuint fence);
        public static TestFenceNV glTestFenceNV = ((TestFenceNV)(GL.GetDelegateForExtensionMethod("glTestFenceNV", typeof(TestFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean TestObjectAPPLE(Enums.APPLE_fence @object, GLuint name);
        public static TestObjectAPPLE glTestObjectAPPLE = ((TestObjectAPPLE)(GL.GetDelegateForExtensionMethod("glTestObjectAPPLE", typeof(TestObjectAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexBufferEXT(Enums.TextureTarget target, Enums.EXT_texture_buffer_object internalformat, GLuint buffer);
        public static TexBufferEXT glTexBufferEXT = ((TexBufferEXT)(GL.GetDelegateForExtensionMethod("glTexBufferEXT", typeof(TexBufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexBumpParameterfvATI(Enums.ATI_envmap_bumpmap pname, System.IntPtr param);
        public static TexBumpParameterfvATI glTexBumpParameterfvATI = ((TexBumpParameterfvATI)(GL.GetDelegateForExtensionMethod("glTexBumpParameterfvATI", typeof(TexBumpParameterfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexBumpParameterivATI(Enums.ATI_envmap_bumpmap pname, System.IntPtr param);
        public static TexBumpParameterivATI glTexBumpParameterivATI = ((TexBumpParameterivATI)(GL.GetDelegateForExtensionMethod("glTexBumpParameterivATI", typeof(TexBumpParameterivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1d(GLdouble s);
        public static TexCoord1d glTexCoord1d = ((TexCoord1d)(GL.GetDelegateForExtensionMethod("glTexCoord1d", typeof(TexCoord1d)))) ?? new TexCoord1d(Imports.TexCoord1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1dv(System.IntPtr v);
        public static TexCoord1dv glTexCoord1dv = ((TexCoord1dv)(GL.GetDelegateForExtensionMethod("glTexCoord1dv", typeof(TexCoord1dv)))) ?? new TexCoord1dv(Imports.TexCoord1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1f(GLfloat s);
        public static TexCoord1f glTexCoord1f = ((TexCoord1f)(GL.GetDelegateForExtensionMethod("glTexCoord1f", typeof(TexCoord1f)))) ?? new TexCoord1f(Imports.TexCoord1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1fv(System.IntPtr v);
        public static TexCoord1fv glTexCoord1fv = ((TexCoord1fv)(GL.GetDelegateForExtensionMethod("glTexCoord1fv", typeof(TexCoord1fv)))) ?? new TexCoord1fv(Imports.TexCoord1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1hNV(GLhalfNV s);
        public static TexCoord1hNV glTexCoord1hNV = ((TexCoord1hNV)(GL.GetDelegateForExtensionMethod("glTexCoord1hNV", typeof(TexCoord1hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1hvNV(System.IntPtr v);
        public static TexCoord1hvNV glTexCoord1hvNV = ((TexCoord1hvNV)(GL.GetDelegateForExtensionMethod("glTexCoord1hvNV", typeof(TexCoord1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1i(GLint s);
        public static TexCoord1i glTexCoord1i = ((TexCoord1i)(GL.GetDelegateForExtensionMethod("glTexCoord1i", typeof(TexCoord1i)))) ?? new TexCoord1i(Imports.TexCoord1i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1iv(System.IntPtr v);
        public static TexCoord1iv glTexCoord1iv = ((TexCoord1iv)(GL.GetDelegateForExtensionMethod("glTexCoord1iv", typeof(TexCoord1iv)))) ?? new TexCoord1iv(Imports.TexCoord1iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1s(GLshort s);
        public static TexCoord1s glTexCoord1s = ((TexCoord1s)(GL.GetDelegateForExtensionMethod("glTexCoord1s", typeof(TexCoord1s)))) ?? new TexCoord1s(Imports.TexCoord1s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1sv(System.IntPtr v);
        public static TexCoord1sv glTexCoord1sv = ((TexCoord1sv)(GL.GetDelegateForExtensionMethod("glTexCoord1sv", typeof(TexCoord1sv)))) ?? new TexCoord1sv(Imports.TexCoord1sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2d(GLdouble s, GLdouble t);
        public static TexCoord2d glTexCoord2d = ((TexCoord2d)(GL.GetDelegateForExtensionMethod("glTexCoord2d", typeof(TexCoord2d)))) ?? new TexCoord2d(Imports.TexCoord2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2dv(System.IntPtr v);
        public static TexCoord2dv glTexCoord2dv = ((TexCoord2dv)(GL.GetDelegateForExtensionMethod("glTexCoord2dv", typeof(TexCoord2dv)))) ?? new TexCoord2dv(Imports.TexCoord2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2f(GLfloat s, GLfloat t);
        public static TexCoord2f glTexCoord2f = ((TexCoord2f)(GL.GetDelegateForExtensionMethod("glTexCoord2f", typeof(TexCoord2f)))) ?? new TexCoord2f(Imports.TexCoord2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN = ((TexCoord2fColor3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fColor3fVertex3fSUN", typeof(TexCoord2fColor3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v);
        public static TexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN = ((TexCoord2fColor3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fColor3fVertex3fvSUN", typeof(TexCoord2fColor3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN = ((TexCoord2fColor4fNormal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fColor4fNormal3fVertex3fSUN", typeof(TexCoord2fColor4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static TexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN = ((TexCoord2fColor4fNormal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(TexCoord2fColor4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN = ((TexCoord2fColor4ubVertex3fSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fColor4ubVertex3fSUN", typeof(TexCoord2fColor4ubVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v);
        public static TexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN = ((TexCoord2fColor4ubVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fColor4ubVertex3fvSUN", typeof(TexCoord2fColor4ubVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN = ((TexCoord2fNormal3fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fNormal3fVertex3fSUN", typeof(TexCoord2fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr n, System.IntPtr v);
        public static TexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN = ((TexCoord2fNormal3fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fNormal3fVertex3fvSUN", typeof(TexCoord2fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fv(System.IntPtr v);
        public static TexCoord2fv glTexCoord2fv = ((TexCoord2fv)(GL.GetDelegateForExtensionMethod("glTexCoord2fv", typeof(TexCoord2fv)))) ?? new TexCoord2fv(Imports.TexCoord2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN = ((TexCoord2fVertex3fSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fVertex3fSUN", typeof(TexCoord2fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fVertex3fvSUN(System.IntPtr tc, System.IntPtr v);
        public static TexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN = ((TexCoord2fVertex3fvSUN)(GL.GetDelegateForExtensionMethod("glTexCoord2fVertex3fvSUN", typeof(TexCoord2fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2hNV(GLhalfNV s, GLhalfNV t);
        public static TexCoord2hNV glTexCoord2hNV = ((TexCoord2hNV)(GL.GetDelegateForExtensionMethod("glTexCoord2hNV", typeof(TexCoord2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2hvNV(System.IntPtr v);
        public static TexCoord2hvNV glTexCoord2hvNV = ((TexCoord2hvNV)(GL.GetDelegateForExtensionMethod("glTexCoord2hvNV", typeof(TexCoord2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2i(GLint s, GLint t);
        public static TexCoord2i glTexCoord2i = ((TexCoord2i)(GL.GetDelegateForExtensionMethod("glTexCoord2i", typeof(TexCoord2i)))) ?? new TexCoord2i(Imports.TexCoord2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2iv(System.IntPtr v);
        public static TexCoord2iv glTexCoord2iv = ((TexCoord2iv)(GL.GetDelegateForExtensionMethod("glTexCoord2iv", typeof(TexCoord2iv)))) ?? new TexCoord2iv(Imports.TexCoord2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2s(GLshort s, GLshort t);
        public static TexCoord2s glTexCoord2s = ((TexCoord2s)(GL.GetDelegateForExtensionMethod("glTexCoord2s", typeof(TexCoord2s)))) ?? new TexCoord2s(Imports.TexCoord2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2sv(System.IntPtr v);
        public static TexCoord2sv glTexCoord2sv = ((TexCoord2sv)(GL.GetDelegateForExtensionMethod("glTexCoord2sv", typeof(TexCoord2sv)))) ?? new TexCoord2sv(Imports.TexCoord2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
        public static TexCoord3d glTexCoord3d = ((TexCoord3d)(GL.GetDelegateForExtensionMethod("glTexCoord3d", typeof(TexCoord3d)))) ?? new TexCoord3d(Imports.TexCoord3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3dv(System.IntPtr v);
        public static TexCoord3dv glTexCoord3dv = ((TexCoord3dv)(GL.GetDelegateForExtensionMethod("glTexCoord3dv", typeof(TexCoord3dv)))) ?? new TexCoord3dv(Imports.TexCoord3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
        public static TexCoord3f glTexCoord3f = ((TexCoord3f)(GL.GetDelegateForExtensionMethod("glTexCoord3f", typeof(TexCoord3f)))) ?? new TexCoord3f(Imports.TexCoord3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3fv(System.IntPtr v);
        public static TexCoord3fv glTexCoord3fv = ((TexCoord3fv)(GL.GetDelegateForExtensionMethod("glTexCoord3fv", typeof(TexCoord3fv)))) ?? new TexCoord3fv(Imports.TexCoord3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
        public static TexCoord3hNV glTexCoord3hNV = ((TexCoord3hNV)(GL.GetDelegateForExtensionMethod("glTexCoord3hNV", typeof(TexCoord3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3hvNV(System.IntPtr v);
        public static TexCoord3hvNV glTexCoord3hvNV = ((TexCoord3hvNV)(GL.GetDelegateForExtensionMethod("glTexCoord3hvNV", typeof(TexCoord3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3i(GLint s, GLint t, GLint r);
        public static TexCoord3i glTexCoord3i = ((TexCoord3i)(GL.GetDelegateForExtensionMethod("glTexCoord3i", typeof(TexCoord3i)))) ?? new TexCoord3i(Imports.TexCoord3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3iv(System.IntPtr v);
        public static TexCoord3iv glTexCoord3iv = ((TexCoord3iv)(GL.GetDelegateForExtensionMethod("glTexCoord3iv", typeof(TexCoord3iv)))) ?? new TexCoord3iv(Imports.TexCoord3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3s(GLshort s, GLshort t, GLshort r);
        public static TexCoord3s glTexCoord3s = ((TexCoord3s)(GL.GetDelegateForExtensionMethod("glTexCoord3s", typeof(TexCoord3s)))) ?? new TexCoord3s(Imports.TexCoord3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3sv(System.IntPtr v);
        public static TexCoord3sv glTexCoord3sv = ((TexCoord3sv)(GL.GetDelegateForExtensionMethod("glTexCoord3sv", typeof(TexCoord3sv)))) ?? new TexCoord3sv(Imports.TexCoord3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        public static TexCoord4d glTexCoord4d = ((TexCoord4d)(GL.GetDelegateForExtensionMethod("glTexCoord4d", typeof(TexCoord4d)))) ?? new TexCoord4d(Imports.TexCoord4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4dv(System.IntPtr v);
        public static TexCoord4dv glTexCoord4dv = ((TexCoord4dv)(GL.GetDelegateForExtensionMethod("glTexCoord4dv", typeof(TexCoord4dv)))) ?? new TexCoord4dv(Imports.TexCoord4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        public static TexCoord4f glTexCoord4f = ((TexCoord4f)(GL.GetDelegateForExtensionMethod("glTexCoord4f", typeof(TexCoord4f)))) ?? new TexCoord4f(Imports.TexCoord4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static TexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN = ((TexCoord4fColor4fNormal3fVertex4fSUN)(GL.GetDelegateForExtensionMethod("glTexCoord4fColor4fNormal3fVertex4fSUN", typeof(TexCoord4fColor4fNormal3fVertex4fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static TexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN = ((TexCoord4fColor4fNormal3fVertex4fvSUN)(GL.GetDelegateForExtensionMethod("glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof(TexCoord4fColor4fNormal3fVertex4fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fv(System.IntPtr v);
        public static TexCoord4fv glTexCoord4fv = ((TexCoord4fv)(GL.GetDelegateForExtensionMethod("glTexCoord4fv", typeof(TexCoord4fv)))) ?? new TexCoord4fv(Imports.TexCoord4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static TexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN = ((TexCoord4fVertex4fSUN)(GL.GetDelegateForExtensionMethod("glTexCoord4fVertex4fSUN", typeof(TexCoord4fVertex4fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fVertex4fvSUN(System.IntPtr tc, System.IntPtr v);
        public static TexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN = ((TexCoord4fVertex4fvSUN)(GL.GetDelegateForExtensionMethod("glTexCoord4fVertex4fvSUN", typeof(TexCoord4fVertex4fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
        public static TexCoord4hNV glTexCoord4hNV = ((TexCoord4hNV)(GL.GetDelegateForExtensionMethod("glTexCoord4hNV", typeof(TexCoord4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4hvNV(System.IntPtr v);
        public static TexCoord4hvNV glTexCoord4hvNV = ((TexCoord4hvNV)(GL.GetDelegateForExtensionMethod("glTexCoord4hvNV", typeof(TexCoord4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
        public static TexCoord4i glTexCoord4i = ((TexCoord4i)(GL.GetDelegateForExtensionMethod("glTexCoord4i", typeof(TexCoord4i)))) ?? new TexCoord4i(Imports.TexCoord4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4iv(System.IntPtr v);
        public static TexCoord4iv glTexCoord4iv = ((TexCoord4iv)(GL.GetDelegateForExtensionMethod("glTexCoord4iv", typeof(TexCoord4iv)))) ?? new TexCoord4iv(Imports.TexCoord4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
        public static TexCoord4s glTexCoord4s = ((TexCoord4s)(GL.GetDelegateForExtensionMethod("glTexCoord4s", typeof(TexCoord4s)))) ?? new TexCoord4s(Imports.TexCoord4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4sv(System.IntPtr v);
        public static TexCoord4sv glTexCoord4sv = ((TexCoord4sv)(GL.GetDelegateForExtensionMethod("glTexCoord4sv", typeof(TexCoord4sv)))) ?? new TexCoord4sv(Imports.TexCoord4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, System.IntPtr pointer);
        public static TexCoordPointer glTexCoordPointer = ((TexCoordPointer)(GL.GetDelegateForExtensionMethod("glTexCoordPointer", typeof(TexCoordPointer)))) ?? new TexCoordPointer(Imports.TexCoordPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointerEXT(GLint size, Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static TexCoordPointerEXT glTexCoordPointerEXT = ((TexCoordPointerEXT)(GL.GetDelegateForExtensionMethod("glTexCoordPointerEXT", typeof(TexCoordPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointerListIBM(GLint size, Enums.TexCoordPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static TexCoordPointerListIBM glTexCoordPointerListIBM = ((TexCoordPointerListIBM)(GL.GetDelegateForExtensionMethod("glTexCoordPointerListIBM", typeof(TexCoordPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointervINTEL(GLint size, Enums.VertexPointerType type, System.IntPtr pointer);
        public static TexCoordPointervINTEL glTexCoordPointervINTEL = ((TexCoordPointervINTEL)(GL.GetDelegateForExtensionMethod("glTexCoordPointervINTEL", typeof(TexCoordPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnvf(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat param);
        public static TexEnvf glTexEnvf = ((TexEnvf)(GL.GetDelegateForExtensionMethod("glTexEnvf", typeof(TexEnvf)))) ?? new TexEnvf(Imports.TexEnvf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params);
        public static TexEnvfv glTexEnvfv = ((TexEnvfv)(GL.GetDelegateForExtensionMethod("glTexEnvfv", typeof(TexEnvfv)))) ?? new TexEnvfv(Imports.TexEnvfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnvi(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint param);
        public static TexEnvi glTexEnvi = ((TexEnvi)(GL.GetDelegateForExtensionMethod("glTexEnvi", typeof(TexEnvi)))) ?? new TexEnvi(Imports.TexEnvi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params);
        public static TexEnviv glTexEnviv = ((TexEnviv)(GL.GetDelegateForExtensionMethod("glTexEnviv", typeof(TexEnviv)))) ?? new TexEnviv(Imports.TexEnviv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexFilterFuncSGIS(Enums.TextureTarget target, Enums.SGIS_texture_filter4 filter, GLsizei n, System.IntPtr weights);
        public static TexFilterFuncSGIS glTexFilterFuncSGIS = ((TexFilterFuncSGIS)(GL.GetDelegateForExtensionMethod("glTexFilterFuncSGIS", typeof(TexFilterFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGend(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble param);
        public static TexGend glTexGend = ((TexGend)(GL.GetDelegateForExtensionMethod("glTexGend", typeof(TexGend)))) ?? new TexGend(Imports.TexGend);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        public static TexGendv glTexGendv = ((TexGendv)(GL.GetDelegateForExtensionMethod("glTexGendv", typeof(TexGendv)))) ?? new TexGendv(Imports.TexGendv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGenf(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat param);
        public static TexGenf glTexGenf = ((TexGenf)(GL.GetDelegateForExtensionMethod("glTexGenf", typeof(TexGenf)))) ?? new TexGenf(Imports.TexGenf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        public static TexGenfv glTexGenfv = ((TexGenfv)(GL.GetDelegateForExtensionMethod("glTexGenfv", typeof(TexGenfv)))) ?? new TexGenfv(Imports.TexGenfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGeni(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint param);
        public static TexGeni glTexGeni = ((TexGeni)(GL.GetDelegateForExtensionMethod("glTexGeni", typeof(TexGeni)))) ?? new TexGeni(Imports.TexGeni);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        public static TexGeniv glTexGeniv = ((TexGeniv)(GL.GetDelegateForExtensionMethod("glTexGeniv", typeof(TexGeniv)))) ?? new TexGeniv(Imports.TexGeniv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexImage1D glTexImage1D = ((TexImage1D)(GL.GetDelegateForExtensionMethod("glTexImage1D", typeof(TexImage1D)))) ?? new TexImage1D(Imports.TexImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexImage2D glTexImage2D = ((TexImage2D)(GL.GetDelegateForExtensionMethod("glTexImage2D", typeof(TexImage2D)))) ?? new TexImage2D(Imports.TexImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexImage3D glTexImage3D = ((TexImage3D)(GL.GetDelegateForExtensionMethod("glTexImage3D", typeof(TexImage3D)))) ?? new TexImage3D(Imports.TexImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage3DEXT(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexImage3DEXT glTexImage3DEXT = ((TexImage3DEXT)(GL.GetDelegateForExtensionMethod("glTexImage3DEXT", typeof(TexImage3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage4DSGIS(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexImage4DSGIS glTexImage4DSGIS = ((TexImage4DSGIS)(GL.GetDelegateForExtensionMethod("glTexImage4DSGIS", typeof(TexImage4DSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterf(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat param);
        public static TexParameterf glTexParameterf = ((TexParameterf)(GL.GetDelegateForExtensionMethod("glTexParameterf", typeof(TexParameterf)))) ?? new TexParameterf(Imports.TexParameterf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params);
        public static TexParameterfv glTexParameterfv = ((TexParameterfv)(GL.GetDelegateForExtensionMethod("glTexParameterfv", typeof(TexParameterfv)))) ?? new TexParameterfv(Imports.TexParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameteri(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint param);
        public static TexParameteri glTexParameteri = ((TexParameteri)(GL.GetDelegateForExtensionMethod("glTexParameteri", typeof(TexParameteri)))) ?? new TexParameteri(Imports.TexParameteri);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterIivEXT(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params);
        public static TexParameterIivEXT glTexParameterIivEXT = ((TexParameterIivEXT)(GL.GetDelegateForExtensionMethod("glTexParameterIivEXT", typeof(TexParameterIivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterIuivEXT(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params);
        public static TexParameterIuivEXT glTexParameterIuivEXT = ((TexParameterIuivEXT)(GL.GetDelegateForExtensionMethod("glTexParameterIuivEXT", typeof(TexParameterIuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params);
        public static TexParameteriv glTexParameteriv = ((TexParameteriv)(GL.GetDelegateForExtensionMethod("glTexParameteriv", typeof(TexParameteriv)))) ?? new TexParameteriv(Imports.TexParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexSubImage1D glTexSubImage1D = ((TexSubImage1D)(GL.GetDelegateForExtensionMethod("glTexSubImage1D", typeof(TexSubImage1D)))) ?? new TexSubImage1D(Imports.TexSubImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage1DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexSubImage1DEXT glTexSubImage1DEXT = ((TexSubImage1DEXT)(GL.GetDelegateForExtensionMethod("glTexSubImage1DEXT", typeof(TexSubImage1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexSubImage2D glTexSubImage2D = ((TexSubImage2D)(GL.GetDelegateForExtensionMethod("glTexSubImage2D", typeof(TexSubImage2D)))) ?? new TexSubImage2D(Imports.TexSubImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage2DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexSubImage2DEXT glTexSubImage2DEXT = ((TexSubImage2DEXT)(GL.GetDelegateForExtensionMethod("glTexSubImage2DEXT", typeof(TexSubImage2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexSubImage3D glTexSubImage3D = ((TexSubImage3D)(GL.GetDelegateForExtensionMethod("glTexSubImage3D", typeof(TexSubImage3D)))) ?? new TexSubImage3D(Imports.TexSubImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage3DEXT(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexSubImage3DEXT glTexSubImage3DEXT = ((TexSubImage3DEXT)(GL.GetDelegateForExtensionMethod("glTexSubImage3DEXT", typeof(TexSubImage3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage4DSGIS(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        public static TexSubImage4DSGIS glTexSubImage4DSGIS = ((TexSubImage4DSGIS)(GL.GetDelegateForExtensionMethod("glTexSubImage4DSGIS", typeof(TexSubImage4DSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureColorMaskSGIS([MarshalAs(UnmanagedType.Bool)] bool red, [MarshalAs(UnmanagedType.Bool)] bool green, [MarshalAs(UnmanagedType.Bool)] bool blue, [MarshalAs(UnmanagedType.Bool)] bool alpha);
        public static TextureColorMaskSGIS glTextureColorMaskSGIS = ((TextureColorMaskSGIS)(GL.GetDelegateForExtensionMethod("glTextureColorMaskSGIS", typeof(TextureColorMaskSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureLightEXT(Enums.EXT_light_texture pname);
        public static TextureLightEXT glTextureLightEXT = ((TextureLightEXT)(GL.GetDelegateForExtensionMethod("glTextureLightEXT", typeof(TextureLightEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureMaterialEXT(Enums.MaterialFace face, Enums.MaterialParameter mode);
        public static TextureMaterialEXT glTextureMaterialEXT = ((TextureMaterialEXT)(GL.GetDelegateForExtensionMethod("glTextureMaterialEXT", typeof(TextureMaterialEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureNormalEXT(Enums.EXT_texture_perturb_normal mode);
        public static TextureNormalEXT glTextureNormalEXT = ((TextureNormalEXT)(GL.GetDelegateForExtensionMethod("glTextureNormalEXT", typeof(TextureNormalEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TrackMatrixNV(Enums.NV_vertex_program target, GLuint address, Enums.NV_vertex_program matrix, Enums.NV_vertex_program transform);
        public static TrackMatrixNV glTrackMatrixNV = ((TrackMatrixNV)(GL.GetDelegateForExtensionMethod("glTrackMatrixNV", typeof(TrackMatrixNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TransformFeedbackAttribsNV(GLuint count, System.IntPtr attribs, Enums.NV_transform_feedback bufferMode);
        public static TransformFeedbackAttribsNV glTransformFeedbackAttribsNV = ((TransformFeedbackAttribsNV)(GL.GetDelegateForExtensionMethod("glTransformFeedbackAttribsNV", typeof(TransformFeedbackAttribsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, System.IntPtr locations, Enums.NV_transform_feedback bufferMode);
        public static TransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV = ((TransformFeedbackVaryingsNV)(GL.GetDelegateForExtensionMethod("glTransformFeedbackVaryingsNV", typeof(TransformFeedbackVaryingsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Translated(GLdouble x, GLdouble y, GLdouble z);
        public static Translated glTranslated = ((Translated)(GL.GetDelegateForExtensionMethod("glTranslated", typeof(Translated)))) ?? new Translated(Imports.Translated);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Translatef(GLfloat x, GLfloat y, GLfloat z);
        public static Translatef glTranslatef = ((Translatef)(GL.GetDelegateForExtensionMethod("glTranslatef", typeof(Translatef)))) ?? new Translatef(Imports.Translatef);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1f(GLint location, GLfloat v0);
        public static Uniform1f glUniform1f = ((Uniform1f)(GL.GetDelegateForExtensionMethod("glUniform1f", typeof(Uniform1f)))) ?? new Uniform1f(Imports.Uniform1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1fARB(GLint location, GLfloat v0);
        public static Uniform1fARB glUniform1fARB = ((Uniform1fARB)(GL.GetDelegateForExtensionMethod("glUniform1fARB", typeof(Uniform1fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1fv glUniform1fv = ((Uniform1fv)(GL.GetDelegateForExtensionMethod("glUniform1fv", typeof(Uniform1fv)))) ?? new Uniform1fv(Imports.Uniform1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1fvARB glUniform1fvARB = ((Uniform1fvARB)(GL.GetDelegateForExtensionMethod("glUniform1fvARB", typeof(Uniform1fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1i(GLint location, GLint v0);
        public static Uniform1i glUniform1i = ((Uniform1i)(GL.GetDelegateForExtensionMethod("glUniform1i", typeof(Uniform1i)))) ?? new Uniform1i(Imports.Uniform1i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1iARB(GLint location, GLint v0);
        public static Uniform1iARB glUniform1iARB = ((Uniform1iARB)(GL.GetDelegateForExtensionMethod("glUniform1iARB", typeof(Uniform1iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1iv glUniform1iv = ((Uniform1iv)(GL.GetDelegateForExtensionMethod("glUniform1iv", typeof(Uniform1iv)))) ?? new Uniform1iv(Imports.Uniform1iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1ivARB glUniform1ivARB = ((Uniform1ivARB)(GL.GetDelegateForExtensionMethod("glUniform1ivARB", typeof(Uniform1ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1uiEXT(GLint location, GLuint v0);
        public static Uniform1uiEXT glUniform1uiEXT = ((Uniform1uiEXT)(GL.GetDelegateForExtensionMethod("glUniform1uiEXT", typeof(Uniform1uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1uivEXT glUniform1uivEXT = ((Uniform1uivEXT)(GL.GetDelegateForExtensionMethod("glUniform1uivEXT", typeof(Uniform1uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
        public static Uniform2f glUniform2f = ((Uniform2f)(GL.GetDelegateForExtensionMethod("glUniform2f", typeof(Uniform2f)))) ?? new Uniform2f(Imports.Uniform2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2fARB(GLint location, GLfloat v0, GLfloat v1);
        public static Uniform2fARB glUniform2fARB = ((Uniform2fARB)(GL.GetDelegateForExtensionMethod("glUniform2fARB", typeof(Uniform2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2fv glUniform2fv = ((Uniform2fv)(GL.GetDelegateForExtensionMethod("glUniform2fv", typeof(Uniform2fv)))) ?? new Uniform2fv(Imports.Uniform2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2fvARB glUniform2fvARB = ((Uniform2fvARB)(GL.GetDelegateForExtensionMethod("glUniform2fvARB", typeof(Uniform2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2i(GLint location, GLint v0, GLint v1);
        public static Uniform2i glUniform2i = ((Uniform2i)(GL.GetDelegateForExtensionMethod("glUniform2i", typeof(Uniform2i)))) ?? new Uniform2i(Imports.Uniform2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2iARB(GLint location, GLint v0, GLint v1);
        public static Uniform2iARB glUniform2iARB = ((Uniform2iARB)(GL.GetDelegateForExtensionMethod("glUniform2iARB", typeof(Uniform2iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2iv glUniform2iv = ((Uniform2iv)(GL.GetDelegateForExtensionMethod("glUniform2iv", typeof(Uniform2iv)))) ?? new Uniform2iv(Imports.Uniform2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2ivARB glUniform2ivARB = ((Uniform2ivARB)(GL.GetDelegateForExtensionMethod("glUniform2ivARB", typeof(Uniform2ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2uiEXT(GLint location, GLuint v0, GLuint v1);
        public static Uniform2uiEXT glUniform2uiEXT = ((Uniform2uiEXT)(GL.GetDelegateForExtensionMethod("glUniform2uiEXT", typeof(Uniform2uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2uivEXT glUniform2uivEXT = ((Uniform2uivEXT)(GL.GetDelegateForExtensionMethod("glUniform2uivEXT", typeof(Uniform2uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        public static Uniform3f glUniform3f = ((Uniform3f)(GL.GetDelegateForExtensionMethod("glUniform3f", typeof(Uniform3f)))) ?? new Uniform3f(Imports.Uniform3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        public static Uniform3fARB glUniform3fARB = ((Uniform3fARB)(GL.GetDelegateForExtensionMethod("glUniform3fARB", typeof(Uniform3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3fv glUniform3fv = ((Uniform3fv)(GL.GetDelegateForExtensionMethod("glUniform3fv", typeof(Uniform3fv)))) ?? new Uniform3fv(Imports.Uniform3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3fvARB glUniform3fvARB = ((Uniform3fvARB)(GL.GetDelegateForExtensionMethod("glUniform3fvARB", typeof(Uniform3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
        public static Uniform3i glUniform3i = ((Uniform3i)(GL.GetDelegateForExtensionMethod("glUniform3i", typeof(Uniform3i)))) ?? new Uniform3i(Imports.Uniform3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
        public static Uniform3iARB glUniform3iARB = ((Uniform3iARB)(GL.GetDelegateForExtensionMethod("glUniform3iARB", typeof(Uniform3iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3iv glUniform3iv = ((Uniform3iv)(GL.GetDelegateForExtensionMethod("glUniform3iv", typeof(Uniform3iv)))) ?? new Uniform3iv(Imports.Uniform3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3ivARB glUniform3ivARB = ((Uniform3ivARB)(GL.GetDelegateForExtensionMethod("glUniform3ivARB", typeof(Uniform3ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
        public static Uniform3uiEXT glUniform3uiEXT = ((Uniform3uiEXT)(GL.GetDelegateForExtensionMethod("glUniform3uiEXT", typeof(Uniform3uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3uivEXT glUniform3uivEXT = ((Uniform3uivEXT)(GL.GetDelegateForExtensionMethod("glUniform3uivEXT", typeof(Uniform3uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        public static Uniform4f glUniform4f = ((Uniform4f)(GL.GetDelegateForExtensionMethod("glUniform4f", typeof(Uniform4f)))) ?? new Uniform4f(Imports.Uniform4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        public static Uniform4fARB glUniform4fARB = ((Uniform4fARB)(GL.GetDelegateForExtensionMethod("glUniform4fARB", typeof(Uniform4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4fv glUniform4fv = ((Uniform4fv)(GL.GetDelegateForExtensionMethod("glUniform4fv", typeof(Uniform4fv)))) ?? new Uniform4fv(Imports.Uniform4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4fvARB glUniform4fvARB = ((Uniform4fvARB)(GL.GetDelegateForExtensionMethod("glUniform4fvARB", typeof(Uniform4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        public static Uniform4i glUniform4i = ((Uniform4i)(GL.GetDelegateForExtensionMethod("glUniform4i", typeof(Uniform4i)))) ?? new Uniform4i(Imports.Uniform4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        public static Uniform4iARB glUniform4iARB = ((Uniform4iARB)(GL.GetDelegateForExtensionMethod("glUniform4iARB", typeof(Uniform4iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4iv glUniform4iv = ((Uniform4iv)(GL.GetDelegateForExtensionMethod("glUniform4iv", typeof(Uniform4iv)))) ?? new Uniform4iv(Imports.Uniform4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4ivARB glUniform4ivARB = ((Uniform4ivARB)(GL.GetDelegateForExtensionMethod("glUniform4ivARB", typeof(Uniform4ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
        public static Uniform4uiEXT glUniform4uiEXT = ((Uniform4uiEXT)(GL.GetDelegateForExtensionMethod("glUniform4uiEXT", typeof(Uniform4uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4uivEXT glUniform4uivEXT = ((Uniform4uivEXT)(GL.GetDelegateForExtensionMethod("glUniform4uivEXT", typeof(Uniform4uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformBufferEXT(GLuint program, GLint location, GLuint buffer);
        public static UniformBufferEXT glUniformBufferEXT = ((UniformBufferEXT)(GL.GetDelegateForExtensionMethod("glUniformBufferEXT", typeof(UniformBufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix2fv glUniformMatrix2fv = ((UniformMatrix2fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix2fv", typeof(UniformMatrix2fv)))) ?? new UniformMatrix2fv(Imports.UniformMatrix2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix2fvARB glUniformMatrix2fvARB = ((UniformMatrix2fvARB)(GL.GetDelegateForExtensionMethod("glUniformMatrix2fvARB", typeof(UniformMatrix2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2x3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix2x3fv glUniformMatrix2x3fv = ((UniformMatrix2x3fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix2x3fv", typeof(UniformMatrix2x3fv)))) ?? new UniformMatrix2x3fv(Imports.UniformMatrix2x3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2x4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix2x4fv glUniformMatrix2x4fv = ((UniformMatrix2x4fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix2x4fv", typeof(UniformMatrix2x4fv)))) ?? new UniformMatrix2x4fv(Imports.UniformMatrix2x4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix3fv glUniformMatrix3fv = ((UniformMatrix3fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix3fv", typeof(UniformMatrix3fv)))) ?? new UniformMatrix3fv(Imports.UniformMatrix3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix3fvARB glUniformMatrix3fvARB = ((UniformMatrix3fvARB)(GL.GetDelegateForExtensionMethod("glUniformMatrix3fvARB", typeof(UniformMatrix3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3x2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix3x2fv glUniformMatrix3x2fv = ((UniformMatrix3x2fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix3x2fv", typeof(UniformMatrix3x2fv)))) ?? new UniformMatrix3x2fv(Imports.UniformMatrix3x2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3x4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix3x4fv glUniformMatrix3x4fv = ((UniformMatrix3x4fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix3x4fv", typeof(UniformMatrix3x4fv)))) ?? new UniformMatrix3x4fv(Imports.UniformMatrix3x4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix4fv glUniformMatrix4fv = ((UniformMatrix4fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix4fv", typeof(UniformMatrix4fv)))) ?? new UniformMatrix4fv(Imports.UniformMatrix4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4fvARB(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix4fvARB glUniformMatrix4fvARB = ((UniformMatrix4fvARB)(GL.GetDelegateForExtensionMethod("glUniformMatrix4fvARB", typeof(UniformMatrix4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4x2fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix4x2fv glUniformMatrix4x2fv = ((UniformMatrix4x2fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix4x2fv", typeof(UniformMatrix4x2fv)))) ?? new UniformMatrix4x2fv(Imports.UniformMatrix4x2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4x3fv(GLint location, GLsizei count, [MarshalAs(UnmanagedType.Bool)] bool transpose, System.IntPtr value);
        public static UniformMatrix4x3fv glUniformMatrix4x3fv = ((UniformMatrix4x3fv)(GL.GetDelegateForExtensionMethod("glUniformMatrix4x3fv", typeof(UniformMatrix4x3fv)))) ?? new UniformMatrix4x3fv(Imports.UniformMatrix4x3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UnlockArraysEXT();
        public static UnlockArraysEXT glUnlockArraysEXT = ((UnlockArraysEXT)(GL.GetDelegateForExtensionMethod("glUnlockArraysEXT", typeof(UnlockArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean UnmapBuffer(Enums.VERSION_1_5 target);
        public static UnmapBuffer glUnmapBuffer = ((UnmapBuffer)(GL.GetDelegateForExtensionMethod("glUnmapBuffer", typeof(UnmapBuffer)))) ?? new UnmapBuffer(Imports.UnmapBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean UnmapBufferARB(Enums.ARB_vertex_buffer_object target);
        public static UnmapBufferARB glUnmapBufferARB = ((UnmapBufferARB)(GL.GetDelegateForExtensionMethod("glUnmapBufferARB", typeof(UnmapBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UnmapObjectBufferATI(GLuint buffer);
        public static UnmapObjectBufferATI glUnmapObjectBufferATI = ((UnmapObjectBufferATI)(GL.GetDelegateForExtensionMethod("glUnmapObjectBufferATI", typeof(UnmapObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, System.IntPtr pointer, Enums.ATI_vertex_array_object preserve);
        public static UpdateObjectBufferATI glUpdateObjectBufferATI = ((UpdateObjectBufferATI)(GL.GetDelegateForExtensionMethod("glUpdateObjectBufferATI", typeof(UpdateObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UseProgram(GLuint program);
        public static UseProgram glUseProgram = ((UseProgram)(GL.GetDelegateForExtensionMethod("glUseProgram", typeof(UseProgram)))) ?? new UseProgram(Imports.UseProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UseProgramObjectARB(GLhandleARB programObj);
        public static UseProgramObjectARB glUseProgramObjectARB = ((UseProgramObjectARB)(GL.GetDelegateForExtensionMethod("glUseProgramObjectARB", typeof(UseProgramObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ValidateProgram(GLuint program);
        public static ValidateProgram glValidateProgram = ((ValidateProgram)(GL.GetDelegateForExtensionMethod("glValidateProgram", typeof(ValidateProgram)))) ?? new ValidateProgram(Imports.ValidateProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ValidateProgramARB(GLhandleARB programObj);
        public static ValidateProgramARB glValidateProgramARB = ((ValidateProgramARB)(GL.GetDelegateForExtensionMethod("glValidateProgramARB", typeof(ValidateProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantArrayObjectATI(GLuint id, Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset);
        public static VariantArrayObjectATI glVariantArrayObjectATI = ((VariantArrayObjectATI)(GL.GetDelegateForExtensionMethod("glVariantArrayObjectATI", typeof(VariantArrayObjectATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantbvEXT(GLuint id, System.IntPtr addr);
        public static VariantbvEXT glVariantbvEXT = ((VariantbvEXT)(GL.GetDelegateForExtensionMethod("glVariantbvEXT", typeof(VariantbvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantdvEXT(GLuint id, System.IntPtr addr);
        public static VariantdvEXT glVariantdvEXT = ((VariantdvEXT)(GL.GetDelegateForExtensionMethod("glVariantdvEXT", typeof(VariantdvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantfvEXT(GLuint id, System.IntPtr addr);
        public static VariantfvEXT glVariantfvEXT = ((VariantfvEXT)(GL.GetDelegateForExtensionMethod("glVariantfvEXT", typeof(VariantfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantivEXT(GLuint id, System.IntPtr addr);
        public static VariantivEXT glVariantivEXT = ((VariantivEXT)(GL.GetDelegateForExtensionMethod("glVariantivEXT", typeof(VariantivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantPointerEXT(GLuint id, Enums.EXT_vertex_shader type, GLuint stride, System.IntPtr addr);
        public static VariantPointerEXT glVariantPointerEXT = ((VariantPointerEXT)(GL.GetDelegateForExtensionMethod("glVariantPointerEXT", typeof(VariantPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantsvEXT(GLuint id, System.IntPtr addr);
        public static VariantsvEXT glVariantsvEXT = ((VariantsvEXT)(GL.GetDelegateForExtensionMethod("glVariantsvEXT", typeof(VariantsvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantubvEXT(GLuint id, System.IntPtr addr);
        public static VariantubvEXT glVariantubvEXT = ((VariantubvEXT)(GL.GetDelegateForExtensionMethod("glVariantubvEXT", typeof(VariantubvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantuivEXT(GLuint id, System.IntPtr addr);
        public static VariantuivEXT glVariantuivEXT = ((VariantuivEXT)(GL.GetDelegateForExtensionMethod("glVariantuivEXT", typeof(VariantuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantusvEXT(GLuint id, System.IntPtr addr);
        public static VariantusvEXT glVariantusvEXT = ((VariantusvEXT)(GL.GetDelegateForExtensionMethod("glVariantusvEXT", typeof(VariantusvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2d(GLdouble x, GLdouble y);
        public static Vertex2d glVertex2d = ((Vertex2d)(GL.GetDelegateForExtensionMethod("glVertex2d", typeof(Vertex2d)))) ?? new Vertex2d(Imports.Vertex2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2dv(System.IntPtr v);
        public static Vertex2dv glVertex2dv = ((Vertex2dv)(GL.GetDelegateForExtensionMethod("glVertex2dv", typeof(Vertex2dv)))) ?? new Vertex2dv(Imports.Vertex2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2f(GLfloat x, GLfloat y);
        public static Vertex2f glVertex2f = ((Vertex2f)(GL.GetDelegateForExtensionMethod("glVertex2f", typeof(Vertex2f)))) ?? new Vertex2f(Imports.Vertex2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2fv(System.IntPtr v);
        public static Vertex2fv glVertex2fv = ((Vertex2fv)(GL.GetDelegateForExtensionMethod("glVertex2fv", typeof(Vertex2fv)))) ?? new Vertex2fv(Imports.Vertex2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2hNV(GLhalfNV x, GLhalfNV y);
        public static Vertex2hNV glVertex2hNV = ((Vertex2hNV)(GL.GetDelegateForExtensionMethod("glVertex2hNV", typeof(Vertex2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2hvNV(System.IntPtr v);
        public static Vertex2hvNV glVertex2hvNV = ((Vertex2hvNV)(GL.GetDelegateForExtensionMethod("glVertex2hvNV", typeof(Vertex2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2i(GLint x, GLint y);
        public static Vertex2i glVertex2i = ((Vertex2i)(GL.GetDelegateForExtensionMethod("glVertex2i", typeof(Vertex2i)))) ?? new Vertex2i(Imports.Vertex2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2iv(System.IntPtr v);
        public static Vertex2iv glVertex2iv = ((Vertex2iv)(GL.GetDelegateForExtensionMethod("glVertex2iv", typeof(Vertex2iv)))) ?? new Vertex2iv(Imports.Vertex2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2s(GLshort x, GLshort y);
        public static Vertex2s glVertex2s = ((Vertex2s)(GL.GetDelegateForExtensionMethod("glVertex2s", typeof(Vertex2s)))) ?? new Vertex2s(Imports.Vertex2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2sv(System.IntPtr v);
        public static Vertex2sv glVertex2sv = ((Vertex2sv)(GL.GetDelegateForExtensionMethod("glVertex2sv", typeof(Vertex2sv)))) ?? new Vertex2sv(Imports.Vertex2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
        public static Vertex3d glVertex3d = ((Vertex3d)(GL.GetDelegateForExtensionMethod("glVertex3d", typeof(Vertex3d)))) ?? new Vertex3d(Imports.Vertex3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3dv(System.IntPtr v);
        public static Vertex3dv glVertex3dv = ((Vertex3dv)(GL.GetDelegateForExtensionMethod("glVertex3dv", typeof(Vertex3dv)))) ?? new Vertex3dv(Imports.Vertex3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
        public static Vertex3f glVertex3f = ((Vertex3f)(GL.GetDelegateForExtensionMethod("glVertex3f", typeof(Vertex3f)))) ?? new Vertex3f(Imports.Vertex3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3fv(System.IntPtr v);
        public static Vertex3fv glVertex3fv = ((Vertex3fv)(GL.GetDelegateForExtensionMethod("glVertex3fv", typeof(Vertex3fv)))) ?? new Vertex3fv(Imports.Vertex3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
        public static Vertex3hNV glVertex3hNV = ((Vertex3hNV)(GL.GetDelegateForExtensionMethod("glVertex3hNV", typeof(Vertex3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3hvNV(System.IntPtr v);
        public static Vertex3hvNV glVertex3hvNV = ((Vertex3hvNV)(GL.GetDelegateForExtensionMethod("glVertex3hvNV", typeof(Vertex3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3i(GLint x, GLint y, GLint z);
        public static Vertex3i glVertex3i = ((Vertex3i)(GL.GetDelegateForExtensionMethod("glVertex3i", typeof(Vertex3i)))) ?? new Vertex3i(Imports.Vertex3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3iv(System.IntPtr v);
        public static Vertex3iv glVertex3iv = ((Vertex3iv)(GL.GetDelegateForExtensionMethod("glVertex3iv", typeof(Vertex3iv)))) ?? new Vertex3iv(Imports.Vertex3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3s(GLshort x, GLshort y, GLshort z);
        public static Vertex3s glVertex3s = ((Vertex3s)(GL.GetDelegateForExtensionMethod("glVertex3s", typeof(Vertex3s)))) ?? new Vertex3s(Imports.Vertex3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3sv(System.IntPtr v);
        public static Vertex3sv glVertex3sv = ((Vertex3sv)(GL.GetDelegateForExtensionMethod("glVertex3sv", typeof(Vertex3sv)))) ?? new Vertex3sv(Imports.Vertex3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static Vertex4d glVertex4d = ((Vertex4d)(GL.GetDelegateForExtensionMethod("glVertex4d", typeof(Vertex4d)))) ?? new Vertex4d(Imports.Vertex4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4dv(System.IntPtr v);
        public static Vertex4dv glVertex4dv = ((Vertex4dv)(GL.GetDelegateForExtensionMethod("glVertex4dv", typeof(Vertex4dv)))) ?? new Vertex4dv(Imports.Vertex4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static Vertex4f glVertex4f = ((Vertex4f)(GL.GetDelegateForExtensionMethod("glVertex4f", typeof(Vertex4f)))) ?? new Vertex4f(Imports.Vertex4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4fv(System.IntPtr v);
        public static Vertex4fv glVertex4fv = ((Vertex4fv)(GL.GetDelegateForExtensionMethod("glVertex4fv", typeof(Vertex4fv)))) ?? new Vertex4fv(Imports.Vertex4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
        public static Vertex4hNV glVertex4hNV = ((Vertex4hNV)(GL.GetDelegateForExtensionMethod("glVertex4hNV", typeof(Vertex4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4hvNV(System.IntPtr v);
        public static Vertex4hvNV glVertex4hvNV = ((Vertex4hvNV)(GL.GetDelegateForExtensionMethod("glVertex4hvNV", typeof(Vertex4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4i(GLint x, GLint y, GLint z, GLint w);
        public static Vertex4i glVertex4i = ((Vertex4i)(GL.GetDelegateForExtensionMethod("glVertex4i", typeof(Vertex4i)))) ?? new Vertex4i(Imports.Vertex4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4iv(System.IntPtr v);
        public static Vertex4iv glVertex4iv = ((Vertex4iv)(GL.GetDelegateForExtensionMethod("glVertex4iv", typeof(Vertex4iv)))) ?? new Vertex4iv(Imports.Vertex4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
        public static Vertex4s glVertex4s = ((Vertex4s)(GL.GetDelegateForExtensionMethod("glVertex4s", typeof(Vertex4s)))) ?? new Vertex4s(Imports.Vertex4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4sv(System.IntPtr v);
        public static Vertex4sv glVertex4sv = ((Vertex4sv)(GL.GetDelegateForExtensionMethod("glVertex4sv", typeof(Vertex4sv)))) ?? new Vertex4sv(Imports.Vertex4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexArrayParameteriAPPLE(Enums.APPLE_vertex_array_range pname, GLint param);
        public static VertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE = ((VertexArrayParameteriAPPLE)(GL.GetDelegateForExtensionMethod("glVertexArrayParameteriAPPLE", typeof(VertexArrayParameteriAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer);
        public static VertexArrayRangeAPPLE glVertexArrayRangeAPPLE = ((VertexArrayRangeAPPLE)(GL.GetDelegateForExtensionMethod("glVertexArrayRangeAPPLE", typeof(VertexArrayRangeAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexArrayRangeNV(GLsizei length, System.IntPtr pointer);
        public static VertexArrayRangeNV glVertexArrayRangeNV = ((VertexArrayRangeNV)(GL.GetDelegateForExtensionMethod("glVertexArrayRangeNV", typeof(VertexArrayRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1d(GLuint index, GLdouble x);
        public static VertexAttrib1d glVertexAttrib1d = ((VertexAttrib1d)(GL.GetDelegateForExtensionMethod("glVertexAttrib1d", typeof(VertexAttrib1d)))) ?? new VertexAttrib1d(Imports.VertexAttrib1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dARB(GLuint index, GLdouble x);
        public static VertexAttrib1dARB glVertexAttrib1dARB = ((VertexAttrib1dARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib1dARB", typeof(VertexAttrib1dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dNV(GLuint index, GLdouble x);
        public static VertexAttrib1dNV glVertexAttrib1dNV = ((VertexAttrib1dNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1dNV", typeof(VertexAttrib1dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dv(GLuint index, System.IntPtr v);
        public static VertexAttrib1dv glVertexAttrib1dv = ((VertexAttrib1dv)(GL.GetDelegateForExtensionMethod("glVertexAttrib1dv", typeof(VertexAttrib1dv)))) ?? new VertexAttrib1dv(Imports.VertexAttrib1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib1dvARB glVertexAttrib1dvARB = ((VertexAttrib1dvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib1dvARB", typeof(VertexAttrib1dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1dvNV glVertexAttrib1dvNV = ((VertexAttrib1dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1dvNV", typeof(VertexAttrib1dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1f(GLuint index, GLfloat x);
        public static VertexAttrib1f glVertexAttrib1f = ((VertexAttrib1f)(GL.GetDelegateForExtensionMethod("glVertexAttrib1f", typeof(VertexAttrib1f)))) ?? new VertexAttrib1f(Imports.VertexAttrib1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fARB(GLuint index, GLfloat x);
        public static VertexAttrib1fARB glVertexAttrib1fARB = ((VertexAttrib1fARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib1fARB", typeof(VertexAttrib1fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fNV(GLuint index, GLfloat x);
        public static VertexAttrib1fNV glVertexAttrib1fNV = ((VertexAttrib1fNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1fNV", typeof(VertexAttrib1fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fv(GLuint index, System.IntPtr v);
        public static VertexAttrib1fv glVertexAttrib1fv = ((VertexAttrib1fv)(GL.GetDelegateForExtensionMethod("glVertexAttrib1fv", typeof(VertexAttrib1fv)))) ?? new VertexAttrib1fv(Imports.VertexAttrib1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib1fvARB glVertexAttrib1fvARB = ((VertexAttrib1fvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib1fvARB", typeof(VertexAttrib1fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1fvNV glVertexAttrib1fvNV = ((VertexAttrib1fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1fvNV", typeof(VertexAttrib1fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1hNV(GLuint index, GLhalfNV x);
        public static VertexAttrib1hNV glVertexAttrib1hNV = ((VertexAttrib1hNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1hNV", typeof(VertexAttrib1hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1hvNV glVertexAttrib1hvNV = ((VertexAttrib1hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1hvNV", typeof(VertexAttrib1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1s(GLuint index, GLshort x);
        public static VertexAttrib1s glVertexAttrib1s = ((VertexAttrib1s)(GL.GetDelegateForExtensionMethod("glVertexAttrib1s", typeof(VertexAttrib1s)))) ?? new VertexAttrib1s(Imports.VertexAttrib1s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1sARB(GLuint index, GLshort x);
        public static VertexAttrib1sARB glVertexAttrib1sARB = ((VertexAttrib1sARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib1sARB", typeof(VertexAttrib1sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1sNV(GLuint index, GLshort x);
        public static VertexAttrib1sNV glVertexAttrib1sNV = ((VertexAttrib1sNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1sNV", typeof(VertexAttrib1sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1sv(GLuint index, System.IntPtr v);
        public static VertexAttrib1sv glVertexAttrib1sv = ((VertexAttrib1sv)(GL.GetDelegateForExtensionMethod("glVertexAttrib1sv", typeof(VertexAttrib1sv)))) ?? new VertexAttrib1sv(Imports.VertexAttrib1sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib1svARB glVertexAttrib1svARB = ((VertexAttrib1svARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib1svARB", typeof(VertexAttrib1svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1svNV glVertexAttrib1svNV = ((VertexAttrib1svNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib1svNV", typeof(VertexAttrib1svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
        public static VertexAttrib2d glVertexAttrib2d = ((VertexAttrib2d)(GL.GetDelegateForExtensionMethod("glVertexAttrib2d", typeof(VertexAttrib2d)))) ?? new VertexAttrib2d(Imports.VertexAttrib2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
        public static VertexAttrib2dARB glVertexAttrib2dARB = ((VertexAttrib2dARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib2dARB", typeof(VertexAttrib2dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
        public static VertexAttrib2dNV glVertexAttrib2dNV = ((VertexAttrib2dNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2dNV", typeof(VertexAttrib2dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dv(GLuint index, System.IntPtr v);
        public static VertexAttrib2dv glVertexAttrib2dv = ((VertexAttrib2dv)(GL.GetDelegateForExtensionMethod("glVertexAttrib2dv", typeof(VertexAttrib2dv)))) ?? new VertexAttrib2dv(Imports.VertexAttrib2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib2dvARB glVertexAttrib2dvARB = ((VertexAttrib2dvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib2dvARB", typeof(VertexAttrib2dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2dvNV glVertexAttrib2dvNV = ((VertexAttrib2dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2dvNV", typeof(VertexAttrib2dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
        public static VertexAttrib2f glVertexAttrib2f = ((VertexAttrib2f)(GL.GetDelegateForExtensionMethod("glVertexAttrib2f", typeof(VertexAttrib2f)))) ?? new VertexAttrib2f(Imports.VertexAttrib2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
        public static VertexAttrib2fARB glVertexAttrib2fARB = ((VertexAttrib2fARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib2fARB", typeof(VertexAttrib2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
        public static VertexAttrib2fNV glVertexAttrib2fNV = ((VertexAttrib2fNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2fNV", typeof(VertexAttrib2fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fv(GLuint index, System.IntPtr v);
        public static VertexAttrib2fv glVertexAttrib2fv = ((VertexAttrib2fv)(GL.GetDelegateForExtensionMethod("glVertexAttrib2fv", typeof(VertexAttrib2fv)))) ?? new VertexAttrib2fv(Imports.VertexAttrib2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib2fvARB glVertexAttrib2fvARB = ((VertexAttrib2fvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib2fvARB", typeof(VertexAttrib2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2fvNV glVertexAttrib2fvNV = ((VertexAttrib2fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2fvNV", typeof(VertexAttrib2fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
        public static VertexAttrib2hNV glVertexAttrib2hNV = ((VertexAttrib2hNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2hNV", typeof(VertexAttrib2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2hvNV glVertexAttrib2hvNV = ((VertexAttrib2hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2hvNV", typeof(VertexAttrib2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
        public static VertexAttrib2s glVertexAttrib2s = ((VertexAttrib2s)(GL.GetDelegateForExtensionMethod("glVertexAttrib2s", typeof(VertexAttrib2s)))) ?? new VertexAttrib2s(Imports.VertexAttrib2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
        public static VertexAttrib2sARB glVertexAttrib2sARB = ((VertexAttrib2sARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib2sARB", typeof(VertexAttrib2sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
        public static VertexAttrib2sNV glVertexAttrib2sNV = ((VertexAttrib2sNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2sNV", typeof(VertexAttrib2sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2sv(GLuint index, System.IntPtr v);
        public static VertexAttrib2sv glVertexAttrib2sv = ((VertexAttrib2sv)(GL.GetDelegateForExtensionMethod("glVertexAttrib2sv", typeof(VertexAttrib2sv)))) ?? new VertexAttrib2sv(Imports.VertexAttrib2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib2svARB glVertexAttrib2svARB = ((VertexAttrib2svARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib2svARB", typeof(VertexAttrib2svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2svNV glVertexAttrib2svNV = ((VertexAttrib2svNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib2svNV", typeof(VertexAttrib2svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        public static VertexAttrib3d glVertexAttrib3d = ((VertexAttrib3d)(GL.GetDelegateForExtensionMethod("glVertexAttrib3d", typeof(VertexAttrib3d)))) ?? new VertexAttrib3d(Imports.VertexAttrib3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        public static VertexAttrib3dARB glVertexAttrib3dARB = ((VertexAttrib3dARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib3dARB", typeof(VertexAttrib3dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        public static VertexAttrib3dNV glVertexAttrib3dNV = ((VertexAttrib3dNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3dNV", typeof(VertexAttrib3dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dv(GLuint index, System.IntPtr v);
        public static VertexAttrib3dv glVertexAttrib3dv = ((VertexAttrib3dv)(GL.GetDelegateForExtensionMethod("glVertexAttrib3dv", typeof(VertexAttrib3dv)))) ?? new VertexAttrib3dv(Imports.VertexAttrib3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib3dvARB glVertexAttrib3dvARB = ((VertexAttrib3dvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib3dvARB", typeof(VertexAttrib3dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3dvNV glVertexAttrib3dvNV = ((VertexAttrib3dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3dvNV", typeof(VertexAttrib3dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        public static VertexAttrib3f glVertexAttrib3f = ((VertexAttrib3f)(GL.GetDelegateForExtensionMethod("glVertexAttrib3f", typeof(VertexAttrib3f)))) ?? new VertexAttrib3f(Imports.VertexAttrib3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        public static VertexAttrib3fARB glVertexAttrib3fARB = ((VertexAttrib3fARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib3fARB", typeof(VertexAttrib3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        public static VertexAttrib3fNV glVertexAttrib3fNV = ((VertexAttrib3fNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3fNV", typeof(VertexAttrib3fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fv(GLuint index, System.IntPtr v);
        public static VertexAttrib3fv glVertexAttrib3fv = ((VertexAttrib3fv)(GL.GetDelegateForExtensionMethod("glVertexAttrib3fv", typeof(VertexAttrib3fv)))) ?? new VertexAttrib3fv(Imports.VertexAttrib3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib3fvARB glVertexAttrib3fvARB = ((VertexAttrib3fvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib3fvARB", typeof(VertexAttrib3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3fvNV glVertexAttrib3fvNV = ((VertexAttrib3fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3fvNV", typeof(VertexAttrib3fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
        public static VertexAttrib3hNV glVertexAttrib3hNV = ((VertexAttrib3hNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3hNV", typeof(VertexAttrib3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3hvNV glVertexAttrib3hvNV = ((VertexAttrib3hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3hvNV", typeof(VertexAttrib3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
        public static VertexAttrib3s glVertexAttrib3s = ((VertexAttrib3s)(GL.GetDelegateForExtensionMethod("glVertexAttrib3s", typeof(VertexAttrib3s)))) ?? new VertexAttrib3s(Imports.VertexAttrib3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
        public static VertexAttrib3sARB glVertexAttrib3sARB = ((VertexAttrib3sARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib3sARB", typeof(VertexAttrib3sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
        public static VertexAttrib3sNV glVertexAttrib3sNV = ((VertexAttrib3sNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3sNV", typeof(VertexAttrib3sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3sv(GLuint index, System.IntPtr v);
        public static VertexAttrib3sv glVertexAttrib3sv = ((VertexAttrib3sv)(GL.GetDelegateForExtensionMethod("glVertexAttrib3sv", typeof(VertexAttrib3sv)))) ?? new VertexAttrib3sv(Imports.VertexAttrib3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib3svARB glVertexAttrib3svARB = ((VertexAttrib3svARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib3svARB", typeof(VertexAttrib3svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3svNV glVertexAttrib3svNV = ((VertexAttrib3svNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib3svNV", typeof(VertexAttrib3svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4bv(GLuint index, System.IntPtr v);
        public static VertexAttrib4bv glVertexAttrib4bv = ((VertexAttrib4bv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4bv", typeof(VertexAttrib4bv)))) ?? new VertexAttrib4bv(Imports.VertexAttrib4bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4bvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4bvARB glVertexAttrib4bvARB = ((VertexAttrib4bvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4bvARB", typeof(VertexAttrib4bvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexAttrib4d glVertexAttrib4d = ((VertexAttrib4d)(GL.GetDelegateForExtensionMethod("glVertexAttrib4d", typeof(VertexAttrib4d)))) ?? new VertexAttrib4d(Imports.VertexAttrib4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexAttrib4dARB glVertexAttrib4dARB = ((VertexAttrib4dARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4dARB", typeof(VertexAttrib4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexAttrib4dNV glVertexAttrib4dNV = ((VertexAttrib4dNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4dNV", typeof(VertexAttrib4dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dv(GLuint index, System.IntPtr v);
        public static VertexAttrib4dv glVertexAttrib4dv = ((VertexAttrib4dv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4dv", typeof(VertexAttrib4dv)))) ?? new VertexAttrib4dv(Imports.VertexAttrib4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4dvARB glVertexAttrib4dvARB = ((VertexAttrib4dvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4dvARB", typeof(VertexAttrib4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4dvNV glVertexAttrib4dvNV = ((VertexAttrib4dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4dvNV", typeof(VertexAttrib4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexAttrib4f glVertexAttrib4f = ((VertexAttrib4f)(GL.GetDelegateForExtensionMethod("glVertexAttrib4f", typeof(VertexAttrib4f)))) ?? new VertexAttrib4f(Imports.VertexAttrib4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexAttrib4fARB glVertexAttrib4fARB = ((VertexAttrib4fARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4fARB", typeof(VertexAttrib4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexAttrib4fNV glVertexAttrib4fNV = ((VertexAttrib4fNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4fNV", typeof(VertexAttrib4fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fv(GLuint index, System.IntPtr v);
        public static VertexAttrib4fv glVertexAttrib4fv = ((VertexAttrib4fv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4fv", typeof(VertexAttrib4fv)))) ?? new VertexAttrib4fv(Imports.VertexAttrib4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4fvARB glVertexAttrib4fvARB = ((VertexAttrib4fvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4fvARB", typeof(VertexAttrib4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4fvNV glVertexAttrib4fvNV = ((VertexAttrib4fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4fvNV", typeof(VertexAttrib4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
        public static VertexAttrib4hNV glVertexAttrib4hNV = ((VertexAttrib4hNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4hNV", typeof(VertexAttrib4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4hvNV glVertexAttrib4hvNV = ((VertexAttrib4hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4hvNV", typeof(VertexAttrib4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4iv(GLuint index, System.IntPtr v);
        public static VertexAttrib4iv glVertexAttrib4iv = ((VertexAttrib4iv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4iv", typeof(VertexAttrib4iv)))) ?? new VertexAttrib4iv(Imports.VertexAttrib4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4ivARB glVertexAttrib4ivARB = ((VertexAttrib4ivARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4ivARB", typeof(VertexAttrib4ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nbv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nbv glVertexAttrib4Nbv = ((VertexAttrib4Nbv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4Nbv", typeof(VertexAttrib4Nbv)))) ?? new VertexAttrib4Nbv(Imports.VertexAttrib4Nbv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NbvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NbvARB glVertexAttrib4NbvARB = ((VertexAttrib4NbvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4NbvARB", typeof(VertexAttrib4NbvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Niv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Niv glVertexAttrib4Niv = ((VertexAttrib4Niv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4Niv", typeof(VertexAttrib4Niv)))) ?? new VertexAttrib4Niv(Imports.VertexAttrib4Niv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NivARB glVertexAttrib4NivARB = ((VertexAttrib4NivARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4NivARB", typeof(VertexAttrib4NivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nsv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nsv glVertexAttrib4Nsv = ((VertexAttrib4Nsv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4Nsv", typeof(VertexAttrib4Nsv)))) ?? new VertexAttrib4Nsv(Imports.VertexAttrib4Nsv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NsvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NsvARB glVertexAttrib4NsvARB = ((VertexAttrib4NsvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4NsvARB", typeof(VertexAttrib4NsvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        public static VertexAttrib4Nub glVertexAttrib4Nub = ((VertexAttrib4Nub)(GL.GetDelegateForExtensionMethod("glVertexAttrib4Nub", typeof(VertexAttrib4Nub)))) ?? new VertexAttrib4Nub(Imports.VertexAttrib4Nub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        public static VertexAttrib4NubARB glVertexAttrib4NubARB = ((VertexAttrib4NubARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4NubARB", typeof(VertexAttrib4NubARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nubv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nubv glVertexAttrib4Nubv = ((VertexAttrib4Nubv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4Nubv", typeof(VertexAttrib4Nubv)))) ?? new VertexAttrib4Nubv(Imports.VertexAttrib4Nubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NubvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NubvARB glVertexAttrib4NubvARB = ((VertexAttrib4NubvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4NubvARB", typeof(VertexAttrib4NubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nuiv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nuiv glVertexAttrib4Nuiv = ((VertexAttrib4Nuiv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4Nuiv", typeof(VertexAttrib4Nuiv)))) ?? new VertexAttrib4Nuiv(Imports.VertexAttrib4Nuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NuivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NuivARB glVertexAttrib4NuivARB = ((VertexAttrib4NuivARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4NuivARB", typeof(VertexAttrib4NuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nusv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nusv glVertexAttrib4Nusv = ((VertexAttrib4Nusv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4Nusv", typeof(VertexAttrib4Nusv)))) ?? new VertexAttrib4Nusv(Imports.VertexAttrib4Nusv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NusvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NusvARB glVertexAttrib4NusvARB = ((VertexAttrib4NusvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4NusvARB", typeof(VertexAttrib4NusvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexAttrib4s glVertexAttrib4s = ((VertexAttrib4s)(GL.GetDelegateForExtensionMethod("glVertexAttrib4s", typeof(VertexAttrib4s)))) ?? new VertexAttrib4s(Imports.VertexAttrib4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexAttrib4sARB glVertexAttrib4sARB = ((VertexAttrib4sARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4sARB", typeof(VertexAttrib4sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexAttrib4sNV glVertexAttrib4sNV = ((VertexAttrib4sNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4sNV", typeof(VertexAttrib4sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4sv(GLuint index, System.IntPtr v);
        public static VertexAttrib4sv glVertexAttrib4sv = ((VertexAttrib4sv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4sv", typeof(VertexAttrib4sv)))) ?? new VertexAttrib4sv(Imports.VertexAttrib4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4svARB glVertexAttrib4svARB = ((VertexAttrib4svARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4svARB", typeof(VertexAttrib4svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4svNV glVertexAttrib4svNV = ((VertexAttrib4svNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4svNV", typeof(VertexAttrib4svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        public static VertexAttrib4ubNV glVertexAttrib4ubNV = ((VertexAttrib4ubNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4ubNV", typeof(VertexAttrib4ubNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubv(GLuint index, System.IntPtr v);
        public static VertexAttrib4ubv glVertexAttrib4ubv = ((VertexAttrib4ubv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4ubv", typeof(VertexAttrib4ubv)))) ?? new VertexAttrib4ubv(Imports.VertexAttrib4ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4ubvARB glVertexAttrib4ubvARB = ((VertexAttrib4ubvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4ubvARB", typeof(VertexAttrib4ubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4ubvNV glVertexAttrib4ubvNV = ((VertexAttrib4ubvNV)(GL.GetDelegateForExtensionMethod("glVertexAttrib4ubvNV", typeof(VertexAttrib4ubvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4uiv(GLuint index, System.IntPtr v);
        public static VertexAttrib4uiv glVertexAttrib4uiv = ((VertexAttrib4uiv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4uiv", typeof(VertexAttrib4uiv)))) ?? new VertexAttrib4uiv(Imports.VertexAttrib4uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4uivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4uivARB glVertexAttrib4uivARB = ((VertexAttrib4uivARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4uivARB", typeof(VertexAttrib4uivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4usv(GLuint index, System.IntPtr v);
        public static VertexAttrib4usv glVertexAttrib4usv = ((VertexAttrib4usv)(GL.GetDelegateForExtensionMethod("glVertexAttrib4usv", typeof(VertexAttrib4usv)))) ?? new VertexAttrib4usv(Imports.VertexAttrib4usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4usvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4usvARB glVertexAttrib4usvARB = ((VertexAttrib4usvARB)(GL.GetDelegateForExtensionMethod("glVertexAttrib4usvARB", typeof(VertexAttrib4usvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribArrayObjectATI(GLuint index, GLint size, Enums.ATI_vertex_attrib_array_object type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, GLuint buffer, GLuint offset);
        public static VertexAttribArrayObjectATI glVertexAttribArrayObjectATI = ((VertexAttribArrayObjectATI)(GL.GetDelegateForExtensionMethod("glVertexAttribArrayObjectATI", typeof(VertexAttribArrayObjectATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1iEXT(GLuint index, GLint x);
        public static VertexAttribI1iEXT glVertexAttribI1iEXT = ((VertexAttribI1iEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI1iEXT", typeof(VertexAttribI1iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI1ivEXT glVertexAttribI1ivEXT = ((VertexAttribI1ivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI1ivEXT", typeof(VertexAttribI1ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1uiEXT(GLuint index, GLuint x);
        public static VertexAttribI1uiEXT glVertexAttribI1uiEXT = ((VertexAttribI1uiEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI1uiEXT", typeof(VertexAttribI1uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI1uivEXT glVertexAttribI1uivEXT = ((VertexAttribI1uivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI1uivEXT", typeof(VertexAttribI1uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2iEXT(GLuint index, GLint x, GLint y);
        public static VertexAttribI2iEXT glVertexAttribI2iEXT = ((VertexAttribI2iEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI2iEXT", typeof(VertexAttribI2iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI2ivEXT glVertexAttribI2ivEXT = ((VertexAttribI2ivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI2ivEXT", typeof(VertexAttribI2ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
        public static VertexAttribI2uiEXT glVertexAttribI2uiEXT = ((VertexAttribI2uiEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI2uiEXT", typeof(VertexAttribI2uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI2uivEXT glVertexAttribI2uivEXT = ((VertexAttribI2uivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI2uivEXT", typeof(VertexAttribI2uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
        public static VertexAttribI3iEXT glVertexAttribI3iEXT = ((VertexAttribI3iEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI3iEXT", typeof(VertexAttribI3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI3ivEXT glVertexAttribI3ivEXT = ((VertexAttribI3ivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI3ivEXT", typeof(VertexAttribI3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
        public static VertexAttribI3uiEXT glVertexAttribI3uiEXT = ((VertexAttribI3uiEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI3uiEXT", typeof(VertexAttribI3uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI3uivEXT glVertexAttribI3uivEXT = ((VertexAttribI3uivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI3uivEXT", typeof(VertexAttribI3uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4bvEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4bvEXT glVertexAttribI4bvEXT = ((VertexAttribI4bvEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4bvEXT", typeof(VertexAttribI4bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
        public static VertexAttribI4iEXT glVertexAttribI4iEXT = ((VertexAttribI4iEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4iEXT", typeof(VertexAttribI4iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4ivEXT glVertexAttribI4ivEXT = ((VertexAttribI4ivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4ivEXT", typeof(VertexAttribI4ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4svEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4svEXT glVertexAttribI4svEXT = ((VertexAttribI4svEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4svEXT", typeof(VertexAttribI4svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4ubvEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4ubvEXT glVertexAttribI4ubvEXT = ((VertexAttribI4ubvEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4ubvEXT", typeof(VertexAttribI4ubvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        public static VertexAttribI4uiEXT glVertexAttribI4uiEXT = ((VertexAttribI4uiEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4uiEXT", typeof(VertexAttribI4uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4uivEXT glVertexAttribI4uivEXT = ((VertexAttribI4uivEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4uivEXT", typeof(VertexAttribI4uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4usvEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4usvEXT glVertexAttribI4usvEXT = ((VertexAttribI4usvEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribI4usvEXT", typeof(VertexAttribI4usvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribIPointerEXT(GLuint index, GLint size, Enums.NV_vertex_program4 type, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribIPointerEXT glVertexAttribIPointerEXT = ((VertexAttribIPointerEXT)(GL.GetDelegateForExtensionMethod("glVertexAttribIPointerEXT", typeof(VertexAttribIPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribPointer(GLuint index, GLint size, Enums.VERSION_2_0 type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribPointer glVertexAttribPointer = ((VertexAttribPointer)(GL.GetDelegateForExtensionMethod("glVertexAttribPointer", typeof(VertexAttribPointer)))) ?? new VertexAttribPointer(Imports.VertexAttribPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribPointerARB(GLuint index, GLint size, Enums.ARB_vertex_program type, [MarshalAs(UnmanagedType.Bool)] bool normalized, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribPointerARB glVertexAttribPointerARB = ((VertexAttribPointerARB)(GL.GetDelegateForExtensionMethod("glVertexAttribPointerARB", typeof(VertexAttribPointerARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribPointerNV(GLuint index, GLint fsize, Enums.NV_vertex_program type, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribPointerNV glVertexAttribPointerNV = ((VertexAttribPointerNV)(GL.GetDelegateForExtensionMethod("glVertexAttribPointerNV", typeof(VertexAttribPointerNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs1dvNV glVertexAttribs1dvNV = ((VertexAttribs1dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs1dvNV", typeof(VertexAttribs1dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs1fvNV glVertexAttribs1fvNV = ((VertexAttribs1fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs1fvNV", typeof(VertexAttribs1fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs1hvNV glVertexAttribs1hvNV = ((VertexAttribs1hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs1hvNV", typeof(VertexAttribs1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs1svNV glVertexAttribs1svNV = ((VertexAttribs1svNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs1svNV", typeof(VertexAttribs1svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs2dvNV glVertexAttribs2dvNV = ((VertexAttribs2dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs2dvNV", typeof(VertexAttribs2dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs2fvNV glVertexAttribs2fvNV = ((VertexAttribs2fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs2fvNV", typeof(VertexAttribs2fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs2hvNV glVertexAttribs2hvNV = ((VertexAttribs2hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs2hvNV", typeof(VertexAttribs2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs2svNV glVertexAttribs2svNV = ((VertexAttribs2svNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs2svNV", typeof(VertexAttribs2svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs3dvNV glVertexAttribs3dvNV = ((VertexAttribs3dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs3dvNV", typeof(VertexAttribs3dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs3fvNV glVertexAttribs3fvNV = ((VertexAttribs3fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs3fvNV", typeof(VertexAttribs3fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs3hvNV glVertexAttribs3hvNV = ((VertexAttribs3hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs3hvNV", typeof(VertexAttribs3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs3svNV glVertexAttribs3svNV = ((VertexAttribs3svNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs3svNV", typeof(VertexAttribs3svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4dvNV glVertexAttribs4dvNV = ((VertexAttribs4dvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs4dvNV", typeof(VertexAttribs4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4fvNV glVertexAttribs4fvNV = ((VertexAttribs4fvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs4fvNV", typeof(VertexAttribs4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs4hvNV glVertexAttribs4hvNV = ((VertexAttribs4hvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs4hvNV", typeof(VertexAttribs4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4svNV glVertexAttribs4svNV = ((VertexAttribs4svNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs4svNV", typeof(VertexAttribs4svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4ubvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4ubvNV glVertexAttribs4ubvNV = ((VertexAttribs4ubvNV)(GL.GetDelegateForExtensionMethod("glVertexAttribs4ubvNV", typeof(VertexAttribs4ubvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexBlendARB(GLint count);
        public static VertexBlendARB glVertexBlendARB = ((VertexBlendARB)(GL.GetDelegateForExtensionMethod("glVertexBlendARB", typeof(VertexBlendARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexBlendEnvfATI(Enums.ATI_vertex_streams pname, GLfloat param);
        public static VertexBlendEnvfATI glVertexBlendEnvfATI = ((VertexBlendEnvfATI)(GL.GetDelegateForExtensionMethod("glVertexBlendEnvfATI", typeof(VertexBlendEnvfATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexBlendEnviATI(Enums.ATI_vertex_streams pname, GLint param);
        public static VertexBlendEnviATI glVertexBlendEnviATI = ((VertexBlendEnviATI)(GL.GetDelegateForExtensionMethod("glVertexBlendEnviATI", typeof(VertexBlendEnviATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, System.IntPtr pointer);
        public static VertexPointer glVertexPointer = ((VertexPointer)(GL.GetDelegateForExtensionMethod("glVertexPointer", typeof(VertexPointer)))) ?? new VertexPointer(Imports.VertexPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointerEXT(GLint size, Enums.VertexPointerType type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static VertexPointerEXT glVertexPointerEXT = ((VertexPointerEXT)(GL.GetDelegateForExtensionMethod("glVertexPointerEXT", typeof(VertexPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointerListIBM(GLint size, Enums.VertexPointerType type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static VertexPointerListIBM glVertexPointerListIBM = ((VertexPointerListIBM)(GL.GetDelegateForExtensionMethod("glVertexPointerListIBM", typeof(VertexPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointervINTEL(GLint size, Enums.VertexPointerType type, System.IntPtr pointer);
        public static VertexPointervINTEL glVertexPointervINTEL = ((VertexPointervINTEL)(GL.GetDelegateForExtensionMethod("glVertexPointervINTEL", typeof(VertexPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1dATI(Enums.ATI_vertex_streams stream, GLdouble x);
        public static VertexStream1dATI glVertexStream1dATI = ((VertexStream1dATI)(GL.GetDelegateForExtensionMethod("glVertexStream1dATI", typeof(VertexStream1dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream1dvATI glVertexStream1dvATI = ((VertexStream1dvATI)(GL.GetDelegateForExtensionMethod("glVertexStream1dvATI", typeof(VertexStream1dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1fATI(Enums.ATI_vertex_streams stream, GLfloat x);
        public static VertexStream1fATI glVertexStream1fATI = ((VertexStream1fATI)(GL.GetDelegateForExtensionMethod("glVertexStream1fATI", typeof(VertexStream1fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream1fvATI glVertexStream1fvATI = ((VertexStream1fvATI)(GL.GetDelegateForExtensionMethod("glVertexStream1fvATI", typeof(VertexStream1fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1iATI(Enums.ATI_vertex_streams stream, GLint x);
        public static VertexStream1iATI glVertexStream1iATI = ((VertexStream1iATI)(GL.GetDelegateForExtensionMethod("glVertexStream1iATI", typeof(VertexStream1iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream1ivATI glVertexStream1ivATI = ((VertexStream1ivATI)(GL.GetDelegateForExtensionMethod("glVertexStream1ivATI", typeof(VertexStream1ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1sATI(Enums.ATI_vertex_streams stream, GLshort x);
        public static VertexStream1sATI glVertexStream1sATI = ((VertexStream1sATI)(GL.GetDelegateForExtensionMethod("glVertexStream1sATI", typeof(VertexStream1sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream1svATI glVertexStream1svATI = ((VertexStream1svATI)(GL.GetDelegateForExtensionMethod("glVertexStream1svATI", typeof(VertexStream1svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2dATI(Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y);
        public static VertexStream2dATI glVertexStream2dATI = ((VertexStream2dATI)(GL.GetDelegateForExtensionMethod("glVertexStream2dATI", typeof(VertexStream2dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream2dvATI glVertexStream2dvATI = ((VertexStream2dvATI)(GL.GetDelegateForExtensionMethod("glVertexStream2dvATI", typeof(VertexStream2dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2fATI(Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y);
        public static VertexStream2fATI glVertexStream2fATI = ((VertexStream2fATI)(GL.GetDelegateForExtensionMethod("glVertexStream2fATI", typeof(VertexStream2fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream2fvATI glVertexStream2fvATI = ((VertexStream2fvATI)(GL.GetDelegateForExtensionMethod("glVertexStream2fvATI", typeof(VertexStream2fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2iATI(Enums.ATI_vertex_streams stream, GLint x, GLint y);
        public static VertexStream2iATI glVertexStream2iATI = ((VertexStream2iATI)(GL.GetDelegateForExtensionMethod("glVertexStream2iATI", typeof(VertexStream2iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream2ivATI glVertexStream2ivATI = ((VertexStream2ivATI)(GL.GetDelegateForExtensionMethod("glVertexStream2ivATI", typeof(VertexStream2ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2sATI(Enums.ATI_vertex_streams stream, GLshort x, GLshort y);
        public static VertexStream2sATI glVertexStream2sATI = ((VertexStream2sATI)(GL.GetDelegateForExtensionMethod("glVertexStream2sATI", typeof(VertexStream2sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream2svATI glVertexStream2svATI = ((VertexStream2svATI)(GL.GetDelegateForExtensionMethod("glVertexStream2svATI", typeof(VertexStream2svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3dATI(Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z);
        public static VertexStream3dATI glVertexStream3dATI = ((VertexStream3dATI)(GL.GetDelegateForExtensionMethod("glVertexStream3dATI", typeof(VertexStream3dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream3dvATI glVertexStream3dvATI = ((VertexStream3dvATI)(GL.GetDelegateForExtensionMethod("glVertexStream3dvATI", typeof(VertexStream3dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3fATI(Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z);
        public static VertexStream3fATI glVertexStream3fATI = ((VertexStream3fATI)(GL.GetDelegateForExtensionMethod("glVertexStream3fATI", typeof(VertexStream3fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream3fvATI glVertexStream3fvATI = ((VertexStream3fvATI)(GL.GetDelegateForExtensionMethod("glVertexStream3fvATI", typeof(VertexStream3fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3iATI(Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z);
        public static VertexStream3iATI glVertexStream3iATI = ((VertexStream3iATI)(GL.GetDelegateForExtensionMethod("glVertexStream3iATI", typeof(VertexStream3iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream3ivATI glVertexStream3ivATI = ((VertexStream3ivATI)(GL.GetDelegateForExtensionMethod("glVertexStream3ivATI", typeof(VertexStream3ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3sATI(Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z);
        public static VertexStream3sATI glVertexStream3sATI = ((VertexStream3sATI)(GL.GetDelegateForExtensionMethod("glVertexStream3sATI", typeof(VertexStream3sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream3svATI glVertexStream3svATI = ((VertexStream3svATI)(GL.GetDelegateForExtensionMethod("glVertexStream3svATI", typeof(VertexStream3svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4dATI(Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexStream4dATI glVertexStream4dATI = ((VertexStream4dATI)(GL.GetDelegateForExtensionMethod("glVertexStream4dATI", typeof(VertexStream4dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4dvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream4dvATI glVertexStream4dvATI = ((VertexStream4dvATI)(GL.GetDelegateForExtensionMethod("glVertexStream4dvATI", typeof(VertexStream4dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4fATI(Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexStream4fATI glVertexStream4fATI = ((VertexStream4fATI)(GL.GetDelegateForExtensionMethod("glVertexStream4fATI", typeof(VertexStream4fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4fvATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream4fvATI glVertexStream4fvATI = ((VertexStream4fvATI)(GL.GetDelegateForExtensionMethod("glVertexStream4fvATI", typeof(VertexStream4fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4iATI(Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z, GLint w);
        public static VertexStream4iATI glVertexStream4iATI = ((VertexStream4iATI)(GL.GetDelegateForExtensionMethod("glVertexStream4iATI", typeof(VertexStream4iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4ivATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream4ivATI glVertexStream4ivATI = ((VertexStream4ivATI)(GL.GetDelegateForExtensionMethod("glVertexStream4ivATI", typeof(VertexStream4ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4sATI(Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexStream4sATI glVertexStream4sATI = ((VertexStream4sATI)(GL.GetDelegateForExtensionMethod("glVertexStream4sATI", typeof(VertexStream4sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4svATI(Enums.ATI_vertex_streams stream, System.IntPtr coords);
        public static VertexStream4svATI glVertexStream4svATI = ((VertexStream4svATI)(GL.GetDelegateForExtensionMethod("glVertexStream4svATI", typeof(VertexStream4svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeightfEXT(GLfloat weight);
        public static VertexWeightfEXT glVertexWeightfEXT = ((VertexWeightfEXT)(GL.GetDelegateForExtensionMethod("glVertexWeightfEXT", typeof(VertexWeightfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeightfvEXT(System.IntPtr weight);
        public static VertexWeightfvEXT glVertexWeightfvEXT = ((VertexWeightfvEXT)(GL.GetDelegateForExtensionMethod("glVertexWeightfvEXT", typeof(VertexWeightfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeighthNV(GLhalfNV weight);
        public static VertexWeighthNV glVertexWeighthNV = ((VertexWeighthNV)(GL.GetDelegateForExtensionMethod("glVertexWeighthNV", typeof(VertexWeighthNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeighthvNV(System.IntPtr weight);
        public static VertexWeighthvNV glVertexWeighthvNV = ((VertexWeighthvNV)(GL.GetDelegateForExtensionMethod("glVertexWeighthvNV", typeof(VertexWeighthvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeightPointerEXT(GLsizei size, Enums.EXT_vertex_weighting type, GLsizei stride, System.IntPtr pointer);
        public static VertexWeightPointerEXT glVertexWeightPointerEXT = ((VertexWeightPointerEXT)(GL.GetDelegateForExtensionMethod("glVertexWeightPointerEXT", typeof(VertexWeightPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
        public static Viewport glViewport = ((Viewport)(GL.GetDelegateForExtensionMethod("glViewport", typeof(Viewport)))) ?? new Viewport(Imports.Viewport);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightbvARB(GLint size, System.IntPtr weights);
        public static WeightbvARB glWeightbvARB = ((WeightbvARB)(GL.GetDelegateForExtensionMethod("glWeightbvARB", typeof(WeightbvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightdvARB(GLint size, System.IntPtr weights);
        public static WeightdvARB glWeightdvARB = ((WeightdvARB)(GL.GetDelegateForExtensionMethod("glWeightdvARB", typeof(WeightdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightfvARB(GLint size, System.IntPtr weights);
        public static WeightfvARB glWeightfvARB = ((WeightfvARB)(GL.GetDelegateForExtensionMethod("glWeightfvARB", typeof(WeightfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightivARB(GLint size, System.IntPtr weights);
        public static WeightivARB glWeightivARB = ((WeightivARB)(GL.GetDelegateForExtensionMethod("glWeightivARB", typeof(WeightivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightPointerARB(GLint size, Enums.ARB_vertex_blend type, GLsizei stride, System.IntPtr pointer);
        public static WeightPointerARB glWeightPointerARB = ((WeightPointerARB)(GL.GetDelegateForExtensionMethod("glWeightPointerARB", typeof(WeightPointerARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightsvARB(GLint size, System.IntPtr weights);
        public static WeightsvARB glWeightsvARB = ((WeightsvARB)(GL.GetDelegateForExtensionMethod("glWeightsvARB", typeof(WeightsvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightubvARB(GLint size, System.IntPtr weights);
        public static WeightubvARB glWeightubvARB = ((WeightubvARB)(GL.GetDelegateForExtensionMethod("glWeightubvARB", typeof(WeightubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightuivARB(GLint size, System.IntPtr weights);
        public static WeightuivARB glWeightuivARB = ((WeightuivARB)(GL.GetDelegateForExtensionMethod("glWeightuivARB", typeof(WeightuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightusvARB(GLint size, System.IntPtr weights);
        public static WeightusvARB glWeightusvARB = ((WeightusvARB)(GL.GetDelegateForExtensionMethod("glWeightusvARB", typeof(WeightusvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2d(GLdouble x, GLdouble y);
        public static WindowPos2d glWindowPos2d = ((WindowPos2d)(GL.GetDelegateForExtensionMethod("glWindowPos2d", typeof(WindowPos2d)))) ?? new WindowPos2d(Imports.WindowPos2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dARB(GLdouble x, GLdouble y);
        public static WindowPos2dARB glWindowPos2dARB = ((WindowPos2dARB)(GL.GetDelegateForExtensionMethod("glWindowPos2dARB", typeof(WindowPos2dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dMESA(GLdouble x, GLdouble y);
        public static WindowPos2dMESA glWindowPos2dMESA = ((WindowPos2dMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2dMESA", typeof(WindowPos2dMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dv(System.IntPtr v);
        public static WindowPos2dv glWindowPos2dv = ((WindowPos2dv)(GL.GetDelegateForExtensionMethod("glWindowPos2dv", typeof(WindowPos2dv)))) ?? new WindowPos2dv(Imports.WindowPos2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dvARB(System.IntPtr v);
        public static WindowPos2dvARB glWindowPos2dvARB = ((WindowPos2dvARB)(GL.GetDelegateForExtensionMethod("glWindowPos2dvARB", typeof(WindowPos2dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dvMESA(System.IntPtr v);
        public static WindowPos2dvMESA glWindowPos2dvMESA = ((WindowPos2dvMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2dvMESA", typeof(WindowPos2dvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2f(GLfloat x, GLfloat y);
        public static WindowPos2f glWindowPos2f = ((WindowPos2f)(GL.GetDelegateForExtensionMethod("glWindowPos2f", typeof(WindowPos2f)))) ?? new WindowPos2f(Imports.WindowPos2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fARB(GLfloat x, GLfloat y);
        public static WindowPos2fARB glWindowPos2fARB = ((WindowPos2fARB)(GL.GetDelegateForExtensionMethod("glWindowPos2fARB", typeof(WindowPos2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fMESA(GLfloat x, GLfloat y);
        public static WindowPos2fMESA glWindowPos2fMESA = ((WindowPos2fMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2fMESA", typeof(WindowPos2fMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fv(System.IntPtr v);
        public static WindowPos2fv glWindowPos2fv = ((WindowPos2fv)(GL.GetDelegateForExtensionMethod("glWindowPos2fv", typeof(WindowPos2fv)))) ?? new WindowPos2fv(Imports.WindowPos2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fvARB(System.IntPtr v);
        public static WindowPos2fvARB glWindowPos2fvARB = ((WindowPos2fvARB)(GL.GetDelegateForExtensionMethod("glWindowPos2fvARB", typeof(WindowPos2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fvMESA(System.IntPtr v);
        public static WindowPos2fvMESA glWindowPos2fvMESA = ((WindowPos2fvMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2fvMESA", typeof(WindowPos2fvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2i(GLint x, GLint y);
        public static WindowPos2i glWindowPos2i = ((WindowPos2i)(GL.GetDelegateForExtensionMethod("glWindowPos2i", typeof(WindowPos2i)))) ?? new WindowPos2i(Imports.WindowPos2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2iARB(GLint x, GLint y);
        public static WindowPos2iARB glWindowPos2iARB = ((WindowPos2iARB)(GL.GetDelegateForExtensionMethod("glWindowPos2iARB", typeof(WindowPos2iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2iMESA(GLint x, GLint y);
        public static WindowPos2iMESA glWindowPos2iMESA = ((WindowPos2iMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2iMESA", typeof(WindowPos2iMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2iv(System.IntPtr v);
        public static WindowPos2iv glWindowPos2iv = ((WindowPos2iv)(GL.GetDelegateForExtensionMethod("glWindowPos2iv", typeof(WindowPos2iv)))) ?? new WindowPos2iv(Imports.WindowPos2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2ivARB(System.IntPtr v);
        public static WindowPos2ivARB glWindowPos2ivARB = ((WindowPos2ivARB)(GL.GetDelegateForExtensionMethod("glWindowPos2ivARB", typeof(WindowPos2ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2ivMESA(System.IntPtr v);
        public static WindowPos2ivMESA glWindowPos2ivMESA = ((WindowPos2ivMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2ivMESA", typeof(WindowPos2ivMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2s(GLshort x, GLshort y);
        public static WindowPos2s glWindowPos2s = ((WindowPos2s)(GL.GetDelegateForExtensionMethod("glWindowPos2s", typeof(WindowPos2s)))) ?? new WindowPos2s(Imports.WindowPos2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2sARB(GLshort x, GLshort y);
        public static WindowPos2sARB glWindowPos2sARB = ((WindowPos2sARB)(GL.GetDelegateForExtensionMethod("glWindowPos2sARB", typeof(WindowPos2sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2sMESA(GLshort x, GLshort y);
        public static WindowPos2sMESA glWindowPos2sMESA = ((WindowPos2sMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2sMESA", typeof(WindowPos2sMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2sv(System.IntPtr v);
        public static WindowPos2sv glWindowPos2sv = ((WindowPos2sv)(GL.GetDelegateForExtensionMethod("glWindowPos2sv", typeof(WindowPos2sv)))) ?? new WindowPos2sv(Imports.WindowPos2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2svARB(System.IntPtr v);
        public static WindowPos2svARB glWindowPos2svARB = ((WindowPos2svARB)(GL.GetDelegateForExtensionMethod("glWindowPos2svARB", typeof(WindowPos2svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2svMESA(System.IntPtr v);
        public static WindowPos2svMESA glWindowPos2svMESA = ((WindowPos2svMESA)(GL.GetDelegateForExtensionMethod("glWindowPos2svMESA", typeof(WindowPos2svMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
        public static WindowPos3d glWindowPos3d = ((WindowPos3d)(GL.GetDelegateForExtensionMethod("glWindowPos3d", typeof(WindowPos3d)))) ?? new WindowPos3d(Imports.WindowPos3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
        public static WindowPos3dARB glWindowPos3dARB = ((WindowPos3dARB)(GL.GetDelegateForExtensionMethod("glWindowPos3dARB", typeof(WindowPos3dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
        public static WindowPos3dMESA glWindowPos3dMESA = ((WindowPos3dMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3dMESA", typeof(WindowPos3dMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dv(System.IntPtr v);
        public static WindowPos3dv glWindowPos3dv = ((WindowPos3dv)(GL.GetDelegateForExtensionMethod("glWindowPos3dv", typeof(WindowPos3dv)))) ?? new WindowPos3dv(Imports.WindowPos3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dvARB(System.IntPtr v);
        public static WindowPos3dvARB glWindowPos3dvARB = ((WindowPos3dvARB)(GL.GetDelegateForExtensionMethod("glWindowPos3dvARB", typeof(WindowPos3dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dvMESA(System.IntPtr v);
        public static WindowPos3dvMESA glWindowPos3dvMESA = ((WindowPos3dvMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3dvMESA", typeof(WindowPos3dvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
        public static WindowPos3f glWindowPos3f = ((WindowPos3f)(GL.GetDelegateForExtensionMethod("glWindowPos3f", typeof(WindowPos3f)))) ?? new WindowPos3f(Imports.WindowPos3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
        public static WindowPos3fARB glWindowPos3fARB = ((WindowPos3fARB)(GL.GetDelegateForExtensionMethod("glWindowPos3fARB", typeof(WindowPos3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
        public static WindowPos3fMESA glWindowPos3fMESA = ((WindowPos3fMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3fMESA", typeof(WindowPos3fMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fv(System.IntPtr v);
        public static WindowPos3fv glWindowPos3fv = ((WindowPos3fv)(GL.GetDelegateForExtensionMethod("glWindowPos3fv", typeof(WindowPos3fv)))) ?? new WindowPos3fv(Imports.WindowPos3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fvARB(System.IntPtr v);
        public static WindowPos3fvARB glWindowPos3fvARB = ((WindowPos3fvARB)(GL.GetDelegateForExtensionMethod("glWindowPos3fvARB", typeof(WindowPos3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fvMESA(System.IntPtr v);
        public static WindowPos3fvMESA glWindowPos3fvMESA = ((WindowPos3fvMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3fvMESA", typeof(WindowPos3fvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3i(GLint x, GLint y, GLint z);
        public static WindowPos3i glWindowPos3i = ((WindowPos3i)(GL.GetDelegateForExtensionMethod("glWindowPos3i", typeof(WindowPos3i)))) ?? new WindowPos3i(Imports.WindowPos3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3iARB(GLint x, GLint y, GLint z);
        public static WindowPos3iARB glWindowPos3iARB = ((WindowPos3iARB)(GL.GetDelegateForExtensionMethod("glWindowPos3iARB", typeof(WindowPos3iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3iMESA(GLint x, GLint y, GLint z);
        public static WindowPos3iMESA glWindowPos3iMESA = ((WindowPos3iMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3iMESA", typeof(WindowPos3iMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3iv(System.IntPtr v);
        public static WindowPos3iv glWindowPos3iv = ((WindowPos3iv)(GL.GetDelegateForExtensionMethod("glWindowPos3iv", typeof(WindowPos3iv)))) ?? new WindowPos3iv(Imports.WindowPos3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3ivARB(System.IntPtr v);
        public static WindowPos3ivARB glWindowPos3ivARB = ((WindowPos3ivARB)(GL.GetDelegateForExtensionMethod("glWindowPos3ivARB", typeof(WindowPos3ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3ivMESA(System.IntPtr v);
        public static WindowPos3ivMESA glWindowPos3ivMESA = ((WindowPos3ivMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3ivMESA", typeof(WindowPos3ivMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3s(GLshort x, GLshort y, GLshort z);
        public static WindowPos3s glWindowPos3s = ((WindowPos3s)(GL.GetDelegateForExtensionMethod("glWindowPos3s", typeof(WindowPos3s)))) ?? new WindowPos3s(Imports.WindowPos3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3sARB(GLshort x, GLshort y, GLshort z);
        public static WindowPos3sARB glWindowPos3sARB = ((WindowPos3sARB)(GL.GetDelegateForExtensionMethod("glWindowPos3sARB", typeof(WindowPos3sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3sMESA(GLshort x, GLshort y, GLshort z);
        public static WindowPos3sMESA glWindowPos3sMESA = ((WindowPos3sMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3sMESA", typeof(WindowPos3sMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3sv(System.IntPtr v);
        public static WindowPos3sv glWindowPos3sv = ((WindowPos3sv)(GL.GetDelegateForExtensionMethod("glWindowPos3sv", typeof(WindowPos3sv)))) ?? new WindowPos3sv(Imports.WindowPos3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3svARB(System.IntPtr v);
        public static WindowPos3svARB glWindowPos3svARB = ((WindowPos3svARB)(GL.GetDelegateForExtensionMethod("glWindowPos3svARB", typeof(WindowPos3svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3svMESA(System.IntPtr v);
        public static WindowPos3svMESA glWindowPos3svMESA = ((WindowPos3svMESA)(GL.GetDelegateForExtensionMethod("glWindowPos3svMESA", typeof(WindowPos3svMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static WindowPos4dMESA glWindowPos4dMESA = ((WindowPos4dMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4dMESA", typeof(WindowPos4dMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4dvMESA(System.IntPtr v);
        public static WindowPos4dvMESA glWindowPos4dvMESA = ((WindowPos4dvMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4dvMESA", typeof(WindowPos4dvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static WindowPos4fMESA glWindowPos4fMESA = ((WindowPos4fMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4fMESA", typeof(WindowPos4fMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4fvMESA(System.IntPtr v);
        public static WindowPos4fvMESA glWindowPos4fvMESA = ((WindowPos4fvMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4fvMESA", typeof(WindowPos4fvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
        public static WindowPos4iMESA glWindowPos4iMESA = ((WindowPos4iMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4iMESA", typeof(WindowPos4iMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4ivMESA(System.IntPtr v);
        public static WindowPos4ivMESA glWindowPos4ivMESA = ((WindowPos4ivMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4ivMESA", typeof(WindowPos4ivMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
        public static WindowPos4sMESA glWindowPos4sMESA = ((WindowPos4sMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4sMESA", typeof(WindowPos4sMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4svMESA(System.IntPtr v);
        public static WindowPos4svMESA glWindowPos4svMESA = ((WindowPos4svMESA)(GL.GetDelegateForExtensionMethod("glWindowPos4svMESA", typeof(WindowPos4svMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WriteMaskEXT(GLuint res, GLuint @in, Enums.EXT_vertex_shader outX, Enums.EXT_vertex_shader outY, Enums.EXT_vertex_shader outZ, Enums.EXT_vertex_shader outW);
        public static WriteMaskEXT glWriteMaskEXT = ((WriteMaskEXT)(GL.GetDelegateForExtensionMethod("glWriteMaskEXT", typeof(WriteMaskEXT))));
        static Delegates()
        {
        }
    }
    #endregion
    #region Imports
    internal class Imports
    {
        static Imports()
        {
        }
        #region Accum
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glAccum", ExactSpelling = true)]
        public extern static void Accum(Enums.AccumOp op, GLfloat value);
        #endregion

        #region ActiveTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glActiveTexture", ExactSpelling = true)]
        public extern static void ActiveTexture(Enums.VERSION_1_3 texture);
        #endregion

        #region AlphaFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glAlphaFunc", ExactSpelling = true)]
        public extern static void AlphaFunc(Enums.AlphaFunction func, GLclampf @ref);
        #endregion

        #region AreTexturesResident
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glAreTexturesResident", ExactSpelling = true)]
        public extern static GLboolean AreTexturesResident(GLsizei n, System.IntPtr textures, System.IntPtr residences);
        #endregion

        #region ArrayElement
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glArrayElement", ExactSpelling = true)]
        public extern static void ArrayElement(GLint i);
        #endregion

        #region AttachShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glAttachShader", ExactSpelling = true)]
        public extern static void AttachShader(GLuint program, GLuint shader);
        #endregion

        #region Begin
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBegin", ExactSpelling = true)]
        public extern static void Begin(Enums.BeginMode mode);
        #endregion

        #region BeginQuery
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBeginQuery", ExactSpelling = true)]
        public extern static void BeginQuery(Enums.VERSION_1_5 target, GLuint id);
        #endregion

        #region BindAttribLocation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBindAttribLocation", ExactSpelling = true)]
        public extern static void BindAttribLocation(GLuint program, GLuint index, System.String name);
        #endregion

        #region BindBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBindBuffer", ExactSpelling = true)]
        public extern static void BindBuffer(Enums.VERSION_1_5 target, GLuint buffer);
        #endregion

        #region BindTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBindTexture", ExactSpelling = true)]
        public extern static void BindTexture(Enums.TextureTarget target, GLuint texture);
        #endregion

        #region Bitmap
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBitmap", ExactSpelling = true)]
        public extern static void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, System.IntPtr bitmap);
        #endregion

        #region BlendColor
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBlendColor", ExactSpelling = true)]
        public extern static void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        #endregion

        #region BlendEquation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquation", ExactSpelling = true)]
        public extern static void BlendEquation(Enums.VERSION_1_2 mode);
        #endregion

        #region BlendEquationSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquationSeparate", ExactSpelling = true)]
        public extern static void BlendEquationSeparate(Enums.BlendEquationModeEXT modeRGB, Enums.BlendEquationModeEXT modeAlpha);
        #endregion

        #region BlendFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBlendFunc", ExactSpelling = true)]
        public extern static void BlendFunc(Enums.BlendingFactorSrc sfactor, Enums.BlendingFactorDest dfactor);
        #endregion

        #region BlendFuncSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBlendFuncSeparate", ExactSpelling = true)]
        public extern static void BlendFuncSeparate(Enums.VERSION_1_4 sfactorRGB, Enums.VERSION_1_4 dfactorRGB, Enums.VERSION_1_4 sfactorAlpha, Enums.VERSION_1_4 dfactorAlpha);
        #endregion

        #region BufferData
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBufferData", ExactSpelling = true)]
        public extern static void BufferData(Enums.VERSION_1_5 target, GLsizeiptr size, System.IntPtr data, Enums.VERSION_1_5 usage);
        #endregion

        #region BufferSubData
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glBufferSubData", ExactSpelling = true)]
        public extern static void BufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, System.IntPtr data);
        #endregion

        #region CallList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCallList", ExactSpelling = true)]
        public extern static void CallList(GLuint list);
        #endregion

        #region CallLists
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCallLists", ExactSpelling = true)]
        public extern static void CallLists(GLsizei n, Enums.ListNameType type, System.IntPtr lists);
        #endregion

        #region Clear
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClear", ExactSpelling = true)]
        public extern static void Clear(Enums.ClearBufferMask mask);
        #endregion

        #region ClearAccum
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClearAccum", ExactSpelling = true)]
        public extern static void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        #endregion

        #region ClearColor
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClearColor", ExactSpelling = true)]
        public extern static void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        #endregion

        #region ClearDepth
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClearDepth", ExactSpelling = true)]
        public extern static void ClearDepth(GLclampd depth);
        #endregion

        #region ClearIndex
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClearIndex", ExactSpelling = true)]
        public extern static void ClearIndex(GLfloat c);
        #endregion

        #region ClearStencil
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClearStencil", ExactSpelling = true)]
        public extern static void ClearStencil(GLint s);
        #endregion

        #region ClientActiveTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClientActiveTexture", ExactSpelling = true)]
        public extern static void ClientActiveTexture(Enums.VERSION_1_3 texture);
        #endregion

        #region ClipPlane
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glClipPlane", ExactSpelling = true)]
        public extern static void ClipPlane(Enums.ClipPlaneName plane, System.IntPtr equation);
        #endregion

        #region Color3b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3b", ExactSpelling = true)]
        public extern static void Color3b(GLbyte red, GLbyte green, GLbyte blue);
        #endregion

        #region Color3bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3bv", ExactSpelling = true)]
        public extern static void Color3bv(System.IntPtr v);
        #endregion

        #region Color3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3d", ExactSpelling = true)]
        public extern static void Color3d(GLdouble red, GLdouble green, GLdouble blue);
        #endregion

        #region Color3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3dv", ExactSpelling = true)]
        public extern static void Color3dv(System.IntPtr v);
        #endregion

        #region Color3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3f", ExactSpelling = true)]
        public extern static void Color3f(GLfloat red, GLfloat green, GLfloat blue);
        #endregion

        #region Color3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3fv", ExactSpelling = true)]
        public extern static void Color3fv(System.IntPtr v);
        #endregion

        #region Color3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3i", ExactSpelling = true)]
        public extern static void Color3i(GLint red, GLint green, GLint blue);
        #endregion

        #region Color3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3iv", ExactSpelling = true)]
        public extern static void Color3iv(System.IntPtr v);
        #endregion

        #region Color3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3s", ExactSpelling = true)]
        public extern static void Color3s(GLshort red, GLshort green, GLshort blue);
        #endregion

        #region Color3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3sv", ExactSpelling = true)]
        public extern static void Color3sv(System.IntPtr v);
        #endregion

        #region Color3ub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3ub", ExactSpelling = true)]
        public extern static void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
        #endregion

        #region Color3ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3ubv", ExactSpelling = true)]
        public extern static void Color3ubv(System.IntPtr v);
        #endregion

        #region Color3ui
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3ui", ExactSpelling = true)]
        public extern static void Color3ui(GLuint red, GLuint green, GLuint blue);
        #endregion

        #region Color3uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3uiv", ExactSpelling = true)]
        public extern static void Color3uiv(System.IntPtr v);
        #endregion

        #region Color3us
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3us", ExactSpelling = true)]
        public extern static void Color3us(GLushort red, GLushort green, GLushort blue);
        #endregion

        #region Color3usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor3usv", ExactSpelling = true)]
        public extern static void Color3usv(System.IntPtr v);
        #endregion

        #region Color4b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4b", ExactSpelling = true)]
        public extern static void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
        #endregion

        #region Color4bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4bv", ExactSpelling = true)]
        public extern static void Color4bv(System.IntPtr v);
        #endregion

        #region Color4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4d", ExactSpelling = true)]
        public extern static void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
        #endregion

        #region Color4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4dv", ExactSpelling = true)]
        public extern static void Color4dv(System.IntPtr v);
        #endregion

        #region Color4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4f", ExactSpelling = true)]
        public extern static void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        #endregion

        #region Color4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4fv", ExactSpelling = true)]
        public extern static void Color4fv(System.IntPtr v);
        #endregion

        #region Color4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4i", ExactSpelling = true)]
        public extern static void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
        #endregion

        #region Color4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4iv", ExactSpelling = true)]
        public extern static void Color4iv(System.IntPtr v);
        #endregion

        #region Color4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4s", ExactSpelling = true)]
        public extern static void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
        #endregion

        #region Color4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4sv", ExactSpelling = true)]
        public extern static void Color4sv(System.IntPtr v);
        #endregion

        #region Color4ub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4ub", ExactSpelling = true)]
        public extern static void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
        #endregion

        #region Color4ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4ubv", ExactSpelling = true)]
        public extern static void Color4ubv(System.IntPtr v);
        #endregion

        #region Color4ui
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4ui", ExactSpelling = true)]
        public extern static void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        #endregion

        #region Color4uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4uiv", ExactSpelling = true)]
        public extern static void Color4uiv(System.IntPtr v);
        #endregion

        #region Color4us
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4us", ExactSpelling = true)]
        public extern static void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
        #endregion

        #region Color4usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColor4usv", ExactSpelling = true)]
        public extern static void Color4usv(System.IntPtr v);
        #endregion

        #region ColorMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColorMask", ExactSpelling = true)]
        public extern static void ColorMask(System.Boolean red, System.Boolean green, System.Boolean blue, System.Boolean alpha);
        #endregion

        #region ColorMaterial
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColorMaterial", ExactSpelling = true)]
        public extern static void ColorMaterial(Enums.MaterialFace face, Enums.ColorMaterialParameter mode);
        #endregion

        #region ColorPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColorPointer", ExactSpelling = true)]
        public extern static void ColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region ColorSubTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColorSubTable", ExactSpelling = true)]
        public extern static void ColorSubTable(Enums.VERSION_1_2 target, GLsizei start, GLsizei count, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr data);
        #endregion

        #region ColorTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColorTable", ExactSpelling = true)]
        public extern static void ColorTable(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table);
        #endregion

        #region ColorTableParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameterfv", ExactSpelling = true)]
        public extern static void ColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region ColorTableParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameteriv", ExactSpelling = true)]
        public extern static void ColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region CompileShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCompileShader", ExactSpelling = true)]
        public extern static void CompileShader(GLuint shader);
        #endregion

        #region CompressedTexImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage1D", ExactSpelling = true)]
        public extern static void CompressedTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage2D", ExactSpelling = true)]
        public extern static void CompressedTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage3D", ExactSpelling = true)]
        public extern static void CompressedTexImage3D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexSubImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage1D", ExactSpelling = true)]
        public extern static void CompressedTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexSubImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage2D", ExactSpelling = true)]
        public extern static void CompressedTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexSubImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage3D", ExactSpelling = true)]
        public extern static void CompressedTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region ConvolutionFilter1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter1D", ExactSpelling = true)]
        public extern static void ConvolutionFilter1D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image);
        #endregion

        #region ConvolutionFilter2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter2D", ExactSpelling = true)]
        public extern static void ConvolutionFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image);
        #endregion

        #region ConvolutionParameterf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterf", ExactSpelling = true)]
        public extern static void ConvolutionParameterf(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLfloat @params);
        #endregion

        #region ConvolutionParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterfv", ExactSpelling = true)]
        public extern static void ConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region ConvolutionParameteri
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteri", ExactSpelling = true)]
        public extern static void ConvolutionParameteri(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, GLint @params);
        #endregion

        #region ConvolutionParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteriv", ExactSpelling = true)]
        public extern static void ConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region CopyColorSubTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorSubTable", ExactSpelling = true)]
        public extern static void CopyColorSubTable(Enums.VERSION_1_2 target, GLsizei start, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyColorTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorTable", ExactSpelling = true)]
        public extern static void CopyColorTable(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyConvolutionFilter1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter1D", ExactSpelling = true)]
        public extern static void CopyConvolutionFilter1D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyConvolutionFilter2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter2D", ExactSpelling = true)]
        public extern static void CopyConvolutionFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region CopyPixels
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyPixels", ExactSpelling = true)]
        public extern static void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelCopyType type);
        #endregion

        #region CopyTexImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage1D", ExactSpelling = true)]
        public extern static void CopyTexImage1D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
        #endregion

        #region CopyTexImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage2D", ExactSpelling = true)]
        public extern static void CopyTexImage2D(Enums.TextureTarget target, GLint level, Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        #endregion

        #region CopyTexSubImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage1D", ExactSpelling = true)]
        public extern static void CopyTexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyTexSubImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage2D", ExactSpelling = true)]
        public extern static void CopyTexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region CopyTexSubImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage3D", ExactSpelling = true)]
        public extern static void CopyTexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region CreateProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCreateProgram", ExactSpelling = true)]
        public extern static GLuint CreateProgram();
        #endregion

        #region CreateShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCreateShader", ExactSpelling = true)]
        public extern static GLuint CreateShader(Enums.VERSION_2_0 type);
        #endregion

        #region CullFace
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glCullFace", ExactSpelling = true)]
        public extern static void CullFace(Enums.CullFaceMode mode);
        #endregion

        #region DeleteBuffers
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteBuffers", ExactSpelling = true)]
        public extern static void DeleteBuffers(GLsizei n, System.IntPtr buffers);
        #endregion

        #region DeleteLists
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteLists", ExactSpelling = true)]
        public extern static void DeleteLists(GLuint list, GLsizei range);
        #endregion

        #region DeleteProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteProgram", ExactSpelling = true)]
        public extern static void DeleteProgram(GLuint program);
        #endregion

        #region DeleteQueries
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteQueries", ExactSpelling = true)]
        public extern static void DeleteQueries(GLsizei n, System.IntPtr ids);
        #endregion

        #region DeleteShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteShader", ExactSpelling = true)]
        public extern static void DeleteShader(GLuint shader);
        #endregion

        #region DeleteTextures
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteTextures", ExactSpelling = true)]
        public extern static void DeleteTextures(GLsizei n, System.IntPtr textures);
        #endregion

        #region DepthFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDepthFunc", ExactSpelling = true)]
        public extern static void DepthFunc(Enums.DepthFunction func);
        #endregion

        #region DepthMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDepthMask", ExactSpelling = true)]
        public extern static void DepthMask(System.Boolean flag);
        #endregion

        #region DepthRange
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDepthRange", ExactSpelling = true)]
        public extern static void DepthRange(GLclampd near, GLclampd far);
        #endregion

        #region DetachShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDetachShader", ExactSpelling = true)]
        public extern static void DetachShader(GLuint program, GLuint shader);
        #endregion

        #region Disable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDisable", ExactSpelling = true)]
        public extern static void Disable(Enums.EnableCap cap);
        #endregion

        #region DisableClientState
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDisableClientState", ExactSpelling = true)]
        public extern static void DisableClientState(Enums.EnableCap array);
        #endregion

        #region DisableVertexAttribArray
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDisableVertexAttribArray", ExactSpelling = true)]
        public extern static void DisableVertexAttribArray(GLuint index);
        #endregion

        #region DrawArrays
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDrawArrays", ExactSpelling = true)]
        public extern static void DrawArrays(Enums.BeginMode mode, GLint first, GLsizei count);
        #endregion

        #region DrawBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffer", ExactSpelling = true)]
        public extern static void DrawBuffer(Enums.DrawBufferMode mode);
        #endregion

        #region DrawBuffers
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffers", ExactSpelling = true)]
        public extern static void DrawBuffers(GLsizei n, System.IntPtr bufs);
        #endregion

        #region DrawElements
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDrawElements", ExactSpelling = true)]
        public extern static void DrawElements(Enums.BeginMode mode, GLsizei count, GLenum type, System.IntPtr indices);
        #endregion

        #region DrawPixels
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDrawPixels", ExactSpelling = true)]
        public extern static void DrawPixels(GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region DrawRangeElements
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glDrawRangeElements", ExactSpelling = true)]
        public extern static void DrawRangeElements(Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, Enums.VERSION_1_2 type, System.IntPtr indices);
        #endregion

        #region EdgeFlag
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlag", ExactSpelling = true)]
        public extern static void EdgeFlag(System.Boolean flag);
        #endregion

        #region EdgeFlagPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagPointer", ExactSpelling = true)]
        public extern static void EdgeFlagPointer(GLsizei stride, System.IntPtr pointer);
        #endregion

        #region EdgeFlagv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagv", ExactSpelling = true)]
        public extern static void EdgeFlagv(System.IntPtr flag);
        #endregion

        #region Enable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEnable", ExactSpelling = true)]
        public extern static void Enable(Enums.EnableCap cap);
        #endregion

        #region EnableClientState
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEnableClientState", ExactSpelling = true)]
        public extern static void EnableClientState(Enums.EnableCap array);
        #endregion

        #region EnableVertexAttribArray
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEnableVertexAttribArray", ExactSpelling = true)]
        public extern static void EnableVertexAttribArray(GLuint index);
        #endregion

        #region End
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEnd", ExactSpelling = true)]
        public extern static void End();
        #endregion

        #region EndList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEndList", ExactSpelling = true)]
        public extern static void EndList();
        #endregion

        #region EndQuery
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEndQuery", ExactSpelling = true)]
        public extern static void EndQuery(Enums.VERSION_1_5 target);
        #endregion

        #region EvalCoord1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1d", ExactSpelling = true)]
        public extern static void EvalCoord1d(GLdouble u);
        #endregion

        #region EvalCoord1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1dv", ExactSpelling = true)]
        public extern static void EvalCoord1dv(System.IntPtr u);
        #endregion

        #region EvalCoord1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1f", ExactSpelling = true)]
        public extern static void EvalCoord1f(GLfloat u);
        #endregion

        #region EvalCoord1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1fv", ExactSpelling = true)]
        public extern static void EvalCoord1fv(System.IntPtr u);
        #endregion

        #region EvalCoord2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2d", ExactSpelling = true)]
        public extern static void EvalCoord2d(GLdouble u, GLdouble v);
        #endregion

        #region EvalCoord2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2dv", ExactSpelling = true)]
        public extern static void EvalCoord2dv(System.IntPtr u);
        #endregion

        #region EvalCoord2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2f", ExactSpelling = true)]
        public extern static void EvalCoord2f(GLfloat u, GLfloat v);
        #endregion

        #region EvalCoord2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2fv", ExactSpelling = true)]
        public extern static void EvalCoord2fv(System.IntPtr u);
        #endregion

        #region EvalMesh1
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh1", ExactSpelling = true)]
        public extern static void EvalMesh1(Enums.MeshMode1 mode, GLint i1, GLint i2);
        #endregion

        #region EvalMesh2
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh2", ExactSpelling = true)]
        public extern static void EvalMesh2(Enums.MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2);
        #endregion

        #region EvalPoint1
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint1", ExactSpelling = true)]
        public extern static void EvalPoint1(GLint i);
        #endregion

        #region EvalPoint2
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint2", ExactSpelling = true)]
        public extern static void EvalPoint2(GLint i, GLint j);
        #endregion

        #region FeedbackBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFeedbackBuffer", ExactSpelling = true)]
        public extern static void FeedbackBuffer(GLsizei size, Enums.FeedbackType type, System.IntPtr buffer);
        #endregion

        #region Finish
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFinish", ExactSpelling = true)]
        public extern static void Finish();
        #endregion

        #region Flush
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFlush", ExactSpelling = true)]
        public extern static void Flush();
        #endregion

        #region FogCoordd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordd", ExactSpelling = true)]
        public extern static void FogCoordd(GLdouble coord);
        #endregion

        #region FogCoorddv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoorddv", ExactSpelling = true)]
        public extern static void FogCoorddv(System.IntPtr coord);
        #endregion

        #region FogCoordf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordf", ExactSpelling = true)]
        public extern static void FogCoordf(GLfloat coord);
        #endregion

        #region FogCoordfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordfv", ExactSpelling = true)]
        public extern static void FogCoordfv(System.IntPtr coord);
        #endregion

        #region FogCoordPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordPointer", ExactSpelling = true)]
        public extern static void FogCoordPointer(Enums.VERSION_1_4 type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Fogf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogf", ExactSpelling = true)]
        public extern static void Fogf(Enums.FogParameter pname, GLfloat param);
        #endregion

        #region Fogfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogfv", ExactSpelling = true)]
        public extern static void Fogfv(Enums.FogParameter pname, System.IntPtr @params);
        #endregion

        #region Fogi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogi", ExactSpelling = true)]
        public extern static void Fogi(Enums.FogParameter pname, GLint param);
        #endregion

        #region Fogiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFogiv", ExactSpelling = true)]
        public extern static void Fogiv(Enums.FogParameter pname, System.IntPtr @params);
        #endregion

        #region FrontFace
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFrontFace", ExactSpelling = true)]
        public extern static void FrontFace(Enums.FrontFaceDirection mode);
        #endregion

        #region Frustum
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glFrustum", ExactSpelling = true)]
        public extern static void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        #endregion

        #region GenBuffers
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGenBuffers", ExactSpelling = true)]
        public extern static void GenBuffers(GLsizei n, System.IntPtr buffers);
        #endregion

        #region GenLists
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGenLists", ExactSpelling = true)]
        public extern static GLuint GenLists(GLsizei range);
        #endregion

        #region GenQueries
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGenQueries", ExactSpelling = true)]
        public extern static void GenQueries(GLsizei n, System.IntPtr ids);
        #endregion

        #region GenTextures
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGenTextures", ExactSpelling = true)]
        public extern static void GenTextures(GLsizei n, System.IntPtr textures);
        #endregion

        #region GetActiveAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveAttrib", ExactSpelling = true)]
        public extern static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, System.IntPtr length, System.IntPtr size, System.IntPtr type, System.Text.StringBuilder name);
        #endregion

        #region GetActiveUniform
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveUniform", ExactSpelling = true)]
        public extern static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, System.IntPtr length, System.IntPtr size, System.IntPtr type, System.Text.StringBuilder name);
        #endregion

        #region GetAttachedShaders
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetAttachedShaders", ExactSpelling = true)]
        public extern static void GetAttachedShaders(GLuint program, GLsizei maxCount, System.IntPtr count, System.IntPtr obj);
        #endregion

        #region GetAttribLocation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetAttribLocation", ExactSpelling = true)]
        public extern static GLint GetAttribLocation(GLuint program, System.String name);
        #endregion

        #region GetBooleanv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetBooleanv", ExactSpelling = true)]
        public extern static void GetBooleanv(Enums.GetPName pname, System.IntPtr @params);
        #endregion

        #region GetBufferParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferParameteriv", ExactSpelling = true)]
        public extern static void GetBufferParameteriv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, System.IntPtr @params);
        #endregion

        #region GetBufferPointerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferPointerv", ExactSpelling = true)]
        public extern static void GetBufferPointerv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, System.IntPtr @params);
        #endregion

        #region GetBufferSubData
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferSubData", ExactSpelling = true)]
        public extern static void GetBufferSubData(Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, System.IntPtr data);
        #endregion

        #region GetClipPlane
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetClipPlane", ExactSpelling = true)]
        public extern static void GetClipPlane(Enums.ClipPlaneName plane, System.IntPtr equation);
        #endregion

        #region GetColorTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTable", ExactSpelling = true)]
        public extern static void GetColorTable(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr table);
        #endregion

        #region GetColorTableParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameterfv", ExactSpelling = true)]
        public extern static void GetColorTableParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetColorTableParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameteriv", ExactSpelling = true)]
        public extern static void GetColorTableParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetCompressedTexImage
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetCompressedTexImage", ExactSpelling = true)]
        public extern static void GetCompressedTexImage(Enums.TextureTarget target, GLint level, System.IntPtr img);
        #endregion

        #region GetConvolutionFilter
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionFilter", ExactSpelling = true)]
        public extern static void GetConvolutionFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr image);
        #endregion

        #region GetConvolutionParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameterfv", ExactSpelling = true)]
        public extern static void GetConvolutionParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetConvolutionParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameteriv", ExactSpelling = true)]
        public extern static void GetConvolutionParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetDoublev
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetDoublev", ExactSpelling = true)]
        public extern static void GetDoublev(Enums.GetPName pname, System.IntPtr @params);
        #endregion

        #region GetError
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetError", ExactSpelling = true)]
        public extern static GLenum GetError();
        #endregion

        #region GetFloatv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetFloatv", ExactSpelling = true)]
        public extern static void GetFloatv(Enums.GetPName pname, System.IntPtr @params);
        #endregion

        #region GetHistogram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogram", ExactSpelling = true)]
        public extern static void GetHistogram(Enums.VERSION_1_2 target, System.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr values);
        #endregion

        #region GetHistogramParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameterfv", ExactSpelling = true)]
        public extern static void GetHistogramParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetHistogramParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameteriv", ExactSpelling = true)]
        public extern static void GetHistogramParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetIntegerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetIntegerv", ExactSpelling = true)]
        public extern static void GetIntegerv(Enums.GetPName pname, System.IntPtr @params);
        #endregion

        #region GetLightfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetLightfv", ExactSpelling = true)]
        public extern static void GetLightfv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params);
        #endregion

        #region GetLightiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetLightiv", ExactSpelling = true)]
        public extern static void GetLightiv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params);
        #endregion

        #region GetMapdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMapdv", ExactSpelling = true)]
        public extern static void GetMapdv(Enums.MapTarget target, Enums.GetMapQuery query, System.IntPtr v);
        #endregion

        #region GetMapfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMapfv", ExactSpelling = true)]
        public extern static void GetMapfv(Enums.MapTarget target, Enums.GetMapQuery query, System.IntPtr v);
        #endregion

        #region GetMapiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMapiv", ExactSpelling = true)]
        public extern static void GetMapiv(Enums.MapTarget target, Enums.GetMapQuery query, System.IntPtr v);
        #endregion

        #region GetMaterialfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialfv", ExactSpelling = true)]
        public extern static void GetMaterialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        #endregion

        #region GetMaterialiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialiv", ExactSpelling = true)]
        public extern static void GetMaterialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        #endregion

        #region GetMinmax
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmax", ExactSpelling = true)]
        public extern static void GetMinmax(Enums.VERSION_1_2 target, System.Boolean reset, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr values);
        #endregion

        #region GetMinmaxParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameterfv", ExactSpelling = true)]
        public extern static void GetMinmaxParameterfv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetMinmaxParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameteriv", ExactSpelling = true)]
        public extern static void GetMinmaxParameteriv(Enums.VERSION_1_2 target, Enums.VERSION_1_2 pname, System.IntPtr @params);
        #endregion

        #region GetPixelMapfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapfv", ExactSpelling = true)]
        public extern static void GetPixelMapfv(Enums.PixelMap map, System.IntPtr values);
        #endregion

        #region GetPixelMapuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapuiv", ExactSpelling = true)]
        public extern static void GetPixelMapuiv(Enums.PixelMap map, System.IntPtr values);
        #endregion

        #region GetPixelMapusv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapusv", ExactSpelling = true)]
        public extern static void GetPixelMapusv(Enums.PixelMap map, System.IntPtr values);
        #endregion

        #region GetPointerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetPointerv", ExactSpelling = true)]
        public extern static void GetPointerv(Enums.GetPointervPName pname, System.IntPtr @params);
        #endregion

        #region GetPolygonStipple
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetPolygonStipple", ExactSpelling = true)]
        public extern static void GetPolygonStipple(System.IntPtr mask);
        #endregion

        #region GetProgramInfoLog
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramInfoLog", ExactSpelling = true)]
        public extern static void GetProgramInfoLog(GLuint program, GLsizei bufSize, System.IntPtr length, System.Text.StringBuilder infoLog);
        #endregion

        #region GetProgramiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramiv", ExactSpelling = true)]
        public extern static void GetProgramiv(GLuint program, Enums.VERSION_2_0 pname, System.IntPtr @params);
        #endregion

        #region GetQueryiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryiv", ExactSpelling = true)]
        public extern static void GetQueryiv(Enums.VERSION_1_5 target, Enums.VERSION_1_5 pname, System.IntPtr @params);
        #endregion

        #region GetQueryObjectiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectiv", ExactSpelling = true)]
        public extern static void GetQueryObjectiv(GLuint id, Enums.VERSION_1_5 pname, System.IntPtr @params);
        #endregion

        #region GetQueryObjectuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectuiv", ExactSpelling = true)]
        public extern static void GetQueryObjectuiv(GLuint id, Enums.VERSION_1_5 pname, System.IntPtr @params);
        #endregion

        #region GetSeparableFilter
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetSeparableFilter", ExactSpelling = true)]
        public extern static void GetSeparableFilter(Enums.VERSION_1_2 target, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, System.IntPtr column, System.IntPtr span);
        #endregion

        #region GetShaderInfoLog
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderInfoLog", ExactSpelling = true)]
        public extern static void GetShaderInfoLog(GLuint shader, GLsizei bufSize, System.IntPtr length, System.Text.StringBuilder infoLog);
        #endregion

        #region GetShaderiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderiv", ExactSpelling = true)]
        public extern static void GetShaderiv(GLuint shader, Enums.VERSION_2_0 pname, System.IntPtr @params);
        #endregion

        #region GetShaderSource
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderSource", ExactSpelling = true)]
        public extern static void GetShaderSource(GLuint shader, GLsizei bufSize, System.IntPtr length, System.Text.StringBuilder source);
        #endregion

        #region GetString
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetString", ExactSpelling = true)]
        public extern static IntPtr GetString(Enums.StringName name);
        #endregion

        #region GetTexEnvfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnvfv", ExactSpelling = true)]
        public extern static void GetTexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexEnviv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnviv", ExactSpelling = true)]
        public extern static void GetTexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexGendv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGendv", ExactSpelling = true)]
        public extern static void GetTexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexGenfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGenfv", ExactSpelling = true)]
        public extern static void GetTexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexGeniv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGeniv", ExactSpelling = true)]
        public extern static void GetTexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexImage
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexImage", ExactSpelling = true)]
        public extern static void GetTexImage(Enums.TextureTarget target, GLint level, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region GetTexLevelParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameterfv", ExactSpelling = true)]
        public extern static void GetTexLevelParameterfv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexLevelParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameteriv", ExactSpelling = true)]
        public extern static void GetTexLevelParameteriv(Enums.TextureTarget target, GLint level, Enums.GetTextureParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameterfv", ExactSpelling = true)]
        public extern static void GetTexParameterfv(Enums.TextureTarget target, Enums.GetTextureParameter pname, System.IntPtr @params);
        #endregion

        #region GetTexParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameteriv", ExactSpelling = true)]
        public extern static void GetTexParameteriv(Enums.TextureTarget target, Enums.GetTextureParameter pname, System.IntPtr @params);
        #endregion

        #region GetUniformfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformfv", ExactSpelling = true)]
        public extern static void GetUniformfv(GLuint program, GLint location, System.IntPtr @params);
        #endregion

        #region GetUniformiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformiv", ExactSpelling = true)]
        public extern static void GetUniformiv(GLuint program, GLint location, System.IntPtr @params);
        #endregion

        #region GetUniformLocation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformLocation", ExactSpelling = true)]
        public extern static GLint GetUniformLocation(GLuint program, System.String name);
        #endregion

        #region GetVertexAttribdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribdv", ExactSpelling = true)]
        public extern static void GetVertexAttribdv(GLuint index, Enums.VERSION_2_0 pname, System.IntPtr @params);
        #endregion

        #region GetVertexAttribfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribfv", ExactSpelling = true)]
        public extern static void GetVertexAttribfv(GLuint index, Enums.VERSION_2_0 pname, System.IntPtr @params);
        #endregion

        #region GetVertexAttribiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribiv", ExactSpelling = true)]
        public extern static void GetVertexAttribiv(GLuint index, Enums.VERSION_2_0 pname, System.IntPtr @params);
        #endregion

        #region GetVertexAttribPointerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribPointerv", ExactSpelling = true)]
        public extern static void GetVertexAttribPointerv(GLuint index, Enums.VERSION_2_0 pname, System.IntPtr pointer);
        #endregion

        #region Hint
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glHint", ExactSpelling = true)]
        public extern static void Hint(Enums.HintTarget target, Enums.HintMode mode);
        #endregion

        #region Histogram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glHistogram", ExactSpelling = true)]
        public extern static void Histogram(Enums.VERSION_1_2 target, GLsizei width, Enums.PixelInternalFormat internalformat, System.Boolean sink);
        #endregion

        #region Indexd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexd", ExactSpelling = true)]
        public extern static void Indexd(GLdouble c);
        #endregion

        #region Indexdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexdv", ExactSpelling = true)]
        public extern static void Indexdv(System.IntPtr c);
        #endregion

        #region Indexf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexf", ExactSpelling = true)]
        public extern static void Indexf(GLfloat c);
        #endregion

        #region Indexfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexfv", ExactSpelling = true)]
        public extern static void Indexfv(System.IntPtr c);
        #endregion

        #region Indexi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexi", ExactSpelling = true)]
        public extern static void Indexi(GLint c);
        #endregion

        #region Indexiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexiv", ExactSpelling = true)]
        public extern static void Indexiv(System.IntPtr c);
        #endregion

        #region IndexMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexMask", ExactSpelling = true)]
        public extern static void IndexMask(GLuint mask);
        #endregion

        #region IndexPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexPointer", ExactSpelling = true)]
        public extern static void IndexPointer(Enums.IndexPointerType type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Indexs
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexs", ExactSpelling = true)]
        public extern static void Indexs(GLshort c);
        #endregion

        #region Indexsv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexsv", ExactSpelling = true)]
        public extern static void Indexsv(System.IntPtr c);
        #endregion

        #region Indexub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexub", ExactSpelling = true)]
        public extern static void Indexub(GLubyte c);
        #endregion

        #region Indexubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIndexubv", ExactSpelling = true)]
        public extern static void Indexubv(System.IntPtr c);
        #endregion

        #region InitNames
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glInitNames", ExactSpelling = true)]
        public extern static void InitNames();
        #endregion

        #region InterleavedArrays
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glInterleavedArrays", ExactSpelling = true)]
        public extern static void InterleavedArrays(Enums.InterleavedArrayFormat format, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region IsBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIsBuffer", ExactSpelling = true)]
        public extern static GLboolean IsBuffer(GLuint buffer);
        #endregion

        #region IsEnabled
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIsEnabled", ExactSpelling = true)]
        public extern static GLboolean IsEnabled(Enums.EnableCap cap);
        #endregion

        #region IsList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIsList", ExactSpelling = true)]
        public extern static GLboolean IsList(GLuint list);
        #endregion

        #region IsProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIsProgram", ExactSpelling = true)]
        public extern static GLboolean IsProgram(GLuint program);
        #endregion

        #region IsQuery
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIsQuery", ExactSpelling = true)]
        public extern static GLboolean IsQuery(GLuint id);
        #endregion

        #region IsShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIsShader", ExactSpelling = true)]
        public extern static GLboolean IsShader(GLuint shader);
        #endregion

        #region IsTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glIsTexture", ExactSpelling = true)]
        public extern static GLboolean IsTexture(GLuint texture);
        #endregion

        #region Lightf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLightf", ExactSpelling = true)]
        public extern static void Lightf(Enums.LightName light, Enums.LightParameter pname, GLfloat param);
        #endregion

        #region Lightfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLightfv", ExactSpelling = true)]
        public extern static void Lightfv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params);
        #endregion

        #region Lighti
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLighti", ExactSpelling = true)]
        public extern static void Lighti(Enums.LightName light, Enums.LightParameter pname, GLint param);
        #endregion

        #region Lightiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLightiv", ExactSpelling = true)]
        public extern static void Lightiv(Enums.LightName light, Enums.LightParameter pname, System.IntPtr @params);
        #endregion

        #region LightModelf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLightModelf", ExactSpelling = true)]
        public extern static void LightModelf(Enums.LightModelParameter pname, GLfloat param);
        #endregion

        #region LightModelfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLightModelfv", ExactSpelling = true)]
        public extern static void LightModelfv(Enums.LightModelParameter pname, System.IntPtr @params);
        #endregion

        #region LightModeli
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLightModeli", ExactSpelling = true)]
        public extern static void LightModeli(Enums.LightModelParameter pname, GLint param);
        #endregion

        #region LightModeliv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLightModeliv", ExactSpelling = true)]
        public extern static void LightModeliv(Enums.LightModelParameter pname, System.IntPtr @params);
        #endregion

        #region LineStipple
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLineStipple", ExactSpelling = true)]
        public extern static void LineStipple(GLint factor, GLushort pattern);
        #endregion

        #region LineWidth
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLineWidth", ExactSpelling = true)]
        public extern static void LineWidth(GLfloat width);
        #endregion

        #region LinkProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLinkProgram", ExactSpelling = true)]
        public extern static void LinkProgram(GLuint program);
        #endregion

        #region ListBase
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glListBase", ExactSpelling = true)]
        public extern static void ListBase(GLuint @base);
        #endregion

        #region LoadIdentity
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLoadIdentity", ExactSpelling = true)]
        public extern static void LoadIdentity();
        #endregion

        #region LoadMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixd", ExactSpelling = true)]
        public extern static void LoadMatrixd(System.IntPtr m);
        #endregion

        #region LoadMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixf", ExactSpelling = true)]
        public extern static void LoadMatrixf(System.IntPtr m);
        #endregion

        #region LoadName
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLoadName", ExactSpelling = true)]
        public extern static void LoadName(GLuint name);
        #endregion

        #region LoadTransposeMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixd", ExactSpelling = true)]
        public extern static void LoadTransposeMatrixd(System.IntPtr m);
        #endregion

        #region LoadTransposeMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixf", ExactSpelling = true)]
        public extern static void LoadTransposeMatrixf(System.IntPtr m);
        #endregion

        #region LogicOp
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glLogicOp", ExactSpelling = true)]
        public extern static void LogicOp(Enums.LogicOp opcode);
        #endregion

        #region Map1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMap1d", ExactSpelling = true)]
        public extern static void Map1d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, System.IntPtr points);
        #endregion

        #region Map1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMap1f", ExactSpelling = true)]
        public extern static void Map1f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, System.IntPtr points);
        #endregion

        #region Map2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMap2d", ExactSpelling = true)]
        public extern static void Map2d(Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, System.IntPtr points);
        #endregion

        #region Map2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMap2f", ExactSpelling = true)]
        public extern static void Map2f(Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, System.IntPtr points);
        #endregion

        #region MapBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMapBuffer", ExactSpelling = true)]
        public extern static IntPtr MapBuffer(Enums.VERSION_1_5 target, Enums.VERSION_1_5 access);
        #endregion

        #region MapGrid1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1d", ExactSpelling = true)]
        public extern static void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
        #endregion

        #region MapGrid1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1f", ExactSpelling = true)]
        public extern static void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
        #endregion

        #region MapGrid2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2d", ExactSpelling = true)]
        public extern static void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
        #endregion

        #region MapGrid2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2f", ExactSpelling = true)]
        public extern static void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
        #endregion

        #region Materialf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMaterialf", ExactSpelling = true)]
        public extern static void Materialf(Enums.MaterialFace face, Enums.MaterialParameter pname, GLfloat param);
        #endregion

        #region Materialfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMaterialfv", ExactSpelling = true)]
        public extern static void Materialfv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        #endregion

        #region Materiali
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMateriali", ExactSpelling = true)]
        public extern static void Materiali(Enums.MaterialFace face, Enums.MaterialParameter pname, GLint param);
        #endregion

        #region Materialiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMaterialiv", ExactSpelling = true)]
        public extern static void Materialiv(Enums.MaterialFace face, Enums.MaterialParameter pname, System.IntPtr @params);
        #endregion

        #region MatrixMode
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMatrixMode", ExactSpelling = true)]
        public extern static void MatrixMode(Enums.MatrixMode mode);
        #endregion

        #region Minmax
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMinmax", ExactSpelling = true)]
        public extern static void Minmax(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, System.Boolean sink);
        #endregion

        #region MultiDrawArrays
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawArrays", ExactSpelling = true)]
        public extern static void MultiDrawArrays(Enums.BeginMode mode, System.IntPtr first, System.IntPtr count, GLsizei primcount);
        #endregion

        #region MultiDrawElements
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawElements", ExactSpelling = true)]
        public extern static void MultiDrawElements(Enums.BeginMode mode, System.IntPtr count, Enums.VERSION_1_4 type, System.IntPtr indices, GLsizei primcount);
        #endregion

        #region MultiTexCoord1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1d", ExactSpelling = true)]
        public extern static void MultiTexCoord1d(Enums.VERSION_1_3 target, GLdouble s);
        #endregion

        #region MultiTexCoord1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1dv", ExactSpelling = true)]
        public extern static void MultiTexCoord1dv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1f", ExactSpelling = true)]
        public extern static void MultiTexCoord1f(Enums.VERSION_1_3 target, GLfloat s);
        #endregion

        #region MultiTexCoord1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1fv", ExactSpelling = true)]
        public extern static void MultiTexCoord1fv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord1i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1i", ExactSpelling = true)]
        public extern static void MultiTexCoord1i(Enums.VERSION_1_3 target, GLint s);
        #endregion

        #region MultiTexCoord1iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1iv", ExactSpelling = true)]
        public extern static void MultiTexCoord1iv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord1s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1s", ExactSpelling = true)]
        public extern static void MultiTexCoord1s(Enums.VERSION_1_3 target, GLshort s);
        #endregion

        #region MultiTexCoord1sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1sv", ExactSpelling = true)]
        public extern static void MultiTexCoord1sv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2d", ExactSpelling = true)]
        public extern static void MultiTexCoord2d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t);
        #endregion

        #region MultiTexCoord2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2dv", ExactSpelling = true)]
        public extern static void MultiTexCoord2dv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2f", ExactSpelling = true)]
        public extern static void MultiTexCoord2f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t);
        #endregion

        #region MultiTexCoord2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2fv", ExactSpelling = true)]
        public extern static void MultiTexCoord2fv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2i", ExactSpelling = true)]
        public extern static void MultiTexCoord2i(Enums.VERSION_1_3 target, GLint s, GLint t);
        #endregion

        #region MultiTexCoord2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2iv", ExactSpelling = true)]
        public extern static void MultiTexCoord2iv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2s", ExactSpelling = true)]
        public extern static void MultiTexCoord2s(Enums.VERSION_1_3 target, GLshort s, GLshort t);
        #endregion

        #region MultiTexCoord2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2sv", ExactSpelling = true)]
        public extern static void MultiTexCoord2sv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3d", ExactSpelling = true)]
        public extern static void MultiTexCoord3d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r);
        #endregion

        #region MultiTexCoord3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3dv", ExactSpelling = true)]
        public extern static void MultiTexCoord3dv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3f", ExactSpelling = true)]
        public extern static void MultiTexCoord3f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r);
        #endregion

        #region MultiTexCoord3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3fv", ExactSpelling = true)]
        public extern static void MultiTexCoord3fv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3i", ExactSpelling = true)]
        public extern static void MultiTexCoord3i(Enums.VERSION_1_3 target, GLint s, GLint t, GLint r);
        #endregion

        #region MultiTexCoord3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3iv", ExactSpelling = true)]
        public extern static void MultiTexCoord3iv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3s", ExactSpelling = true)]
        public extern static void MultiTexCoord3s(Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r);
        #endregion

        #region MultiTexCoord3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3sv", ExactSpelling = true)]
        public extern static void MultiTexCoord3sv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4d", ExactSpelling = true)]
        public extern static void MultiTexCoord4d(Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        #endregion

        #region MultiTexCoord4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4dv", ExactSpelling = true)]
        public extern static void MultiTexCoord4dv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4f", ExactSpelling = true)]
        public extern static void MultiTexCoord4f(Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        #endregion

        #region MultiTexCoord4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4fv", ExactSpelling = true)]
        public extern static void MultiTexCoord4fv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4i", ExactSpelling = true)]
        public extern static void MultiTexCoord4i(Enums.VERSION_1_3 target, GLint s, GLint t, GLint r, GLint q);
        #endregion

        #region MultiTexCoord4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4iv", ExactSpelling = true)]
        public extern static void MultiTexCoord4iv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4s", ExactSpelling = true)]
        public extern static void MultiTexCoord4s(Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r, GLshort q);
        #endregion

        #region MultiTexCoord4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4sv", ExactSpelling = true)]
        public extern static void MultiTexCoord4sv(Enums.VERSION_1_3 target, System.IntPtr v);
        #endregion

        #region MultMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixd", ExactSpelling = true)]
        public extern static void MultMatrixd(System.IntPtr m);
        #endregion

        #region MultMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixf", ExactSpelling = true)]
        public extern static void MultMatrixf(System.IntPtr m);
        #endregion

        #region MultTransposeMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixd", ExactSpelling = true)]
        public extern static void MultTransposeMatrixd(System.IntPtr m);
        #endregion

        #region MultTransposeMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixf", ExactSpelling = true)]
        public extern static void MultTransposeMatrixf(System.IntPtr m);
        #endregion

        #region NewList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNewList", ExactSpelling = true)]
        public extern static void NewList(GLuint list, Enums.ListMode mode);
        #endregion

        #region Normal3b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3b", ExactSpelling = true)]
        public extern static void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
        #endregion

        #region Normal3bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3bv", ExactSpelling = true)]
        public extern static void Normal3bv(System.IntPtr v);
        #endregion

        #region Normal3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3d", ExactSpelling = true)]
        public extern static void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
        #endregion

        #region Normal3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3dv", ExactSpelling = true)]
        public extern static void Normal3dv(System.IntPtr v);
        #endregion

        #region Normal3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3f", ExactSpelling = true)]
        public extern static void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
        #endregion

        #region Normal3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3fv", ExactSpelling = true)]
        public extern static void Normal3fv(System.IntPtr v);
        #endregion

        #region Normal3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3i", ExactSpelling = true)]
        public extern static void Normal3i(GLint nx, GLint ny, GLint nz);
        #endregion

        #region Normal3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3iv", ExactSpelling = true)]
        public extern static void Normal3iv(System.IntPtr v);
        #endregion

        #region Normal3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3s", ExactSpelling = true)]
        public extern static void Normal3s(GLshort nx, GLshort ny, GLshort nz);
        #endregion

        #region Normal3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3sv", ExactSpelling = true)]
        public extern static void Normal3sv(System.IntPtr v);
        #endregion

        #region NormalPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glNormalPointer", ExactSpelling = true)]
        public extern static void NormalPointer(Enums.NormalPointerType type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Ortho
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glOrtho", ExactSpelling = true)]
        public extern static void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        #endregion

        #region PassThrough
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPassThrough", ExactSpelling = true)]
        public extern static void PassThrough(GLfloat token);
        #endregion

        #region PixelMapfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapfv", ExactSpelling = true)]
        public extern static void PixelMapfv(Enums.PixelMap map, GLint mapsize, System.IntPtr values);
        #endregion

        #region PixelMapuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapuiv", ExactSpelling = true)]
        public extern static void PixelMapuiv(Enums.PixelMap map, GLint mapsize, System.IntPtr values);
        #endregion

        #region PixelMapusv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapusv", ExactSpelling = true)]
        public extern static void PixelMapusv(Enums.PixelMap map, GLint mapsize, System.IntPtr values);
        #endregion

        #region PixelStoref
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelStoref", ExactSpelling = true)]
        public extern static void PixelStoref(Enums.PixelStoreParameter pname, GLfloat param);
        #endregion

        #region PixelStorei
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelStorei", ExactSpelling = true)]
        public extern static void PixelStorei(Enums.PixelStoreParameter pname, GLint param);
        #endregion

        #region PixelTransferf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferf", ExactSpelling = true)]
        public extern static void PixelTransferf(Enums.PixelTransferParameter pname, GLfloat param);
        #endregion

        #region PixelTransferi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferi", ExactSpelling = true)]
        public extern static void PixelTransferi(Enums.PixelTransferParameter pname, GLint param);
        #endregion

        #region PixelZoom
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPixelZoom", ExactSpelling = true)]
        public extern static void PixelZoom(GLfloat xfactor, GLfloat yfactor);
        #endregion

        #region PointParameterf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterf", ExactSpelling = true)]
        public extern static void PointParameterf(Enums.VERSION_1_4 pname, GLfloat param);
        #endregion

        #region PointParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterfv", ExactSpelling = true)]
        public extern static void PointParameterfv(Enums.VERSION_1_4 pname, System.IntPtr @params);
        #endregion

        #region PointParameteri
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteri", ExactSpelling = true)]
        public extern static void PointParameteri(Enums.VERSION_1_4 pname, GLint param);
        #endregion

        #region PointParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteriv", ExactSpelling = true)]
        public extern static void PointParameteriv(Enums.VERSION_1_4 pname, System.IntPtr @params);
        #endregion

        #region PointSize
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPointSize", ExactSpelling = true)]
        public extern static void PointSize(GLfloat size);
        #endregion

        #region PolygonMode
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPolygonMode", ExactSpelling = true)]
        public extern static void PolygonMode(Enums.MaterialFace face, Enums.PolygonMode mode);
        #endregion

        #region PolygonOffset
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPolygonOffset", ExactSpelling = true)]
        public extern static void PolygonOffset(GLfloat factor, GLfloat units);
        #endregion

        #region PolygonStipple
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPolygonStipple", ExactSpelling = true)]
        public extern static void PolygonStipple(System.IntPtr mask);
        #endregion

        #region PopAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPopAttrib", ExactSpelling = true)]
        public extern static void PopAttrib();
        #endregion

        #region PopClientAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPopClientAttrib", ExactSpelling = true)]
        public extern static void PopClientAttrib();
        #endregion

        #region PopMatrix
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPopMatrix", ExactSpelling = true)]
        public extern static void PopMatrix();
        #endregion

        #region PopName
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPopName", ExactSpelling = true)]
        public extern static void PopName();
        #endregion

        #region PrioritizeTextures
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPrioritizeTextures", ExactSpelling = true)]
        public extern static void PrioritizeTextures(GLsizei n, System.IntPtr textures, System.IntPtr priorities);
        #endregion

        #region PushAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPushAttrib", ExactSpelling = true)]
        public extern static void PushAttrib(Enums.AttribMask mask);
        #endregion

        #region PushClientAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPushClientAttrib", ExactSpelling = true)]
        public extern static void PushClientAttrib(Enums.ClientAttribMask mask);
        #endregion

        #region PushMatrix
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPushMatrix", ExactSpelling = true)]
        public extern static void PushMatrix();
        #endregion

        #region PushName
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glPushName", ExactSpelling = true)]
        public extern static void PushName(GLuint name);
        #endregion

        #region RasterPos2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2d", ExactSpelling = true)]
        public extern static void RasterPos2d(GLdouble x, GLdouble y);
        #endregion

        #region RasterPos2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2dv", ExactSpelling = true)]
        public extern static void RasterPos2dv(System.IntPtr v);
        #endregion

        #region RasterPos2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2f", ExactSpelling = true)]
        public extern static void RasterPos2f(GLfloat x, GLfloat y);
        #endregion

        #region RasterPos2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2fv", ExactSpelling = true)]
        public extern static void RasterPos2fv(System.IntPtr v);
        #endregion

        #region RasterPos2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2i", ExactSpelling = true)]
        public extern static void RasterPos2i(GLint x, GLint y);
        #endregion

        #region RasterPos2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2iv", ExactSpelling = true)]
        public extern static void RasterPos2iv(System.IntPtr v);
        #endregion

        #region RasterPos2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2s", ExactSpelling = true)]
        public extern static void RasterPos2s(GLshort x, GLshort y);
        #endregion

        #region RasterPos2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2sv", ExactSpelling = true)]
        public extern static void RasterPos2sv(System.IntPtr v);
        #endregion

        #region RasterPos3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3d", ExactSpelling = true)]
        public extern static void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region RasterPos3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3dv", ExactSpelling = true)]
        public extern static void RasterPos3dv(System.IntPtr v);
        #endregion

        #region RasterPos3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3f", ExactSpelling = true)]
        public extern static void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region RasterPos3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3fv", ExactSpelling = true)]
        public extern static void RasterPos3fv(System.IntPtr v);
        #endregion

        #region RasterPos3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3i", ExactSpelling = true)]
        public extern static void RasterPos3i(GLint x, GLint y, GLint z);
        #endregion

        #region RasterPos3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3iv", ExactSpelling = true)]
        public extern static void RasterPos3iv(System.IntPtr v);
        #endregion

        #region RasterPos3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3s", ExactSpelling = true)]
        public extern static void RasterPos3s(GLshort x, GLshort y, GLshort z);
        #endregion

        #region RasterPos3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3sv", ExactSpelling = true)]
        public extern static void RasterPos3sv(System.IntPtr v);
        #endregion

        #region RasterPos4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4d", ExactSpelling = true)]
        public extern static void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        #endregion

        #region RasterPos4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4dv", ExactSpelling = true)]
        public extern static void RasterPos4dv(System.IntPtr v);
        #endregion

        #region RasterPos4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4f", ExactSpelling = true)]
        public extern static void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        #endregion

        #region RasterPos4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4fv", ExactSpelling = true)]
        public extern static void RasterPos4fv(System.IntPtr v);
        #endregion

        #region RasterPos4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4i", ExactSpelling = true)]
        public extern static void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
        #endregion

        #region RasterPos4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4iv", ExactSpelling = true)]
        public extern static void RasterPos4iv(System.IntPtr v);
        #endregion

        #region RasterPos4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4s", ExactSpelling = true)]
        public extern static void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
        #endregion

        #region RasterPos4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4sv", ExactSpelling = true)]
        public extern static void RasterPos4sv(System.IntPtr v);
        #endregion

        #region ReadBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glReadBuffer", ExactSpelling = true)]
        public extern static void ReadBuffer(Enums.ReadBufferMode mode);
        #endregion

        #region ReadPixels
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glReadPixels", ExactSpelling = true)]
        public extern static void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region Rectd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRectd", ExactSpelling = true)]
        public extern static void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
        #endregion

        #region Rectdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRectdv", ExactSpelling = true)]
        public extern static void Rectdv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region Rectf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRectf", ExactSpelling = true)]
        public extern static void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
        #endregion

        #region Rectfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRectfv", ExactSpelling = true)]
        public extern static void Rectfv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region Recti
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRecti", ExactSpelling = true)]
        public extern static void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
        #endregion

        #region Rectiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRectiv", ExactSpelling = true)]
        public extern static void Rectiv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region Rects
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRects", ExactSpelling = true)]
        public extern static void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
        #endregion

        #region Rectsv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRectsv", ExactSpelling = true)]
        public extern static void Rectsv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region RenderMode
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRenderMode", ExactSpelling = true)]
        public extern static GLint RenderMode(Enums.RenderingMode mode);
        #endregion

        #region ResetHistogram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glResetHistogram", ExactSpelling = true)]
        public extern static void ResetHistogram(Enums.VERSION_1_2 target);
        #endregion

        #region ResetMinmax
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glResetMinmax", ExactSpelling = true)]
        public extern static void ResetMinmax(Enums.VERSION_1_2 target);
        #endregion

        #region Rotated
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRotated", ExactSpelling = true)]
        public extern static void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Rotatef
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glRotatef", ExactSpelling = true)]
        public extern static void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region SampleCoverage
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSampleCoverage", ExactSpelling = true)]
        public extern static void SampleCoverage(GLclampf value, System.Boolean invert);
        #endregion

        #region Scaled
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glScaled", ExactSpelling = true)]
        public extern static void Scaled(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Scalef
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glScalef", ExactSpelling = true)]
        public extern static void Scalef(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region Scissor
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glScissor", ExactSpelling = true)]
        public extern static void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region SecondaryColor3b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3b", ExactSpelling = true)]
        public extern static void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
        #endregion

        #region SecondaryColor3bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3bv", ExactSpelling = true)]
        public extern static void SecondaryColor3bv(System.IntPtr v);
        #endregion

        #region SecondaryColor3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3d", ExactSpelling = true)]
        public extern static void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
        #endregion

        #region SecondaryColor3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3dv", ExactSpelling = true)]
        public extern static void SecondaryColor3dv(System.IntPtr v);
        #endregion

        #region SecondaryColor3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3f", ExactSpelling = true)]
        public extern static void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
        #endregion

        #region SecondaryColor3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3fv", ExactSpelling = true)]
        public extern static void SecondaryColor3fv(System.IntPtr v);
        #endregion

        #region SecondaryColor3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3i", ExactSpelling = true)]
        public extern static void SecondaryColor3i(GLint red, GLint green, GLint blue);
        #endregion

        #region SecondaryColor3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3iv", ExactSpelling = true)]
        public extern static void SecondaryColor3iv(System.IntPtr v);
        #endregion

        #region SecondaryColor3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3s", ExactSpelling = true)]
        public extern static void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
        #endregion

        #region SecondaryColor3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3sv", ExactSpelling = true)]
        public extern static void SecondaryColor3sv(System.IntPtr v);
        #endregion

        #region SecondaryColor3ub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ub", ExactSpelling = true)]
        public extern static void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
        #endregion

        #region SecondaryColor3ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ubv", ExactSpelling = true)]
        public extern static void SecondaryColor3ubv(System.IntPtr v);
        #endregion

        #region SecondaryColor3ui
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ui", ExactSpelling = true)]
        public extern static void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
        #endregion

        #region SecondaryColor3uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3uiv", ExactSpelling = true)]
        public extern static void SecondaryColor3uiv(System.IntPtr v);
        #endregion

        #region SecondaryColor3us
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3us", ExactSpelling = true)]
        public extern static void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
        #endregion

        #region SecondaryColor3usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3usv", ExactSpelling = true)]
        public extern static void SecondaryColor3usv(System.IntPtr v);
        #endregion

        #region SecondaryColorPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColorPointer", ExactSpelling = true)]
        public extern static void SecondaryColorPointer(GLint size, Enums.ColorPointerType type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region SelectBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSelectBuffer", ExactSpelling = true)]
        public extern static void SelectBuffer(GLsizei size, System.IntPtr buffer);
        #endregion

        #region SeparableFilter2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glSeparableFilter2D", ExactSpelling = true)]
        public extern static void SeparableFilter2D(Enums.VERSION_1_2 target, Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr row, System.IntPtr column);
        #endregion

        #region ShadeModel
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glShadeModel", ExactSpelling = true)]
        public extern static void ShadeModel(Enums.ShadingModel mode);
        #endregion

        #region ShaderSource
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glShaderSource", ExactSpelling = true)]
        public extern static void ShaderSource(GLuint shader, GLsizei count, System.String[] @string, System.IntPtr length);
        #endregion

        #region StencilFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glStencilFunc", ExactSpelling = true)]
        public extern static void StencilFunc(Enums.StencilFunction func, GLint @ref, GLuint mask);
        #endregion

        #region StencilFuncSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glStencilFuncSeparate", ExactSpelling = true)]
        public extern static void StencilFuncSeparate(Enums.StencilFunction frontfunc, Enums.StencilFunction backfunc, GLint @ref, GLuint mask);
        #endregion

        #region StencilMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glStencilMask", ExactSpelling = true)]
        public extern static void StencilMask(GLuint mask);
        #endregion

        #region StencilMaskSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glStencilMaskSeparate", ExactSpelling = true)]
        public extern static void StencilMaskSeparate(Enums.VERSION_2_0 face, GLuint mask);
        #endregion

        #region StencilOp
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glStencilOp", ExactSpelling = true)]
        public extern static void StencilOp(Enums.StencilOp fail, Enums.StencilOp zfail, Enums.StencilOp zpass);
        #endregion

        #region StencilOpSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glStencilOpSeparate", ExactSpelling = true)]
        public extern static void StencilOpSeparate(Enums.VERSION_2_0 face, Enums.StencilOp sfail, Enums.StencilOp dpfail, Enums.StencilOp dppass);
        #endregion

        #region TexCoord1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1d", ExactSpelling = true)]
        public extern static void TexCoord1d(GLdouble s);
        #endregion

        #region TexCoord1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1dv", ExactSpelling = true)]
        public extern static void TexCoord1dv(System.IntPtr v);
        #endregion

        #region TexCoord1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1f", ExactSpelling = true)]
        public extern static void TexCoord1f(GLfloat s);
        #endregion

        #region TexCoord1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1fv", ExactSpelling = true)]
        public extern static void TexCoord1fv(System.IntPtr v);
        #endregion

        #region TexCoord1i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1i", ExactSpelling = true)]
        public extern static void TexCoord1i(GLint s);
        #endregion

        #region TexCoord1iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1iv", ExactSpelling = true)]
        public extern static void TexCoord1iv(System.IntPtr v);
        #endregion

        #region TexCoord1s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1s", ExactSpelling = true)]
        public extern static void TexCoord1s(GLshort s);
        #endregion

        #region TexCoord1sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1sv", ExactSpelling = true)]
        public extern static void TexCoord1sv(System.IntPtr v);
        #endregion

        #region TexCoord2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2d", ExactSpelling = true)]
        public extern static void TexCoord2d(GLdouble s, GLdouble t);
        #endregion

        #region TexCoord2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2dv", ExactSpelling = true)]
        public extern static void TexCoord2dv(System.IntPtr v);
        #endregion

        #region TexCoord2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2f", ExactSpelling = true)]
        public extern static void TexCoord2f(GLfloat s, GLfloat t);
        #endregion

        #region TexCoord2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2fv", ExactSpelling = true)]
        public extern static void TexCoord2fv(System.IntPtr v);
        #endregion

        #region TexCoord2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2i", ExactSpelling = true)]
        public extern static void TexCoord2i(GLint s, GLint t);
        #endregion

        #region TexCoord2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2iv", ExactSpelling = true)]
        public extern static void TexCoord2iv(System.IntPtr v);
        #endregion

        #region TexCoord2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2s", ExactSpelling = true)]
        public extern static void TexCoord2s(GLshort s, GLshort t);
        #endregion

        #region TexCoord2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2sv", ExactSpelling = true)]
        public extern static void TexCoord2sv(System.IntPtr v);
        #endregion

        #region TexCoord3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3d", ExactSpelling = true)]
        public extern static void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
        #endregion

        #region TexCoord3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3dv", ExactSpelling = true)]
        public extern static void TexCoord3dv(System.IntPtr v);
        #endregion

        #region TexCoord3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3f", ExactSpelling = true)]
        public extern static void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
        #endregion

        #region TexCoord3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3fv", ExactSpelling = true)]
        public extern static void TexCoord3fv(System.IntPtr v);
        #endregion

        #region TexCoord3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3i", ExactSpelling = true)]
        public extern static void TexCoord3i(GLint s, GLint t, GLint r);
        #endregion

        #region TexCoord3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3iv", ExactSpelling = true)]
        public extern static void TexCoord3iv(System.IntPtr v);
        #endregion

        #region TexCoord3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3s", ExactSpelling = true)]
        public extern static void TexCoord3s(GLshort s, GLshort t, GLshort r);
        #endregion

        #region TexCoord3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3sv", ExactSpelling = true)]
        public extern static void TexCoord3sv(System.IntPtr v);
        #endregion

        #region TexCoord4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4d", ExactSpelling = true)]
        public extern static void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        #endregion

        #region TexCoord4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4dv", ExactSpelling = true)]
        public extern static void TexCoord4dv(System.IntPtr v);
        #endregion

        #region TexCoord4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4f", ExactSpelling = true)]
        public extern static void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        #endregion

        #region TexCoord4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4fv", ExactSpelling = true)]
        public extern static void TexCoord4fv(System.IntPtr v);
        #endregion

        #region TexCoord4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4i", ExactSpelling = true)]
        public extern static void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
        #endregion

        #region TexCoord4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4iv", ExactSpelling = true)]
        public extern static void TexCoord4iv(System.IntPtr v);
        #endregion

        #region TexCoord4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4s", ExactSpelling = true)]
        public extern static void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
        #endregion

        #region TexCoord4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4sv", ExactSpelling = true)]
        public extern static void TexCoord4sv(System.IntPtr v);
        #endregion

        #region TexCoordPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoordPointer", ExactSpelling = true)]
        public extern static void TexCoordPointer(GLint size, Enums.TexCoordPointerType type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region TexEnvf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvf", ExactSpelling = true)]
        public extern static void TexEnvf(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLfloat param);
        #endregion

        #region TexEnvfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvfv", ExactSpelling = true)]
        public extern static void TexEnvfv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params);
        #endregion

        #region TexEnvi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvi", ExactSpelling = true)]
        public extern static void TexEnvi(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, GLint param);
        #endregion

        #region TexEnviv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnviv", ExactSpelling = true)]
        public extern static void TexEnviv(Enums.TextureEnvTarget target, Enums.TextureEnvParameter pname, System.IntPtr @params);
        #endregion

        #region TexGend
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexGend", ExactSpelling = true)]
        public extern static void TexGend(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLdouble param);
        #endregion

        #region TexGendv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexGendv", ExactSpelling = true)]
        public extern static void TexGendv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        #endregion

        #region TexGenf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexGenf", ExactSpelling = true)]
        public extern static void TexGenf(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLfloat param);
        #endregion

        #region TexGenfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexGenfv", ExactSpelling = true)]
        public extern static void TexGenfv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        #endregion

        #region TexGeni
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexGeni", ExactSpelling = true)]
        public extern static void TexGeni(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, GLint param);
        #endregion

        #region TexGeniv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexGeniv", ExactSpelling = true)]
        public extern static void TexGeniv(Enums.TextureCoordName coord, Enums.TextureGenParameter pname, System.IntPtr @params);
        #endregion

        #region TexImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexImage1D", ExactSpelling = true)]
        public extern static void TexImage1D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region TexImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexImage2D", ExactSpelling = true)]
        public extern static void TexImage2D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region TexImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexImage3D", ExactSpelling = true)]
        public extern static void TexImage3D(Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region TexParameterf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterf", ExactSpelling = true)]
        public extern static void TexParameterf(Enums.TextureTarget target, Enums.TextureParameterName pname, GLfloat param);
        #endregion

        #region TexParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterfv", ExactSpelling = true)]
        public extern static void TexParameterfv(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params);
        #endregion

        #region TexParameteri
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteri", ExactSpelling = true)]
        public extern static void TexParameteri(Enums.TextureTarget target, Enums.TextureParameterName pname, GLint param);
        #endregion

        #region TexParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteriv", ExactSpelling = true)]
        public extern static void TexParameteriv(Enums.TextureTarget target, Enums.TextureParameterName pname, System.IntPtr @params);
        #endregion

        #region TexSubImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage1D", ExactSpelling = true)]
        public extern static void TexSubImage1D(Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region TexSubImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage2D", ExactSpelling = true)]
        public extern static void TexSubImage2D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region TexSubImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage3D", ExactSpelling = true)]
        public extern static void TexSubImage3D(Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, Enums.PixelFormat format, Enums.PixelType type, System.IntPtr pixels);
        #endregion

        #region Translated
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTranslated", ExactSpelling = true)]
        public extern static void Translated(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Translatef
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glTranslatef", ExactSpelling = true)]
        public extern static void Translatef(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region Uniform1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1f", ExactSpelling = true)]
        public extern static void Uniform1f(GLint location, GLfloat v0);
        #endregion

        #region Uniform1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1fv", ExactSpelling = true)]
        public extern static void Uniform1fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform1i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1i", ExactSpelling = true)]
        public extern static void Uniform1i(GLint location, GLint v0);
        #endregion

        #region Uniform1iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1iv", ExactSpelling = true)]
        public extern static void Uniform1iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2f", ExactSpelling = true)]
        public extern static void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
        #endregion

        #region Uniform2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2fv", ExactSpelling = true)]
        public extern static void Uniform2fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2i", ExactSpelling = true)]
        public extern static void Uniform2i(GLint location, GLint v0, GLint v1);
        #endregion

        #region Uniform2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2iv", ExactSpelling = true)]
        public extern static void Uniform2iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3f", ExactSpelling = true)]
        public extern static void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        #endregion

        #region Uniform3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3fv", ExactSpelling = true)]
        public extern static void Uniform3fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3i", ExactSpelling = true)]
        public extern static void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
        #endregion

        #region Uniform3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3iv", ExactSpelling = true)]
        public extern static void Uniform3iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4f", ExactSpelling = true)]
        public extern static void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        #endregion

        #region Uniform4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4fv", ExactSpelling = true)]
        public extern static void Uniform4fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4i", ExactSpelling = true)]
        public extern static void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        #endregion

        #region Uniform4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4iv", ExactSpelling = true)]
        public extern static void Uniform4iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region UniformMatrix2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2fv", ExactSpelling = true)]
        public extern static void UniformMatrix2fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix2x3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x3fv", ExactSpelling = true)]
        public extern static void UniformMatrix2x3fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix2x4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x4fv", ExactSpelling = true)]
        public extern static void UniformMatrix2x4fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3fv", ExactSpelling = true)]
        public extern static void UniformMatrix3fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix3x2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x2fv", ExactSpelling = true)]
        public extern static void UniformMatrix3x2fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix3x4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x4fv", ExactSpelling = true)]
        public extern static void UniformMatrix3x4fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4fv", ExactSpelling = true)]
        public extern static void UniformMatrix4fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix4x2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x2fv", ExactSpelling = true)]
        public extern static void UniformMatrix4x2fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix4x3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x3fv", ExactSpelling = true)]
        public extern static void UniformMatrix4x3fv(GLint location, GLsizei count, System.Boolean transpose, System.IntPtr value);
        #endregion

        #region UnmapBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUnmapBuffer", ExactSpelling = true)]
        public extern static GLboolean UnmapBuffer(Enums.VERSION_1_5 target);
        #endregion

        #region UseProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glUseProgram", ExactSpelling = true)]
        public extern static void UseProgram(GLuint program);
        #endregion

        #region ValidateProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glValidateProgram", ExactSpelling = true)]
        public extern static void ValidateProgram(GLuint program);
        #endregion

        #region Vertex2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2d", ExactSpelling = true)]
        public extern static void Vertex2d(GLdouble x, GLdouble y);
        #endregion

        #region Vertex2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2dv", ExactSpelling = true)]
        public extern static void Vertex2dv(System.IntPtr v);
        #endregion

        #region Vertex2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2f", ExactSpelling = true)]
        public extern static void Vertex2f(GLfloat x, GLfloat y);
        #endregion

        #region Vertex2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2fv", ExactSpelling = true)]
        public extern static void Vertex2fv(System.IntPtr v);
        #endregion

        #region Vertex2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2i", ExactSpelling = true)]
        public extern static void Vertex2i(GLint x, GLint y);
        #endregion

        #region Vertex2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2iv", ExactSpelling = true)]
        public extern static void Vertex2iv(System.IntPtr v);
        #endregion

        #region Vertex2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2s", ExactSpelling = true)]
        public extern static void Vertex2s(GLshort x, GLshort y);
        #endregion

        #region Vertex2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2sv", ExactSpelling = true)]
        public extern static void Vertex2sv(System.IntPtr v);
        #endregion

        #region Vertex3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3d", ExactSpelling = true)]
        public extern static void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Vertex3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3dv", ExactSpelling = true)]
        public extern static void Vertex3dv(System.IntPtr v);
        #endregion

        #region Vertex3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3f", ExactSpelling = true)]
        public extern static void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region Vertex3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3fv", ExactSpelling = true)]
        public extern static void Vertex3fv(System.IntPtr v);
        #endregion

        #region Vertex3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3i", ExactSpelling = true)]
        public extern static void Vertex3i(GLint x, GLint y, GLint z);
        #endregion

        #region Vertex3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3iv", ExactSpelling = true)]
        public extern static void Vertex3iv(System.IntPtr v);
        #endregion

        #region Vertex3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3s", ExactSpelling = true)]
        public extern static void Vertex3s(GLshort x, GLshort y, GLshort z);
        #endregion

        #region Vertex3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3sv", ExactSpelling = true)]
        public extern static void Vertex3sv(System.IntPtr v);
        #endregion

        #region Vertex4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4d", ExactSpelling = true)]
        public extern static void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        #endregion

        #region Vertex4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4dv", ExactSpelling = true)]
        public extern static void Vertex4dv(System.IntPtr v);
        #endregion

        #region Vertex4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4f", ExactSpelling = true)]
        public extern static void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        #endregion

        #region Vertex4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4fv", ExactSpelling = true)]
        public extern static void Vertex4fv(System.IntPtr v);
        #endregion

        #region Vertex4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4i", ExactSpelling = true)]
        public extern static void Vertex4i(GLint x, GLint y, GLint z, GLint w);
        #endregion

        #region Vertex4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4iv", ExactSpelling = true)]
        public extern static void Vertex4iv(System.IntPtr v);
        #endregion

        #region Vertex4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4s", ExactSpelling = true)]
        public extern static void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
        #endregion

        #region Vertex4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4sv", ExactSpelling = true)]
        public extern static void Vertex4sv(System.IntPtr v);
        #endregion

        #region VertexAttrib1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1d", ExactSpelling = true)]
        public extern static void VertexAttrib1d(GLuint index, GLdouble x);
        #endregion

        #region VertexAttrib1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1dv", ExactSpelling = true)]
        public extern static void VertexAttrib1dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1f", ExactSpelling = true)]
        public extern static void VertexAttrib1f(GLuint index, GLfloat x);
        #endregion

        #region VertexAttrib1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1fv", ExactSpelling = true)]
        public extern static void VertexAttrib1fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib1s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1s", ExactSpelling = true)]
        public extern static void VertexAttrib1s(GLuint index, GLshort x);
        #endregion

        #region VertexAttrib1sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1sv", ExactSpelling = true)]
        public extern static void VertexAttrib1sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2d", ExactSpelling = true)]
        public extern static void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
        #endregion

        #region VertexAttrib2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2dv", ExactSpelling = true)]
        public extern static void VertexAttrib2dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2f", ExactSpelling = true)]
        public extern static void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
        #endregion

        #region VertexAttrib2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2fv", ExactSpelling = true)]
        public extern static void VertexAttrib2fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2s", ExactSpelling = true)]
        public extern static void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
        #endregion

        #region VertexAttrib2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2sv", ExactSpelling = true)]
        public extern static void VertexAttrib2sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3d", ExactSpelling = true)]
        public extern static void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region VertexAttrib3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3dv", ExactSpelling = true)]
        public extern static void VertexAttrib3dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3f", ExactSpelling = true)]
        public extern static void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region VertexAttrib3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3fv", ExactSpelling = true)]
        public extern static void VertexAttrib3fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3s", ExactSpelling = true)]
        public extern static void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
        #endregion

        #region VertexAttrib3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3sv", ExactSpelling = true)]
        public extern static void VertexAttrib3sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4bv", ExactSpelling = true)]
        public extern static void VertexAttrib4bv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4d", ExactSpelling = true)]
        public extern static void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        #endregion

        #region VertexAttrib4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4dv", ExactSpelling = true)]
        public extern static void VertexAttrib4dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4f", ExactSpelling = true)]
        public extern static void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        #endregion

        #region VertexAttrib4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4fv", ExactSpelling = true)]
        public extern static void VertexAttrib4fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4iv", ExactSpelling = true)]
        public extern static void VertexAttrib4iv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nbv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nbv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nbv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Niv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Niv", ExactSpelling = true)]
        public extern static void VertexAttrib4Niv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nsv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nsv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nsv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nub", ExactSpelling = true)]
        public extern static void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        #endregion

        #region VertexAttrib4Nubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nubv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nubv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nuiv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nuiv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nusv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nusv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nusv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4s", ExactSpelling = true)]
        public extern static void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        #endregion

        #region VertexAttrib4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4sv", ExactSpelling = true)]
        public extern static void VertexAttrib4sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4ubv", ExactSpelling = true)]
        public extern static void VertexAttrib4ubv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4uiv", ExactSpelling = true)]
        public extern static void VertexAttrib4uiv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4usv", ExactSpelling = true)]
        public extern static void VertexAttrib4usv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttribPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttribPointer", ExactSpelling = true)]
        public extern static void VertexAttribPointer(GLuint index, GLint size, Enums.VERSION_2_0 type, System.Boolean normalized, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region VertexPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glVertexPointer", ExactSpelling = true)]
        public extern static void VertexPointer(GLint size, Enums.VertexPointerType type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Viewport
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glViewport", ExactSpelling = true)]
        public extern static void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region WindowPos2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2d", ExactSpelling = true)]
        public extern static void WindowPos2d(GLdouble x, GLdouble y);
        #endregion

        #region WindowPos2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2dv", ExactSpelling = true)]
        public extern static void WindowPos2dv(System.IntPtr v);
        #endregion

        #region WindowPos2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2f", ExactSpelling = true)]
        public extern static void WindowPos2f(GLfloat x, GLfloat y);
        #endregion

        #region WindowPos2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2fv", ExactSpelling = true)]
        public extern static void WindowPos2fv(System.IntPtr v);
        #endregion

        #region WindowPos2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2i", ExactSpelling = true)]
        public extern static void WindowPos2i(GLint x, GLint y);
        #endregion

        #region WindowPos2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2iv", ExactSpelling = true)]
        public extern static void WindowPos2iv(System.IntPtr v);
        #endregion

        #region WindowPos2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2s", ExactSpelling = true)]
        public extern static void WindowPos2s(GLshort x, GLshort y);
        #endregion

        #region WindowPos2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2sv", ExactSpelling = true)]
        public extern static void WindowPos2sv(System.IntPtr v);
        #endregion

        #region WindowPos3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3d", ExactSpelling = true)]
        public extern static void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region WindowPos3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3dv", ExactSpelling = true)]
        public extern static void WindowPos3dv(System.IntPtr v);
        #endregion

        #region WindowPos3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3f", ExactSpelling = true)]
        public extern static void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region WindowPos3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3fv", ExactSpelling = true)]
        public extern static void WindowPos3fv(System.IntPtr v);
        #endregion

        #region WindowPos3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3i", ExactSpelling = true)]
        public extern static void WindowPos3i(GLint x, GLint y, GLint z);
        #endregion

        #region WindowPos3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3iv", ExactSpelling = true)]
        public extern static void WindowPos3iv(System.IntPtr v);
        #endregion

        #region WindowPos3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3s", ExactSpelling = true)]
        public extern static void WindowPos3s(GLshort x, GLshort y, GLshort z);
        #endregion

        #region WindowPos3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(GL.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3sv", ExactSpelling = true)]
        public extern static void WindowPos3sv(System.IntPtr v);
        #endregion

    }
    #endregion
}
