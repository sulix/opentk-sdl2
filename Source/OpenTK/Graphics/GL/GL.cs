#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2008 the Open Toolkit library, except where noted.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

namespace OpenTK.Graphics
{
    using System;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591

    static partial class GL
    {

        
        /// <summary>
        /// Create or replace a display list
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies the display-list name.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies the compilation mode, which can be GL_COMPILE or GL_COMPILE_AND_EXECUTE.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glNewList")]
        public static 
        void NewList(UInt32 list, OpenTK.Graphics.ListMode mode)
        {
            Delegates.glNewList((UInt32)list, (OpenTK.Graphics.ListMode)mode);
        }

        
        /// <summary>
        /// Create or replace a display list
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies the display-list name.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies the compilation mode, which can be GL_COMPILE or GL_COMPILE_AND_EXECUTE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glNewList")]
        public static 
        void NewList(Int32 list, OpenTK.Graphics.ListMode mode)
        {
            Delegates.glNewList((UInt32)list, (OpenTK.Graphics.ListMode)mode);
        }

        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glEndList")]
        public static 
        void EndList()
        {
            Delegates.glEndList();
        }

        
        /// <summary>
        /// Execute a display list
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies the integer name of the display list to be executed.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glCallList")]
        public static 
        void CallList(UInt32 list)
        {
            Delegates.glCallList((UInt32)list);
        }

        
        /// <summary>
        /// Execute a display list
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies the integer name of the display list to be executed.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glCallList")]
        public static 
        void CallList(Int32 list)
        {
            Delegates.glCallList((UInt32)list);
        }

        
        /// <summary>
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of display lists to be executed.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of values in lists. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted.
        /// </para>
        /// </param>
        /// <param name="lists">
        /// <para>
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glCallLists")]
        public static 
        void CallLists(Int32 n, OpenTK.Graphics.ListNameType type, IntPtr lists)
        {
            unsafe
            {
                Delegates.glCallLists((Int32)n, (OpenTK.Graphics.ListNameType)type, (IntPtr)lists);
            }
        }

        
        /// <summary>
        /// Execute a list of display lists
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of display lists to be executed.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of values in lists. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted.
        /// </para>
        /// </param>
        /// <param name="lists">
        /// <para>
        /// Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glCallLists")]
        public static 
        void CallLists(Int32 n, OpenTK.Graphics.ListNameType type, [In, Out] object lists)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle lists_ptr = System.Runtime.InteropServices.GCHandle.Alloc(lists, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glCallLists((Int32)n, (OpenTK.Graphics.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    lists_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Delete a contiguous group of display lists
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies the integer name of the first display list to delete.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the number of display lists to delete.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glDeleteLists")]
        public static 
        void DeleteLists(UInt32 list, Int32 range)
        {
            Delegates.glDeleteLists((UInt32)list, (Int32)range);
        }

        
        /// <summary>
        /// Delete a contiguous group of display lists
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies the integer name of the first display list to delete.
        /// </para>
        /// </param>
        /// <param name="range">
        /// <para>
        /// Specifies the number of display lists to delete.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glDeleteLists")]
        public static 
        void DeleteLists(Int32 list, Int32 range)
        {
            Delegates.glDeleteLists((UInt32)list, (Int32)range);
        }

        
        /// <summary>
        /// Generate a contiguous set of empty display lists
        /// </summary>
        /// <param name="range">
        /// <para>
        /// Specifies the number of contiguous empty display lists to be generated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glGenLists")]
        public static 
        Int32 GenLists(Int32 range)
        {
            return Delegates.glGenLists((Int32)range);
        }

        
        /// <summary>
        /// Set the display-list base for glCallLists
        /// </summary>
        /// <param name="base">
        /// <para>
        /// Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glListBase")]
        public static 
        void ListBase(UInt32 @base)
        {
            Delegates.glListBase((UInt32)@base);
        }

        
        /// <summary>
        /// Set the display-list base for glCallLists
        /// </summary>
        /// <param name="base">
        /// <para>
        /// Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DisplayList", Version = "1.0", EntryPoint = "glListBase")]
        public static 
        void ListBase(Int32 @base)
        {
            Delegates.glListBase((UInt32)@base);
        }

        
        /// <summary>
        /// Delimit the vertices of a primitive or a group of like primitives
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: GL_POINTS, GL_LINES, GL_LINE_STRIP, GL_LINE_LOOP, GL_TRIANGLES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_QUADS, GL_QUAD_STRIP, and GL_POLYGON.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glBegin")]
        public static 
        void Begin(OpenTK.Graphics.BeginMode mode)
        {
            Delegates.glBegin((OpenTK.Graphics.BeginMode)mode);
        }

        
        /// <summary>
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specify the pixel width and height of the bitmap image.
        /// </para>
        /// </param>
        /// <param name="xorig">
        /// <para>
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </para>
        /// </param>
        /// <param name="xmove">
        /// <para>
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </para>
        /// </param>
        /// <param name="bitmap">
        /// <para>
        /// Specifies the address of the bitmap image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glBitmap")]
        public static 
        void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte[] bitmap)
        {
            unsafe
            {
                fixed (Byte* bitmap_ptr = bitmap)
                {
                    Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
        }

        
        /// <summary>
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specify the pixel width and height of the bitmap image.
        /// </para>
        /// </param>
        /// <param name="xorig">
        /// <para>
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </para>
        /// </param>
        /// <param name="xmove">
        /// <para>
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </para>
        /// </param>
        /// <param name="bitmap">
        /// <para>
        /// Specifies the address of the bitmap image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glBitmap")]
        public static 
        void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, ref Byte bitmap)
        {
            unsafe
            {
                fixed (Byte* bitmap_ptr = &bitmap)
                {
                    Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
        }

        
        /// <summary>
        /// Draw a bitmap
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specify the pixel width and height of the bitmap image.
        /// </para>
        /// </param>
        /// <param name="xorig">
        /// <para>
        /// Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.
        /// </para>
        /// </param>
        /// <param name="xmove">
        /// <para>
        /// Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.
        /// </para>
        /// </param>
        /// <param name="bitmap">
        /// <para>
        /// Specifies the address of the bitmap image.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glBitmap")]
        public static 
        unsafe void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte* bitmap)
        {
            Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3b")]
        public static 
        void Color3(SByte red, SByte green, SByte blue)
        {
            Delegates.glColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3bv")]
        public static 
        void Color3(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3bv")]
        public static 
        void Color3(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3bv")]
        public static 
        unsafe void Color3(SByte* v)
        {
            Delegates.glColor3bv((SByte*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3d")]
        public static 
        void Color3(Double red, Double green, Double blue)
        {
            Delegates.glColor3d((Double)red, (Double)green, (Double)blue);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3dv")]
        public static 
        void Color3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glColor3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3dv")]
        public static 
        void Color3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glColor3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3dv")]
        public static 
        unsafe void Color3(Double* v)
        {
            Delegates.glColor3dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3f")]
        public static 
        void Color3(Single red, Single green, Single blue)
        {
            Delegates.glColor3f((Single)red, (Single)green, (Single)blue);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3fv")]
        public static 
        void Color3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glColor3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3fv")]
        public static 
        void Color3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glColor3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3fv")]
        public static 
        unsafe void Color3(Single* v)
        {
            Delegates.glColor3fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3i")]
        public static 
        void Color3(Int32 red, Int32 green, Int32 blue)
        {
            Delegates.glColor3i((Int32)red, (Int32)green, (Int32)blue);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3iv")]
        public static 
        void Color3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glColor3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3iv")]
        public static 
        void Color3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glColor3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3iv")]
        public static 
        unsafe void Color3(Int32* v)
        {
            Delegates.glColor3iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3s")]
        public static 
        void Color3(Int16 red, Int16 green, Int16 blue)
        {
            Delegates.glColor3s((Int16)red, (Int16)green, (Int16)blue);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3sv")]
        public static 
        void Color3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glColor3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3sv")]
        public static 
        void Color3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glColor3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3sv")]
        public static 
        unsafe void Color3(Int16* v)
        {
            Delegates.glColor3sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3ub")]
        public static 
        void Color3(Byte red, Byte green, Byte blue)
        {
            Delegates.glColor3ub((Byte)red, (Byte)green, (Byte)blue);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static 
        void Color3(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static 
        void Color3(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3ubv")]
        public static 
        unsafe void Color3(Byte* v)
        {
            Delegates.glColor3ubv((Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3ui")]
        public static 
        void Color3(UInt32 red, UInt32 green, UInt32 blue)
        {
            Delegates.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static 
        void Color3(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static 
        void Color3(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3uiv")]
        public static 
        unsafe void Color3(UInt32* v)
        {
            Delegates.glColor3uiv((UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3us")]
        public static 
        void Color3(UInt16 red, UInt16 green, UInt16 blue)
        {
            Delegates.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3usv")]
        public static 
        void Color3(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3usv")]
        public static 
        void Color3(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor3usv")]
        public static 
        unsafe void Color3(UInt16* v)
        {
            Delegates.glColor3usv((UInt16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4b")]
        public static 
        void Color4(SByte red, SByte green, SByte blue, SByte alpha)
        {
            Delegates.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4bv")]
        public static 
        void Color4(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4bv")]
        public static 
        void Color4(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glColor4bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4bv")]
        public static 
        unsafe void Color4(SByte* v)
        {
            Delegates.glColor4bv((SByte*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4d")]
        public static 
        void Color4(Double red, Double green, Double blue, Double alpha)
        {
            Delegates.glColor4d((Double)red, (Double)green, (Double)blue, (Double)alpha);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4dv")]
        public static 
        void Color4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glColor4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4dv")]
        public static 
        void Color4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glColor4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4dv")]
        public static 
        unsafe void Color4(Double* v)
        {
            Delegates.glColor4dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4f")]
        public static 
        void Color4(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glColor4f((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4fv")]
        public static 
        void Color4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glColor4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4fv")]
        public static 
        void Color4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glColor4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4fv")]
        public static 
        unsafe void Color4(Single* v)
        {
            Delegates.glColor4fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4i")]
        public static 
        void Color4(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            Delegates.glColor4i((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4iv")]
        public static 
        void Color4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glColor4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4iv")]
        public static 
        void Color4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glColor4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4iv")]
        public static 
        unsafe void Color4(Int32* v)
        {
            Delegates.glColor4iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4s")]
        public static 
        void Color4(Int16 red, Int16 green, Int16 blue, Int16 alpha)
        {
            Delegates.glColor4s((Int16)red, (Int16)green, (Int16)blue, (Int16)alpha);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4sv")]
        public static 
        void Color4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glColor4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4sv")]
        public static 
        void Color4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glColor4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4sv")]
        public static 
        unsafe void Color4(Int16* v)
        {
            Delegates.glColor4sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4ub")]
        public static 
        void Color4(Byte red, Byte green, Byte blue, Byte alpha)
        {
            Delegates.glColor4ub((Byte)red, (Byte)green, (Byte)blue, (Byte)alpha);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static 
        void Color4(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glColor4ubv((Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static 
        void Color4(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glColor4ubv((Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4ubv")]
        public static 
        unsafe void Color4(Byte* v)
        {
            Delegates.glColor4ubv((Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4ui")]
        public static 
        void Color4(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
        {
            Delegates.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static 
        void Color4(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static 
        void Color4(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glColor4uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4uiv")]
        public static 
        unsafe void Color4(UInt32* v)
        {
            Delegates.glColor4uiv((UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4us")]
        public static 
        void Color4(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha)
        {
            Delegates.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4usv")]
        public static 
        void Color4(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4usv")]
        public static 
        void Color4(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glColor4usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glColor4usv")]
        public static 
        unsafe void Color4(UInt16* v)
        {
            Delegates.glColor4usv((UInt16*)v);
        }

        
        /// <summary>
        /// Flag edges as either boundary or nonboundary
        /// </summary>
        /// <param name="flag">
        /// <para>
        /// Specifies the current edge flag value, either GL_TRUE or GL_FALSE. The initial value is GL_TRUE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glEdgeFlag")]
        public static 
        void EdgeFlag(bool flag)
        {
            Delegates.glEdgeFlag((bool)flag);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glEdgeFlagv")]
        public static 
        void EdgeFlagv(bool[] flag)
        {
            unsafe
            {
                fixed (bool* flag_ptr = flag)
                {
                    Delegates.glEdgeFlagv((bool*)flag_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glEdgeFlagv")]
        public static 
        void EdgeFlagv(ref bool flag)
        {
            unsafe
            {
                fixed (bool* flag_ptr = &flag)
                {
                    Delegates.glEdgeFlagv((bool*)flag_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glEdgeFlagv")]
        public static 
        unsafe void EdgeFlagv(bool* flag)
        {
            Delegates.glEdgeFlagv((bool*)flag);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glEnd")]
        public static 
        void End()
        {
            Delegates.glEnd();
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexd")]
        public static 
        void Index(Double c)
        {
            Delegates.glIndexd((Double)c);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexdv")]
        public static 
        void Indexv(Double[] c)
        {
            unsafe
            {
                fixed (Double* c_ptr = c)
                {
                    Delegates.glIndexdv((Double*)c_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexdv")]
        public static 
        void Indexv(ref Double c)
        {
            unsafe
            {
                fixed (Double* c_ptr = &c)
                {
                    Delegates.glIndexdv((Double*)c_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexdv")]
        public static 
        unsafe void Indexv(Double* c)
        {
            Delegates.glIndexdv((Double*)c);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexf")]
        public static 
        void Index(Single c)
        {
            Delegates.glIndexf((Single)c);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexfv")]
        public static 
        void Indexv(Single[] c)
        {
            unsafe
            {
                fixed (Single* c_ptr = c)
                {
                    Delegates.glIndexfv((Single*)c_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexfv")]
        public static 
        void Indexv(ref Single c)
        {
            unsafe
            {
                fixed (Single* c_ptr = &c)
                {
                    Delegates.glIndexfv((Single*)c_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexfv")]
        public static 
        unsafe void Indexv(Single* c)
        {
            Delegates.glIndexfv((Single*)c);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexi")]
        public static 
        void Index(Int32 c)
        {
            Delegates.glIndexi((Int32)c);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexiv")]
        public static 
        void Indexv(Int32[] c)
        {
            unsafe
            {
                fixed (Int32* c_ptr = c)
                {
                    Delegates.glIndexiv((Int32*)c_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexiv")]
        public static 
        void Indexv(ref Int32 c)
        {
            unsafe
            {
                fixed (Int32* c_ptr = &c)
                {
                    Delegates.glIndexiv((Int32*)c_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexiv")]
        public static 
        unsafe void Indexv(Int32* c)
        {
            Delegates.glIndexiv((Int32*)c);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexs")]
        public static 
        void Index(Int16 c)
        {
            Delegates.glIndexs((Int16)c);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexsv")]
        public static 
        void Indexv(Int16[] c)
        {
            unsafe
            {
                fixed (Int16* c_ptr = c)
                {
                    Delegates.glIndexsv((Int16*)c_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexsv")]
        public static 
        void Indexv(ref Int16 c)
        {
            unsafe
            {
                fixed (Int16* c_ptr = &c)
                {
                    Delegates.glIndexsv((Int16*)c_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glIndexsv")]
        public static 
        unsafe void Indexv(Int16* c)
        {
            Delegates.glIndexsv((Int16*)c);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3b")]
        public static 
        void Normal3(SByte nx, SByte ny, SByte nz)
        {
            Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3b")]
        public static 
        void Normal3(Byte nx, Byte ny, Byte nz)
        {
            Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static 
        void Normal3(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static 
        void Normal3(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static 
        void Normal3(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static 
        void Normal3(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static 
        unsafe void Normal3(SByte* v)
        {
            Delegates.glNormal3bv((SByte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3bv")]
        public static 
        unsafe void Normal3(Byte* v)
        {
            Delegates.glNormal3bv((SByte*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3d")]
        public static 
        void Normal3(Double nx, Double ny, Double nz)
        {
            Delegates.glNormal3d((Double)nx, (Double)ny, (Double)nz);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static 
        void Normal3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glNormal3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static 
        void Normal3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glNormal3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3dv")]
        public static 
        unsafe void Normal3(Double* v)
        {
            Delegates.glNormal3dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3f")]
        public static 
        void Normal3(Single nx, Single ny, Single nz)
        {
            Delegates.glNormal3f((Single)nx, (Single)ny, (Single)nz);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static 
        void Normal3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glNormal3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static 
        void Normal3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glNormal3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3fv")]
        public static 
        unsafe void Normal3(Single* v)
        {
            Delegates.glNormal3fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3i")]
        public static 
        void Normal3(Int32 nx, Int32 ny, Int32 nz)
        {
            Delegates.glNormal3i((Int32)nx, (Int32)ny, (Int32)nz);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static 
        void Normal3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glNormal3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static 
        void Normal3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glNormal3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3iv")]
        public static 
        unsafe void Normal3(Int32* v)
        {
            Delegates.glNormal3iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3s")]
        public static 
        void Normal3(Int16 nx, Int16 ny, Int16 nz)
        {
            Delegates.glNormal3s((Int16)nx, (Int16)ny, (Int16)nz);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static 
        void Normal3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glNormal3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static 
        void Normal3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glNormal3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glNormal3sv")]
        public static 
        unsafe void Normal3(Int16* v)
        {
            Delegates.glNormal3sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2d")]
        public static 
        void RasterPos2(Double x, Double y)
        {
            Delegates.glRasterPos2d((Double)x, (Double)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static 
        void RasterPos2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static 
        void RasterPos2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2dv")]
        public static 
        unsafe void RasterPos2(Double* v)
        {
            Delegates.glRasterPos2dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2f")]
        public static 
        void RasterPos2(Single x, Single y)
        {
            Delegates.glRasterPos2f((Single)x, (Single)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static 
        void RasterPos2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static 
        void RasterPos2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2fv")]
        public static 
        unsafe void RasterPos2(Single* v)
        {
            Delegates.glRasterPos2fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2i")]
        public static 
        void RasterPos2(Int32 x, Int32 y)
        {
            Delegates.glRasterPos2i((Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static 
        void RasterPos2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static 
        void RasterPos2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2iv")]
        public static 
        unsafe void RasterPos2(Int32* v)
        {
            Delegates.glRasterPos2iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2s")]
        public static 
        void RasterPos2(Int16 x, Int16 y)
        {
            Delegates.glRasterPos2s((Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static 
        void RasterPos2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static 
        void RasterPos2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos2sv")]
        public static 
        unsafe void RasterPos2(Int16* v)
        {
            Delegates.glRasterPos2sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3d")]
        public static 
        void RasterPos3(Double x, Double y, Double z)
        {
            Delegates.glRasterPos3d((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static 
        void RasterPos3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static 
        void RasterPos3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3dv")]
        public static 
        unsafe void RasterPos3(Double* v)
        {
            Delegates.glRasterPos3dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3f")]
        public static 
        void RasterPos3(Single x, Single y, Single z)
        {
            Delegates.glRasterPos3f((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static 
        void RasterPos3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static 
        void RasterPos3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3fv")]
        public static 
        unsafe void RasterPos3(Single* v)
        {
            Delegates.glRasterPos3fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3i")]
        public static 
        void RasterPos3(Int32 x, Int32 y, Int32 z)
        {
            Delegates.glRasterPos3i((Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static 
        void RasterPos3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static 
        void RasterPos3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3iv")]
        public static 
        unsafe void RasterPos3(Int32* v)
        {
            Delegates.glRasterPos3iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3s")]
        public static 
        void RasterPos3(Int16 x, Int16 y, Int16 z)
        {
            Delegates.glRasterPos3s((Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static 
        void RasterPos3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static 
        void RasterPos3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos3sv")]
        public static 
        unsafe void RasterPos3(Int16* v)
        {
            Delegates.glRasterPos3sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4d")]
        public static 
        void RasterPos4(Double x, Double y, Double z, Double w)
        {
            Delegates.glRasterPos4d((Double)x, (Double)y, (Double)z, (Double)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static 
        void RasterPos4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static 
        void RasterPos4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4dv")]
        public static 
        unsafe void RasterPos4(Double* v)
        {
            Delegates.glRasterPos4dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4f")]
        public static 
        void RasterPos4(Single x, Single y, Single z, Single w)
        {
            Delegates.glRasterPos4f((Single)x, (Single)y, (Single)z, (Single)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static 
        void RasterPos4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static 
        void RasterPos4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4fv")]
        public static 
        unsafe void RasterPos4(Single* v)
        {
            Delegates.glRasterPos4fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4i")]
        public static 
        void RasterPos4(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glRasterPos4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static 
        void RasterPos4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static 
        void RasterPos4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4iv")]
        public static 
        unsafe void RasterPos4(Int32* v)
        {
            Delegates.glRasterPos4iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4s")]
        public static 
        void RasterPos4(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glRasterPos4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static 
        void RasterPos4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static 
        void RasterPos4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRasterPos4sv")]
        public static 
        unsafe void RasterPos4(Int16* v)
        {
            Delegates.glRasterPos4sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectd")]
        public static 
        void Rect(Double x1, Double y1, Double x2, Double y2)
        {
            Delegates.glRectd((Double)x1, (Double)y1, (Double)x2, (Double)y2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectdv")]
        public static 
        void Rect(Double[] v1, Double[] v2)
        {
            unsafe
            {
                fixed (Double* v1_ptr = v1)
                fixed (Double* v2_ptr = v2)
                {
                    Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectdv")]
        public static 
        void Rect(ref Double v1, ref Double v2)
        {
            unsafe
            {
                fixed (Double* v1_ptr = &v1)
                fixed (Double* v2_ptr = &v2)
                {
                    Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectdv")]
        public static 
        unsafe void Rect(Double* v1, Double* v2)
        {
            Delegates.glRectdv((Double*)v1, (Double*)v2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectf")]
        public static 
        void Rect(Single x1, Single y1, Single x2, Single y2)
        {
            Delegates.glRectf((Single)x1, (Single)y1, (Single)x2, (Single)y2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectfv")]
        public static 
        void Rect(Single[] v1, Single[] v2)
        {
            unsafe
            {
                fixed (Single* v1_ptr = v1)
                fixed (Single* v2_ptr = v2)
                {
                    Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectfv")]
        public static 
        void Rect(ref Single v1, ref Single v2)
        {
            unsafe
            {
                fixed (Single* v1_ptr = &v1)
                fixed (Single* v2_ptr = &v2)
                {
                    Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectfv")]
        public static 
        unsafe void Rect(Single* v1, Single* v2)
        {
            Delegates.glRectfv((Single*)v1, (Single*)v2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRecti")]
        public static 
        void Rect(Int32 x1, Int32 y1, Int32 x2, Int32 y2)
        {
            Delegates.glRecti((Int32)x1, (Int32)y1, (Int32)x2, (Int32)y2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectiv")]
        public static 
        void Rect(Int32[] v1, Int32[] v2)
        {
            unsafe
            {
                fixed (Int32* v1_ptr = v1)
                fixed (Int32* v2_ptr = v2)
                {
                    Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectiv")]
        public static 
        void Rect(ref Int32 v1, ref Int32 v2)
        {
            unsafe
            {
                fixed (Int32* v1_ptr = &v1)
                fixed (Int32* v2_ptr = &v2)
                {
                    Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectiv")]
        public static 
        unsafe void Rect(Int32* v1, Int32* v2)
        {
            Delegates.glRectiv((Int32*)v1, (Int32*)v2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRects")]
        public static 
        void Rects(Int16 x1, Int16 y1, Int16 x2, Int16 y2)
        {
            Delegates.glRects((Int16)x1, (Int16)y1, (Int16)x2, (Int16)y2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectsv")]
        public static 
        void Rect(Int16[] v1, Int16[] v2)
        {
            unsafe
            {
                fixed (Int16* v1_ptr = v1)
                fixed (Int16* v2_ptr = v2)
                {
                    Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectsv")]
        public static 
        void Rect(ref Int16 v1, ref Int16 v2)
        {
            unsafe
            {
                fixed (Int16* v1_ptr = &v1)
                fixed (Int16* v2_ptr = &v2)
                {
                    Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glRectsv")]
        public static 
        unsafe void Rect(Int16* v1, Int16* v2)
        {
            Delegates.glRectsv((Int16*)v1, (Int16*)v2);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1d")]
        public static 
        void TexCoord1(Double s)
        {
            Delegates.glTexCoord1d((Double)s);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1dv")]
        public static 
        void TexCoord1v(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord1dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1dv")]
        public static 
        void TexCoord1v(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord1dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1dv")]
        public static 
        unsafe void TexCoord1v(Double* v)
        {
            Delegates.glTexCoord1dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1f")]
        public static 
        void TexCoord1(Single s)
        {
            Delegates.glTexCoord1f((Single)s);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1fv")]
        public static 
        void TexCoord1v(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord1fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1fv")]
        public static 
        void TexCoord1v(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord1fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1fv")]
        public static 
        unsafe void TexCoord1v(Single* v)
        {
            Delegates.glTexCoord1fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1i")]
        public static 
        void TexCoord1(Int32 s)
        {
            Delegates.glTexCoord1i((Int32)s);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1iv")]
        public static 
        void TexCoord1v(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord1iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1iv")]
        public static 
        void TexCoord1v(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord1iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1iv")]
        public static 
        unsafe void TexCoord1v(Int32* v)
        {
            Delegates.glTexCoord1iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1s")]
        public static 
        void TexCoord1(Int16 s)
        {
            Delegates.glTexCoord1s((Int16)s);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1sv")]
        public static 
        void TexCoord1v(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord1sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1sv")]
        public static 
        void TexCoord1v(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord1sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord1sv")]
        public static 
        unsafe void TexCoord1v(Int16* v)
        {
            Delegates.glTexCoord1sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2d")]
        public static 
        void TexCoord2(Double s, Double t)
        {
            Delegates.glTexCoord2d((Double)s, (Double)t);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static 
        void TexCoord2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static 
        void TexCoord2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2dv")]
        public static 
        unsafe void TexCoord2(Double* v)
        {
            Delegates.glTexCoord2dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2f")]
        public static 
        void TexCoord2(Single s, Single t)
        {
            Delegates.glTexCoord2f((Single)s, (Single)t);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static 
        void TexCoord2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static 
        void TexCoord2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2fv")]
        public static 
        unsafe void TexCoord2(Single* v)
        {
            Delegates.glTexCoord2fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2i")]
        public static 
        void TexCoord2(Int32 s, Int32 t)
        {
            Delegates.glTexCoord2i((Int32)s, (Int32)t);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static 
        void TexCoord2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static 
        void TexCoord2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2iv")]
        public static 
        unsafe void TexCoord2(Int32* v)
        {
            Delegates.glTexCoord2iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2s")]
        public static 
        void TexCoord2(Int16 s, Int16 t)
        {
            Delegates.glTexCoord2s((Int16)s, (Int16)t);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static 
        void TexCoord2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static 
        void TexCoord2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord2sv")]
        public static 
        unsafe void TexCoord2(Int16* v)
        {
            Delegates.glTexCoord2sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3d")]
        public static 
        void TexCoord3(Double s, Double t, Double r)
        {
            Delegates.glTexCoord3d((Double)s, (Double)t, (Double)r);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static 
        void TexCoord3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static 
        void TexCoord3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3dv")]
        public static 
        unsafe void TexCoord3(Double* v)
        {
            Delegates.glTexCoord3dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3f")]
        public static 
        void TexCoord3(Single s, Single t, Single r)
        {
            Delegates.glTexCoord3f((Single)s, (Single)t, (Single)r);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static 
        void TexCoord3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static 
        void TexCoord3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3fv")]
        public static 
        unsafe void TexCoord3(Single* v)
        {
            Delegates.glTexCoord3fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3i")]
        public static 
        void TexCoord3(Int32 s, Int32 t, Int32 r)
        {
            Delegates.glTexCoord3i((Int32)s, (Int32)t, (Int32)r);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static 
        void TexCoord3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static 
        void TexCoord3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3iv")]
        public static 
        unsafe void TexCoord3(Int32* v)
        {
            Delegates.glTexCoord3iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3s")]
        public static 
        void TexCoord3(Int16 s, Int16 t, Int16 r)
        {
            Delegates.glTexCoord3s((Int16)s, (Int16)t, (Int16)r);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static 
        void TexCoord3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static 
        void TexCoord3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord3sv")]
        public static 
        unsafe void TexCoord3(Int16* v)
        {
            Delegates.glTexCoord3sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4d")]
        public static 
        void TexCoord4(Double s, Double t, Double r, Double q)
        {
            Delegates.glTexCoord4d((Double)s, (Double)t, (Double)r, (Double)q);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static 
        void TexCoord4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static 
        void TexCoord4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4dv")]
        public static 
        unsafe void TexCoord4(Double* v)
        {
            Delegates.glTexCoord4dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4f")]
        public static 
        void TexCoord4(Single s, Single t, Single r, Single q)
        {
            Delegates.glTexCoord4f((Single)s, (Single)t, (Single)r, (Single)q);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static 
        void TexCoord4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static 
        void TexCoord4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4fv")]
        public static 
        unsafe void TexCoord4(Single* v)
        {
            Delegates.glTexCoord4fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4i")]
        public static 
        void TexCoord4(Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Delegates.glTexCoord4i((Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static 
        void TexCoord4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static 
        void TexCoord4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4iv")]
        public static 
        unsafe void TexCoord4(Int32* v)
        {
            Delegates.glTexCoord4iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4s")]
        public static 
        void TexCoord4(Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Delegates.glTexCoord4s((Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static 
        void TexCoord4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static 
        void TexCoord4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glTexCoord4sv")]
        public static 
        unsafe void TexCoord4(Int16* v)
        {
            Delegates.glTexCoord4sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2d")]
        public static 
        void Vertex2(Double x, Double y)
        {
            Delegates.glVertex2d((Double)x, (Double)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static 
        void Vertex2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static 
        void Vertex2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2dv")]
        public static 
        unsafe void Vertex2(Double* v)
        {
            Delegates.glVertex2dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2f")]
        public static 
        void Vertex2(Single x, Single y)
        {
            Delegates.glVertex2f((Single)x, (Single)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static 
        void Vertex2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static 
        void Vertex2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2fv")]
        public static 
        unsafe void Vertex2(Single* v)
        {
            Delegates.glVertex2fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2i")]
        public static 
        void Vertex2(Int32 x, Int32 y)
        {
            Delegates.glVertex2i((Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static 
        void Vertex2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static 
        void Vertex2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2iv")]
        public static 
        unsafe void Vertex2(Int32* v)
        {
            Delegates.glVertex2iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2s")]
        public static 
        void Vertex2(Int16 x, Int16 y)
        {
            Delegates.glVertex2s((Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static 
        void Vertex2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static 
        void Vertex2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex2sv")]
        public static 
        unsafe void Vertex2(Int16* v)
        {
            Delegates.glVertex2sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3d")]
        public static 
        void Vertex3(Double x, Double y, Double z)
        {
            Delegates.glVertex3d((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static 
        void Vertex3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static 
        void Vertex3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3dv")]
        public static 
        unsafe void Vertex3(Double* v)
        {
            Delegates.glVertex3dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3f")]
        public static 
        void Vertex3(Single x, Single y, Single z)
        {
            Delegates.glVertex3f((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static 
        void Vertex3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static 
        void Vertex3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3fv")]
        public static 
        unsafe void Vertex3(Single* v)
        {
            Delegates.glVertex3fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3i")]
        public static 
        void Vertex3(Int32 x, Int32 y, Int32 z)
        {
            Delegates.glVertex3i((Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static 
        void Vertex3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static 
        void Vertex3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3iv")]
        public static 
        unsafe void Vertex3(Int32* v)
        {
            Delegates.glVertex3iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3s")]
        public static 
        void Vertex3(Int16 x, Int16 y, Int16 z)
        {
            Delegates.glVertex3s((Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static 
        void Vertex3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static 
        void Vertex3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex3sv")]
        public static 
        unsafe void Vertex3(Int16* v)
        {
            Delegates.glVertex3sv((Int16*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4d")]
        public static 
        void Vertex4(Double x, Double y, Double z, Double w)
        {
            Delegates.glVertex4d((Double)x, (Double)y, (Double)z, (Double)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static 
        void Vertex4(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex4dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static 
        void Vertex4(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex4dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4dv")]
        public static 
        unsafe void Vertex4(Double* v)
        {
            Delegates.glVertex4dv((Double*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4f")]
        public static 
        void Vertex4(Single x, Single y, Single z, Single w)
        {
            Delegates.glVertex4f((Single)x, (Single)y, (Single)z, (Single)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static 
        void Vertex4(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex4fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static 
        void Vertex4(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex4fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4fv")]
        public static 
        unsafe void Vertex4(Single* v)
        {
            Delegates.glVertex4fv((Single*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4i")]
        public static 
        void Vertex4(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glVertex4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static 
        void Vertex4(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex4iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static 
        void Vertex4(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex4iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4iv")]
        public static 
        unsafe void Vertex4(Int32* v)
        {
            Delegates.glVertex4iv((Int32*)v);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4s")]
        public static 
        void Vertex4(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glVertex4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static 
        void Vertex4(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex4sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static 
        void Vertex4(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex4sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Drawing", Version = "1.0", EntryPoint = "glVertex4sv")]
        public static 
        unsafe void Vertex4(Int16* v)
        {
            Delegates.glVertex4sv((Int16*)v);
        }

        
        /// <summary>
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted.
        /// </para>
        /// </param>
        /// <param name="equation">
        /// <para>
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glClipPlane")]
        public static 
        void ClipPlane(OpenTK.Graphics.ClipPlaneName plane, Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glClipPlane((OpenTK.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        
        /// <summary>
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted.
        /// </para>
        /// </param>
        /// <param name="equation">
        /// <para>
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glClipPlane")]
        public static 
        void ClipPlane(OpenTK.Graphics.ClipPlaneName plane, ref Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glClipPlane((OpenTK.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        
        /// <summary>
        /// Specify a plane against which all geometry is clipped
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies which clipping plane is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted.
        /// </para>
        /// </param>
        /// <param name="equation">
        /// <para>
        /// Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glClipPlane")]
        public static 
        unsafe void ClipPlane(OpenTK.Graphics.ClipPlaneName plane, Double* equation)
        {
            Delegates.glClipPlane((OpenTK.Graphics.ClipPlaneName)plane, (Double*)equation);
        }

        
        /// <summary>
        /// Cause a material color to track the current color
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. The initial value is GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies which of several material parameters track the current color. Accepted values are GL_EMISSION, GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, and GL_AMBIENT_AND_DIFFUSE. The initial value is GL_AMBIENT_AND_DIFFUSE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glColorMaterial")]
        public static 
        void ColorMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.ColorMaterialParameter mode)
        {
            Delegates.glColorMaterial((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.ColorMaterialParameter)mode);
        }

        
        /// <summary>
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glCullFace")]
        public static 
        void CullFace(OpenTK.Graphics.CullFaceMode mode)
        {
            Delegates.glCullFace((OpenTK.Graphics.CullFaceMode)mode);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogf")]
        public static 
        void Fog(OpenTK.Graphics.FogParameter pname, Single param)
        {
            Delegates.glFogf((OpenTK.Graphics.FogParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogfv")]
        public static 
        void Fogv(OpenTK.Graphics.FogParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glFogfv((OpenTK.Graphics.FogParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogfv")]
        public static 
        void Fogv(OpenTK.Graphics.FogParameter pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glFogfv((OpenTK.Graphics.FogParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogfv")]
        public static 
        unsafe void Fogv(OpenTK.Graphics.FogParameter pname, Single* @params)
        {
            Delegates.glFogfv((OpenTK.Graphics.FogParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogi")]
        public static 
        void Fog(OpenTK.Graphics.FogParameter pname, Int32 param)
        {
            Delegates.glFogi((OpenTK.Graphics.FogParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogiv")]
        public static 
        void Fogv(OpenTK.Graphics.FogParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glFogiv((OpenTK.Graphics.FogParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogiv")]
        public static 
        void Fogv(OpenTK.Graphics.FogParameter pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glFogiv((OpenTK.Graphics.FogParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFogiv")]
        public static 
        unsafe void Fogv(OpenTK.Graphics.FogParameter pname, Int32* @params)
        {
            Delegates.glFogiv((OpenTK.Graphics.FogParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The initial value is GL_CCW.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glFrontFace")]
        public static 
        void FrontFace(OpenTK.Graphics.FrontFaceDirection mode)
        {
            Delegates.glFrontFace((OpenTK.Graphics.FrontFaceDirection)mode);
        }

        
        /// <summary>
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a symbolic constant indicating the behavior to be controlled. GL_FOG_HINT, GL_GENERATE_MIPMAP_HINT, GL_LINE_SMOOTH_HINT, GL_PERSPECTIVE_CORRECTION_HINT, GL_POINT_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glHint")]
        public static 
        void Hint(OpenTK.Graphics.HintTarget target, OpenTK.Graphics.HintMode mode)
        {
            Delegates.glHint((OpenTK.Graphics.HintTarget)target, (OpenTK.Graphics.HintMode)mode);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightf")]
        public static 
        void Light(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, Single param)
        {
            Delegates.glLightf((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightfv")]
        public static 
        void Lightv(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightfv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightfv")]
        public static 
        void Lightv(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glLightfv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightfv")]
        public static 
        unsafe void Lightv(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, Single* @params)
        {
            Delegates.glLightfv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLighti")]
        public static 
        void Light(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, Int32 param)
        {
            Delegates.glLighti((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightiv")]
        public static 
        void Lightv(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightiv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightiv")]
        public static 
        void Lightv(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glLightiv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightiv")]
        public static 
        unsafe void Lightv(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, Int32* @params)
        {
            Delegates.glLightiv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModelf")]
        public static 
        void LightModel(OpenTK.Graphics.LightModelParameter pname, Single param)
        {
            Delegates.glLightModelf((OpenTK.Graphics.LightModelParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static 
        void LightModelv(OpenTK.Graphics.LightModelParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightModelfv((OpenTK.Graphics.LightModelParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static 
        void LightModelv(OpenTK.Graphics.LightModelParameter pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glLightModelfv((OpenTK.Graphics.LightModelParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModelfv")]
        public static 
        unsafe void LightModelv(OpenTK.Graphics.LightModelParameter pname, Single* @params)
        {
            Delegates.glLightModelfv((OpenTK.Graphics.LightModelParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModeli")]
        public static 
        void LightModel(OpenTK.Graphics.LightModelParameter pname, Int32 param)
        {
            Delegates.glLightModeli((OpenTK.Graphics.LightModelParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static 
        void LightModelv(OpenTK.Graphics.LightModelParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightModeliv((OpenTK.Graphics.LightModelParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static 
        void LightModelv(OpenTK.Graphics.LightModelParameter pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glLightModeliv((OpenTK.Graphics.LightModelParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLightModeliv")]
        public static 
        unsafe void LightModelv(OpenTK.Graphics.LightModelParameter pname, Int32* @params)
        {
            Delegates.glLightModeliv((OpenTK.Graphics.LightModelParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Specify the line stipple pattern
        /// </summary>
        /// <param name="factor">
        /// <para>
        /// Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.
        /// </para>
        /// </param>
        /// <param name="pattern">
        /// <para>
        /// Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLineStipple")]
        public static 
        void LineStipple(Int32 factor, UInt16 pattern)
        {
            unsafe
            {
                Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
            }
        }

        
        /// <summary>
        /// Specify the line stipple pattern
        /// </summary>
        /// <param name="factor">
        /// <para>
        /// Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.
        /// </para>
        /// </param>
        /// <param name="pattern">
        /// <para>
        /// Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLineStipple")]
        public static 
        void LineStipple(Int32 factor, Int16 pattern)
        {
            unsafe
            {
                Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
            }
        }

        
        /// <summary>
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glLineWidth")]
        public static 
        void LineWidth(Single width)
        {
            Delegates.glLineWidth((Single)width);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMaterialf")]
        public static 
        void Material(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Single param)
        {
            Delegates.glMaterialf((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static 
        void Materialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glMaterialfv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static 
        void Materialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glMaterialfv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMaterialfv")]
        public static 
        unsafe void Materialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Single* @params)
        {
            Delegates.glMaterialfv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMateriali")]
        public static 
        void Material(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Int32 param)
        {
            Delegates.glMateriali((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static 
        void Materialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glMaterialiv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static 
        void Materialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glMaterialiv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glMaterialiv")]
        public static 
        unsafe void Materialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Int32* @params)
        {
            Delegates.glMaterialiv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Specify the diameter of rasterized points
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the diameter of rasterized points. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glPointSize")]
        public static 
        void PointSize(Single size)
        {
            Delegates.glPointSize((Single)size);
        }

        
        /// <summary>
        /// Select a polygon rasterization mode
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies the polygons that mode applies to. Must be GL_FRONT for front-facing polygons, GL_BACK for back-facing polygons, or GL_FRONT_AND_BACK for front- and back-facing polygons.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies how polygons will be rasterized. Accepted values are GL_POINT, GL_LINE, and GL_FILL. The initial value is GL_FILL for both front- and back-facing polygons.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glPolygonMode")]
        public static 
        void PolygonMode(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.PolygonMode mode)
        {
            Delegates.glPolygonMode((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.PolygonMode)mode);
        }

        
        /// <summary>
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="pattern">
        /// <para>
        /// Specifies a pointer to a 32 times 32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static 
        void PolygonStipple(Byte[] mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Delegates.glPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        
        /// <summary>
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="pattern">
        /// <para>
        /// Specifies a pointer to a 32 times 32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static 
        void PolygonStipple(ref Byte mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Delegates.glPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        
        /// <summary>
        /// Set the polygon stippling pattern
        /// </summary>
        /// <param name="pattern">
        /// <para>
        /// Specifies a pointer to a 32 times 32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glPolygonStipple")]
        public static 
        unsafe void PolygonStipple(Byte* mask)
        {
            Delegates.glPolygonStipple((Byte*)mask);
        }

        
        /// <summary>
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glScissor")]
        public static 
        void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        
        /// <summary>
        /// Select flat or smooth shading
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies a symbolic value representing a shading technique. Accepted values are GL_FLAT and GL_SMOOTH. The initial value is GL_SMOOTH.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glShadeModel")]
        public static 
        void ShadeModel(OpenTK.Graphics.ShadingModel mode)
        {
            Delegates.glShadeModel((OpenTK.Graphics.ShadingModel)mode);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameterf")]
        public static 
        void TexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single param)
        {
            Delegates.glTexParameterf((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static 
        void TexParameterv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexParameterfv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static 
        void TexParameterv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glTexParameterfv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameterfv")]
        public static 
        unsafe void TexParameterv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single* @params)
        {
            Delegates.glTexParameterfv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameteri")]
        public static 
        void TexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32 param)
        {
            Delegates.glTexParameteri((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static 
        void TexParameterv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameteriv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static 
        void TexParameterv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glTexParameteriv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexParameteriv")]
        public static 
        unsafe void TexParameterv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
        {
            Delegates.glTexParameteriv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static 
        void TexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                Delegates.glTexImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Specify a one-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexImage1D")]
        public static 
        void TexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static 
        void TexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                Delegates.glTexImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexImage2D")]
        public static 
        void TexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnvf")]
        public static 
        void TexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Single param)
        {
            Delegates.glTexEnvf((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static 
        void TexEnvv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexEnvfv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static 
        void TexEnvv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glTexEnvfv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnvfv")]
        public static 
        unsafe void TexEnvv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Single* @params)
        {
            Delegates.glTexEnvfv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnvi")]
        public static 
        void TexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Int32 param)
        {
            Delegates.glTexEnvi((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static 
        void TexEnvv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexEnviv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static 
        void TexEnvv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glTexEnviv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexEnviv")]
        public static 
        unsafe void TexEnvv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Int32* @params)
        {
            Delegates.glTexEnviv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGend")]
        public static 
        void TexGend(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Double param)
        {
            Delegates.glTexGend((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGendv")]
        public static 
        void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glTexGendv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGendv")]
        public static 
        void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, ref Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glTexGendv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGendv")]
        public static 
        unsafe void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Double* @params)
        {
            Delegates.glTexGendv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGenf")]
        public static 
        void TexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Single param)
        {
            Delegates.glTexGenf((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static 
        void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexGenfv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static 
        void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glTexGenfv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGenfv")]
        public static 
        unsafe void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Single* @params)
        {
            Delegates.glTexGenfv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGeni")]
        public static 
        void TexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Int32 param)
        {
            Delegates.glTexGeni((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static 
        void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexGeniv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static 
        void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glTexGeniv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "DrawingControl", Version = "1.0", EntryPoint = "glTexGeniv")]
        public static 
        unsafe void TexGenv(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Int32* @params)
        {
            Delegates.glTexGeniv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the maximum number of values that can be written into buffer.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the feedback data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static 
        void FeedbackBuffer(Int32 size, OpenTK.Graphics.FeedbackType type, [Out] Single[] buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.FeedbackType)type, (Single*)buffer_ptr);
                }
            }
        }

        
        /// <summary>
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the maximum number of values that can be written into buffer.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the feedback data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static 
        void FeedbackBuffer(Int32 size, OpenTK.Graphics.FeedbackType type, [Out] out Single buffer)
        {
            unsafe
            {
                fixed (Single* buffer_ptr = &buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.FeedbackType)type, (Single*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        
        /// <summary>
        /// Controls feedback mode
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the maximum number of values that can be written into buffer.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a symbolic constant that describes the information that will be returned for each vertex. GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the feedback data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
        public static 
        unsafe void FeedbackBuffer(Int32 size, OpenTK.Graphics.FeedbackType type, [Out] Single* buffer)
        {
            Delegates.glFeedbackBuffer((Int32)size, (OpenTK.Graphics.FeedbackType)type, (Single*)buffer);
        }

        
        /// <summary>
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the size of buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the selection data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static 
        void SelectBuffer(Int32 size, [Out] UInt32[] buffer)
        {
            unsafe
            {
                fixed (UInt32* buffer_ptr = buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
        }

        
        /// <summary>
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the size of buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the selection data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static 
        void SelectBuffer(Int32 size, [Out] Int32[] buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
        }

        
        /// <summary>
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the size of buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the selection data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static 
        void SelectBuffer(Int32 size, [Out] out UInt32 buffer)
        {
            unsafe
            {
                fixed (UInt32* buffer_ptr = &buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        
        /// <summary>
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the size of buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the selection data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static 
        void SelectBuffer(Int32 size, [Out] out Int32 buffer)
        {
            unsafe
            {
                fixed (Int32* buffer_ptr = &buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }

        
        /// <summary>
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the size of buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the selection data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static 
        unsafe void SelectBuffer(Int32 size, [Out] UInt32* buffer)
        {
            Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
        }

        
        /// <summary>
        /// Establish a buffer for selection mode values
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the size of buffer.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Returns the selection data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glSelectBuffer")]
        public static 
        unsafe void SelectBuffer(Int32 size, [Out] Int32* buffer)
        {
            Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
        }

        
        /// <summary>
        /// Set rasterization mode
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies the rasterization mode. Three values are accepted: GL_RENDER, GL_SELECT, and GL_FEEDBACK. The initial value is GL_RENDER.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glRenderMode")]
        public static 
        Int32 RenderMode(OpenTK.Graphics.RenderingMode mode)
        {
            return Delegates.glRenderMode((OpenTK.Graphics.RenderingMode)mode);
        }

        
        /// <summary>
        /// Initialize the name stack
        /// </summary>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glInitNames")]
        public static 
        void InitNames()
        {
            Delegates.glInitNames();
        }

        
        /// <summary>
        /// Load a name onto the name stack
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a name that will replace the top value on the name stack.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glLoadName")]
        public static 
        void LoadName(UInt32 name)
        {
            Delegates.glLoadName((UInt32)name);
        }

        
        /// <summary>
        /// Load a name onto the name stack
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a name that will replace the top value on the name stack.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glLoadName")]
        public static 
        void LoadName(Int32 name)
        {
            Delegates.glLoadName((UInt32)name);
        }

        
        /// <summary>
        /// Place a marker in the feedback buffer
        /// </summary>
        /// <param name="token">
        /// <para>
        /// Specifies a marker value to be placed in the feedback buffer following a GL_PASS_THROUGH_TOKEN.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glPassThrough")]
        public static 
        void PassThrough(Single token)
        {
            Delegates.glPassThrough((Single)token);
        }

        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glPopName")]
        public static 
        void PopName()
        {
            Delegates.glPopName();
        }

        
        /// <summary>
        /// Push and pop the name stack
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a name that will be pushed onto the name stack.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glPushName")]
        public static 
        void PushName(UInt32 name)
        {
            Delegates.glPushName((UInt32)name);
        }

        
        /// <summary>
        /// Push and pop the name stack
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a name that will be pushed onto the name stack.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Feedback", Version = "1.0", EntryPoint = "glPushName")]
        public static 
        void PushName(Int32 name)
        {
            Delegates.glPushName((UInt32)name);
        }

        
        /// <summary>
        /// Specify which color buffers are to be drawn into
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies up to four color buffers to be drawn into. Symbolic constants GL_NONE, GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, GL_FRONT_AND_BACK, and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1, are accepted. (GL_AUX_BUFFERS is not the upper limit; use glGet to query the number of available aux buffers.) The initial value is GL_FRONT for single-buffered contexts, and GL_BACK for double-buffered contexts.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glDrawBuffer")]
        public static 
        void DrawBuffer(OpenTK.Graphics.DrawBufferMode mode)
        {
            Delegates.glDrawBuffer((OpenTK.Graphics.DrawBufferMode)mode);
        }

        
        /// <summary>
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Bitwise OR of masks that indicate the buffers to be cleared. The four masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_ACCUM_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glClear")]
        public static 
        void Clear(OpenTK.Graphics.ClearBufferMask mask)
        {
            Delegates.glClear((OpenTK.Graphics.ClearBufferMask)mask);
        }

        
        /// <summary>
        /// Specify clear values for the accumulation buffer
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glClearAccum")]
        public static 
        void ClearAccum(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glClearAccum((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        
        /// <summary>
        /// Specify the clear value for the color index buffers
        /// </summary>
        /// <param name="c">
        /// <para>
        /// Specifies the index used when the color index buffers are cleared. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glClearIndex")]
        public static 
        void ClearIndex(Single c)
        {
            Delegates.glClearIndex((Single)c);
        }

        
        /// <summary>
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glClearColor")]
        public static 
        void ClearColor(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        
        /// <summary>
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// <para>
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glClearStencil")]
        public static 
        void ClearStencil(Int32 s)
        {
            Delegates.glClearStencil((Int32)s);
        }

        
        /// <summary>
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glClearDepth")]
        public static 
        void ClearDepth(Double depth)
        {
            Delegates.glClearDepth((Double)depth);
        }

        
        /// <summary>
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glStencilMask")]
        public static 
        void StencilMask(UInt32 mask)
        {
            Delegates.glStencilMask((UInt32)mask);
        }

        
        /// <summary>
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glStencilMask")]
        public static 
        void StencilMask(Int32 mask)
        {
            Delegates.glStencilMask((UInt32)mask);
        }

        
        /// <summary>
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glColorMask")]
        public static 
        void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            Delegates.glColorMask((bool)red, (bool)green, (bool)blue, (bool)alpha);
        }

        
        /// <summary>
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// <para>
        /// Specifies whether the depth buffer is enabled for writing. If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glDepthMask")]
        public static 
        void DepthMask(bool flag)
        {
            Delegates.glDepthMask((bool)flag);
        }

        
        /// <summary>
        /// Control the writing of individual bits in the color index buffers
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glIndexMask")]
        public static 
        void IndexMask(UInt32 mask)
        {
            Delegates.glIndexMask((UInt32)mask);
        }

        
        /// <summary>
        /// Control the writing of individual bits in the color index buffers
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Framebuf", Version = "1.0", EntryPoint = "glIndexMask")]
        public static 
        void IndexMask(Int32 mask)
        {
            Delegates.glIndexMask((UInt32)mask);
        }

        
        /// <summary>
        /// Operate on the accumulation buffer
        /// </summary>
        /// <param name="op">
        /// <para>
        /// Specifies the accumulation buffer operation. Symbolic constants GL_ACCUM, GL_LOAD, GL_ADD, GL_MULT, and GL_RETURN are accepted.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies a floating-point value used in the accumulation buffer operation. op determines how value is used.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Misc", Version = "1.0", EntryPoint = "glAccum")]
        public static 
        void Accum(OpenTK.Graphics.AccumOp op, Single value)
        {
            Delegates.glAccum((OpenTK.Graphics.AccumOp)op, (Single)value);
        }

        [AutoGenerated(Category = "Misc", Version = "1.0", EntryPoint = "glDisable")]
        public static 
        void Disable(OpenTK.Graphics.EnableCap cap)
        {
            Delegates.glDisable((OpenTK.Graphics.EnableCap)cap);
        }

        
        /// <summary>
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Misc", Version = "1.0", EntryPoint = "glEnable")]
        public static 
        void Enable(OpenTK.Graphics.EnableCap cap)
        {
            Delegates.glEnable((OpenTK.Graphics.EnableCap)cap);
        }

        
        /// <summary>
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "Misc", Version = "1.0", EntryPoint = "glFinish")]
        public static 
        void Finish()
        {
            Delegates.glFinish();
        }

        
        /// <summary>
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "Misc", Version = "1.0", EntryPoint = "glFlush")]
        public static 
        void Flush()
        {
            Delegates.glFlush();
        }

        [AutoGenerated(Category = "Misc", Version = "1.0", EntryPoint = "glPopAttrib")]
        public static 
        void PopAttrib()
        {
            Delegates.glPopAttrib();
        }

        
        /// <summary>
        /// Push and pop the server attribute stack
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that indicates which attributes to save. Values for mask are listed below.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Misc", Version = "1.0", EntryPoint = "glPushAttrib")]
        public static 
        void PushAttrib(OpenTK.Graphics.AttribMask mask)
        {
            Delegates.glPushAttrib((OpenTK.Graphics.AttribMask)mask);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap1d")]
        public static 
        void Map1(OpenTK.Graphics.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap1d((OpenTK.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap1d")]
        public static 
        void Map1(OpenTK.Graphics.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap1d((OpenTK.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap1d")]
        public static 
        unsafe void Map1(OpenTK.Graphics.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double* points)
        {
            Delegates.glMap1d((OpenTK.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap1f")]
        public static 
        void Map1(OpenTK.Graphics.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap1f((OpenTK.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap1f")]
        public static 
        void Map1(OpenTK.Graphics.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap1f((OpenTK.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap1f")]
        public static 
        unsafe void Map1(OpenTK.Graphics.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single* points)
        {
            Delegates.glMap1f((OpenTK.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap2d")]
        public static 
        void Map2(OpenTK.Graphics.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
        {
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap2d((OpenTK.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap2d")]
        public static 
        void Map2(OpenTK.Graphics.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
        {
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap2d((OpenTK.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap2d")]
        public static 
        unsafe void Map2(OpenTK.Graphics.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double* points)
        {
            Delegates.glMap2d((OpenTK.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap2f")]
        public static 
        void Map2(OpenTK.Graphics.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
        {
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap2f((OpenTK.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap2f")]
        public static 
        void Map2(OpenTK.Graphics.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
        {
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap2f((OpenTK.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMap2f")]
        public static 
        unsafe void Map2(OpenTK.Graphics.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single* points)
        {
            Delegates.glMap2f((OpenTK.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMapGrid1d")]
        public static 
        void MapGrid1(Int32 un, Double u1, Double u2)
        {
            Delegates.glMapGrid1d((Int32)un, (Double)u1, (Double)u2);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMapGrid1f")]
        public static 
        void MapGrid1(Int32 un, Single u1, Single u2)
        {
            Delegates.glMapGrid1f((Int32)un, (Single)u1, (Single)u2);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMapGrid2d")]
        public static 
        void MapGrid2(Int32 un, Double u1, Double u2, Int32 vn, Double v1, Double v2)
        {
            Delegates.glMapGrid2d((Int32)un, (Double)u1, (Double)u2, (Int32)vn, (Double)v1, (Double)v2);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glMapGrid2f")]
        public static 
        void MapGrid2(Int32 un, Single u1, Single u2, Int32 vn, Single v1, Single v2)
        {
            Delegates.glMapGrid2f((Int32)un, (Single)u1, (Single)u2, (Int32)vn, (Single)v1, (Single)v2);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1d")]
        public static 
        void EvalCoord1(Double u)
        {
            Delegates.glEvalCoord1d((Double)u);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1dv")]
        public static 
        void EvalCoord1v(Double[] u)
        {
            unsafe
            {
                fixed (Double* u_ptr = u)
                {
                    Delegates.glEvalCoord1dv((Double*)u_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1dv")]
        public static 
        void EvalCoord1v(ref Double u)
        {
            unsafe
            {
                fixed (Double* u_ptr = &u)
                {
                    Delegates.glEvalCoord1dv((Double*)u_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1dv")]
        public static 
        unsafe void EvalCoord1v(Double* u)
        {
            Delegates.glEvalCoord1dv((Double*)u);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1f")]
        public static 
        void EvalCoord1(Single u)
        {
            Delegates.glEvalCoord1f((Single)u);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1fv")]
        public static 
        void EvalCoord1v(Single[] u)
        {
            unsafe
            {
                fixed (Single* u_ptr = u)
                {
                    Delegates.glEvalCoord1fv((Single*)u_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1fv")]
        public static 
        void EvalCoord1v(ref Single u)
        {
            unsafe
            {
                fixed (Single* u_ptr = &u)
                {
                    Delegates.glEvalCoord1fv((Single*)u_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord1fv")]
        public static 
        unsafe void EvalCoord1v(Single* u)
        {
            Delegates.glEvalCoord1fv((Single*)u);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2d")]
        public static 
        void EvalCoord2(Double u, Double v)
        {
            Delegates.glEvalCoord2d((Double)u, (Double)v);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static 
        void EvalCoord2(Double[] u)
        {
            unsafe
            {
                fixed (Double* u_ptr = u)
                {
                    Delegates.glEvalCoord2dv((Double*)u_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static 
        void EvalCoord2(ref Double u)
        {
            unsafe
            {
                fixed (Double* u_ptr = &u)
                {
                    Delegates.glEvalCoord2dv((Double*)u_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
        public static 
        unsafe void EvalCoord2(Double* u)
        {
            Delegates.glEvalCoord2dv((Double*)u);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2f")]
        public static 
        void EvalCoord2(Single u, Single v)
        {
            Delegates.glEvalCoord2f((Single)u, (Single)v);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static 
        void EvalCoord2(Single[] u)
        {
            unsafe
            {
                fixed (Single* u_ptr = u)
                {
                    Delegates.glEvalCoord2fv((Single*)u_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static 
        void EvalCoord2(ref Single u)
        {
            unsafe
            {
                fixed (Single* u_ptr = &u)
                {
                    Delegates.glEvalCoord2fv((Single*)u_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
        public static 
        unsafe void EvalCoord2(Single* u)
        {
            Delegates.glEvalCoord2fv((Single*)u);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalMesh1")]
        public static 
        void EvalMesh1(OpenTK.Graphics.MeshMode1 mode, Int32 i1, Int32 i2)
        {
            Delegates.glEvalMesh1((OpenTK.Graphics.MeshMode1)mode, (Int32)i1, (Int32)i2);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalPoint1")]
        public static 
        void EvalPoint1(Int32 i)
        {
            Delegates.glEvalPoint1((Int32)i);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalMesh2")]
        public static 
        void EvalMesh2(OpenTK.Graphics.MeshMode2 mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2)
        {
            Delegates.glEvalMesh2((OpenTK.Graphics.MeshMode2)mode, (Int32)i1, (Int32)i2, (Int32)j1, (Int32)j2);
        }

        [AutoGenerated(Category = "Modeling", Version = "1.0", EntryPoint = "glEvalPoint2")]
        public static 
        void EvalPoint2(Int32 i, Int32 j)
        {
            Delegates.glEvalPoint2((Int32)i, (Int32)j);
        }

        
        /// <summary>
        /// Specify the alpha test function
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the alpha comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelOp", Version = "1.0", EntryPoint = "glAlphaFunc")]
        public static 
        void AlphaFunc(OpenTK.Graphics.AlphaFunction func, Single @ref)
        {
            Delegates.glAlphaFunc((OpenTK.Graphics.AlphaFunction)func, (Single)@ref);
        }

        
        /// <summary>
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelOp", Version = "1.0", EntryPoint = "glBlendFunc")]
        public static 
        void BlendFunc(OpenTK.Graphics.BlendingFactorSrc sfactor, OpenTK.Graphics.BlendingFactorDest dfactor)
        {
            Delegates.glBlendFunc((OpenTK.Graphics.BlendingFactorSrc)sfactor, (OpenTK.Graphics.BlendingFactorDest)dfactor);
        }

        
        /// <summary>
        /// Specify a logical pixel operation for color index rendering
        /// </summary>
        /// <param name="opcode">
        /// <para>
        /// Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: GL_CLEAR, GL_SET, GL_COPY, GL_COPY_INVERTED, GL_NOOP, GL_INVERT, GL_AND, GL_NAND, GL_OR, GL_NOR, GL_XOR, GL_EQUIV, GL_AND_REVERSE, GL_AND_INVERTED, GL_OR_REVERSE, and GL_OR_INVERTED. The initial value is GL_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelOp", Version = "1.0", EntryPoint = "glLogicOp")]
        public static 
        void LogicOp(OpenTK.Graphics.LogicOp opcode)
        {
            Delegates.glLogicOp((OpenTK.Graphics.LogicOp)opcode);
        }

        
        /// <summary>
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelOp", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static 
        void StencilFunc(OpenTK.Graphics.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            Delegates.glStencilFunc((OpenTK.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        
        /// <summary>
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelOp", Version = "1.0", EntryPoint = "glStencilFunc")]
        public static 
        void StencilFunc(OpenTK.Graphics.StencilFunction func, Int32 @ref, Int32 mask)
        {
            Delegates.glStencilFunc((OpenTK.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        
        /// <summary>
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelOp", Version = "1.0", EntryPoint = "glStencilOp")]
        public static 
        void StencilOp(OpenTK.Graphics.StencilOp fail, OpenTK.Graphics.StencilOp zfail, OpenTK.Graphics.StencilOp zpass)
        {
            Delegates.glStencilOp((OpenTK.Graphics.StencilOp)fail, (OpenTK.Graphics.StencilOp)zfail, (OpenTK.Graphics.StencilOp)zpass);
        }

        
        /// <summary>
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the depth comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_LESS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelOp", Version = "1.0", EntryPoint = "glDepthFunc")]
        public static 
        void DepthFunc(OpenTK.Graphics.DepthFunction func)
        {
            Delegates.glDepthFunc((OpenTK.Graphics.DepthFunction)func);
        }

        
        /// <summary>
        /// Specify the pixel zoom factors
        /// </summary>
        /// <param name="xfactor">
        /// <para>
        /// Specify the and zoom factors for pixel write operations.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelZoom")]
        public static 
        void PixelZoom(Single xfactor, Single yfactor)
        {
            Delegates.glPixelZoom((Single)xfactor, (Single)yfactor);
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelTransferf")]
        public static 
        void PixelTransfer(OpenTK.Graphics.PixelTransferParameter pname, Single param)
        {
            Delegates.glPixelTransferf((OpenTK.Graphics.PixelTransferParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelTransferi")]
        public static 
        void PixelTransfer(OpenTK.Graphics.PixelTransferParameter pname, Int32 param)
        {
            Delegates.glPixelTransferi((OpenTK.Graphics.PixelTransferParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelStoref")]
        public static 
        void PixelStore(OpenTK.Graphics.PixelStoreParameter pname, Single param)
        {
            Delegates.glPixelStoref((OpenTK.Graphics.PixelStoreParameter)pname, (Single)param);
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelStorei")]
        public static 
        void PixelStore(OpenTK.Graphics.PixelStoreParameter pname, Int32 param)
        {
            Delegates.glPixelStorei((OpenTK.Graphics.PixelStoreParameter)pname, (Int32)param);
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glPixelMapfv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, ref Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glPixelMapfv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapfv")]
        public static 
        unsafe void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, Single* values)
        {
            Delegates.glPixelMapfv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (Single*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, ref UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, ref Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static 
        unsafe void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, UInt32* values)
        {
            Delegates.glPixelMapuiv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapuiv")]
        public static 
        unsafe void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, Int32* values)
        {
            Delegates.glPixelMapuiv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, ref UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static 
        void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, ref Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static 
        unsafe void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, UInt16* values)
        {
            Delegates.glPixelMapusv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glPixelMapusv")]
        public static 
        unsafe void PixelMap(OpenTK.Graphics.PixelMap map, Int32 mapsize, Int16* values)
        {
            Delegates.glPixelMapusv((OpenTK.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values);
        }

        
        /// <summary>
        /// Select a color buffer source for pixels
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies a color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glReadBuffer")]
        public static 
        void ReadBuffer(OpenTK.Graphics.ReadBufferMode mode)
        {
            Delegates.glReadBuffer((OpenTK.Graphics.ReadBufferMode)mode);
        }

        
        /// <summary>
        /// Copy pixels in the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies whether color values, depth values, or stencil values are to be copied. Symbolic constants GL_COLOR, GL_DEPTH, and GL_STENCIL are accepted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glCopyPixels")]
        public static 
        void CopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.PixelCopyType type)
        {
            Delegates.glCopyPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelCopyType)type);
        }

        
        /// <summary>
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glReadPixels")]
        public static 
        void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr pixels)
        {
            unsafe
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glReadPixels")]
        public static 
        void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type for data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static 
        void DrawPixels(Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Write a block of pixels to the frame buffer
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle to be written into the frame buffer.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA are accepted.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type for data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the pixel data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "PixelRw", Version = "1.0", EntryPoint = "glDrawPixels")]
        public static 
        void DrawPixels(Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawPixels((Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
        /// </para>
        /// </param>
        /// <param name="equation">
        /// <para>
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static 
        void GetClipPlane(OpenTK.Graphics.ClipPlaneName plane, [Out] Double[] equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glGetClipPlane((OpenTK.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
        }

        
        /// <summary>
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
        /// </para>
        /// </param>
        /// <param name="equation">
        /// <para>
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static 
        void GetClipPlane(OpenTK.Graphics.ClipPlaneName plane, [Out] out Double equation)
        {
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glGetClipPlane((OpenTK.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
                    equation = *equation_ptr;
                }
            }
        }

        
        /// <summary>
        /// Return the coefficients of the specified clipping plane
        /// </summary>
        /// <param name="plane">
        /// <para>
        /// Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.
        /// </para>
        /// </param>
        /// <param name="equation">
        /// <para>
        /// Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetClipPlane")]
        public static 
        unsafe void GetClipPlane(OpenTK.Graphics.ClipPlaneName plane, [Out] Double* equation)
        {
            Delegates.glGetClipPlane((OpenTK.Graphics.ClipPlaneName)plane, (Double*)equation);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static 
        void GetDouble(OpenTK.Graphics.GetPName pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetDoublev((OpenTK.Graphics.GetPName)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static 
        void GetDouble(OpenTK.Graphics.GetPName pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetDoublev((OpenTK.Graphics.GetPName)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetDoublev")]
        public static 
        unsafe void GetDouble(OpenTK.Graphics.GetPName pname, [Out] Double* @params)
        {
            Delegates.glGetDoublev((OpenTK.Graphics.GetPName)pname, (Double*)@params);
        }

        
        /// <summary>
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetError")]
        public static 
        OpenTK.Graphics.ErrorCode GetError()
        {
            return Delegates.glGetError();
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static 
        void GetFloat(OpenTK.Graphics.GetPName pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetFloatv((OpenTK.Graphics.GetPName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static 
        void GetFloat(OpenTK.Graphics.GetPName pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetFloatv((OpenTK.Graphics.GetPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetFloatv")]
        public static 
        unsafe void GetFloat(OpenTK.Graphics.GetPName pname, [Out] Single* @params)
        {
            Delegates.glGetFloatv((OpenTK.Graphics.GetPName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static 
        void GetInteger(OpenTK.Graphics.GetPName pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetIntegerv((OpenTK.Graphics.GetPName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static 
        void GetInteger(OpenTK.Graphics.GetPName pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetIntegerv((OpenTK.Graphics.GetPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetIntegerv")]
        public static 
        unsafe void GetInteger(OpenTK.Graphics.GetPName pname, [Out] Int32* @params)
        {
            Delegates.glGetIntegerv((OpenTK.Graphics.GetPName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static 
        void GetLight(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetLightfv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static 
        void GetLight(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetLightfv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetLightfv")]
        public static 
        unsafe void GetLight(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, [Out] Single* @params)
        {
            Delegates.glGetLightfv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static 
        void GetLight(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetLightiv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static 
        void GetLight(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetLightiv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetLightiv")]
        public static 
        unsafe void GetLight(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetLightiv((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static 
        void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glGetMapdv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static 
        void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] out Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glGetMapdv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Double*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapdv")]
        public static 
        unsafe void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] Double* v)
        {
            Delegates.glGetMapdv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Double*)v);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static 
        void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glGetMapfv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static 
        void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] out Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glGetMapfv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Single*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapfv")]
        public static 
        unsafe void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] Single* v)
        {
            Delegates.glGetMapfv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Single*)v);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static 
        void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glGetMapiv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static 
        void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] out Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glGetMapiv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Int32*)v_ptr);
                    v = *v_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMapiv")]
        public static 
        unsafe void GetMap(OpenTK.Graphics.MapTarget target, OpenTK.Graphics.GetMapQuery query, [Out] Int32* v)
        {
            Delegates.glGetMapiv((OpenTK.Graphics.MapTarget)target, (OpenTK.Graphics.GetMapQuery)query, (Int32*)v);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static 
        void GetMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMaterialfv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static 
        void GetMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialfv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMaterialfv")]
        public static 
        unsafe void GetMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Single* @params)
        {
            Delegates.glGetMaterialfv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static 
        void GetMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMaterialiv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static 
        void GetMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialiv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetMaterialiv")]
        public static 
        unsafe void GetMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetMaterialiv((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] Single[] values)
        {
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glGetPixelMapfv((OpenTK.Graphics.PixelMap)map, (Single*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] out Single values)
        {
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glGetPixelMapfv((OpenTK.Graphics.PixelMap)map, (Single*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
        public static 
        unsafe void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] Single* values)
        {
            Delegates.glGetPixelMapfv((OpenTK.Graphics.PixelMap)map, (Single*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] UInt32[] values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.PixelMap)map, (UInt32*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] Int32[] values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.PixelMap)map, (UInt32*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] out UInt32 values)
        {
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] out Int32 values)
        {
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((OpenTK.Graphics.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static 
        unsafe void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] UInt32* values)
        {
            Delegates.glGetPixelMapuiv((OpenTK.Graphics.PixelMap)map, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
        public static 
        unsafe void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] Int32* values)
        {
            Delegates.glGetPixelMapuiv((OpenTK.Graphics.PixelMap)map, (UInt32*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] UInt16[] values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.PixelMap)map, (UInt16*)values_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] Int16[] values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.PixelMap)map, (UInt16*)values_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] out UInt16 values)
        {
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static 
        void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] out Int16 values)
        {
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((OpenTK.Graphics.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static 
        unsafe void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] UInt16* values)
        {
            Delegates.glGetPixelMapusv((OpenTK.Graphics.PixelMap)map, (UInt16*)values);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
        public static 
        unsafe void GetPixelMap(OpenTK.Graphics.PixelMap map, [Out] Int16* values)
        {
            Delegates.glGetPixelMapusv((OpenTK.Graphics.PixelMap)map, (UInt16*)values);
        }

        
        /// <summary>
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="pattern">
        /// <para>
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static 
        void GetPolygonStipple([Out] Byte[] mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Delegates.glGetPolygonStipple((Byte*)mask_ptr);
                }
            }
        }

        
        /// <summary>
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="pattern">
        /// <para>
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static 
        void GetPolygonStipple([Out] out Byte mask)
        {
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Delegates.glGetPolygonStipple((Byte*)mask_ptr);
                    mask = *mask_ptr;
                }
            }
        }

        
        /// <summary>
        /// Return the polygon stipple pattern
        /// </summary>
        /// <param name="pattern">
        /// <para>
        /// Returns the stipple pattern. The initial value is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
        public static 
        unsafe void GetPolygonStipple([Out] Byte* mask)
        {
            Delegates.glGetPolygonStipple((Byte*)mask);
        }

        
        /// <summary>
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetString")]
        public static 
        string GetString(OpenTK.Graphics.StringName name)
        {
            unsafe
            {
                return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(Delegates.glGetString((OpenTK.Graphics.StringName)name));
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static 
        void GetTexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexEnvfv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static 
        void GetTexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnvfv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
        public static 
        unsafe void GetTexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Single* @params)
        {
            Delegates.glGetTexEnvfv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static 
        void GetTexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexEnviv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static 
        void GetTexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnviv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexEnviv")]
        public static 
        unsafe void GetTexEnv(OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetTexEnviv((OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static 
        void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetTexGendv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static 
        void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetTexGendv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGendv")]
        public static 
        unsafe void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Double* @params)
        {
            Delegates.glGetTexGendv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static 
        void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexGenfv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static 
        void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexGenfv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGenfv")]
        public static 
        unsafe void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Single* @params)
        {
            Delegates.glGetTexGenfv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static 
        void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexGeniv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static 
        void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexGeniv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexGeniv")]
        public static 
        unsafe void GetTexGen(OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetTexGeniv((OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies a pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static 
        void GetTexImage(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr pixels)
        {
            unsafe
            {
                Delegates.glGetTexImage((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Return a texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies a pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies a pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the texture image. Should be a pointer to an array of the type specified by type.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexImage")]
        public static 
        void GetTexImage(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTexImage((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static 
        void GetTexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterfv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static 
        void GetTexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterfv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
        public static 
        unsafe void GetTexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
        {
            Delegates.glGetTexParameterfv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static 
        void GetTexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameteriv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static 
        void GetTexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameteriv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
        public static 
        unsafe void GetTexParameter(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetTexParameteriv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static 
        void GetTexLevelParameter(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static 
        void GetTexLevelParameter(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
        public static 
        unsafe void GetTexLevelParameter(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
        {
            Delegates.glGetTexLevelParameterfv((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static 
        void GetTexLevelParameter(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static 
        void GetTexLevelParameter(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
        public static 
        unsafe void GetTexLevelParameter(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetTexLevelParameteriv((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glIsEnabled")]
        public static 
        bool IsEnabled(OpenTK.Graphics.EnableCap cap)
        {
            return Delegates.glIsEnabled((OpenTK.Graphics.EnableCap)cap);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a display list
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies a potential display list name.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glIsList")]
        public static 
        bool IsList(UInt32 list)
        {
            return Delegates.glIsList((UInt32)list);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a display list
        /// </summary>
        /// <param name="list">
        /// <para>
        /// Specifies a potential display list name.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glIsList")]
        public static 
        bool IsList(Int32 list)
        {
            return Delegates.glIsList((UInt32)list);
        }

        
        /// <summary>
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="nearVal">
        /// <para>
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="farVal">
        /// <para>
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glDepthRange")]
        public static 
        void DepthRange(Double near, Double far)
        {
            Delegates.glDepthRange((Double)near, (Double)far);
        }

        
        /// <summary>
        /// Multiply the current matrix by a perspective matrix
        /// </summary>
        /// <param name="left">
        /// <para>
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </para>
        /// </param>
        /// <param name="bottom">
        /// <para>
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </para>
        /// </param>
        /// <param name="nearVal">
        /// <para>
        /// Specify the distances to the near and far depth clipping planes. Both distances must be positive.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glFrustum")]
        public static 
        void Frustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            Delegates.glFrustum((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
        }

        
        /// <summary>
        /// Replace the current matrix with the identity matrix
        /// </summary>
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glLoadIdentity")]
        public static 
        void LoadIdentity()
        {
            Delegates.glLoadIdentity();
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static 
        void LoadMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glLoadMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static 
        void LoadMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glLoadMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glLoadMatrixf")]
        public static 
        unsafe void LoadMatrix(Single* m)
        {
            Delegates.glLoadMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static 
        void LoadMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glLoadMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static 
        void LoadMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glLoadMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glLoadMatrixd")]
        public static 
        unsafe void LoadMatrix(Double* m)
        {
            Delegates.glLoadMatrixd((Double*)m);
        }

        
        /// <summary>
        /// Specify which matrix is the current matrix
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. The initial value is GL_MODELVIEW. Additionally, if the ARB_imaging extension is supported, GL_COLOR is also accepted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glMatrixMode")]
        public static 
        void MatrixMode(OpenTK.Graphics.MatrixMode mode)
        {
            Delegates.glMatrixMode((OpenTK.Graphics.MatrixMode)mode);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static 
        void MultMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glMultMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static 
        void MultMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glMultMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glMultMatrixf")]
        public static 
        unsafe void MultMatrix(Single* m)
        {
            Delegates.glMultMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static 
        void MultMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glMultMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static 
        void MultMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glMultMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glMultMatrixd")]
        public static 
        unsafe void MultMatrix(Double* m)
        {
            Delegates.glMultMatrixd((Double*)m);
        }

        
        /// <summary>
        /// Multiply the current matrix with an orthographic matrix
        /// </summary>
        /// <param name="left">
        /// <para>
        /// Specify the coordinates for the left and right vertical clipping planes.
        /// </para>
        /// </param>
        /// <param name="bottom">
        /// <para>
        /// Specify the coordinates for the bottom and top horizontal clipping planes.
        /// </para>
        /// </param>
        /// <param name="nearVal">
        /// <para>
        /// Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glOrtho")]
        public static 
        void Ortho(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            Delegates.glOrtho((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glPopMatrix")]
        public static 
        void PopMatrix()
        {
            Delegates.glPopMatrix();
        }

        
        /// <summary>
        /// Push and pop the current matrix stack
        /// </summary>
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glPushMatrix")]
        public static 
        void PushMatrix()
        {
            Delegates.glPushMatrix();
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glRotated")]
        public static 
        void Rotate(Double angle, Double x, Double y, Double z)
        {
            Delegates.glRotated((Double)angle, (Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glRotatef")]
        public static 
        void Rotate(Single angle, Single x, Single y, Single z)
        {
            Delegates.glRotatef((Single)angle, (Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glScaled")]
        public static 
        void Scale(Double x, Double y, Double z)
        {
            Delegates.glScaled((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glScalef")]
        public static 
        void Scale(Single x, Single y, Single z)
        {
            Delegates.glScalef((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glTranslated")]
        public static 
        void Translate(Double x, Double y, Double z)
        {
            Delegates.glTranslated((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glTranslatef")]
        public static 
        void Translate(Single x, Single y, Single z)
        {
            Delegates.glTranslatef((Single)x, (Single)y, (Single)z);
        }

        
        /// <summary>
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Xform", Version = "1.0", EntryPoint = "glViewport")]
        public static 
        void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        
        /// <summary>
        /// Render a vertex using the specified vertex array element
        /// </summary>
        /// <param name="i">
        /// <para>
        /// Specifies an index into the enabled vertex data arrays.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glArrayElement")]
        public static 
        void ArrayElement(Int32 i)
        {
            Delegates.glArrayElement((Int32)i);
        }

        
        /// <summary>
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glColorPointer")]
        public static 
        void ColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3 or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glColorPointer")]
        public static 
        void ColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointer((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDisableClientState")]
        public static 
        void DisableClientState(OpenTK.Graphics.EnableCap array)
        {
            Delegates.glDisableClientState((OpenTK.Graphics.EnableCap)array);
        }

        
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDrawArrays")]
        public static 
        void DrawArrays(OpenTK.Graphics.BeginMode mode, Int32 first, Int32 count)
        {
            Delegates.glDrawArrays((OpenTK.Graphics.BeginMode)mode, (Int32)first, (Int32)count);
        }

        
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDrawElements")]
        public static 
        void DrawElements(OpenTK.Graphics.BeginMode mode, Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices)
        {
            unsafe
            {
                Delegates.glDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices);
            }
        }

        
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDrawElements")]
        public static 
        void DrawElements(OpenTK.Graphics.BeginMode mode, Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define an array of edge flags
        /// </summary>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static 
        void EdgeFlagPointer(Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of edge flags
        /// </summary>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first edge flag in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
        public static 
        void EdgeFlagPointer(Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Enable or disable client-side capability
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies the capability to enable. Symbolic constants GL_COLOR_ARRAY, GL_EDGE_FLAG_ARRAY, GL_FOG_COORD_ARRAY, GL_INDEX_ARRAY, GL_NORMAL_ARRAY, GL_SECONDARY_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY, and GL_VERTEX_ARRAY are accepted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glEnableClientState")]
        public static 
        void EnableClientState(OpenTK.Graphics.EnableCap array)
        {
            Delegates.glEnableClientState((OpenTK.Graphics.EnableCap)array);
        }

        
        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static 
        void GetPointer(OpenTK.Graphics.GetPointervPName pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Delegates.glGetPointerv((OpenTK.Graphics.GetPointervPName)pname, (IntPtr)@params);
            }
        }

        
        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the array or buffer pointer to be returned. Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, or GL_VERTEX_ARRAY_POINTER are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGetPointerv")]
        public static 
        void GetPointer(OpenTK.Graphics.GetPointervPName pname, [In, Out] object @params)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerv((OpenTK.Graphics.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define an array of color indexes
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first index in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static 
        void IndexPointer(OpenTK.Graphics.IndexPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glIndexPointer((OpenTK.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of color indexes
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color index in the array. Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first index in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIndexPointer")]
        public static 
        void IndexPointer(OpenTK.Graphics.IndexPointerType type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointer((OpenTK.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Simultaneously specify and enable several interleaved arrays
        /// </summary>
        /// <param name="format">
        /// <para>
        /// Specifies the type of array to enable. Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the offset in bytes between each aggregate array element.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static 
        void InterleavedArrays(OpenTK.Graphics.InterleavedArrayFormat format, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glInterleavedArrays((OpenTK.Graphics.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Simultaneously specify and enable several interleaved arrays
        /// </summary>
        /// <param name="format">
        /// <para>
        /// Specifies the type of array to enable. Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the offset in bytes between each aggregate array element.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glInterleavedArrays")]
        public static 
        void InterleavedArrays(OpenTK.Graphics.InterleavedArrayFormat format, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glInterleavedArrays((OpenTK.Graphics.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static 
        void NormalPointer(OpenTK.Graphics.NormalPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glNormalPointer((OpenTK.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of normals
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glNormalPointer")]
        public static 
        void NormalPointer(OpenTK.Graphics.NormalPointerType type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointer((OpenTK.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static 
        void TexCoordPointer(Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of texture coordinates
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glTexCoordPointer")]
        public static 
        void TexCoordPointer(Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointer((Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static 
        void VertexPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of vertex data
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glVertexPointer")]
        public static 
        void VertexPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointer((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// <para>
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="units">
        /// <para>
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPolygonOffset")]
        public static 
        void PolygonOffset(Single factor, Single units)
        {
            Delegates.glPolygonOffset((Single)factor, (Single)units);
        }

        
        /// <summary>
        /// Copy pixels into a 1D texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer . The height of the texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glCopyTexImage1D")]
        public static 
        void CopyTexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
        {
            Delegates.glCopyTexImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
        }

        
        /// <summary>
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer .
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. Must be 0 or 2 sup m + 2 ( border ) for some integer .
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glCopyTexImage2D")]
        public static 
        void CopyTexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            Delegates.glCopyTexImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
        }

        
        /// <summary>
        /// Copy a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies the texel offset within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the left corner of the row of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glCopyTexSubImage1D")]
        public static 
        void CopyTexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyTexSubImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
        }

        
        /// <summary>
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glCopyTexSubImage2D")]
        public static 
        void CopyTexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyTexSubImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        
        /// <summary>
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static 
        void TexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                Delegates.glTexSubImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Specify a one-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glTexSubImage1D")]
        public static 
        void TexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static 
        void TexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                Delegates.glTexSubImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glTexSubImage2D")]
        public static 
        void TexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be queried.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be queried.
        /// </para>
        /// </param>
        /// <param name="residences">
        /// <para>
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static 
        bool AreTexturesResident(Int32 n, UInt32[] textures, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        
        /// <summary>
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be queried.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be queried.
        /// </para>
        /// </param>
        /// <param name="residences">
        /// <para>
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static 
        bool AreTexturesResident(Int32 n, Int32[] textures, [Out] bool[] residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
        }

        
        /// <summary>
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be queried.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be queried.
        /// </para>
        /// </param>
        /// <param name="residences">
        /// <para>
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static 
        bool AreTexturesResident(Int32 n, ref UInt32 textures, [Out] out bool residences)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        
        /// <summary>
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be queried.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be queried.
        /// </para>
        /// </param>
        /// <param name="residences">
        /// <para>
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static 
        bool AreTexturesResident(Int32 n, ref Int32 textures, [Out] out bool residences)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
        }

        
        /// <summary>
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be queried.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be queried.
        /// </para>
        /// </param>
        /// <param name="residences">
        /// <para>
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static 
        unsafe bool AreTexturesResident(Int32 n, UInt32* textures, [Out] bool* residences)
        {
            return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
        }

        
        /// <summary>
        /// Determine if textures are loaded in texture memory
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be queried.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be queried.
        /// </para>
        /// </param>
        /// <param name="residences">
        /// <para>
        /// Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glAreTexturesResident")]
        public static 
        unsafe bool AreTexturesResident(Int32 n, Int32* textures, [Out] bool* residences)
        {
            return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
        }

        
        /// <summary>
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glBindTexture")]
        public static 
        void BindTexture(OpenTK.Graphics.TextureTarget target, UInt32 texture)
        {
            Delegates.glBindTexture((OpenTK.Graphics.TextureTarget)target, (UInt32)texture);
        }

        
        /// <summary>
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glBindTexture")]
        public static 
        void BindTexture(OpenTK.Graphics.TextureTarget target, Int32 texture)
        {
            Delegates.glBindTexture((OpenTK.Graphics.TextureTarget)target, (UInt32)texture);
        }

        
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static 
        void DeleteTextures(Int32 n, UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static 
        void DeleteTextures(Int32 n, Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static 
        void DeleteTextures(Int32 n, ref UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static 
        void DeleteTextures(Int32 n, ref Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static 
        unsafe void DeleteTextures(Int32 n, UInt32* textures)
        {
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
        }

        
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glDeleteTextures")]
        public static 
        unsafe void DeleteTextures(Int32 n, Int32* textures)
        {
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
        }

        
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGenTextures")]
        public static 
        void GenTextures(Int32 n, [Out] UInt32[] textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGenTextures")]
        public static 
        void GenTextures(Int32 n, [Out] Int32[] textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
        }

        
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGenTextures")]
        public static 
        void GenTextures(Int32 n, [Out] out UInt32 textures)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGenTextures")]
        public static 
        void GenTextures(Int32 n, [Out] out Int32 textures)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }

        
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGenTextures")]
        public static 
        unsafe void GenTextures(Int32 n, [Out] UInt32* textures)
        {
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
        }

        
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glGenTextures")]
        public static 
        unsafe void GenTextures(Int32 n, [Out] Int32* textures)
        {
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIsTexture")]
        public static 
        bool IsTexture(UInt32 texture)
        {
            return Delegates.glIsTexture((UInt32)texture);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIsTexture")]
        public static 
        bool IsTexture(Int32 texture)
        {
            return Delegates.glIsTexture((UInt32)texture);
        }

        
        /// <summary>
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="priorities">
        /// <para>
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static 
        void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        
        /// <summary>
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="priorities">
        /// <para>
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static 
        void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        
        /// <summary>
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="priorities">
        /// <para>
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static 
        void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        
        /// <summary>
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="priorities">
        /// <para>
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static 
        void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
        {
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
        }

        
        /// <summary>
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="priorities">
        /// <para>
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static 
        unsafe void PrioritizeTextures(Int32 n, UInt32* textures, Single* priorities)
        {
            Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
        }

        
        /// <summary>
        /// Set texture residence priority
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array containing the names of the textures to be prioritized.
        /// </para>
        /// </param>
        /// <param name="priorities">
        /// <para>
        /// Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
        public static 
        unsafe void PrioritizeTextures(Int32 n, Int32* textures, Single* priorities)
        {
            Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
        }

        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIndexub")]
        public static 
        void Index(Byte c)
        {
            Delegates.glIndexub((Byte)c);
        }

        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIndexubv")]
        public static 
        void Indexv(Byte[] c)
        {
            unsafe
            {
                fixed (Byte* c_ptr = c)
                {
                    Delegates.glIndexubv((Byte*)c_ptr);
                }
            }
        }

        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIndexubv")]
        public static 
        void Indexv(ref Byte c)
        {
            unsafe
            {
                fixed (Byte* c_ptr = &c)
                {
                    Delegates.glIndexubv((Byte*)c_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glIndexubv")]
        public static 
        unsafe void Indexv(Byte* c)
        {
            Delegates.glIndexubv((Byte*)c);
        }

        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPopClientAttrib")]
        public static 
        void PopClientAttrib()
        {
            Delegates.glPopClientAttrib();
        }

        
        /// <summary>
        /// Push and pop the client attribute stack
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that indicates which attributes to save. Values for mask are listed below.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "11", Version = "1.1", EntryPoint = "glPushClientAttrib")]
        public static 
        void PushClientAttrib(OpenTK.Graphics.ClientAttribMask mask)
        {
            Delegates.glPushClientAttrib((OpenTK.Graphics.ClientAttribMask)mask);
        }

        
        /// <summary>
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// specify the components of GL_BLEND_COLOR
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glBlendColor")]
        public static 
        void BlendColor(Single red, Single green, Single blue, Single alpha)
        {
            Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
        }

        
        /// <summary>
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glBlendEquation")]
        public static 
        void BlendEquation(OpenTK.Graphics.BlendEquationMode mode)
        {
            Delegates.glBlendEquation((OpenTK.Graphics.BlendEquationMode)mode);
        }

        
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static 
        void DrawRangeElements(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices)
        {
            unsafe
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices);
            }
        }

        
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static 
        void DrawRangeElements(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices)
        {
            unsafe
            {
                Delegates.glDrawRangeElements((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices);
            }
        }

        
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static 
        void DrawRangeElements(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// Specifies the minimum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="end">
        /// <para>
        /// Specifies the maximum array index contained in indices.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glDrawRangeElements")]
        public static 
        void DrawRangeElements(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the color lookup table specified by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTable")]
        public static 
        void ColorTable(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr table)
        {
            unsafe
            {
                Delegates.glColorTable((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table);
            }
        }

        
        /// <summary>
        /// Define a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, GL_POST_COLOR_MATRIX_COLOR_TABLE, GL_PROXY_COLOR_TABLE, GL_PROXY_POST_CONVOLUTION_COLOR_TABLE, or GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the color table. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, and GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the color lookup table specified by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTable")]
        public static 
        void ColorTable(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object table)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTable((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static 
        void ColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glColorTableParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static 
        void ColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
        public static 
        unsafe void ColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Single* @params)
        {
            Delegates.glColorTableParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static 
        void ColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glColorTableParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static 
        void ColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
        public static 
        unsafe void ColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Int32* @params)
        {
            Delegates.glColorTableParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Copy pixels into a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The color table target. Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal storage format of the texture image. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </para>
        /// </param>
        /// <param name="y">
        /// <para>
        /// The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel rectangle.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glCopyColorTable")]
        public static 
        void CopyColorTable(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyColorTable((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        
        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="table">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static 
        void GetColorTable(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr table)
        {
            unsafe
            {
                Delegates.glGetColorTable((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table);
            }
        }

        
        /// <summary>
        /// Retrieve contents of a color lookup table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in table. The possible values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in table. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="table">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data containing the contents of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTable")]
        public static 
        void GetColorTable(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object table)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTable((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static 
        void GetColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static 
        void GetColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
        public static 
        unsafe void GetColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single* @params)
        {
            Delegates.glGetColorTableParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static 
        void GetColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static 
        void GetColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
        public static 
        unsafe void GetColorTableParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32* @params)
        {
            Delegates.glGetColorTableParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static 
        void ColorSubTable(OpenTK.Graphics.Version12 target, Int32 start, Int32 count, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr data)
        {
            unsafe
            {
                Delegates.glColorSubTable((OpenTK.Graphics.Version12)target, (Int32)start, (Int32)count, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. The allowable values are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glColorSubTable")]
        public static 
        void ColorSubTable(OpenTK.Graphics.Version12 target, Int32 start, Int32 count, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((OpenTK.Graphics.Version12)target, (Int32)start, (Int32)count, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Respecify a portion of a color table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be one of GL_COLOR_TABLE, GL_POST_CONVOLUTION_COLOR_TABLE, or GL_POST_COLOR_MATRIX_COLOR_TABLE.
        /// </para>
        /// </param>
        /// <param name="start">
        /// <para>
        /// The starting index of the portion of the color table to be replaced.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The window coordinates of the left corner of the row of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of table entries to replace.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glCopyColorSubTable")]
        public static 
        void CopyColorSubTable(OpenTK.Graphics.Version12 target, Int32 start, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyColorSubTable((OpenTK.Graphics.Version12)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
        }

        
        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static 
        void ConvolutionFilter1D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr image)
        {
            unsafe
            {
                Delegates.glConvolutionFilter1D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image);
            }
        }

        
        /// <summary>
        /// Define a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_ALPHA, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_INTENSITY, GL_RGB, and GL_RGBA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
        public static 
        void ConvolutionFilter1D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static 
        void ConvolutionFilter2D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr image)
        {
            unsafe
            {
                Delegates.glConvolutionFilter2D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image);
            }
        }

        
        /// <summary>
        /// Define a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array referenced by data.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in data. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in data. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
        public static 
        void ConvolutionFilter2D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameterf")]
        public static 
        void ConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Single @params)
        {
            Delegates.glConvolutionParameterf((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
        public static 
        void ConvolutionParameterv(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
        public static 
        void ConvolutionParameterv(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glConvolutionParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
        public static 
        unsafe void ConvolutionParameterv(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Single* @params)
        {
            Delegates.glConvolutionParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameteri")]
        public static 
        void ConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Int32 @params)
        {
            Delegates.glConvolutionParameteri((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
        public static 
        void ConvolutionParameterv(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
        public static 
        void ConvolutionParameterv(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glConvolutionParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
        public static 
        unsafe void ConvolutionParameterv(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, Int32* @params)
        {
            Delegates.glConvolutionParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Copy pixels into a one-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_1D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array to copy.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glCopyConvolutionFilter1D")]
        public static 
        void CopyConvolutionFilter1D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
        {
            Delegates.glCopyConvolutionFilter1D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
        }

        
        /// <summary>
        /// Copy pixels into a two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// The window space coordinates of the lower-left coordinate of the pixel array to copy.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The width of the pixel array to copy.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The height of the pixel array to copy.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glCopyConvolutionFilter2D")]
        public static 
        void CopyConvolutionFilter2D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyConvolutionFilter2D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        
        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="image">
        /// <para>
        /// Pointer to storage for the output image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static 
        void GetConvolutionFilter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr image)
        {
            unsafe
            {
                Delegates.glGetConvolutionFilter((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image);
            }
        }

        
        /// <summary>
        /// Get current 1D or 2D convolution filter kernel
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The filter to be retrieved. Must be one of GL_CONVOLUTION_1D or GL_CONVOLUTION_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output image. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output image. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="image">
        /// <para>
        /// Pointer to storage for the output image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
        public static 
        void GetConvolutionFilter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object image)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilter((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static 
        void GetConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static 
        void GetConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
        public static 
        unsafe void GetConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single* @params)
        {
            Delegates.glGetConvolutionParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static 
        void GetConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static 
        void GetConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
        public static 
        unsafe void GetConvolutionParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32* @params)
        {
            Delegates.glGetConvolutionParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to storage for the row filter image.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to storage for the column filter image.
        /// </para>
        /// </param>
        /// <param name="span">
        /// <para>
        /// Pointer to storage for the span filter image (currently unused).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static 
        void GetSeparableFilter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
        {
            unsafe
            {
                Delegates.glGetSeparableFilter((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
            }
        }

        
        /// <summary>
        /// Get separable convolution filter kernel images
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The separable filter to be retrieved. Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to storage for the row filter image.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to storage for the column filter image.
        /// </para>
        /// </param>
        /// <param name="span">
        /// <para>
        /// Pointer to storage for the span filter image (currently unused).
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
        public static 
        void GetSeparableFilter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object row, [In, Out] object column, [In, Out] object span)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static 
        void SeparableFilter2D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr row, IntPtr column)
        {
            unsafe
            {
                Delegates.glSeparableFilter2D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column);
            }
        }

        
        /// <summary>
        /// Define a separable two-dimensional convolution filter
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_SEPARABLE_2D.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="row">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.
        /// </para>
        /// </param>
        /// <param name="column">
        /// <para>
        /// Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
        public static 
        void SeparableFilter2D(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object row, [In, Out] object column)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned histogram table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static 
        void GetHistogram(OpenTK.Graphics.Version12 target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr values)
        {
            unsafe
            {
                Delegates.glGetHistogram((OpenTK.Graphics.Version12)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values);
            }
        }

        
        /// <summary>
        /// Get histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, each component counter that is actually returned is reset to zero. (Other counters are unaffected.) If GL_FALSE, none of the counters in the histogram table is modified.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of values to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// The type of values to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned histogram table.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogram")]
        public static 
        void GetHistogram(OpenTK.Graphics.Version12 target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object values)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogram((OpenTK.Graphics.Version12)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static 
        void GetHistogramParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static 
        void GetHistogramParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
        public static 
        unsafe void GetHistogramParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single* @params)
        {
            Delegates.glGetHistogramParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static 
        void GetHistogramParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static 
        void GetHistogramParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
        public static 
        unsafe void GetHistogramParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32* @params)
        {
            Delegates.glGetHistogramParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static 
        void GetMinmax(OpenTK.Graphics.Version12 target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr values)
        {
            unsafe
            {
                Delegates.glGetMinmax((OpenTK.Graphics.Version12)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values);
            }
        }

        
        /// <summary>
        /// Get minimum and maximum pixel values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="reset">
        /// <para>
        /// If GL_TRUE, all entries in the minmax table that are actually returned are reset to their initial values. (Other entries are unaltered.) If GL_FALSE, the minmax table is unaltered.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// The format of the data to be returned in values. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="types">
        /// <para>
        /// The type of the data to be returned in values. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.
        /// </para>
        /// </param>
        /// <param name="values">
        /// <para>
        /// A pointer to storage for the returned values.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmax")]
        public static 
        void GetMinmax(OpenTK.Graphics.Version12 target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object values)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmax((OpenTK.Graphics.Version12)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static 
        void GetMinmaxParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static 
        void GetMinmaxParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
        public static 
        unsafe void GetMinmaxParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Single* @params)
        {
            Delegates.glGetMinmaxParameterfv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static 
        void GetMinmaxParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static 
        void GetMinmaxParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
        public static 
        unsafe void GetMinmaxParameter(OpenTK.Graphics.Version12 target, OpenTK.Graphics.Version12 pname, [Out] Int32* @params)
        {
            Delegates.glGetMinmaxParameteriv((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.Version12)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Define histogram table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The histogram whose parameters are to be set. Must be one of GL_HISTOGRAM or GL_PROXY_HISTOGRAM.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// The number of entries in the histogram table. Must be a power of 2.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The format of entries in the histogram table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="sink">
        /// <para>
        /// If GL_TRUE, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the minmax process after histogramming.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glHistogram")]
        public static 
        void Histogram(OpenTK.Graphics.Version12 target, Int32 width, OpenTK.Graphics.PixelInternalFormat internalformat, bool sink)
        {
            Delegates.glHistogram((OpenTK.Graphics.Version12)target, (Int32)width, (OpenTK.Graphics.PixelInternalFormat)internalformat, (bool)sink);
        }

        
        /// <summary>
        /// Define minmax table
        /// </summary>
        /// <param name="target">
        /// <para>
        /// The minmax table whose parameters are to be set. Must be GL_MINMAX.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// The format of entries in the minmax table. Must be one of GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.
        /// </para>
        /// </param>
        /// <param name="sink">
        /// <para>
        /// If GL_TRUE, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If GL_FALSE, pixels will proceed to the final conversion process after minmax.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glMinmax")]
        public static 
        void Minmax(OpenTK.Graphics.Version12 target, OpenTK.Graphics.PixelInternalFormat internalformat, bool sink)
        {
            Delegates.glMinmax((OpenTK.Graphics.Version12)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (bool)sink);
        }

        
        /// <summary>
        /// Reset histogram table entries to zero
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_HISTOGRAM.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glResetHistogram")]
        public static 
        void ResetHistogram(OpenTK.Graphics.Version12 target)
        {
            Delegates.glResetHistogram((OpenTK.Graphics.Version12)target);
        }

        
        /// <summary>
        /// Reset minmax table entries to initial values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Must be GL_MINMAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glResetMinmax")]
        public static 
        void ResetMinmax(OpenTK.Graphics.Version12 target)
        {
            Delegates.glResetMinmax((OpenTK.Graphics.Version12)target);
        }

        
        /// <summary>
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static 
        void TexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                Delegates.glTexImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Specify a three-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level is the n sup th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup k + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glTexImage3D")]
        public static 
        void TexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static 
        void TexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
        {
            unsafe
            {
                Delegates.glTexSubImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
            }
        }

        
        /// <summary>
        /// Specify a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glTexSubImage3D")]
        public static 
        void TexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Copy a three-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="zoffset">
        /// <para>
        /// Specifies a texel offset in the z direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version12", Version = "1.2", EntryPoint = "glCopyTexSubImage3D")]
        public static 
        void CopyTexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            Delegates.glCopyTexSubImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
        }

        
        /// <summary>
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glActiveTexture")]
        public static 
        void ActiveTexture(OpenTK.Graphics.TextureUnit texture)
        {
            Delegates.glActiveTexture((OpenTK.Graphics.TextureUnit)texture);
        }

        
        /// <summary>
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the value of GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value. The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glClientActiveTexture")]
        public static 
        void ClientActiveTexture(OpenTK.Graphics.TextureUnit texture)
        {
            Delegates.glClientActiveTexture((OpenTK.Graphics.TextureUnit)texture);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1d")]
        public static 
        void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Double s)
        {
            Delegates.glMultiTexCoord1d((OpenTK.Graphics.TextureUnit)target, (Double)s);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
        public static 
        unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord1dv((OpenTK.Graphics.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1f")]
        public static 
        void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Single s)
        {
            Delegates.glMultiTexCoord1f((OpenTK.Graphics.TextureUnit)target, (Single)s);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
        public static 
        unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord1fv((OpenTK.Graphics.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1i")]
        public static 
        void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Int32 s)
        {
            Delegates.glMultiTexCoord1i((OpenTK.Graphics.TextureUnit)target, (Int32)s);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
        public static 
        unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord1iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1s")]
        public static 
        void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Int16 s)
        {
            Delegates.glMultiTexCoord1s((OpenTK.Graphics.TextureUnit)target, (Int16)s);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static 
        void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
        public static 
        unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord1sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2d")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Double s, Double t)
        {
            Delegates.glMultiTexCoord2d((OpenTK.Graphics.TextureUnit)target, (Double)s, (Double)t);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
        public static 
        unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord2dv((OpenTK.Graphics.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2f")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Single s, Single t)
        {
            Delegates.glMultiTexCoord2f((OpenTK.Graphics.TextureUnit)target, (Single)s, (Single)t);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
        public static 
        unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord2fv((OpenTK.Graphics.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2i")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int32 s, Int32 t)
        {
            Delegates.glMultiTexCoord2i((OpenTK.Graphics.TextureUnit)target, (Int32)s, (Int32)t);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
        public static 
        unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord2iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2s")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int16 s, Int16 t)
        {
            Delegates.glMultiTexCoord2s((OpenTK.Graphics.TextureUnit)target, (Int16)s, (Int16)t);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static 
        void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
        public static 
        unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord2sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3d")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Double s, Double t, Double r)
        {
            Delegates.glMultiTexCoord3d((OpenTK.Graphics.TextureUnit)target, (Double)s, (Double)t, (Double)r);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
        public static 
        unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord3dv((OpenTK.Graphics.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3f")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Single s, Single t, Single r)
        {
            Delegates.glMultiTexCoord3f((OpenTK.Graphics.TextureUnit)target, (Single)s, (Single)t, (Single)r);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
        public static 
        unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord3fv((OpenTK.Graphics.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3i")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int32 s, Int32 t, Int32 r)
        {
            Delegates.glMultiTexCoord3i((OpenTK.Graphics.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
        public static 
        unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord3iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3s")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int16 s, Int16 t, Int16 r)
        {
            Delegates.glMultiTexCoord3s((OpenTK.Graphics.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static 
        void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
        public static 
        unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord3sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4d")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Double s, Double t, Double r, Double q)
        {
            Delegates.glMultiTexCoord4d((OpenTK.Graphics.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4dv((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
        public static 
        unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Double* v)
        {
            Delegates.glMultiTexCoord4dv((OpenTK.Graphics.TextureUnit)target, (Double*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4f")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Single s, Single t, Single r, Single q)
        {
            Delegates.glMultiTexCoord4f((OpenTK.Graphics.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4fv((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
        public static 
        unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Single* v)
        {
            Delegates.glMultiTexCoord4fv((OpenTK.Graphics.TextureUnit)target, (Single*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4i")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q)
        {
            Delegates.glMultiTexCoord4i((OpenTK.Graphics.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
        public static 
        unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int32* v)
        {
            Delegates.glMultiTexCoord4iv((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4s")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
            Delegates.glMultiTexCoord4s((OpenTK.Graphics.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static 
        void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
        public static 
        unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int16* v)
        {
            Delegates.glMultiTexCoord4sv((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static 
        void LoadTransposeMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static 
        void LoadTransposeMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
        public static 
        unsafe void LoadTransposeMatrix(Single* m)
        {
            Delegates.glLoadTransposeMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static 
        void LoadTransposeMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static 
        void LoadTransposeMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
        public static 
        unsafe void LoadTransposeMatrix(Double* m)
        {
            Delegates.glLoadTransposeMatrixd((Double*)m);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static 
        void MultTransposeMatrix(Single[] m)
        {
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static 
        void MultTransposeMatrix(ref Single m)
        {
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
        public static 
        unsafe void MultTransposeMatrix(Single* m)
        {
            Delegates.glMultTransposeMatrixf((Single*)m);
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static 
        void MultTransposeMatrix(Double[] m)
        {
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static 
        void MultTransposeMatrix(ref Double m)
        {
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
        public static 
        unsafe void MultTransposeMatrix(Double* m)
        {
            Delegates.glMultTransposeMatrixd((Double*)m);
        }

        
        /// <summary>
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// <para>
        /// Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </para>
        /// </param>
        /// <param name="invert">
        /// <para>
        /// Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glSampleCoverage")]
        public static 
        void SampleCoverage(Single value, bool invert)
        {
            Delegates.glSampleCoverage((Single)value, (bool)invert);
        }

        
        /// <summary>
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static 
        void CompressedTexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Delegates.glCompressedTexImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Specify a three-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 3D texture images that are at least 16 texels deep.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
        public static 
        void CompressedTexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static 
        void CompressedTexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Delegates.glCompressedTexImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
        public static 
        void CompressedTexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static 
        void CompressedTexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Delegates.glCompressedTexImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Specify a one-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
        public static 
        void CompressedTexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static 
        void CompressedTexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Specify a three-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_3D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
        public static 
        void CompressedTexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static 
        void CompressedTexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
        public static 
        void CompressedTexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static 
        void CompressedTexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            unsafe
            {
                Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Specify a one-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_1D.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
        public static 
        void CompressedTexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static 
        void GetCompressedTexImage(OpenTK.Graphics.TextureTarget target, Int32 level, [Out] IntPtr img)
        {
            unsafe
            {
                Delegates.glGetCompressedTexImage((OpenTK.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img);
            }
        }

        
        /// <summary>
        /// Return a compressed texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies which texture is to be obtained. GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3D GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted.
        /// </para>
        /// </param>
        /// <param name="lod">
        /// <para>
        /// Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level is the th mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="img">
        /// <para>
        /// Returns the compressed texture image.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version13", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
        public static 
        void GetCompressedTexImage(OpenTK.Graphics.TextureTarget target, Int32 level, [In, Out] object img)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((OpenTK.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for srcRGB. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for dstRGB. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
        public static 
        void BlendFuncSeparate(OpenTK.Graphics.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.BlendingFactorDest dfactorRGB, OpenTK.Graphics.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.BlendingFactorDest dfactorAlpha)
        {
            Delegates.glBlendFuncSeparate((OpenTK.Graphics.BlendingFactorSrc)sfactorRGB, (OpenTK.Graphics.BlendingFactorDest)dfactorRGB, (OpenTK.Graphics.BlendingFactorSrc)sfactorAlpha, (OpenTK.Graphics.BlendingFactorDest)dfactorAlpha);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoordf")]
        public static 
        void FogCoord(Single coord)
        {
            Delegates.glFogCoordf((Single)coord);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoordfv")]
        public static 
        void FogCoordv(Single[] coord)
        {
            unsafe
            {
                fixed (Single* coord_ptr = coord)
                {
                    Delegates.glFogCoordfv((Single*)coord_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoordfv")]
        public static 
        void FogCoordv(ref Single coord)
        {
            unsafe
            {
                fixed (Single* coord_ptr = &coord)
                {
                    Delegates.glFogCoordfv((Single*)coord_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoordfv")]
        public static 
        unsafe void FogCoordv(Single* coord)
        {
            Delegates.glFogCoordfv((Single*)coord);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoordd")]
        public static 
        void FogCoord(Double coord)
        {
            Delegates.glFogCoordd((Double)coord);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoorddv")]
        public static 
        void FogCoordv(Double[] coord)
        {
            unsafe
            {
                fixed (Double* coord_ptr = coord)
                {
                    Delegates.glFogCoorddv((Double*)coord_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoorddv")]
        public static 
        void FogCoordv(ref Double coord)
        {
            unsafe
            {
                fixed (Double* coord_ptr = &coord)
                {
                    Delegates.glFogCoorddv((Double*)coord_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoorddv")]
        public static 
        unsafe void FogCoordv(Double* coord)
        {
            Delegates.glFogCoorddv((Double*)coord);
        }

        
        /// <summary>
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static 
        void FogCoordPointer(OpenTK.Graphics.FogPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glFogCoordPointer((OpenTK.Graphics.FogPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of fog coordinates
        /// </summary>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each fog coordinate. Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glFogCoordPointer")]
        public static 
        void FogCoordPointer(OpenTK.Graphics.FogPointerType type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((OpenTK.Graphics.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static 
        void MultiDrawArrays(OpenTK.Graphics.BeginMode mode, [Out] Int32[] first, [Out] Int32[] count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawArrays((OpenTK.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
        }

        
        /// <summary>
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static 
        void MultiDrawArrays(OpenTK.Graphics.BeginMode mode, [Out] out Int32 first, [Out] out Int32 count, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawArrays((OpenTK.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    first = *first_ptr;
                    count = *count_ptr;
                }
            }
        }

        
        /// <summary>
        /// Render multiple sets of primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Points to an array of starting indices in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the number of indices to be rendered.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the first and count
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
        public static 
        unsafe void MultiDrawArrays(OpenTK.Graphics.BeginMode mode, [Out] Int32* first, [Out] Int32* count, Int32 primcount)
        {
            Delegates.glMultiDrawArrays((OpenTK.Graphics.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
        }

        
        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static 
        void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32[] count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        
        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static 
        void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32[] count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        
        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static 
        void MultiDrawElements(OpenTK.Graphics.BeginMode mode, ref Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
        }

        
        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static 
        void MultiDrawElements(OpenTK.Graphics.BeginMode mode, ref Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
        }

        
        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static 
        unsafe void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32* count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            Delegates.glMultiDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
        }

        
        /// <summary>
        /// Render multiple sets of primitives by specifying indices of array data elements
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Points to an array of the elements counts.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>
        /// <param name="primcount">
        /// <para>
        /// Specifies the size of the count array.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glMultiDrawElements")]
        public static 
        unsafe void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32* count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
        {
            System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((OpenTK.Graphics.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameterf")]
        public static 
        void PointParameter(OpenTK.Graphics.PointParameterName pname, Single param)
        {
            Delegates.glPointParameterf((OpenTK.Graphics.PointParameterName)pname, (Single)param);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static 
        void PointParameterv(OpenTK.Graphics.PointParameterName pname, Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glPointParameterfv((OpenTK.Graphics.PointParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static 
        void PointParameterv(OpenTK.Graphics.PointParameterName pname, ref Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glPointParameterfv((OpenTK.Graphics.PointParameterName)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameterfv")]
        public static 
        unsafe void PointParameterv(OpenTK.Graphics.PointParameterName pname, Single* @params)
        {
            Delegates.glPointParameterfv((OpenTK.Graphics.PointParameterName)pname, (Single*)@params);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameteri")]
        public static 
        void PointParameter(OpenTK.Graphics.PointParameterName pname, Int32 param)
        {
            Delegates.glPointParameteri((OpenTK.Graphics.PointParameterName)pname, (Int32)param);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static 
        void PointParameterv(OpenTK.Graphics.PointParameterName pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glPointParameteriv((OpenTK.Graphics.PointParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static 
        void PointParameterv(OpenTK.Graphics.PointParameterName pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glPointParameteriv((OpenTK.Graphics.PointParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glPointParameteriv")]
        public static 
        unsafe void PointParameterv(OpenTK.Graphics.PointParameterName pname, Int32* @params)
        {
            Delegates.glPointParameteriv((OpenTK.Graphics.PointParameterName)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3b")]
        public static 
        void SecondaryColor3(SByte red, SByte green, SByte blue)
        {
            Delegates.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static 
        void SecondaryColor3(SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static 
        void SecondaryColor3(ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
        public static 
        unsafe void SecondaryColor3(SByte* v)
        {
            Delegates.glSecondaryColor3bv((SByte*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3d")]
        public static 
        void SecondaryColor3(Double red, Double green, Double blue)
        {
            Delegates.glSecondaryColor3d((Double)red, (Double)green, (Double)blue);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static 
        void SecondaryColor3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static 
        void SecondaryColor3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
        public static 
        unsafe void SecondaryColor3(Double* v)
        {
            Delegates.glSecondaryColor3dv((Double*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3f")]
        public static 
        void SecondaryColor3(Single red, Single green, Single blue)
        {
            Delegates.glSecondaryColor3f((Single)red, (Single)green, (Single)blue);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static 
        void SecondaryColor3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static 
        void SecondaryColor3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
        public static 
        unsafe void SecondaryColor3(Single* v)
        {
            Delegates.glSecondaryColor3fv((Single*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3i")]
        public static 
        void SecondaryColor3(Int32 red, Int32 green, Int32 blue)
        {
            Delegates.glSecondaryColor3i((Int32)red, (Int32)green, (Int32)blue);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static 
        void SecondaryColor3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static 
        void SecondaryColor3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
        public static 
        unsafe void SecondaryColor3(Int32* v)
        {
            Delegates.glSecondaryColor3iv((Int32*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3s")]
        public static 
        void SecondaryColor3(Int16 red, Int16 green, Int16 blue)
        {
            Delegates.glSecondaryColor3s((Int16)red, (Int16)green, (Int16)blue);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static 
        void SecondaryColor3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static 
        void SecondaryColor3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
        public static 
        unsafe void SecondaryColor3(Int16* v)
        {
            Delegates.glSecondaryColor3sv((Int16*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3ub")]
        public static 
        void SecondaryColor3(Byte red, Byte green, Byte blue)
        {
            Delegates.glSecondaryColor3ub((Byte)red, (Byte)green, (Byte)blue);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static 
        void SecondaryColor3(Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static 
        void SecondaryColor3(ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
        public static 
        unsafe void SecondaryColor3(Byte* v)
        {
            Delegates.glSecondaryColor3ubv((Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3ui")]
        public static 
        void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue)
        {
            Delegates.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static 
        void SecondaryColor3(UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static 
        void SecondaryColor3(ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
        public static 
        unsafe void SecondaryColor3(UInt32* v)
        {
            Delegates.glSecondaryColor3uiv((UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3us")]
        public static 
        void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue)
        {
            Delegates.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static 
        void SecondaryColor3(UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static 
        void SecondaryColor3(ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
        public static 
        unsafe void SecondaryColor3(UInt16* v)
        {
            Delegates.glSecondaryColor3usv((UInt16*)v);
        }

        
        /// <summary>
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static 
        void SecondaryColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of secondary colors
        /// </summary>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per color. Must be 3.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first color element in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
        public static 
        void SecondaryColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2d")]
        public static 
        void WindowPos2(Double x, Double y)
        {
            Delegates.glWindowPos2d((Double)x, (Double)y);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static 
        void WindowPos2(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glWindowPos2dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static 
        void WindowPos2(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glWindowPos2dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2dv")]
        public static 
        unsafe void WindowPos2(Double* v)
        {
            Delegates.glWindowPos2dv((Double*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2f")]
        public static 
        void WindowPos2(Single x, Single y)
        {
            Delegates.glWindowPos2f((Single)x, (Single)y);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static 
        void WindowPos2(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glWindowPos2fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static 
        void WindowPos2(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glWindowPos2fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2fv")]
        public static 
        unsafe void WindowPos2(Single* v)
        {
            Delegates.glWindowPos2fv((Single*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2i")]
        public static 
        void WindowPos2(Int32 x, Int32 y)
        {
            Delegates.glWindowPos2i((Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static 
        void WindowPos2(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glWindowPos2iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static 
        void WindowPos2(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glWindowPos2iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2iv")]
        public static 
        unsafe void WindowPos2(Int32* v)
        {
            Delegates.glWindowPos2iv((Int32*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2s")]
        public static 
        void WindowPos2(Int16 x, Int16 y)
        {
            Delegates.glWindowPos2s((Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static 
        void WindowPos2(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glWindowPos2sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static 
        void WindowPos2(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glWindowPos2sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos2sv")]
        public static 
        unsafe void WindowPos2(Int16* v)
        {
            Delegates.glWindowPos2sv((Int16*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3d")]
        public static 
        void WindowPos3(Double x, Double y, Double z)
        {
            Delegates.glWindowPos3d((Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static 
        void WindowPos3(Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glWindowPos3dv((Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static 
        void WindowPos3(ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glWindowPos3dv((Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3dv")]
        public static 
        unsafe void WindowPos3(Double* v)
        {
            Delegates.glWindowPos3dv((Double*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3f")]
        public static 
        void WindowPos3(Single x, Single y, Single z)
        {
            Delegates.glWindowPos3f((Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static 
        void WindowPos3(Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glWindowPos3fv((Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static 
        void WindowPos3(ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glWindowPos3fv((Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3fv")]
        public static 
        unsafe void WindowPos3(Single* v)
        {
            Delegates.glWindowPos3fv((Single*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3i")]
        public static 
        void WindowPos3(Int32 x, Int32 y, Int32 z)
        {
            Delegates.glWindowPos3i((Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static 
        void WindowPos3(Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glWindowPos3iv((Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static 
        void WindowPos3(ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glWindowPos3iv((Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3iv")]
        public static 
        unsafe void WindowPos3(Int32* v)
        {
            Delegates.glWindowPos3iv((Int32*)v);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3s")]
        public static 
        void WindowPos3(Int16 x, Int16 y, Int16 z)
        {
            Delegates.glWindowPos3s((Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static 
        void WindowPos3(Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glWindowPos3sv((Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static 
        void WindowPos3(ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glWindowPos3sv((Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version14", Version = "1.4", EntryPoint = "glWindowPos3sv")]
        public static 
        unsafe void WindowPos3(Int16* v)
        {
            Delegates.glWindowPos3sv((Int16*)v);
        }

        
        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static 
        void GenQueries(Int32 n, [Out] UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        
        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static 
        void GenQueries(Int32 n, [Out] Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        
        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static 
        void GenQueries(Int32 n, [Out] out UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        
        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static 
        void GenQueries(Int32 n, [Out] out Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }

        
        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static 
        unsafe void GenQueries(Int32 n, [Out] UInt32* ids)
        {
            Delegates.glGenQueries((Int32)n, (UInt32*)ids);
        }

        
        /// <summary>
        /// Generate query object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query object names to be generated.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array in which the generated query object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenQueries")]
        public static 
        unsafe void GenQueries(Int32 n, [Out] Int32* ids)
        {
            Delegates.glGenQueries((Int32)n, (UInt32*)ids);
        }

        
        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static 
        void DeleteQueries(Int32 n, UInt32[] ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static 
        void DeleteQueries(Int32 n, Int32[] ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static 
        void DeleteQueries(Int32 n, ref UInt32 ids)
        {
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static 
        void DeleteQueries(Int32 n, ref Int32 ids)
        {
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static 
        unsafe void DeleteQueries(Int32 n, UInt32* ids)
        {
            Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
        }

        
        /// <summary>
        /// Delete named query objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of query objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="ids">
        /// <para>
        /// Specifies an array of query objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteQueries")]
        public static 
        unsafe void DeleteQueries(Int32 n, Int32* ids)
        {
            Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsQuery")]
        public static 
        bool IsQuery(UInt32 id)
        {
            return Delegates.glIsQuery((UInt32)id);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a query object
        /// </summary>
        /// <param name="id">
        /// <para>
        /// Specifies a value that may be the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsQuery")]
        public static 
        bool IsQuery(Int32 id)
        {
            return Delegates.glIsQuery((UInt32)id);
        }

        
        /// <summary>
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static 
        void BeginQuery(OpenTK.Graphics.QueryTarget target, UInt32 id)
        {
            Delegates.glBeginQuery((OpenTK.Graphics.QueryTarget)target, (UInt32)id);
        }

        
        /// <summary>
        /// Delimit the boundaries of a query object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="id">
        /// <para>
        /// Specifies the name of a query object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBeginQuery")]
        public static 
        void BeginQuery(OpenTK.Graphics.QueryTarget target, Int32 id)
        {
            Delegates.glBeginQuery((OpenTK.Graphics.QueryTarget)target, (UInt32)id);
        }

        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glEndQuery")]
        public static 
        void EndQuery(OpenTK.Graphics.QueryTarget target)
        {
            Delegates.glEndQuery((OpenTK.Graphics.QueryTarget)target);
        }

        
        /// <summary>
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static 
        void GetQuery(OpenTK.Graphics.QueryTarget target, OpenTK.Graphics.GetQueryParam pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryiv((OpenTK.Graphics.QueryTarget)target, (OpenTK.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        
        /// <summary>
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static 
        void GetQuery(OpenTK.Graphics.QueryTarget target, OpenTK.Graphics.GetQueryParam pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryiv((OpenTK.Graphics.QueryTarget)target, (OpenTK.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        
        /// <summary>
        /// Return parameters of a query object target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a query object target. Must be GL_SAMPLES_PASSED.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a query object target parameter. Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryiv")]
        public static 
        unsafe void GetQuery(OpenTK.Graphics.QueryTarget target, OpenTK.Graphics.GetQueryParam pname, [Out] Int32* @params)
        {
            Delegates.glGetQueryiv((OpenTK.Graphics.QueryTarget)target, (OpenTK.Graphics.GetQueryParam)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static 
        void GetQueryObject(UInt32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static 
        void GetQueryObject(Int32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static 
        void GetQueryObject(UInt32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static 
        void GetQueryObject(Int32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static 
        unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] Int32* @params)
        {
            Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
        public static 
        unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] Int32* @params)
        {
            Delegates.glGetQueryObjectiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static 
        void GetQueryObject(UInt32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static 
        void GetQueryObject(UInt32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
        public static 
        unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.GetQueryObjectParam pname, [Out] UInt32* @params)
        {
            Delegates.glGetQueryObjectuiv((UInt32)id, (OpenTK.Graphics.GetQueryObjectParam)pname, (UInt32*)@params);
        }

        
        /// <summary>
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static 
        void BindBuffer(OpenTK.Graphics.BufferTarget target, UInt32 buffer)
        {
            Delegates.glBindBuffer((OpenTK.Graphics.BufferTarget)target, (UInt32)buffer);
        }

        
        /// <summary>
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBindBuffer")]
        public static 
        void BindBuffer(OpenTK.Graphics.BufferTarget target, Int32 buffer)
        {
            Delegates.glBindBuffer((OpenTK.Graphics.BufferTarget)target, (UInt32)buffer);
        }

        
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static 
        void DeleteBuffers(Int32 n, UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static 
        void DeleteBuffers(Int32 n, Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static 
        void DeleteBuffers(Int32 n, ref UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static 
        void DeleteBuffers(Int32 n, ref Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static 
        unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
        {
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
        }

        
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glDeleteBuffers")]
        public static 
        unsafe void DeleteBuffers(Int32 n, Int32* buffers)
        {
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
        }

        
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static 
        void GenBuffers(Int32 n, [Out] UInt32[] buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static 
        void GenBuffers(Int32 n, [Out] Int32[] buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
        }

        
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static 
        void GenBuffers(Int32 n, [Out] out UInt32 buffers)
        {
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static 
        void GenBuffers(Int32 n, [Out] out Int32 buffers)
        {
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }

        
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static 
        unsafe void GenBuffers(Int32 n, [Out] UInt32* buffers)
        {
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
        }

        
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGenBuffers")]
        public static 
        unsafe void GenBuffers(Int32 n, [Out] Int32* buffers)
        {
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static 
        bool IsBuffer(UInt32 buffer)
        {
            return Delegates.glIsBuffer((UInt32)buffer);
        }

        
        /// <summary>
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glIsBuffer")]
        public static 
        bool IsBuffer(Int32 buffer)
        {
            return Delegates.glIsBuffer((UInt32)buffer);
        }

        
        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferData")]
        public static 
        void BufferData(OpenTK.Graphics.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.BufferUsageHint usage)
        {
            unsafe
            {
                Delegates.glBufferData((OpenTK.Graphics.BufferTarget)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.BufferUsageHint)usage);
            }
        }

        
        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferData")]
        public static 
        void BufferData(OpenTK.Graphics.BufferTarget target, IntPtr size, [In, Out] object data, OpenTK.Graphics.BufferUsageHint usage)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((OpenTK.Graphics.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.BufferUsageHint)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static 
        void BufferSubData(OpenTK.Graphics.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            unsafe
            {
                Delegates.glBufferSubData((OpenTK.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glBufferSubData")]
        public static 
        void BufferSubData(OpenTK.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((OpenTK.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static 
        void GetBufferSubData(OpenTK.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [Out] IntPtr data)
        {
            unsafe
            {
                Delegates.glGetBufferSubData((OpenTK.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
        }

        
        /// <summary>
        /// Returns a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being returned.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the location where buffer object data is returned.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferSubData")]
        public static 
        void GetBufferSubData(OpenTK.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [In, Out] object data)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((OpenTK.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Map a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object being mapped. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="access">
        /// <para>
        /// Specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glMapBuffer")]
        public static 
        unsafe IntPtr MapBuffer(OpenTK.Graphics.BufferTarget target, OpenTK.Graphics.BufferAccess access)
        {
            return Delegates.glMapBuffer((OpenTK.Graphics.BufferTarget)target, (OpenTK.Graphics.BufferAccess)access);
        }

        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glUnmapBuffer")]
        public static 
        bool UnmapBuffer(OpenTK.Graphics.BufferTarget target)
        {
            return Delegates.glUnmapBuffer((OpenTK.Graphics.BufferTarget)target);
        }

        
        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static 
        void GetBufferParameter(OpenTK.Graphics.BufferTarget target, OpenTK.Graphics.BufferParameterName pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteriv((OpenTK.Graphics.BufferTarget)target, (OpenTK.Graphics.BufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        
        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static 
        void GetBufferParameter(OpenTK.Graphics.BufferTarget target, OpenTK.Graphics.BufferParameterName pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteriv((OpenTK.Graphics.BufferTarget)target, (OpenTK.Graphics.BufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        
        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
        public static 
        unsafe void GetBufferParameter(OpenTK.Graphics.BufferTarget target, OpenTK.Graphics.BufferParameterName pname, [Out] Int32* @params)
        {
            Delegates.glGetBufferParameteriv((OpenTK.Graphics.BufferTarget)target, (OpenTK.Graphics.BufferParameterName)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static 
        void GetBufferPointer(OpenTK.Graphics.BufferTarget target, OpenTK.Graphics.BufferPointer pname, [Out] IntPtr @params)
        {
            unsafe
            {
                Delegates.glGetBufferPointerv((OpenTK.Graphics.BufferTarget)target, (OpenTK.Graphics.BufferPointer)pname, (IntPtr)@params);
            }
        }

        
        /// <summary>
        /// Return the pointer to a mapped buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the pointer value specified by pname.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version15", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
        public static 
        void GetBufferPointer(OpenTK.Graphics.BufferTarget target, OpenTK.Graphics.BufferPointer pname, [In, Out] object @params)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((OpenTK.Graphics.BufferTarget)target, (OpenTK.Graphics.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static 
        void BlendEquationSeparate(OpenTK.Graphics.All modeRGB, OpenTK.Graphics.All modeAlpha)
        {
            Delegates.glBlendEquationSeparate((OpenTK.Graphics.All)modeRGB, (OpenTK.Graphics.All)modeAlpha);
        }

        
        /// <summary>
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static 
        void DrawBuffers(Int32 n, OpenTK.Graphics.DrawBuffersEnum[] bufs)
        {
            unsafe
            {
                fixed (OpenTK.Graphics.DrawBuffersEnum* bufs_ptr = bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.DrawBuffersEnum*)bufs_ptr);
                }
            }
        }

        
        /// <summary>
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static 
        void DrawBuffers(Int32 n, ref OpenTK.Graphics.DrawBuffersEnum bufs)
        {
            unsafe
            {
                fixed (OpenTK.Graphics.DrawBuffersEnum* bufs_ptr = &bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.DrawBuffersEnum*)bufs_ptr);
                }
            }
        }

        
        /// <summary>
        /// Specifies a list of color buffers to be drawn into
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffers in bufs.
        /// </para>
        /// </param>
        /// <param name="bufs">
        /// <para>
        /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDrawBuffers")]
        public static 
        unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.DrawBuffersEnum* bufs)
        {
            Delegates.glDrawBuffers((Int32)n, (OpenTK.Graphics.DrawBuffersEnum*)bufs);
        }

        
        /// <summary>
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static 
        void StencilOpSeparate(OpenTK.Graphics.All face, OpenTK.Graphics.StencilOp sfail, OpenTK.Graphics.StencilOp dpfail, OpenTK.Graphics.StencilOp dppass)
        {
            Delegates.glStencilOpSeparate((OpenTK.Graphics.All)face, (OpenTK.Graphics.StencilOp)sfail, (OpenTK.Graphics.StencilOp)dpfail, (OpenTK.Graphics.StencilOp)dppass);
        }

        
        /// <summary>
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static 
        void StencilFuncSeparate(OpenTK.Graphics.StencilFace face, OpenTK.Graphics.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            Delegates.glStencilFuncSeparate((OpenTK.Graphics.StencilFace)face, (OpenTK.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        
        /// <summary>
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        public static 
        void StencilFuncSeparate(OpenTK.Graphics.StencilFace face, OpenTK.Graphics.StencilFunction func, Int32 @ref, Int32 mask)
        {
            Delegates.glStencilFuncSeparate((OpenTK.Graphics.StencilFace)face, (OpenTK.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
        }

        
        /// <summary>
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static 
        void StencilMaskSeparate(OpenTK.Graphics.All face, UInt32 mask)
        {
            Delegates.glStencilMaskSeparate((OpenTK.Graphics.All)face, (UInt32)mask);
        }

        
        /// <summary>
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        public static 
        void StencilMaskSeparate(OpenTK.Graphics.All face, Int32 mask)
        {
            Delegates.glStencilMaskSeparate((OpenTK.Graphics.All)face, (UInt32)mask);
        }

        
        /// <summary>
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glAttachShader")]
        public static 
        void AttachShader(UInt32 program, UInt32 shader)
        {
            Delegates.glAttachShader((UInt32)program, (UInt32)shader);
        }

        
        /// <summary>
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glAttachShader")]
        public static 
        void AttachShader(Int32 program, Int32 shader)
        {
            Delegates.glAttachShader((UInt32)program, (UInt32)shader);
        }

        
        /// <summary>
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static 
        void BindAttribLocation(UInt32 program, UInt32 index, System.String name)
        {
            Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (System.String)name);
        }

        
        /// <summary>
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        public static 
        void BindAttribLocation(Int32 program, Int32 index, System.String name)
        {
            Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (System.String)name);
        }

        
        /// <summary>
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCompileShader")]
        public static 
        void CompileShader(UInt32 shader)
        {
            Delegates.glCompileShader((UInt32)shader);
        }

        
        /// <summary>
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCompileShader")]
        public static 
        void CompileShader(Int32 shader)
        {
            Delegates.glCompileShader((UInt32)shader);
        }

        
        /// <summary>
        /// Creates a program object
        /// </summary>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static 
        Int32 CreateProgram()
        {
            return Delegates.glCreateProgram();
        }

        
        /// <summary>
        /// Creates a shader object
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader to be created. Must be either GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glCreateShader")]
        public static 
        Int32 CreateShader(OpenTK.Graphics.ShaderType type)
        {
            return Delegates.glCreateShader((OpenTK.Graphics.ShaderType)type);
        }

        
        /// <summary>
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static 
        void DeleteProgram(UInt32 program)
        {
            Delegates.glDeleteProgram((UInt32)program);
        }

        
        /// <summary>
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteProgram")]
        public static 
        void DeleteProgram(Int32 program)
        {
            Delegates.glDeleteProgram((UInt32)program);
        }

        
        /// <summary>
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static 
        void DeleteShader(UInt32 shader)
        {
            Delegates.glDeleteShader((UInt32)shader);
        }

        
        /// <summary>
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDeleteShader")]
        public static 
        void DeleteShader(Int32 shader)
        {
            Delegates.glDeleteShader((UInt32)shader);
        }

        
        /// <summary>
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDetachShader")]
        public static 
        void DetachShader(UInt32 program, UInt32 shader)
        {
            Delegates.glDetachShader((UInt32)program, (UInt32)shader);
        }

        
        /// <summary>
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDetachShader")]
        public static 
        void DetachShader(Int32 program, Int32 shader)
        {
            Delegates.glDetachShader((UInt32)program, (UInt32)shader);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static 
        void DisableVertexAttribArray(UInt32 index)
        {
            Delegates.glDisableVertexAttribArray((UInt32)index);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        public static 
        void DisableVertexAttribArray(Int32 index)
        {
            Delegates.glDisableVertexAttribArray((UInt32)index);
        }

        
        /// <summary>
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static 
        void EnableVertexAttribArray(UInt32 index)
        {
            Delegates.glEnableVertexAttribArray((UInt32)index);
        }

        
        /// <summary>
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        public static 
        void EnableVertexAttribArray(Int32 index)
        {
            Delegates.glEnableVertexAttribArray((UInt32)index);
        }

        
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static 
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ActiveAttribType[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ActiveAttribType* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveAttribType*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static 
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ActiveAttribType[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ActiveAttribType* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveAttribType*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static 
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ActiveAttribType type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ActiveAttribType* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveAttribType*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static 
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ActiveAttribType type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ActiveAttribType* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveAttribType*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static 
        unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ActiveAttribType* type, [Out] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ActiveAttribType*)type, (System.Text.StringBuilder)name);
        }

        
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        public static 
        unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ActiveAttribType* type, [Out] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ActiveAttribType*)type, (System.Text.StringBuilder)name);
        }

        
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static 
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ActiveUniformType[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ActiveUniformType* type_ptr = type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveUniformType*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static 
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ActiveUniformType[] type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (OpenTK.Graphics.ActiveUniformType* type_ptr = type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveUniformType*)type_ptr, (System.Text.StringBuilder)name);
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static 
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ActiveUniformType type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ActiveUniformType* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveUniformType*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static 
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ActiveUniformType type, [Out] System.Text.StringBuilder name)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (OpenTK.Graphics.ActiveUniformType* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ActiveUniformType*)type_ptr, (System.Text.StringBuilder)name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static 
        unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ActiveUniformType* type, [Out] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ActiveUniformType*)type, (System.Text.StringBuilder)name);
        }

        
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        public static 
        unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ActiveUniformType* type, [Out] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ActiveUniformType*)type, (System.Text.StringBuilder)name);
        }

        
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static 
        void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] Int32[] count, [Out] UInt32[] obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (UInt32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                }
            }
        }

        
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static 
        void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] Int32[] count, [Out] Int32[] obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                }
            }
        }

        
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static 
        void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] out Int32 count, [Out] out UInt32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (UInt32* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static 
        void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] out Int32 count, [Out] out Int32 obj)
        {
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static 
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [Out] Int32* count, [Out] UInt32* obj)
        {
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
        }

        
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        public static 
        unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [Out] Int32* count, [Out] Int32* obj)
        {
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
        }

        
        /// <summary>
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static 
        Int32 GetAttribLocation(UInt32 program, System.String name)
        {
            return Delegates.glGetAttribLocation((UInt32)program, (System.String)name);
        }

        
        /// <summary>
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        public static 
        Int32 GetAttribLocation(Int32 program, System.String name)
        {
            return Delegates.glGetAttribLocation((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static 
        void GetProgram(UInt32 program, OpenTK.Graphics.ProgramParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static 
        void GetProgram(Int32 program, OpenTK.Graphics.ProgramParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static 
        void GetProgram(UInt32 program, OpenTK.Graphics.ProgramParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static 
        void GetProgram(Int32 program, OpenTK.Graphics.ProgramParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static 
        unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ProgramParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ProgramParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramiv")]
        public static 
        unsafe void GetProgram(Int32 program, OpenTK.Graphics.ProgramParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ProgramParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static 
        void GetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static 
        void GetProgramInfoLog(Int32 program, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static 
        void GetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static 
        void GetProgramInfoLog(Int32 program, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static 
        unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [Out] Int32* length, [Out] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
        }

        
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        public static 
        unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [Out] Int32* length, [Out] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static 
        void GetShader(UInt32 shader, OpenTK.Graphics.ShaderParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static 
        void GetShader(Int32 shader, OpenTK.Graphics.ShaderParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static 
        void GetShader(UInt32 shader, OpenTK.Graphics.ShaderParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static 
        void GetShader(Int32 shader, OpenTK.Graphics.ShaderParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static 
        unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ShaderParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ShaderParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderiv")]
        public static 
        unsafe void GetShader(Int32 shader, OpenTK.Graphics.ShaderParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ShaderParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static 
        void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static 
        void GetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static 
        void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static 
        void GetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    length = *length_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static 
        unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [Out] Int32* length, [Out] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
        }

        
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        public static 
        unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [Out] Int32* length, [Out] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder)infoLog);
        }

        
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static 
        void GetShaderSource(UInt32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                }
            }
        }

        
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static 
        void GetShaderSource(Int32 shader, Int32 bufSize, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                }
            }
        }

        
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static 
        void GetShaderSource(UInt32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    length = *length_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static 
        void GetShaderSource(Int32 shader, Int32 bufSize, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    length = *length_ptr;
                }
            }
        }

        
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static 
        unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [Out] Int32* length, [Out] System.Text.StringBuilder[] source)
        {
            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder[])source);
        }

        
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetShaderSource")]
        public static 
        unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [Out] Int32* length, [Out] System.Text.StringBuilder[] source)
        {
            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (System.Text.StringBuilder[])source);
        }

        
        /// <summary>
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static 
        Int32 GetUniformLocation(UInt32 program, System.String name)
        {
            return Delegates.glGetUniformLocation((UInt32)program, (System.String)name);
        }

        
        /// <summary>
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        public static 
        Int32 GetUniformLocation(Int32 program, System.String name)
        {
            return Delegates.glGetUniformLocation((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static 
        void GetUniform(UInt32 program, Int32 location, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static 
        void GetUniform(Int32 program, Int32 location, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static 
        void GetUniform(UInt32 program, Int32 location, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static 
        void GetUniform(Int32 program, Int32 location, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, [Out] Single* @params)
        {
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformfv")]
        public static 
        unsafe void GetUniform(Int32 program, Int32 location, [Out] Single* @params)
        {
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static 
        void GetUniform(UInt32 program, Int32 location, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static 
        void GetUniform(Int32 program, Int32 location, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static 
        void GetUniform(UInt32 program, Int32 location, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static 
        void GetUniform(Int32 program, Int32 location, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, [Out] Int32* @params)
        {
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetUniformiv")]
        public static 
        unsafe void GetUniform(Int32 program, Int32 location, [Out] Int32* @params)
        {
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Double[] @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] out Double @params)
        {
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static 
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Double* @params)
        {
            Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Double*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
        public static 
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Double* @params)
        {
            Delegates.glGetVertexAttribdv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Double*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Single[] @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] out Single @params)
        {
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static 
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Single* @params)
        {
            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Single*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        public static 
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Single* @params)
        {
            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Single*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static 
        void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static 
        void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static 
        unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        public static 
        unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.VertexAttribParameter)pname, (Int32*)@params);
        }

        
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static 
        void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.VertexAttribPointerParameter pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static 
        void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.VertexAttribPointerParameter pname, [Out] IntPtr pointer)
        {
            unsafe
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static 
        void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.VertexAttribPointerParameter pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        public static 
        void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.VertexAttribPointerParameter pname, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsProgram")]
        public static 
        bool IsProgram(UInt32 program)
        {
            return Delegates.glIsProgram((UInt32)program);
        }

        
        /// <summary>
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsProgram")]
        public static 
        bool IsProgram(Int32 program)
        {
            return Delegates.glIsProgram((UInt32)program);
        }

        
        /// <summary>
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsShader")]
        public static 
        bool IsShader(UInt32 shader)
        {
            return Delegates.glIsShader((UInt32)shader);
        }

        
        /// <summary>
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glIsShader")]
        public static 
        bool IsShader(Int32 shader)
        {
            return Delegates.glIsShader((UInt32)shader);
        }

        
        /// <summary>
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static 
        void LinkProgram(UInt32 program)
        {
            Delegates.glLinkProgram((UInt32)program);
        }

        
        /// <summary>
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glLinkProgram")]
        public static 
        void LinkProgram(Int32 program)
        {
            Delegates.glLinkProgram((UInt32)program);
        }

        
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static 
        void ShaderSource(UInt32 shader, Int32 count, System.String[] @string, Int32[] length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static 
        void ShaderSource(Int32 shader, Int32 count, System.String[] @string, Int32[] length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static 
        void ShaderSource(UInt32 shader, Int32 count, System.String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static 
        void ShaderSource(Int32 shader, Int32 count, System.String[] @string, ref Int32 length)
        {
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                }
            }
        }

        
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static 
        unsafe void ShaderSource(UInt32 shader, Int32 count, System.String[] @string, Int32* length)
        {
            Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length);
        }

        
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glShaderSource")]
        public static 
        unsafe void ShaderSource(Int32 shader, Int32 count, System.String[] @string, Int32* length)
        {
            Delegates.glShaderSource((UInt32)shader, (Int32)count, (System.String[])@string, (Int32*)length);
        }

        
        /// <summary>
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUseProgram")]
        public static 
        void UseProgram(UInt32 program)
        {
            Delegates.glUseProgram((UInt32)program);
        }

        
        /// <summary>
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUseProgram")]
        public static 
        void UseProgram(Int32 program)
        {
            Delegates.glUseProgram((UInt32)program);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1f")]
        public static 
        void Uniform1(Int32 location, Single v0)
        {
            Delegates.glUniform1f((Int32)location, (Single)v0);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2f")]
        public static 
        void Uniform2(Int32 location, Single v0, Single v1)
        {
            Delegates.glUniform2f((Int32)location, (Single)v0, (Single)v1);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3f")]
        public static 
        void Uniform3(Int32 location, Single v0, Single v1, Single v2)
        {
            Delegates.glUniform3f((Int32)location, (Single)v0, (Single)v1, (Single)v2);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4f")]
        public static 
        void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
        {
            Delegates.glUniform4f((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1i")]
        public static 
        void Uniform1(Int32 location, Int32 v0)
        {
            Delegates.glUniform1i((Int32)location, (Int32)v0);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2i")]
        public static 
        void Uniform2(Int32 location, Int32 v0, Int32 v1)
        {
            Delegates.glUniform2i((Int32)location, (Int32)v0, (Int32)v1);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3i")]
        public static 
        void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
            Delegates.glUniform3i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4i")]
        public static 
        void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
            Delegates.glUniform4i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static 
        void Uniform1(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static 
        void Uniform1(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1fv")]
        public static 
        unsafe void Uniform1(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static 
        void Uniform2v(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static 
        void Uniform2v(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2fv")]
        public static 
        unsafe void Uniform2v(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static 
        void Uniform3(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static 
        void Uniform3(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3fv")]
        public static 
        unsafe void Uniform3(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static 
        void Uniform4(Int32 location, Int32 count, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static 
        void Uniform4(Int32 location, Int32 count, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4fv")]
        public static 
        unsafe void Uniform4(Int32 location, Int32 count, Single* value)
        {
            Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static 
        void Uniform1(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static 
        void Uniform1(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform1iv")]
        public static 
        unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static 
        void Uniform2v(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static 
        void Uniform2v(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform2iv")]
        public static 
        unsafe void Uniform2v(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static 
        void Uniform3(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static 
        void Uniform3(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform3iv")]
        public static 
        unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static 
        void Uniform4(Int32 location, Int32 count, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static 
        void Uniform4(Int32 location, Int32 count, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniform4iv")]
        public static 
        unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
        {
            Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static 
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static 
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        public static 
        unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static 
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static 
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        public static 
        unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static 
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static 
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        public static 
        unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        
        /// <summary>
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static 
        void ValidateProgram(UInt32 program)
        {
            Delegates.glValidateProgram((UInt32)program);
        }

        
        /// <summary>
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glValidateProgram")]
        public static 
        void ValidateProgram(Int32 program)
        {
            Delegates.glValidateProgram((UInt32)program);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static 
        void VertexAttrib1(UInt32 index, Double x)
        {
            Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
        public static 
        void VertexAttrib1(Int32 index, Double x)
        {
            Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static 
        void VertexAttrib1v(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static 
        void VertexAttrib1v(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static 
        void VertexAttrib1v(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static 
        void VertexAttrib1v(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static 
        unsafe void VertexAttrib1v(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
        public static 
        unsafe void VertexAttrib1v(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static 
        void VertexAttrib1(UInt32 index, Single x)
        {
            Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        public static 
        void VertexAttrib1(Int32 index, Single x)
        {
            Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static 
        void VertexAttrib1v(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static 
        void VertexAttrib1v(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static 
        void VertexAttrib1v(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static 
        void VertexAttrib1v(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static 
        unsafe void VertexAttrib1v(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        public static 
        unsafe void VertexAttrib1v(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static 
        void VertexAttrib1(UInt32 index, Int16 x)
        {
            Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
        public static 
        void VertexAttrib1(Int32 index, Int16 x)
        {
            Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static 
        void VertexAttrib1v(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static 
        void VertexAttrib1v(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static 
        void VertexAttrib1v(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static 
        void VertexAttrib1v(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static 
        unsafe void VertexAttrib1v(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
        public static 
        unsafe void VertexAttrib1v(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static 
        void VertexAttrib2(UInt32 index, Double x, Double y)
        {
            Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
        public static 
        void VertexAttrib2(Int32 index, Double x, Double y)
        {
            Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static 
        void VertexAttrib2(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static 
        void VertexAttrib2(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static 
        void VertexAttrib2(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static 
        void VertexAttrib2(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static 
        unsafe void VertexAttrib2(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
        public static 
        unsafe void VertexAttrib2(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static 
        void VertexAttrib2(UInt32 index, Single x, Single y)
        {
            Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        public static 
        void VertexAttrib2(Int32 index, Single x, Single y)
        {
            Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static 
        void VertexAttrib2(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static 
        void VertexAttrib2(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static 
        void VertexAttrib2(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static 
        void VertexAttrib2(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static 
        unsafe void VertexAttrib2(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        public static 
        unsafe void VertexAttrib2(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static 
        void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
        {
            Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
        public static 
        void VertexAttrib2(Int32 index, Int16 x, Int16 y)
        {
            Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static 
        void VertexAttrib2(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static 
        void VertexAttrib2(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static 
        void VertexAttrib2(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static 
        void VertexAttrib2(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static 
        unsafe void VertexAttrib2(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
        public static 
        unsafe void VertexAttrib2(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static 
        void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
        {
            Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
        public static 
        void VertexAttrib3(Int32 index, Double x, Double y, Double z)
        {
            Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static 
        void VertexAttrib3(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static 
        void VertexAttrib3(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static 
        void VertexAttrib3(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static 
        void VertexAttrib3(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static 
        unsafe void VertexAttrib3(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
        public static 
        unsafe void VertexAttrib3(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static 
        void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
        {
            Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        public static 
        void VertexAttrib3(Int32 index, Single x, Single y, Single z)
        {
            Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static 
        void VertexAttrib3(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static 
        void VertexAttrib3(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static 
        void VertexAttrib3(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static 
        void VertexAttrib3(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static 
        unsafe void VertexAttrib3(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        public static 
        unsafe void VertexAttrib3(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static 
        void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
        {
            Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
        public static 
        void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
        {
            Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static 
        void VertexAttrib3(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static 
        void VertexAttrib3(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static 
        void VertexAttrib3(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static 
        void VertexAttrib3(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static 
        unsafe void VertexAttrib3(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
        public static 
        unsafe void VertexAttrib3(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static 
        void VertexAttrib4N(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static 
        void VertexAttrib4N(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
        public static 
        unsafe void VertexAttrib4N(UInt32 index, SByte* v)
        {
            Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static 
        void VertexAttrib4N(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static 
        void VertexAttrib4N(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static 
        void VertexAttrib4N(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static 
        void VertexAttrib4N(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static 
        unsafe void VertexAttrib4N(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
        public static 
        unsafe void VertexAttrib4N(Int32 index, Int32* v)
        {
            Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static 
        void VertexAttrib4N(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static 
        void VertexAttrib4N(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static 
        void VertexAttrib4N(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static 
        void VertexAttrib4N(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static 
        unsafe void VertexAttrib4N(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
        public static 
        unsafe void VertexAttrib4N(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static 
        void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
        public static 
        void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w)
        {
            Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static 
        void VertexAttrib4N(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static 
        void VertexAttrib4N(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static 
        void VertexAttrib4N(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static 
        void VertexAttrib4N(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static 
        unsafe void VertexAttrib4N(UInt32 index, Byte* v)
        {
            Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
        public static 
        unsafe void VertexAttrib4N(Int32 index, Byte* v)
        {
            Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static 
        void VertexAttrib4N(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static 
        void VertexAttrib4N(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
        public static 
        unsafe void VertexAttrib4N(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static 
        void VertexAttrib4N(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static 
        void VertexAttrib4N(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
        public static 
        unsafe void VertexAttrib4N(UInt32 index, UInt16* v)
        {
            Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static 
        void VertexAttrib4(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static 
        void VertexAttrib4(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, SByte* v)
        {
            Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static 
        void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
        {
            Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
        public static 
        void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
        {
            Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static 
        void VertexAttrib4(UInt32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static 
        void VertexAttrib4(Int32 index, Double[] v)
        {
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static 
        void VertexAttrib4(UInt32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static 
        void VertexAttrib4(Int32 index, ref Double v)
        {
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, Double* v)
        {
            Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
        public static 
        unsafe void VertexAttrib4(Int32 index, Double* v)
        {
            Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static 
        void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
        {
            Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        public static 
        void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
        {
            Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static 
        void VertexAttrib4(UInt32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static 
        void VertexAttrib4(Int32 index, Single[] v)
        {
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static 
        void VertexAttrib4(UInt32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static 
        void VertexAttrib4(Int32 index, ref Single v)
        {
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, Single* v)
        {
            Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        public static 
        unsafe void VertexAttrib4(Int32 index, Single* v)
        {
            Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static 
        void VertexAttrib4(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static 
        void VertexAttrib4(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static 
        void VertexAttrib4(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static 
        void VertexAttrib4(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
        public static 
        unsafe void VertexAttrib4(Int32 index, Int32* v)
        {
            Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static 
        void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
        public static 
        void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static 
        void VertexAttrib4(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static 
        void VertexAttrib4(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static 
        void VertexAttrib4(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static 
        void VertexAttrib4(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
        public static 
        unsafe void VertexAttrib4(Int32 index, Int16* v)
        {
            Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static 
        void VertexAttrib4(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static 
        void VertexAttrib4(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static 
        void VertexAttrib4(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static 
        void VertexAttrib4(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, Byte* v)
        {
            Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
        public static 
        unsafe void VertexAttrib4(Int32 index, Byte* v)
        {
            Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static 
        void VertexAttrib4(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static 
        void VertexAttrib4(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static 
        void VertexAttrib4(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static 
        void VertexAttrib4(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
        public static 
        unsafe void VertexAttrib4(UInt32 index, UInt16* v)
        {
            Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
        }

        
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static 
        void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static 
        void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
        }

        
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static 
        void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>
        [AutoGenerated(Category = "Version20", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        public static 
        void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static 
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static 
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
        public static 
        unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static 
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static 
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
        public static 
        unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static 
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static 
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
        public static 
        unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static 
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static 
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
        public static 
        unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static 
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static 
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
        public static 
        unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static 
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static 
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version21", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
        public static 
        unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glColorMaski")]
        public static 
        void ColorMask(UInt32 index, bool r, bool g, bool b, bool a)
        {
            Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glColorMaski")]
        public static 
        void ColorMask(Int32 index, bool r, bool g, bool b, bool a)
        {
            Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static 
        void GetBooleani_(OpenTK.Graphics.Version30 target, UInt32 index, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.Version30)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static 
        void GetBooleani_(OpenTK.Graphics.Version30 target, Int32 index, [Out] bool[] data)
        {
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.Version30)target, (UInt32)index, (bool*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static 
        void GetBooleani_(OpenTK.Graphics.Version30 target, UInt32 index, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.Version30)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static 
        void GetBooleani_(OpenTK.Graphics.Version30 target, Int32 index, [Out] out bool data)
        {
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((OpenTK.Graphics.Version30)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static 
        unsafe void GetBooleani_(OpenTK.Graphics.Version30 target, UInt32 index, [Out] bool* data)
        {
            Delegates.glGetBooleani_v((OpenTK.Graphics.Version30)target, (UInt32)index, (bool*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetBooleani_v")]
        public static 
        unsafe void GetBooleani_(OpenTK.Graphics.Version30 target, Int32 index, [Out] bool* data)
        {
            Delegates.glGetBooleani_v((OpenTK.Graphics.Version30)target, (UInt32)index, (bool*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static 
        void GetIntegeri_(OpenTK.Graphics.Version30 target, UInt32 index, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.Version30)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static 
        void GetIntegeri_(OpenTK.Graphics.Version30 target, Int32 index, [Out] Int32[] data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.Version30)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static 
        void GetIntegeri_(OpenTK.Graphics.Version30 target, UInt32 index, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.Version30)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static 
        void GetIntegeri_(OpenTK.Graphics.Version30 target, Int32 index, [Out] out Int32 data)
        {
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((OpenTK.Graphics.Version30)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static 
        unsafe void GetIntegeri_(OpenTK.Graphics.Version30 target, UInt32 index, [Out] Int32* data)
        {
            Delegates.glGetIntegeri_v((OpenTK.Graphics.Version30)target, (UInt32)index, (Int32*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
        public static 
        unsafe void GetIntegeri_(OpenTK.Graphics.Version30 target, Int32 index, [Out] Int32* data)
        {
            Delegates.glGetIntegeri_v((OpenTK.Graphics.Version30)target, (UInt32)index, (Int32*)data);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEnablei")]
        public static 
        void Enable(OpenTK.Graphics.Version30 target, UInt32 index)
        {
            Delegates.glEnablei((OpenTK.Graphics.Version30)target, (UInt32)index);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEnablei")]
        public static 
        void Enable(OpenTK.Graphics.Version30 target, Int32 index)
        {
            Delegates.glEnablei((OpenTK.Graphics.Version30)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glDisablei")]
        public static 
        void Disable(OpenTK.Graphics.Version30 target, UInt32 index)
        {
            Delegates.glDisablei((OpenTK.Graphics.Version30)target, (UInt32)index);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glDisablei")]
        public static 
        void Disable(OpenTK.Graphics.Version30 target, Int32 index)
        {
            Delegates.glDisablei((OpenTK.Graphics.Version30)target, (UInt32)index);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static 
        bool IsEnabled(OpenTK.Graphics.Version30 target, UInt32 index)
        {
            return Delegates.glIsEnabledi((OpenTK.Graphics.Version30)target, (UInt32)index);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glIsEnabledi")]
        public static 
        bool IsEnabled(OpenTK.Graphics.Version30 target, Int32 index)
        {
            return Delegates.glIsEnabledi((OpenTK.Graphics.Version30)target, (UInt32)index);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
        public static 
        void BeginTransformFeedback(OpenTK.Graphics.Version30 primitiveMode)
        {
            Delegates.glBeginTransformFeedback((OpenTK.Graphics.Version30)primitiveMode);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
        public static 
        void EndTransformFeedback()
        {
            Delegates.glEndTransformFeedback();
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static 
        void BindBufferRange(OpenTK.Graphics.Version30 target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
        {
            Delegates.glBindBufferRange((OpenTK.Graphics.Version30)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferRange")]
        public static 
        void BindBufferRange(OpenTK.Graphics.Version30 target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
        {
            Delegates.glBindBufferRange((OpenTK.Graphics.Version30)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static 
        void BindBufferBase(OpenTK.Graphics.Version30 target, UInt32 index, UInt32 buffer)
        {
            Delegates.glBindBufferBase((OpenTK.Graphics.Version30)target, (UInt32)index, (UInt32)buffer);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindBufferBase")]
        public static 
        void BindBufferBase(OpenTK.Graphics.Version30 target, Int32 index, Int32 buffer)
        {
            Delegates.glBindBufferBase((OpenTK.Graphics.Version30)target, (UInt32)index, (UInt32)buffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static 
        void TransformFeedbackVarying(UInt32 program, Int32 count, Int32[] locations, OpenTK.Graphics.Version30 bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = locations)
                {
                    Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.Version30)bufferMode);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static 
        void TransformFeedbackVarying(Int32 program, Int32 count, Int32[] locations, OpenTK.Graphics.Version30 bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = locations)
                {
                    Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.Version30)bufferMode);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static 
        void TransformFeedbackVarying(UInt32 program, Int32 count, ref Int32 locations, OpenTK.Graphics.Version30 bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = &locations)
                {
                    Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.Version30)bufferMode);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static 
        void TransformFeedbackVarying(Int32 program, Int32 count, ref Int32 locations, OpenTK.Graphics.Version30 bufferMode)
        {
            unsafe
            {
                fixed (Int32* locations_ptr = &locations)
                {
                    Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.Version30)bufferMode);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static 
        unsafe void TransformFeedbackVarying(UInt32 program, Int32 count, Int32* locations, OpenTK.Graphics.Version30 bufferMode)
        {
            Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (Int32*)locations, (OpenTK.Graphics.Version30)bufferMode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
        public static 
        unsafe void TransformFeedbackVarying(Int32 program, Int32 count, Int32* locations, OpenTK.Graphics.Version30 bufferMode)
        {
            Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (Int32*)locations, (OpenTK.Graphics.Version30)bufferMode);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static 
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] Int32[] location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = location)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static 
        void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] Int32[] location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = location)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static 
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] out Int32 location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = &location)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    location = *location_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static 
        void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] out Int32 location)
        {
            unsafe
            {
                fixed (Int32* location_ptr = &location)
                {
                    Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    location = *location_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static 
        unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] Int32* location)
        {
            Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32*)location);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
        public static 
        unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] Int32* location)
        {
            Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32*)location);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClampColor")]
        public static 
        void ClampColor(OpenTK.Graphics.ClampColorTarget target, OpenTK.Graphics.ClampColorMode clamp)
        {
            Delegates.glClampColor((OpenTK.Graphics.ClampColorTarget)target, (OpenTK.Graphics.ClampColorMode)clamp);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static 
        void BeginConditionalRender(UInt32 id, OpenTK.Graphics.Version30 mode)
        {
            Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.Version30)mode);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
        public static 
        void BeginConditionalRender(Int32 id, OpenTK.Graphics.Version30 mode)
        {
            Delegates.glBeginConditionalRender((UInt32)id, (OpenTK.Graphics.Version30)mode);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glEndConditionalRender")]
        public static 
        void EndConditionalRender()
        {
            Delegates.glEndConditionalRender();
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static 
        void VertexAttribI1(UInt32 index, Int32 x)
        {
            Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
        public static 
        void VertexAttribI1(Int32 index, Int32 x)
        {
            Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static 
        void VertexAttribI2(UInt32 index, Int32 x, Int32 y)
        {
            Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
        public static 
        void VertexAttribI2(Int32 index, Int32 x, Int32 y)
        {
            Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static 
        void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z)
        {
            Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
        public static 
        void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z)
        {
            Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static 
        void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
        public static 
        void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
        public static 
        void VertexAttribI1(UInt32 index, UInt32 x)
        {
            Delegates.glVertexAttribI1ui((UInt32)index, (UInt32)x);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
        public static 
        void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y)
        {
            Delegates.glVertexAttribI2ui((UInt32)index, (UInt32)x, (UInt32)y);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
        public static 
        void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
        {
            Delegates.glVertexAttribI3ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
        public static 
        void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
        {
            Delegates.glVertexAttribI4ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static 
        void VertexAttribI1v(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static 
        void VertexAttribI1v(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static 
        void VertexAttribI1v(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static 
        void VertexAttribI1v(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static 
        unsafe void VertexAttribI1v(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
        public static 
        unsafe void VertexAttribI1v(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static 
        void VertexAttribI2(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static 
        void VertexAttribI2(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static 
        void VertexAttribI2(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static 
        void VertexAttribI2(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static 
        unsafe void VertexAttribI2(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
        public static 
        unsafe void VertexAttribI2(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static 
        void VertexAttribI3(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static 
        void VertexAttribI3(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static 
        void VertexAttribI3(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static 
        void VertexAttribI3(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static 
        unsafe void VertexAttribI3(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
        public static 
        unsafe void VertexAttribI3(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static 
        void VertexAttribI4(UInt32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static 
        void VertexAttribI4(Int32 index, Int32[] v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static 
        void VertexAttribI4(UInt32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static 
        void VertexAttribI4(Int32 index, ref Int32 v)
        {
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static 
        unsafe void VertexAttribI4(UInt32 index, Int32* v)
        {
            Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
        public static 
        unsafe void VertexAttribI4(Int32 index, Int32* v)
        {
            Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static 
        void VertexAttribI1v(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI1uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static 
        void VertexAttribI1v(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI1uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
        public static 
        unsafe void VertexAttribI1v(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI1uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static 
        void VertexAttribI2(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static 
        void VertexAttribI2(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
        public static 
        unsafe void VertexAttribI2(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static 
        void VertexAttribI3(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static 
        void VertexAttribI3(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
        public static 
        unsafe void VertexAttribI3(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static 
        void VertexAttribI4(UInt32 index, UInt32[] v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static 
        void VertexAttribI4(UInt32 index, ref UInt32 v)
        {
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
        public static 
        unsafe void VertexAttribI4(UInt32 index, UInt32* v)
        {
            Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static 
        void VertexAttribI4(UInt32 index, SByte[] v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static 
        void VertexAttribI4(UInt32 index, ref SByte v)
        {
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
        public static 
        unsafe void VertexAttribI4(UInt32 index, SByte* v)
        {
            Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static 
        void VertexAttribI4(UInt32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static 
        void VertexAttribI4(Int32 index, Int16[] v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static 
        void VertexAttribI4(UInt32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static 
        void VertexAttribI4(Int32 index, ref Int16 v)
        {
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static 
        unsafe void VertexAttribI4(UInt32 index, Int16* v)
        {
            Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
        public static 
        unsafe void VertexAttribI4(Int32 index, Int16* v)
        {
            Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static 
        void VertexAttribI4(UInt32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static 
        void VertexAttribI4(Int32 index, Byte[] v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static 
        void VertexAttribI4(UInt32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static 
        void VertexAttribI4(Int32 index, ref Byte v)
        {
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static 
        unsafe void VertexAttribI4(UInt32 index, Byte* v)
        {
            Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
        public static 
        unsafe void VertexAttribI4(Int32 index, Byte* v)
        {
            Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static 
        void VertexAttribI4(UInt32 index, UInt16[] v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static 
        void VertexAttribI4(UInt32 index, ref UInt16 v)
        {
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
        public static 
        unsafe void VertexAttribI4(UInt32 index, UInt16* v)
        {
            Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static 
        void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.Version30 type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.Version30)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static 
        void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.Version30 type, Int32 stride, IntPtr pointer)
        {
            unsafe
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.Version30)type, (Int32)stride, (IntPtr)pointer);
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static 
        void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.Version30 type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.Version30)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
        public static 
        void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.Version30 type, Int32 stride, [In, Out] object pointer)
        {
            unsafe
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (OpenTK.Graphics.Version30)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.Version30 pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static 
        void GetVertexAttribI(Int32 index, OpenTK.Graphics.Version30 pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.Version30 pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static 
        void GetVertexAttribI(Int32 index, OpenTK.Graphics.Version30 pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static 
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.Version30 pname, [Out] Int32* @params)
        {
            Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
        public static 
        unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.Version30 pname, [Out] Int32* @params)
        {
            Delegates.glGetVertexAttribIiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.Version30 pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static 
        void GetVertexAttribI(UInt32 index, OpenTK.Graphics.Version30 pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
        public static 
        unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.Version30 pname, [Out] UInt32* @params)
        {
            Delegates.glGetVertexAttribIuiv((UInt32)index, (OpenTK.Graphics.Version30)pname, (UInt32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static 
        void GetUniform(UInt32 program, Int32 location, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static 
        void GetUniform(UInt32 program, Int32 location, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetUniformuiv")]
        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, [Out] UInt32* @params)
        {
            Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static 
        void BindFragDataLocation(UInt32 program, UInt32 color, System.String name)
        {
            Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (System.String)name);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
        public static 
        void BindFragDataLocation(Int32 program, Int32 color, System.String name)
        {
            Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (System.String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static 
        Int32 GetFragDataLocation(UInt32 program, System.String name)
        {
            return Delegates.glGetFragDataLocation((UInt32)program, (System.String)name);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
        public static 
        Int32 GetFragDataLocation(Int32 program, System.String name)
        {
            return Delegates.glGetFragDataLocation((UInt32)program, (System.String)name);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1ui")]
        public static 
        void Uniform1(Int32 location, UInt32 v0)
        {
            Delegates.glUniform1ui((Int32)location, (UInt32)v0);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2ui")]
        public static 
        void Uniform2(Int32 location, UInt32 v0, UInt32 v1)
        {
            Delegates.glUniform2ui((Int32)location, (UInt32)v0, (UInt32)v1);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3ui")]
        public static 
        void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
        {
            Delegates.glUniform3ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4ui")]
        public static 
        void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
        {
            Delegates.glUniform4ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static 
        void Uniform1(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static 
        void Uniform1(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform1uiv")]
        public static 
        unsafe void Uniform1(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static 
        void Uniform2v(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static 
        void Uniform2v(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform2uiv")]
        public static 
        unsafe void Uniform2v(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static 
        void Uniform3(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static 
        void Uniform3(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform3uiv")]
        public static 
        unsafe void Uniform3(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static 
        void Uniform4(Int32 location, Int32 count, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static 
        void Uniform4(Int32 location, Int32 count, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glUniform4uiv")]
        public static 
        unsafe void Uniform4(Int32 location, Int32 count, UInt32* value)
        {
            Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static 
        void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static 
        void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIiv")]
        public static 
        unsafe void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
        {
            Delegates.glTexParameterIiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static 
        void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIuiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static 
        void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIuiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
        public static 
        unsafe void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32* @params)
        {
            Delegates.glTexParameterIuiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static 
        void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static 
        void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
        public static 
        unsafe void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
        {
            Delegates.glGetTexParameterIiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static 
        void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32[] @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIuiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static 
        void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out UInt32 @params)
        {
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIuiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
        public static 
        unsafe void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32* @params)
        {
            Delegates.glGetTexParameterIuiv((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static 
        void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, Int32[] value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glClearBufferiv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static 
        void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, ref Int32 value)
        {
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glClearBufferiv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferiv")]
        public static 
        unsafe void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, Int32* value)
        {
            Delegates.glClearBufferiv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (Int32*)value);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static 
        void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, UInt32[] value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glClearBufferuiv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static 
        void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, ref UInt32 value)
        {
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glClearBufferuiv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferuiv")]
        public static 
        unsafe void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, UInt32* value)
        {
            Delegates.glClearBufferuiv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (UInt32*)value);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static 
        void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, Single[] value)
        {
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glClearBufferfv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static 
        void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, ref Single value)
        {
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glClearBufferfv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfv")]
        public static 
        unsafe void ClearBuffer(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, Single* value)
        {
            Delegates.glClearBufferfv((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (Single*)value);
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glClearBufferfi")]
        public static 
        void ClearBufferf(OpenTK.Graphics.Version30 buffer, Int32 drawbuffer, Single depth, Int32 stencil)
        {
            Delegates.glClearBufferfi((OpenTK.Graphics.Version30)buffer, (Int32)drawbuffer, (Single)depth, (Int32)stencil);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetStringi")]
        public static 
        string GetString(OpenTK.Graphics.Version30 name, UInt32 index)
        {
            unsafe
            {
                return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(Delegates.glGetStringi((OpenTK.Graphics.Version30)name, (UInt32)index));
            }
        }

        [AutoGenerated(Category = "Version30", Version = "3.0", EntryPoint = "glGetStringi")]
        public static 
        string GetString(OpenTK.Graphics.Version30 name, Int32 index)
        {
            unsafe
            {
                return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(Delegates.glGetStringi((OpenTK.Graphics.Version30)name, (UInt32)index));
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static 
        bool IsRenderbuffer(UInt32 renderbuffer)
        {
            return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
        public static 
        bool IsRenderbuffer(Int32 renderbuffer)
        {
            return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static 
        void BindRenderbuffer(OpenTK.Graphics.RenderbufferTarget target, UInt32 renderbuffer)
        {
            Delegates.glBindRenderbuffer((OpenTK.Graphics.RenderbufferTarget)target, (UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
        public static 
        void BindRenderbuffer(OpenTK.Graphics.RenderbufferTarget target, Int32 renderbuffer)
        {
            Delegates.glBindRenderbuffer((OpenTK.Graphics.RenderbufferTarget)target, (UInt32)renderbuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static 
        void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static 
        void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static 
        void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static 
        void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static 
        unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
        public static 
        unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
        {
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static 
        void GenRenderbuffers(Int32 n, [Out] UInt32[] renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static 
        void GenRenderbuffers(Int32 n, [Out] Int32[] renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static 
        void GenRenderbuffers(Int32 n, [Out] out UInt32 renderbuffers)
        {
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static 
        void GenRenderbuffers(Int32 n, [Out] out Int32 renderbuffers)
        {
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static 
        unsafe void GenRenderbuffers(Int32 n, [Out] UInt32* renderbuffers)
        {
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
        public static 
        unsafe void GenRenderbuffers(Int32 n, [Out] Int32* renderbuffers)
        {
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
        public static 
        void RenderbufferStorage(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
            Delegates.glRenderbufferStorage((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static 
        void GetRenderbufferParameter(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static 
        void GetRenderbufferParameter(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferParameterName pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
        public static 
        unsafe void GetRenderbufferParameter(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32* @params)
        {
            Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static 
        bool IsFramebuffer(UInt32 framebuffer)
        {
            return Delegates.glIsFramebuffer((UInt32)framebuffer);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glIsFramebuffer")]
        public static 
        bool IsFramebuffer(Int32 framebuffer)
        {
            return Delegates.glIsFramebuffer((UInt32)framebuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static 
        void BindFramebuffer(OpenTK.Graphics.FramebufferTarget target, UInt32 framebuffer)
        {
            Delegates.glBindFramebuffer((OpenTK.Graphics.FramebufferTarget)target, (UInt32)framebuffer);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBindFramebuffer")]
        public static 
        void BindFramebuffer(OpenTK.Graphics.FramebufferTarget target, Int32 framebuffer)
        {
            Delegates.glBindFramebuffer((OpenTK.Graphics.FramebufferTarget)target, (UInt32)framebuffer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static 
        void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static 
        void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static 
        void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static 
        void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static 
        unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
        {
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
        public static 
        unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
        {
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static 
        void GenFramebuffers(Int32 n, [Out] UInt32[] framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static 
        void GenFramebuffers(Int32 n, [Out] Int32[] framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static 
        void GenFramebuffers(Int32 n, [Out] out UInt32 framebuffers)
        {
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static 
        void GenFramebuffers(Int32 n, [Out] out Int32 framebuffers)
        {
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static 
        unsafe void GenFramebuffers(Int32 n, [Out] UInt32* framebuffers)
        {
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenFramebuffers")]
        public static 
        unsafe void GenFramebuffers(Int32 n, [Out] Int32* framebuffers)
        {
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
        public static 
        OpenTK.Graphics.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.FramebufferTarget target)
        {
            return Delegates.glCheckFramebufferStatus((OpenTK.Graphics.FramebufferTarget)target);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static 
        void FramebufferTexture1D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture1D((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
        public static 
        void FramebufferTexture1D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture1D((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static 
        void FramebufferTexture2D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture2D((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
        public static 
        void FramebufferTexture2D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level)
        {
            Delegates.glFramebufferTexture2D((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static 
        void FramebufferTexture3D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
        {
            Delegates.glFramebufferTexture3D((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
        public static 
        void FramebufferTexture3D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
        {
            Delegates.glFramebufferTexture3D((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static 
        void FramebufferRenderbuffer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
        {
            Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
        public static 
        void FramebufferRenderbuffer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
        {
            Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static 
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.FramebufferParameterName pname, [Out] Int32[] @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.FramebufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static 
        void GetFramebufferAttachmentParameter(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.FramebufferParameterName pname, [Out] out Int32 @params)
        {
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        public static 
        unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.FramebufferParameterName pname, [Out] Int32* @params)
        {
            Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.FramebufferParameterName)pname, (Int32*)@params);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glGenerate")]
        public static 
        void Generate(OpenTK.Graphics.GenerateMipmapTarget target)
        {
            Delegates.glGenerate((OpenTK.Graphics.GenerateMipmapTarget)target);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
        public static 
        void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ClearBufferMask mask, OpenTK.Graphics.BlitFramebufferFilter filter)
        {
            Delegates.glBlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.ClearBufferMask)mask, (OpenTK.Graphics.BlitFramebufferFilter)filter);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
        public static 
        void RenderbufferStorageMultisample(OpenTK.Graphics.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
            Delegates.glRenderbufferStorageMultisample((OpenTK.Graphics.RenderbufferTarget)target, (Int32)samples, (OpenTK.Graphics.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static 
        void FramebufferTextureLayer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
        {
            Delegates.glFramebufferTextureLayer((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        [AutoGenerated(Category = "ArbFramebufferObject", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
        public static 
        void FramebufferTextureLayer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
        {
            Delegates.glFramebufferTextureLayer((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbInstancedArrays", Version = "2.0", EntryPoint = "glVertexAttribDivisor")]
        public static 
        void VertexAttribDivisor(UInt32 index, UInt32 divisor)
        {
            Delegates.glVertexAttribDivisor((UInt32)index, (UInt32)divisor);
        }

        [AutoGenerated(Category = "ArbInstancedArrays", Version = "2.0", EntryPoint = "glVertexAttribDivisor")]
        public static 
        void VertexAttribDivisor(Int32 index, Int32 divisor)
        {
            Delegates.glVertexAttribDivisor((UInt32)index, (UInt32)divisor);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbMapBufferRange", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static 
        void MapBufferRange(OpenTK.Graphics.ArbMapBufferRange target, IntPtr offset, IntPtr length, UInt32 access)
        {
            Delegates.glMapBufferRange((OpenTK.Graphics.ArbMapBufferRange)target, (IntPtr)offset, (IntPtr)length, (UInt32)access);
        }

        [AutoGenerated(Category = "ArbMapBufferRange", Version = "3.0", EntryPoint = "glMapBufferRange")]
        public static 
        void MapBufferRange(OpenTK.Graphics.ArbMapBufferRange target, IntPtr offset, IntPtr length, Int32 access)
        {
            Delegates.glMapBufferRange((OpenTK.Graphics.ArbMapBufferRange)target, (IntPtr)offset, (IntPtr)length, (UInt32)access);
        }

        [AutoGenerated(Category = "ArbMapBufferRange", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
        public static 
        void FlushMappedBufferRange(OpenTK.Graphics.ArbMapBufferRange target, IntPtr offset, IntPtr length)
        {
            Delegates.glFlushMappedBufferRange((OpenTK.Graphics.ArbMapBufferRange)target, (IntPtr)offset, (IntPtr)length);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static 
        void BindVertexArray(UInt32 array)
        {
            Delegates.glBindVertexArray((UInt32)array);
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glBindVertexArray")]
        public static 
        void BindVertexArray(Int32 array)
        {
            Delegates.glBindVertexArray((UInt32)array);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static 
        void DeleteVertexArrays(Int32 n, UInt32[] arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static 
        void DeleteVertexArrays(Int32 n, Int32[] arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static 
        void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static 
        void DeleteVertexArrays(Int32 n, ref Int32 arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static 
        unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
        {
            Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
        public static 
        unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
        {
            Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static 
        void GenVertexArrays(Int32 n, [Out] UInt32[] arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static 
        void GenVertexArrays(Int32 n, [Out] Int32[] arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static 
        void GenVertexArrays(Int32 n, [Out] out UInt32 arrays)
        {
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static 
        void GenVertexArrays(Int32 n, [Out] out Int32 arrays)
        {
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static 
        unsafe void GenVertexArrays(Int32 n, [Out] UInt32* arrays)
        {
            Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glGenVertexArrays")]
        public static 
        unsafe void GenVertexArrays(Int32 n, [Out] Int32* arrays)
        {
            Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
        }

        [System.CLSCompliant(false)]
        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static 
        bool IsVertexArray(UInt32 array)
        {
            return Delegates.glIsVertexArray((UInt32)array);
        }

        [AutoGenerated(Category = "ArbVertexArrayObject", Version = "3.0", EntryPoint = "glIsVertexArray")]
        public static 
        bool IsVertexArray(Int32 array)
        {
            return Delegates.glIsVertexArray((UInt32)array);
        }

        public static partial class NV
        {
            [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetBooleanv")]
            public static 
            void GetBoolea(OpenTK.Graphics.GetPName pname, [Out] bool[] @params)
            {
                unsafe
                {
                    fixed (bool* @params_ptr = @params)
                    {
                        Delegates.glGetBooleanv((OpenTK.Graphics.GetPName)pname, (bool*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetBooleanv")]
            public static 
            void GetBoolea(OpenTK.Graphics.GetPName pname, [Out] out bool @params)
            {
                unsafe
                {
                    fixed (bool* @params_ptr = &@params)
                    {
                        Delegates.glGetBooleanv((OpenTK.Graphics.GetPName)pname, (bool*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "StateReq", Version = "1.0", EntryPoint = "glGetBooleanv")]
            public static 
            unsafe void GetBoolea(OpenTK.Graphics.GetPName pname, [Out] bool* @params)
            {
                Delegates.glGetBooleanv((OpenTK.Graphics.GetPName)pname, (bool*)@params);
            }

            [AutoGenerated(Category = "NvVertexArrayRange", Version = "1.1", EntryPoint = "glFlushVertexArrayRangeNV")]
            public static 
            void FlushVertexArrayRange()
            {
                Delegates.glFlushVertexArrayRangeNV();
            }

            [AutoGenerated(Category = "NvVertexArrayRange", Version = "1.1", EntryPoint = "glVertexArrayRangeNV")]
            public static 
            void VertexArrayRange(Int32 length, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "NvVertexArrayRange", Version = "1.1", EntryPoint = "glVertexArrayRangeNV")]
            public static 
            void VertexArrayRange(Int32 length, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameterfvNV")]
            public static 
            void CombinerParameterv(OpenTK.Graphics.NvRegisterCombiners pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameterfvNV")]
            public static 
            void CombinerParameterv(OpenTK.Graphics.NvRegisterCombiners pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glCombinerParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameterfvNV")]
            public static 
            unsafe void CombinerParameterv(OpenTK.Graphics.NvRegisterCombiners pname, Single* @params)
            {
                Delegates.glCombinerParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameterfNV")]
            public static 
            void CombinerParameter(OpenTK.Graphics.NvRegisterCombiners pname, Single param)
            {
                Delegates.glCombinerParameterfNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Single)param);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameterivNV")]
            public static 
            void CombinerParameterv(OpenTK.Graphics.NvRegisterCombiners pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterivNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameterivNV")]
            public static 
            void CombinerParameterv(OpenTK.Graphics.NvRegisterCombiners pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glCombinerParameterivNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameterivNV")]
            public static 
            unsafe void CombinerParameterv(OpenTK.Graphics.NvRegisterCombiners pname, Int32* @params)
            {
                Delegates.glCombinerParameterivNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerParameteriNV")]
            public static 
            void CombinerParameter(OpenTK.Graphics.NvRegisterCombiners pname, Int32 param)
            {
                Delegates.glCombinerParameteriNV((OpenTK.Graphics.NvRegisterCombiners)pname, (Int32)param);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerInputNV")]
            public static 
            void CombinerInput(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners input, OpenTK.Graphics.NvRegisterCombiners mapping, OpenTK.Graphics.NvRegisterCombiners componentUsage)
            {
                Delegates.glCombinerInputNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)input, (OpenTK.Graphics.NvRegisterCombiners)mapping, (OpenTK.Graphics.NvRegisterCombiners)componentUsage);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glCombinerOutputNV")]
            public static 
            void CombinerOutput(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners abOutput, OpenTK.Graphics.NvRegisterCombiners cdOutput, OpenTK.Graphics.NvRegisterCombiners sumOutput, OpenTK.Graphics.NvRegisterCombiners scale, OpenTK.Graphics.NvRegisterCombiners bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
            {
                Delegates.glCombinerOutputNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)abOutput, (OpenTK.Graphics.NvRegisterCombiners)cdOutput, (OpenTK.Graphics.NvRegisterCombiners)sumOutput, (OpenTK.Graphics.NvRegisterCombiners)scale, (OpenTK.Graphics.NvRegisterCombiners)bias, (bool)abDotProduct, (bool)cdDotProduct, (bool)muxSum);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glFinalCombinerInputNV")]
            public static 
            void FinalCombinerInput(OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners input, OpenTK.Graphics.NvRegisterCombiners mapping, OpenTK.Graphics.NvRegisterCombiners componentUsage)
            {
                Delegates.glFinalCombinerInputNV((OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)input, (OpenTK.Graphics.NvRegisterCombiners)mapping, (OpenTK.Graphics.NvRegisterCombiners)componentUsage);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterfvNV")]
            public static 
            void GetCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterfvNV")]
            public static 
            void GetCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterfvNV")]
            public static 
            unsafe void GetCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Single* @params)
            {
                Delegates.glGetCombinerInputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterivNV")]
            public static 
            void GetCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterivNV")]
            public static 
            void GetCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerInputParameterivNV")]
            public static 
            unsafe void GetCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Int32* @params)
            {
                Delegates.glGetCombinerInputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterfvNV")]
            public static 
            void GetCombinerOutputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterfvNV")]
            public static 
            void GetCombinerOutputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterfvNV")]
            public static 
            unsafe void GetCombinerOutputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Single* @params)
            {
                Delegates.glGetCombinerOutputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterivNV")]
            public static 
            void GetCombinerOutputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterivNV")]
            public static 
            void GetCombinerOutputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetCombinerOutputParameterivNV")]
            public static 
            unsafe void GetCombinerOutputParameter(OpenTK.Graphics.NvRegisterCombiners stage, OpenTK.Graphics.NvRegisterCombiners portion, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Int32* @params)
            {
                Delegates.glGetCombinerOutputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)stage, (OpenTK.Graphics.NvRegisterCombiners)portion, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
            public static 
            void GetFinalCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
            public static 
            void GetFinalCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
            public static 
            unsafe void GetFinalCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Single* @params)
            {
                Delegates.glGetFinalCombinerInputParameterfvNV((OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterivNV")]
            public static 
            void GetFinalCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterivNV")]
            public static 
            void GetFinalCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners", Version = "1.1", EntryPoint = "glGetFinalCombinerInputParameterivNV")]
            public static 
            unsafe void GetFinalCombinerInputParameter(OpenTK.Graphics.NvRegisterCombiners variable, OpenTK.Graphics.NvRegisterCombiners pname, [Out] Int32* @params)
            {
                Delegates.glGetFinalCombinerInputParameterivNV((OpenTK.Graphics.NvRegisterCombiners)variable, (OpenTK.Graphics.NvRegisterCombiners)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glDeleteFencesNV")]
            public static 
            void DeleteFences(Int32 n, UInt32[] fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glDeleteFencesNV")]
            public static 
            void DeleteFences(Int32 n, Int32[] fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glDeleteFencesNV")]
            public static 
            void DeleteFences(Int32 n, ref UInt32 fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glDeleteFencesNV")]
            public static 
            void DeleteFences(Int32 n, ref Int32 fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glDeleteFencesNV")]
            public static 
            unsafe void DeleteFences(Int32 n, UInt32* fences)
            {
                Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glDeleteFencesNV")]
            public static 
            unsafe void DeleteFences(Int32 n, Int32* fences)
            {
                Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGenFencesNV")]
            public static 
            void GenFences(Int32 n, [Out] UInt32[] fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGenFencesNV")]
            public static 
            void GenFences(Int32 n, [Out] Int32[] fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGenFencesNV")]
            public static 
            void GenFences(Int32 n, [Out] out UInt32 fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGenFencesNV")]
            public static 
            void GenFences(Int32 n, [Out] out Int32 fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGenFencesNV")]
            public static 
            unsafe void GenFences(Int32 n, [Out] UInt32* fences)
            {
                Delegates.glGenFencesNV((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGenFencesNV")]
            public static 
            unsafe void GenFences(Int32 n, [Out] Int32* fences)
            {
                Delegates.glGenFencesNV((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glIsFenceNV")]
            public static 
            bool IsFence(UInt32 fence)
            {
                return Delegates.glIsFenceNV((UInt32)fence);
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glIsFenceNV")]
            public static 
            bool IsFence(Int32 fence)
            {
                return Delegates.glIsFenceNV((UInt32)fence);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glTestFenceNV")]
            public static 
            bool TestFence(UInt32 fence)
            {
                return Delegates.glTestFenceNV((UInt32)fence);
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glTestFenceNV")]
            public static 
            bool TestFence(Int32 fence)
            {
                return Delegates.glTestFenceNV((UInt32)fence);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGetFenceivNV")]
            public static 
            void GetFence(UInt32 fence, OpenTK.Graphics.NvFence pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (OpenTK.Graphics.NvFence)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGetFenceivNV")]
            public static 
            void GetFence(Int32 fence, OpenTK.Graphics.NvFence pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (OpenTK.Graphics.NvFence)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGetFenceivNV")]
            public static 
            void GetFence(UInt32 fence, OpenTK.Graphics.NvFence pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (OpenTK.Graphics.NvFence)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGetFenceivNV")]
            public static 
            void GetFence(Int32 fence, OpenTK.Graphics.NvFence pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (OpenTK.Graphics.NvFence)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGetFenceivNV")]
            public static 
            unsafe void GetFence(UInt32 fence, OpenTK.Graphics.NvFence pname, [Out] Int32* @params)
            {
                Delegates.glGetFenceivNV((UInt32)fence, (OpenTK.Graphics.NvFence)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glGetFenceivNV")]
            public static 
            unsafe void GetFence(Int32 fence, OpenTK.Graphics.NvFence pname, [Out] Int32* @params)
            {
                Delegates.glGetFenceivNV((UInt32)fence, (OpenTK.Graphics.NvFence)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glFinishFenceNV")]
            public static 
            void FinishFence(UInt32 fence)
            {
                Delegates.glFinishFenceNV((UInt32)fence);
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glFinishFenceNV")]
            public static 
            void FinishFence(Int32 fence)
            {
                Delegates.glFinishFenceNV((UInt32)fence);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glSetFenceNV")]
            public static 
            void SetFence(UInt32 fence, OpenTK.Graphics.NvFence condition)
            {
                Delegates.glSetFenceNV((UInt32)fence, (OpenTK.Graphics.NvFence)condition);
            }

            [AutoGenerated(Category = "NvFence", Version = "1.2", EntryPoint = "glSetFenceNV")]
            public static 
            void SetFence(Int32 fence, OpenTK.Graphics.NvFence condition)
            {
                Delegates.glSetFenceNV((UInt32)fence, (OpenTK.Graphics.NvFence)condition);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapControlPointsNV")]
            public static 
            void MapControlPoints(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, IntPtr points)
            {
                unsafe
                {
                    Delegates.glMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points);
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapControlPointsNV")]
            public static 
            void MapControlPoints(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, IntPtr points)
            {
                unsafe
                {
                    Delegates.glMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapControlPointsNV")]
            public static 
            void MapControlPoints(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, [In, Out] object points)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapControlPointsNV")]
            public static 
            void MapControlPoints(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, [In, Out] object points)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapParameterivNV")]
            public static 
            void MapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMapParameterivNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapParameterivNV")]
            public static 
            void MapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMapParameterivNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapParameterivNV")]
            public static 
            unsafe void MapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, Int32* @params)
            {
                Delegates.glMapParameterivNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapParameterfvNV")]
            public static 
            void MapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMapParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapParameterfvNV")]
            public static 
            void MapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glMapParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glMapParameterfvNV")]
            public static 
            unsafe void MapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, Single* @params)
            {
                Delegates.glMapParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapControlPointsNV")]
            public static 
            void GetMapControlPoints(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, [Out] IntPtr points)
            {
                unsafe
                {
                    Delegates.glGetMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points);
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapControlPointsNV")]
            public static 
            void GetMapControlPoints(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, [Out] IntPtr points)
            {
                unsafe
                {
                    Delegates.glGetMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapControlPointsNV")]
            public static 
            void GetMapControlPoints(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, [In, Out] object points)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapControlPointsNV")]
            public static 
            void GetMapControlPoints(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, [In, Out] object points)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapParameterivNV")]
            public static 
            void GetMapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMapParameterivNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapParameterivNV")]
            public static 
            void GetMapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMapParameterivNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapParameterivNV")]
            public static 
            unsafe void GetMapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, [Out] Int32* @params)
            {
                Delegates.glGetMapParameterivNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapParameterfvNV")]
            public static 
            void GetMapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMapParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapParameterfvNV")]
            public static 
            void GetMapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMapParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapParameterfvNV")]
            public static 
            unsafe void GetMapParameter(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators pname, [Out] Single* @params)
            {
                Delegates.glGetMapParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterivNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterivNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterivNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterivNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterivNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterivNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterivNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterivNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterivNV")]
            public static 
            unsafe void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Int32* @params)
            {
                Delegates.glGetMapAttribParameterivNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterivNV")]
            public static 
            unsafe void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Int32* @params)
            {
                Delegates.glGetMapAttribParameterivNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static 
            void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static 
            unsafe void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, UInt32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Single* @params)
            {
                Delegates.glGetMapAttribParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glGetMapAttribParameterfvNV")]
            public static 
            unsafe void GetMapAttribParameter(OpenTK.Graphics.NvEvaluators target, Int32 index, OpenTK.Graphics.NvEvaluators pname, [Out] Single* @params)
            {
                Delegates.glGetMapAttribParameterfvNV((OpenTK.Graphics.NvEvaluators)target, (UInt32)index, (OpenTK.Graphics.NvEvaluators)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NvEvaluators", Version = "1.1", EntryPoint = "glEvalMapsNV")]
            public static 
            void EvalMap(OpenTK.Graphics.NvEvaluators target, OpenTK.Graphics.NvEvaluators mode)
            {
                Delegates.glEvalMapsNV((OpenTK.Graphics.NvEvaluators)target, (OpenTK.Graphics.NvEvaluators)mode);
            }

            [AutoGenerated(Category = "NvRegisterCombiners2", Version = "1.1", EntryPoint = "glCombinerStageParameterfvNV")]
            public static 
            void CombinerStageParameter(OpenTK.Graphics.NvRegisterCombiners2 stage, OpenTK.Graphics.NvRegisterCombiners2 pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCombinerStageParameterfvNV((OpenTK.Graphics.NvRegisterCombiners2)stage, (OpenTK.Graphics.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners2", Version = "1.1", EntryPoint = "glCombinerStageParameterfvNV")]
            public static 
            void CombinerStageParameter(OpenTK.Graphics.NvRegisterCombiners2 stage, OpenTK.Graphics.NvRegisterCombiners2 pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glCombinerStageParameterfvNV((OpenTK.Graphics.NvRegisterCombiners2)stage, (OpenTK.Graphics.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners2", Version = "1.1", EntryPoint = "glCombinerStageParameterfvNV")]
            public static 
            unsafe void CombinerStageParameter(OpenTK.Graphics.NvRegisterCombiners2 stage, OpenTK.Graphics.NvRegisterCombiners2 pname, Single* @params)
            {
                Delegates.glCombinerStageParameterfvNV((OpenTK.Graphics.NvRegisterCombiners2)stage, (OpenTK.Graphics.NvRegisterCombiners2)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "NvRegisterCombiners2", Version = "1.1", EntryPoint = "glGetCombinerStageParameterfvNV")]
            public static 
            void GetCombinerStageParameter(OpenTK.Graphics.NvRegisterCombiners2 stage, OpenTK.Graphics.NvRegisterCombiners2 pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerStageParameterfvNV((OpenTK.Graphics.NvRegisterCombiners2)stage, (OpenTK.Graphics.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvRegisterCombiners2", Version = "1.1", EntryPoint = "glGetCombinerStageParameterfvNV")]
            public static 
            void GetCombinerStageParameter(OpenTK.Graphics.NvRegisterCombiners2 stage, OpenTK.Graphics.NvRegisterCombiners2 pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerStageParameterfvNV((OpenTK.Graphics.NvRegisterCombiners2)stage, (OpenTK.Graphics.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvRegisterCombiners2", Version = "1.1", EntryPoint = "glGetCombinerStageParameterfvNV")]
            public static 
            unsafe void GetCombinerStageParameter(OpenTK.Graphics.NvRegisterCombiners2 stage, OpenTK.Graphics.NvRegisterCombiners2 pname, [Out] Single* @params)
            {
                Delegates.glGetCombinerStageParameterfvNV((OpenTK.Graphics.NvRegisterCombiners2)stage, (OpenTK.Graphics.NvRegisterCombiners2)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glAreProgramsResidentNV")]
            public static 
            bool AreProgramsResident(Int32 n, UInt32[] programs, [Out] bool[] residences)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glAreProgramsResidentNV")]
            public static 
            bool AreProgramsResident(Int32 n, Int32[] programs, [Out] bool[] residences)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glAreProgramsResidentNV")]
            public static 
            bool AreProgramsResident(Int32 n, ref UInt32 programs, [Out] out bool residences)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glAreProgramsResidentNV")]
            public static 
            bool AreProgramsResident(Int32 n, ref Int32 programs, [Out] out bool residences)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glAreProgramsResidentNV")]
            public static 
            unsafe bool AreProgramsResident(Int32 n, UInt32* programs, [Out] bool* residences)
            {
                return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (bool*)residences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glAreProgramsResidentNV")]
            public static 
            unsafe bool AreProgramsResident(Int32 n, Int32* programs, [Out] bool* residences)
            {
                return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (bool*)residences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glBindProgramNV")]
            public static 
            void BindProgram(OpenTK.Graphics.NvVertexProgram target, UInt32 id)
            {
                Delegates.glBindProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glBindProgramNV")]
            public static 
            void BindProgram(OpenTK.Graphics.NvVertexProgram target, Int32 id)
            {
                Delegates.glBindProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glDeleteProgramsNV")]
            public static 
            void DeleteProgram(Int32 n, UInt32[] programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glDeleteProgramsNV")]
            public static 
            void DeleteProgram(Int32 n, Int32[] programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glDeleteProgramsNV")]
            public static 
            void DeleteProgram(Int32 n, ref UInt32 programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glDeleteProgramsNV")]
            public static 
            void DeleteProgram(Int32 n, ref Int32 programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glDeleteProgramsNV")]
            public static 
            unsafe void DeleteProgram(Int32 n, UInt32* programs)
            {
                Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glDeleteProgramsNV")]
            public static 
            unsafe void DeleteProgram(Int32 n, Int32* programs)
            {
                Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glExecuteProgramNV")]
            public static 
            void ExecuteProgram(OpenTK.Graphics.NvVertexProgram target, UInt32 id, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glExecuteProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glExecuteProgramNV")]
            public static 
            void ExecuteProgram(OpenTK.Graphics.NvVertexProgram target, Int32 id, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glExecuteProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glExecuteProgramNV")]
            public static 
            void ExecuteProgram(OpenTK.Graphics.NvVertexProgram target, UInt32 id, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glExecuteProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glExecuteProgramNV")]
            public static 
            void ExecuteProgram(OpenTK.Graphics.NvVertexProgram target, Int32 id, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glExecuteProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glExecuteProgramNV")]
            public static 
            unsafe void ExecuteProgram(OpenTK.Graphics.NvVertexProgram target, UInt32 id, Single* @params)
            {
                Delegates.glExecuteProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glExecuteProgramNV")]
            public static 
            unsafe void ExecuteProgram(OpenTK.Graphics.NvVertexProgram target, Int32 id, Single* @params)
            {
                Delegates.glExecuteProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGenProgramsNV")]
            public static 
            void GenProgram(Int32 n, [Out] UInt32[] programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGenProgramsNV")]
            public static 
            void GenProgram(Int32 n, [Out] Int32[] programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGenProgramsNV")]
            public static 
            void GenProgram(Int32 n, [Out] out UInt32 programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGenProgramsNV")]
            public static 
            void GenProgram(Int32 n, [Out] out Int32 programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGenProgramsNV")]
            public static 
            unsafe void GenProgram(Int32 n, [Out] UInt32* programs)
            {
                Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGenProgramsNV")]
            public static 
            unsafe void GenProgram(Int32 n, [Out] Int32* programs)
            {
                Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterdvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterdvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterdvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterdvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterdvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterdvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterdvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterdvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterdvNV")]
            public static 
            unsafe void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double* @params)
            {
                Delegates.glGetProgramParameterdvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterdvNV")]
            public static 
            unsafe void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double* @params)
            {
                Delegates.glGetProgramParameterdvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterfvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterfvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterfvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterfvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterfvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterfvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterfvNV")]
            public static 
            void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterfvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterfvNV")]
            public static 
            unsafe void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single* @params)
            {
                Delegates.glGetProgramParameterfvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramParameterfvNV")]
            public static 
            unsafe void GetProgramParameter(OpenTK.Graphics.NvVertexProgram target, Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single* @params)
            {
                Delegates.glGetProgramParameterfvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramivNV")]
            public static 
            void GetProgram(UInt32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramivNV")]
            public static 
            void GetProgram(Int32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramivNV")]
            public static 
            void GetProgram(UInt32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramivNV")]
            public static 
            void GetProgram(Int32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramivNV")]
            public static 
            unsafe void GetProgram(UInt32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32* @params)
            {
                Delegates.glGetProgramivNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramivNV")]
            public static 
            unsafe void GetProgram(Int32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32* @params)
            {
                Delegates.glGetProgramivNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramStringNV")]
            public static 
            void GetProgramString(UInt32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Byte[] program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Byte*)program_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramStringNV")]
            public static 
            void GetProgramString(Int32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Byte[] program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Byte*)program_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramStringNV")]
            public static 
            void GetProgramString(UInt32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] out Byte program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Byte*)program_ptr);
                        program = *program_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramStringNV")]
            public static 
            void GetProgramString(Int32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] out Byte program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Byte*)program_ptr);
                        program = *program_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramStringNV")]
            public static 
            unsafe void GetProgramString(UInt32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Byte* program)
            {
                Delegates.glGetProgramStringNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Byte*)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetProgramStringNV")]
            public static 
            unsafe void GetProgramString(Int32 id, OpenTK.Graphics.NvVertexProgram pname, [Out] Byte* program)
            {
                Delegates.glGetProgramStringNV((UInt32)id, (OpenTK.Graphics.NvVertexProgram)pname, (Byte*)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetTrackMatrixivNV")]
            public static 
            void GetTrackMatrix(OpenTK.Graphics.NvVertexProgram target, UInt32 address, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTrackMatrixivNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetTrackMatrixivNV")]
            public static 
            void GetTrackMatrix(OpenTK.Graphics.NvVertexProgram target, Int32 address, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTrackMatrixivNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetTrackMatrixivNV")]
            public static 
            void GetTrackMatrix(OpenTK.Graphics.NvVertexProgram target, UInt32 address, OpenTK.Graphics.NvVertexProgram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTrackMatrixivNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetTrackMatrixivNV")]
            public static 
            void GetTrackMatrix(OpenTK.Graphics.NvVertexProgram target, Int32 address, OpenTK.Graphics.NvVertexProgram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTrackMatrixivNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetTrackMatrixivNV")]
            public static 
            unsafe void GetTrackMatrix(OpenTK.Graphics.NvVertexProgram target, UInt32 address, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32* @params)
            {
                Delegates.glGetTrackMatrixivNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetTrackMatrixivNV")]
            public static 
            unsafe void GetTrackMatrix(OpenTK.Graphics.NvVertexProgram target, Int32 address, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32* @params)
            {
                Delegates.glGetTrackMatrixivNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribdvNV")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribdvNV")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribdvNV")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribdvNV")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribdvNV")]
            public static 
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double* @params)
            {
                Delegates.glGetVertexAttribdvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribdvNV")]
            public static 
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Double* @params)
            {
                Delegates.glGetVertexAttribdvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribfvNV")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribfvNV")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribfvNV")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribfvNV")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribfvNV")]
            public static 
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single* @params)
            {
                Delegates.glGetVertexAttribfvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribfvNV")]
            public static 
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Single* @params)
            {
                Delegates.glGetVertexAttribfvNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribivNV")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribivNV")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribivNV")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribivNV")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribivNV")]
            public static 
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribivNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribivNV")]
            public static 
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribivNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribPointervNV")]
            public static 
            void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glGetVertexAttribPointervNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribPointervNV")]
            public static 
            void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [Out] IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glGetVertexAttribPointervNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (IntPtr)pointer);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribPointervNV")]
            public static 
            void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.NvVertexProgram pname, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glGetVertexAttribPointervNV")]
            public static 
            void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.NvVertexProgram pname, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (OpenTK.Graphics.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glIsProgramNV")]
            public static 
            bool IsProgram(UInt32 id)
            {
                return Delegates.glIsProgramNV((UInt32)id);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glIsProgramNV")]
            public static 
            bool IsProgram(Int32 id)
            {
                return Delegates.glIsProgramNV((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glLoadProgramNV")]
            public static 
            void LoadProgram(OpenTK.Graphics.NvVertexProgram target, UInt32 id, Int32 len, Byte[] program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glLoadProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glLoadProgramNV")]
            public static 
            void LoadProgram(OpenTK.Graphics.NvVertexProgram target, Int32 id, Int32 len, Byte[] program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glLoadProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glLoadProgramNV")]
            public static 
            void LoadProgram(OpenTK.Graphics.NvVertexProgram target, UInt32 id, Int32 len, ref Byte program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glLoadProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glLoadProgramNV")]
            public static 
            void LoadProgram(OpenTK.Graphics.NvVertexProgram target, Int32 id, Int32 len, ref Byte program)
            {
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glLoadProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glLoadProgramNV")]
            public static 
            unsafe void LoadProgram(OpenTK.Graphics.NvVertexProgram target, UInt32 id, Int32 len, Byte* program)
            {
                Delegates.glLoadProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Int32)len, (Byte*)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glLoadProgramNV")]
            public static 
            unsafe void LoadProgram(OpenTK.Graphics.NvVertexProgram target, Int32 id, Int32 len, Byte* program)
            {
                Delegates.glLoadProgramNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)id, (Int32)len, (Byte*)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramParameter4dNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramParameter4dNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameter4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameter4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dvNV")]
            public static 
            unsafe void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, Double* v)
            {
                Delegates.glProgramParameter4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4dvNV")]
            public static 
            unsafe void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Double* v)
            {
                Delegates.glProgramParameter4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramParameter4fNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramParameter4fNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameter4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameter4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fvNV")]
            public static 
            void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fvNV")]
            public static 
            unsafe void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, Single* v)
            {
                Delegates.glProgramParameter4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameter4fvNV")]
            public static 
            unsafe void ProgramParameter4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Single* v)
            {
                Delegates.glProgramParameter4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4dvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, UInt32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameters4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4dvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameters4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4dvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, UInt32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4dvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4dvNV")]
            public static 
            unsafe void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, UInt32 count, Double* v)
            {
                Delegates.glProgramParameters4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4dvNV")]
            public static 
            unsafe void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Int32 count, Double* v)
            {
                Delegates.glProgramParameters4dvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4fvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, UInt32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameters4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4fvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameters4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4fvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, UInt32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4fvNV")]
            public static 
            void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4fvNV")]
            public static 
            unsafe void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, UInt32 index, UInt32 count, Single* v)
            {
                Delegates.glProgramParameters4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glProgramParameters4fvNV")]
            public static 
            unsafe void ProgramParameters4(OpenTK.Graphics.NvVertexProgram target, Int32 index, Int32 count, Single* v)
            {
                Delegates.glProgramParameters4fvNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)index, (UInt32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glRequestResidentProgramsNV")]
            public static 
            void RequestResidentProgram(Int32 n, UInt32[] programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glRequestResidentProgramsNV")]
            public static 
            void RequestResidentProgram(Int32 n, Int32[] programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glRequestResidentProgramsNV")]
            public static 
            void RequestResidentProgram(Int32 n, ref UInt32 programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glRequestResidentProgramsNV")]
            public static 
            void RequestResidentProgram(Int32 n, ref Int32 programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glRequestResidentProgramsNV")]
            public static 
            unsafe void RequestResidentProgram(Int32 n, UInt32* programs)
            {
                Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glRequestResidentProgramsNV")]
            public static 
            unsafe void RequestResidentProgram(Int32 n, Int32* programs)
            {
                Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glTrackMatrixNV")]
            public static 
            void TrackMatrix(OpenTK.Graphics.NvVertexProgram target, UInt32 address, OpenTK.Graphics.NvVertexProgram matrix, OpenTK.Graphics.NvVertexProgram transform)
            {
                Delegates.glTrackMatrixNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)matrix, (OpenTK.Graphics.NvVertexProgram)transform);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glTrackMatrixNV")]
            public static 
            void TrackMatrix(OpenTK.Graphics.NvVertexProgram target, Int32 address, OpenTK.Graphics.NvVertexProgram matrix, OpenTK.Graphics.NvVertexProgram transform)
            {
                Delegates.glTrackMatrixNV((OpenTK.Graphics.NvVertexProgram)target, (UInt32)address, (OpenTK.Graphics.NvVertexProgram)matrix, (OpenTK.Graphics.NvVertexProgram)transform);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribPointerNV")]
            public static 
            void VertexAttribPointer(UInt32 index, Int32 fsize, OpenTK.Graphics.NvVertexProgram type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (OpenTK.Graphics.NvVertexProgram)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribPointerNV")]
            public static 
            void VertexAttribPointer(Int32 index, Int32 fsize, OpenTK.Graphics.NvVertexProgram type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (OpenTK.Graphics.NvVertexProgram)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribPointerNV")]
            public static 
            void VertexAttribPointer(UInt32 index, Int32 fsize, OpenTK.Graphics.NvVertexProgram type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (OpenTK.Graphics.NvVertexProgram)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribPointerNV")]
            public static 
            void VertexAttribPointer(Int32 index, Int32 fsize, OpenTK.Graphics.NvVertexProgram type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (OpenTK.Graphics.NvVertexProgram)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dNV")]
            public static 
            void VertexAttrib1(UInt32 index, Double x)
            {
                Delegates.glVertexAttrib1dNV((UInt32)index, (Double)x);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dNV")]
            public static 
            void VertexAttrib1(Int32 index, Double x)
            {
                Delegates.glVertexAttrib1dNV((UInt32)index, (Double)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dvNV")]
            public static 
            void VertexAttrib1v(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dvNV")]
            public static 
            void VertexAttrib1v(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dvNV")]
            public static 
            void VertexAttrib1v(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dvNV")]
            public static 
            void VertexAttrib1v(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dvNV")]
            public static 
            unsafe void VertexAttrib1v(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1dvNV")]
            public static 
            unsafe void VertexAttrib1v(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fNV")]
            public static 
            void VertexAttrib1(UInt32 index, Single x)
            {
                Delegates.glVertexAttrib1fNV((UInt32)index, (Single)x);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fNV")]
            public static 
            void VertexAttrib1(Int32 index, Single x)
            {
                Delegates.glVertexAttrib1fNV((UInt32)index, (Single)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fvNV")]
            public static 
            void VertexAttrib1v(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fvNV")]
            public static 
            void VertexAttrib1v(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fvNV")]
            public static 
            void VertexAttrib1v(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fvNV")]
            public static 
            void VertexAttrib1v(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fvNV")]
            public static 
            unsafe void VertexAttrib1v(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1fvNV")]
            public static 
            unsafe void VertexAttrib1v(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1sNV")]
            public static 
            void VertexAttrib1(UInt32 index, Int16 x)
            {
                Delegates.glVertexAttrib1sNV((UInt32)index, (Int16)x);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1sNV")]
            public static 
            void VertexAttrib1(Int32 index, Int16 x)
            {
                Delegates.glVertexAttrib1sNV((UInt32)index, (Int16)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1svNV")]
            public static 
            void VertexAttrib1v(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1svNV")]
            public static 
            void VertexAttrib1v(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1svNV")]
            public static 
            void VertexAttrib1v(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1svNV")]
            public static 
            void VertexAttrib1v(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1svNV")]
            public static 
            unsafe void VertexAttrib1v(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib1svNV")]
            public static 
            unsafe void VertexAttrib1v(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dNV")]
            public static 
            void VertexAttrib2(UInt32 index, Double x, Double y)
            {
                Delegates.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dNV")]
            public static 
            void VertexAttrib2(Int32 index, Double x, Double y)
            {
                Delegates.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dvNV")]
            public static 
            void VertexAttrib2(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dvNV")]
            public static 
            void VertexAttrib2(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dvNV")]
            public static 
            void VertexAttrib2(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dvNV")]
            public static 
            void VertexAttrib2(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dvNV")]
            public static 
            unsafe void VertexAttrib2(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2dvNV")]
            public static 
            unsafe void VertexAttrib2(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fNV")]
            public static 
            void VertexAttrib2(UInt32 index, Single x, Single y)
            {
                Delegates.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fNV")]
            public static 
            void VertexAttrib2(Int32 index, Single x, Single y)
            {
                Delegates.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fvNV")]
            public static 
            void VertexAttrib2(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fvNV")]
            public static 
            void VertexAttrib2(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fvNV")]
            public static 
            void VertexAttrib2(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fvNV")]
            public static 
            void VertexAttrib2(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fvNV")]
            public static 
            unsafe void VertexAttrib2(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2fvNV")]
            public static 
            unsafe void VertexAttrib2(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2sNV")]
            public static 
            void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
            {
                Delegates.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2sNV")]
            public static 
            void VertexAttrib2(Int32 index, Int16 x, Int16 y)
            {
                Delegates.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2svNV")]
            public static 
            void VertexAttrib2(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2svNV")]
            public static 
            void VertexAttrib2(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2svNV")]
            public static 
            void VertexAttrib2(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2svNV")]
            public static 
            void VertexAttrib2(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2svNV")]
            public static 
            unsafe void VertexAttrib2(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib2svNV")]
            public static 
            unsafe void VertexAttrib2(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dNV")]
            public static 
            void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
            {
                Delegates.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dNV")]
            public static 
            void VertexAttrib3(Int32 index, Double x, Double y, Double z)
            {
                Delegates.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dvNV")]
            public static 
            void VertexAttrib3(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dvNV")]
            public static 
            void VertexAttrib3(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dvNV")]
            public static 
            void VertexAttrib3(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dvNV")]
            public static 
            void VertexAttrib3(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dvNV")]
            public static 
            unsafe void VertexAttrib3(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3dvNV")]
            public static 
            unsafe void VertexAttrib3(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fNV")]
            public static 
            void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
            {
                Delegates.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fNV")]
            public static 
            void VertexAttrib3(Int32 index, Single x, Single y, Single z)
            {
                Delegates.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fvNV")]
            public static 
            void VertexAttrib3(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fvNV")]
            public static 
            void VertexAttrib3(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fvNV")]
            public static 
            void VertexAttrib3(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fvNV")]
            public static 
            void VertexAttrib3(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fvNV")]
            public static 
            unsafe void VertexAttrib3(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3fvNV")]
            public static 
            unsafe void VertexAttrib3(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3sNV")]
            public static 
            void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
            {
                Delegates.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3sNV")]
            public static 
            void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
            {
                Delegates.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3svNV")]
            public static 
            void VertexAttrib3(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3svNV")]
            public static 
            void VertexAttrib3(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3svNV")]
            public static 
            void VertexAttrib3(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3svNV")]
            public static 
            void VertexAttrib3(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3svNV")]
            public static 
            unsafe void VertexAttrib3(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib3svNV")]
            public static 
            unsafe void VertexAttrib3(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dNV")]
            public static 
            void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dNV")]
            public static 
            void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dvNV")]
            public static 
            void VertexAttrib4(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dvNV")]
            public static 
            void VertexAttrib4(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dvNV")]
            public static 
            void VertexAttrib4(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dvNV")]
            public static 
            void VertexAttrib4(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dvNV")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4dvNV")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fNV")]
            public static 
            void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fNV")]
            public static 
            void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fvNV")]
            public static 
            void VertexAttrib4(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fvNV")]
            public static 
            void VertexAttrib4(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fvNV")]
            public static 
            void VertexAttrib4(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fvNV")]
            public static 
            void VertexAttrib4(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fvNV")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4fvNV")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4sNV")]
            public static 
            void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4sNV")]
            public static 
            void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4svNV")]
            public static 
            void VertexAttrib4(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4svNV")]
            public static 
            void VertexAttrib4(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4svNV")]
            public static 
            void VertexAttrib4(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4svNV")]
            public static 
            void VertexAttrib4(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4svNV")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4svNV")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubNV")]
            public static 
            void VertexAttrib4(UInt32 index, Byte x, Byte y, Byte z, Byte w)
            {
                Delegates.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubNV")]
            public static 
            void VertexAttrib4(Int32 index, Byte x, Byte y, Byte z, Byte w)
            {
                Delegates.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubvNV")]
            public static 
            void VertexAttrib4(UInt32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubvNV")]
            public static 
            void VertexAttrib4(Int32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubvNV")]
            public static 
            void VertexAttrib4(UInt32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubvNV")]
            public static 
            void VertexAttrib4(Int32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubvNV")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Byte* v)
            {
                Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttrib4ubvNV")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Byte* v)
            {
                Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1dvNV")]
            public static 
            void VertexAttribs1(UInt32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1dvNV")]
            public static 
            void VertexAttribs1(Int32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1dvNV")]
            public static 
            void VertexAttribs1(UInt32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1dvNV")]
            public static 
            void VertexAttribs1(Int32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1dvNV")]
            public static 
            unsafe void VertexAttribs1(UInt32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1dvNV")]
            public static 
            unsafe void VertexAttribs1(Int32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1fvNV")]
            public static 
            void VertexAttribs1(UInt32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1fvNV")]
            public static 
            void VertexAttribs1(Int32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1fvNV")]
            public static 
            void VertexAttribs1(UInt32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1fvNV")]
            public static 
            void VertexAttribs1(Int32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1fvNV")]
            public static 
            unsafe void VertexAttribs1(UInt32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1fvNV")]
            public static 
            unsafe void VertexAttribs1(Int32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1svNV")]
            public static 
            void VertexAttribs1(UInt32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1svNV")]
            public static 
            void VertexAttribs1(Int32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1svNV")]
            public static 
            void VertexAttribs1(UInt32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1svNV")]
            public static 
            void VertexAttribs1(Int32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1svNV")]
            public static 
            unsafe void VertexAttribs1(UInt32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs1svNV")]
            public static 
            unsafe void VertexAttribs1(Int32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2dvNV")]
            public static 
            void VertexAttribs2(UInt32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2dvNV")]
            public static 
            void VertexAttribs2(Int32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2dvNV")]
            public static 
            void VertexAttribs2(UInt32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2dvNV")]
            public static 
            void VertexAttribs2(Int32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2dvNV")]
            public static 
            unsafe void VertexAttribs2(UInt32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2dvNV")]
            public static 
            unsafe void VertexAttribs2(Int32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2fvNV")]
            public static 
            void VertexAttribs2(UInt32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2fvNV")]
            public static 
            void VertexAttribs2(Int32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2fvNV")]
            public static 
            void VertexAttribs2(UInt32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2fvNV")]
            public static 
            void VertexAttribs2(Int32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2fvNV")]
            public static 
            unsafe void VertexAttribs2(UInt32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2fvNV")]
            public static 
            unsafe void VertexAttribs2(Int32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2svNV")]
            public static 
            void VertexAttribs2(UInt32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2svNV")]
            public static 
            void VertexAttribs2(Int32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2svNV")]
            public static 
            void VertexAttribs2(UInt32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2svNV")]
            public static 
            void VertexAttribs2(Int32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2svNV")]
            public static 
            unsafe void VertexAttribs2(UInt32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs2svNV")]
            public static 
            unsafe void VertexAttribs2(Int32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3dvNV")]
            public static 
            void VertexAttribs3(UInt32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3dvNV")]
            public static 
            void VertexAttribs3(Int32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3dvNV")]
            public static 
            void VertexAttribs3(UInt32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3dvNV")]
            public static 
            void VertexAttribs3(Int32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3dvNV")]
            public static 
            unsafe void VertexAttribs3(UInt32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3dvNV")]
            public static 
            unsafe void VertexAttribs3(Int32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3fvNV")]
            public static 
            void VertexAttribs3(UInt32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3fvNV")]
            public static 
            void VertexAttribs3(Int32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3fvNV")]
            public static 
            void VertexAttribs3(UInt32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3fvNV")]
            public static 
            void VertexAttribs3(Int32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3fvNV")]
            public static 
            unsafe void VertexAttribs3(UInt32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3fvNV")]
            public static 
            unsafe void VertexAttribs3(Int32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3svNV")]
            public static 
            void VertexAttribs3(UInt32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3svNV")]
            public static 
            void VertexAttribs3(Int32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3svNV")]
            public static 
            void VertexAttribs3(UInt32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3svNV")]
            public static 
            void VertexAttribs3(Int32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3svNV")]
            public static 
            unsafe void VertexAttribs3(UInt32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs3svNV")]
            public static 
            unsafe void VertexAttribs3(Int32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4dvNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4dvNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4dvNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4dvNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4dvNV")]
            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4dvNV")]
            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Double* v)
            {
                Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4fvNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4fvNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4fvNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4fvNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4fvNV")]
            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4fvNV")]
            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Single* v)
            {
                Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4svNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4svNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4svNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4svNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4svNV")]
            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4svNV")]
            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Int16* v)
            {
                Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4ubvNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4ubvNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4ubvNV")]
            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4ubvNV")]
            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4ubvNV")]
            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Byte* v)
            {
                Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram", Version = "1.2", EntryPoint = "glVertexAttribs4ubvNV")]
            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Byte* v)
            {
                Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGenOcclusionQueriesNV")]
            public static 
            void GenOcclusionQueries(Int32 n, [Out] UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGenOcclusionQueriesNV")]
            public static 
            void GenOcclusionQueries(Int32 n, [Out] Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGenOcclusionQueriesNV")]
            public static 
            void GenOcclusionQueries(Int32 n, [Out] out UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGenOcclusionQueriesNV")]
            public static 
            void GenOcclusionQueries(Int32 n, [Out] out Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGenOcclusionQueriesNV")]
            public static 
            unsafe void GenOcclusionQueries(Int32 n, [Out] UInt32* ids)
            {
                Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGenOcclusionQueriesNV")]
            public static 
            unsafe void GenOcclusionQueries(Int32 n, [Out] Int32* ids)
            {
                Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static 
            void DeleteOcclusionQueries(Int32 n, UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static 
            void DeleteOcclusionQueries(Int32 n, Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static 
            void DeleteOcclusionQueries(Int32 n, ref UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static 
            void DeleteOcclusionQueries(Int32 n, ref Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static 
            unsafe void DeleteOcclusionQueries(Int32 n, UInt32* ids)
            {
                Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glDeleteOcclusionQueriesNV")]
            public static 
            unsafe void DeleteOcclusionQueries(Int32 n, Int32* ids)
            {
                Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glIsOcclusionQueryNV")]
            public static 
            bool IsOcclusionQuery(UInt32 id)
            {
                return Delegates.glIsOcclusionQueryNV((UInt32)id);
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glIsOcclusionQueryNV")]
            public static 
            bool IsOcclusionQuery(Int32 id)
            {
                return Delegates.glIsOcclusionQueryNV((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glBeginOcclusionQueryNV")]
            public static 
            void BeginOcclusionQuery(UInt32 id)
            {
                Delegates.glBeginOcclusionQueryNV((UInt32)id);
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glBeginOcclusionQueryNV")]
            public static 
            void BeginOcclusionQuery(Int32 id)
            {
                Delegates.glBeginOcclusionQueryNV((UInt32)id);
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glEndOcclusionQueryNV")]
            public static 
            void EndOcclusionQuery()
            {
                Delegates.glEndOcclusionQueryNV();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryivNV")]
            public static 
            void GetOcclusionQuery(UInt32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryivNV")]
            public static 
            void GetOcclusionQuery(Int32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryivNV")]
            public static 
            void GetOcclusionQuery(UInt32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryivNV")]
            public static 
            void GetOcclusionQuery(Int32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryivNV")]
            public static 
            unsafe void GetOcclusionQuery(UInt32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] Int32* @params)
            {
                Delegates.glGetOcclusionQueryivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryivNV")]
            public static 
            unsafe void GetOcclusionQuery(Int32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] Int32* @params)
            {
                Delegates.glGetOcclusionQueryivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryuivNV")]
            public static 
            void GetOcclusionQuery(UInt32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryuivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryuivNV")]
            public static 
            void GetOcclusionQuery(UInt32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryuivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvOcclusionQuery", Version = "1.2", EntryPoint = "glGetOcclusionQueryuivNV")]
            public static 
            unsafe void GetOcclusionQuery(UInt32 id, OpenTK.Graphics.NvOcclusionQuery pname, [Out] UInt32* @params)
            {
                Delegates.glGetOcclusionQueryuivNV((UInt32)id, (OpenTK.Graphics.NvOcclusionQuery)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "NvPointSprite", Version = "1.2", EntryPoint = "glPointParameteriNV")]
            public static 
            void PointParameter(OpenTK.Graphics.NvPointSprite pname, Int32 param)
            {
                Delegates.glPointParameteriNV((OpenTK.Graphics.NvPointSprite)pname, (Int32)param);
            }

            [AutoGenerated(Category = "NvPointSprite", Version = "1.2", EntryPoint = "glPointParameterivNV")]
            public static 
            void PointParameterv(OpenTK.Graphics.NvPointSprite pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glPointParameterivNV((OpenTK.Graphics.NvPointSprite)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvPointSprite", Version = "1.2", EntryPoint = "glPointParameterivNV")]
            public static 
            void PointParameterv(OpenTK.Graphics.NvPointSprite pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterivNV((OpenTK.Graphics.NvPointSprite)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvPointSprite", Version = "1.2", EntryPoint = "glPointParameterivNV")]
            public static 
            unsafe void PointParameterv(OpenTK.Graphics.NvPointSprite pname, Int32* @params)
            {
                Delegates.glPointParameterivNV((OpenTK.Graphics.NvPointSprite)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, Byte[] name, Single x, Single y, Single z, Single w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, Byte[] name, Single x, Single y, Single z, Single w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fNV")]
            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fNV")]
            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, Byte[] name, Double x, Double y, Double z, Double w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, Byte[] name, Double x, Double y, Double z, Double w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dNV")]
            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dNV")]
            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fvNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, Byte[] name, Single[] v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fvNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, Byte[] name, Single[] v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fvNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, ref Single v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fvNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, ref Single v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fvNV")]
            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Single* v)
            {
                Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4fvNV")]
            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Single* v)
            {
                Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dvNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, Byte[] name, Double[] v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dvNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, Byte[] name, Double[] v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dvNV")]
            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, ref Double v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dvNV")]
            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, ref Double v)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dvNV")]
            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Double* v)
            {
                Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glProgramNamedParameter4dvNV")]
            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Double* v)
            {
                Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterfvNV")]
            public static 
            void GetProgramNamedParameter(UInt32 id, Int32 len, Byte[] name, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterfvNV")]
            public static 
            void GetProgramNamedParameter(Int32 id, Int32 len, Byte[] name, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterfvNV")]
            public static 
            void GetProgramNamedParameter(UInt32 id, Int32 len, ref Byte name, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterfvNV")]
            public static 
            void GetProgramNamedParameter(Int32 id, Int32 len, ref Byte name, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterfvNV")]
            public static 
            unsafe void GetProgramNamedParameter(UInt32 id, Int32 len, Byte* name, [Out] Single* @params)
            {
                Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterfvNV")]
            public static 
            unsafe void GetProgramNamedParameter(Int32 id, Int32 len, Byte* name, [Out] Single* @params)
            {
                Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterdvNV")]
            public static 
            void GetProgramNamedParameter(UInt32 id, Int32 len, Byte[] name, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterdvNV")]
            public static 
            void GetProgramNamedParameter(Int32 id, Int32 len, Byte[] name, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = name)
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterdvNV")]
            public static 
            void GetProgramNamedParameter(UInt32 id, Int32 len, ref Byte name, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterdvNV")]
            public static 
            void GetProgramNamedParameter(Int32 id, Int32 len, ref Byte name, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterdvNV")]
            public static 
            unsafe void GetProgramNamedParameter(UInt32 id, Int32 len, Byte* name, [Out] Double* @params)
            {
                Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvFragmentProgram", Version = "1.2", EntryPoint = "glGetProgramNamedParameterdvNV")]
            public static 
            unsafe void GetProgramNamedParameter(Int32 id, Int32 len, Byte* name, [Out] Double* @params)
            {
                Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex2hNV")]
            public static 
            void Vertex2h(OpenTK.Math.Half x, OpenTK.Math.Half y)
            {
                Delegates.glVertex2hNV((OpenTK.Math.Half)x, (OpenTK.Math.Half)y);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex2hvNV")]
            public static 
            void Vertex2h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertex2hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex2hvNV")]
            public static 
            void Vertex2h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertex2hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex2hvNV")]
            public static 
            unsafe void Vertex2h(OpenTK.Math.Half* v)
            {
                Delegates.glVertex2hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex3hNV")]
            public static 
            void Vertex3h(OpenTK.Math.Half x, OpenTK.Math.Half y, OpenTK.Math.Half z)
            {
                Delegates.glVertex3hNV((OpenTK.Math.Half)x, (OpenTK.Math.Half)y, (OpenTK.Math.Half)z);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex3hvNV")]
            public static 
            void Vertex3h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertex3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex3hvNV")]
            public static 
            void Vertex3h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertex3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex3hvNV")]
            public static 
            unsafe void Vertex3h(OpenTK.Math.Half* v)
            {
                Delegates.glVertex3hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex4hNV")]
            public static 
            void Vertex4h(OpenTK.Math.Half x, OpenTK.Math.Half y, OpenTK.Math.Half z, OpenTK.Math.Half w)
            {
                Delegates.glVertex4hNV((OpenTK.Math.Half)x, (OpenTK.Math.Half)y, (OpenTK.Math.Half)z, (OpenTK.Math.Half)w);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex4hvNV")]
            public static 
            void Vertex4h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertex4hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex4hvNV")]
            public static 
            void Vertex4h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertex4hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertex4hvNV")]
            public static 
            unsafe void Vertex4h(OpenTK.Math.Half* v)
            {
                Delegates.glVertex4hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glNormal3hNV")]
            public static 
            void Normal3h(OpenTK.Math.Half nx, OpenTK.Math.Half ny, OpenTK.Math.Half nz)
            {
                Delegates.glNormal3hNV((OpenTK.Math.Half)nx, (OpenTK.Math.Half)ny, (OpenTK.Math.Half)nz);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glNormal3hvNV")]
            public static 
            void Normal3h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glNormal3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glNormal3hvNV")]
            public static 
            void Normal3h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glNormal3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glNormal3hvNV")]
            public static 
            unsafe void Normal3h(OpenTK.Math.Half* v)
            {
                Delegates.glNormal3hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor3hNV")]
            public static 
            void Color3h(OpenTK.Math.Half red, OpenTK.Math.Half green, OpenTK.Math.Half blue)
            {
                Delegates.glColor3hNV((OpenTK.Math.Half)red, (OpenTK.Math.Half)green, (OpenTK.Math.Half)blue);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor3hvNV")]
            public static 
            void Color3h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glColor3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor3hvNV")]
            public static 
            void Color3h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glColor3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor3hvNV")]
            public static 
            unsafe void Color3h(OpenTK.Math.Half* v)
            {
                Delegates.glColor3hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor4hNV")]
            public static 
            void Color4h(OpenTK.Math.Half red, OpenTK.Math.Half green, OpenTK.Math.Half blue, OpenTK.Math.Half alpha)
            {
                Delegates.glColor4hNV((OpenTK.Math.Half)red, (OpenTK.Math.Half)green, (OpenTK.Math.Half)blue, (OpenTK.Math.Half)alpha);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor4hvNV")]
            public static 
            void Color4h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glColor4hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor4hvNV")]
            public static 
            void Color4h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glColor4hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glColor4hvNV")]
            public static 
            unsafe void Color4h(OpenTK.Math.Half* v)
            {
                Delegates.glColor4hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord1hNV")]
            public static 
            void TexCoord1h(OpenTK.Math.Half s)
            {
                Delegates.glTexCoord1hNV((OpenTK.Math.Half)s);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord1hvNV")]
            public static 
            void TexCoord1hv(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glTexCoord1hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord1hvNV")]
            public static 
            void TexCoord1hv(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glTexCoord1hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord1hvNV")]
            public static 
            unsafe void TexCoord1hv(OpenTK.Math.Half* v)
            {
                Delegates.glTexCoord1hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord2hNV")]
            public static 
            void TexCoord2h(OpenTK.Math.Half s, OpenTK.Math.Half t)
            {
                Delegates.glTexCoord2hNV((OpenTK.Math.Half)s, (OpenTK.Math.Half)t);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord2hvNV")]
            public static 
            void TexCoord2h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glTexCoord2hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord2hvNV")]
            public static 
            void TexCoord2h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glTexCoord2hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord2hvNV")]
            public static 
            unsafe void TexCoord2h(OpenTK.Math.Half* v)
            {
                Delegates.glTexCoord2hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord3hNV")]
            public static 
            void TexCoord3h(OpenTK.Math.Half s, OpenTK.Math.Half t, OpenTK.Math.Half r)
            {
                Delegates.glTexCoord3hNV((OpenTK.Math.Half)s, (OpenTK.Math.Half)t, (OpenTK.Math.Half)r);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord3hvNV")]
            public static 
            void TexCoord3h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glTexCoord3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord3hvNV")]
            public static 
            void TexCoord3h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glTexCoord3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord3hvNV")]
            public static 
            unsafe void TexCoord3h(OpenTK.Math.Half* v)
            {
                Delegates.glTexCoord3hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord4hNV")]
            public static 
            void TexCoord4h(OpenTK.Math.Half s, OpenTK.Math.Half t, OpenTK.Math.Half r, OpenTK.Math.Half q)
            {
                Delegates.glTexCoord4hNV((OpenTK.Math.Half)s, (OpenTK.Math.Half)t, (OpenTK.Math.Half)r, (OpenTK.Math.Half)q);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord4hvNV")]
            public static 
            void TexCoord4h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glTexCoord4hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord4hvNV")]
            public static 
            void TexCoord4h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glTexCoord4hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glTexCoord4hvNV")]
            public static 
            unsafe void TexCoord4h(OpenTK.Math.Half* v)
            {
                Delegates.glTexCoord4hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord1hNV")]
            public static 
            void MultiTexCoord1h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half s)
            {
                Delegates.glMultiTexCoord1hNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half)s);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord1hvNV")]
            public static 
            void MultiTexCoord1hv(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord1hvNV")]
            public static 
            void MultiTexCoord1hv(OpenTK.Graphics.TextureUnit target, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord1hvNV")]
            public static 
            unsafe void MultiTexCoord1hv(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half* v)
            {
                Delegates.glMultiTexCoord1hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord2hNV")]
            public static 
            void MultiTexCoord2h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half s, OpenTK.Math.Half t)
            {
                Delegates.glMultiTexCoord2hNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half)s, (OpenTK.Math.Half)t);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord2hvNV")]
            public static 
            void MultiTexCoord2h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord2hvNV")]
            public static 
            void MultiTexCoord2h(OpenTK.Graphics.TextureUnit target, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord2hvNV")]
            public static 
            unsafe void MultiTexCoord2h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half* v)
            {
                Delegates.glMultiTexCoord2hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord3hNV")]
            public static 
            void MultiTexCoord3h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half s, OpenTK.Math.Half t, OpenTK.Math.Half r)
            {
                Delegates.glMultiTexCoord3hNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half)s, (OpenTK.Math.Half)t, (OpenTK.Math.Half)r);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord3hvNV")]
            public static 
            void MultiTexCoord3h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord3hvNV")]
            public static 
            void MultiTexCoord3h(OpenTK.Graphics.TextureUnit target, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord3hvNV")]
            public static 
            unsafe void MultiTexCoord3h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half* v)
            {
                Delegates.glMultiTexCoord3hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord4hNV")]
            public static 
            void MultiTexCoord4h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half s, OpenTK.Math.Half t, OpenTK.Math.Half r, OpenTK.Math.Half q)
            {
                Delegates.glMultiTexCoord4hNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half)s, (OpenTK.Math.Half)t, (OpenTK.Math.Half)r, (OpenTK.Math.Half)q);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord4hvNV")]
            public static 
            void MultiTexCoord4h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord4hvNV")]
            public static 
            void MultiTexCoord4h(OpenTK.Graphics.TextureUnit target, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glMultiTexCoord4hvNV")]
            public static 
            unsafe void MultiTexCoord4h(OpenTK.Graphics.TextureUnit target, OpenTK.Math.Half* v)
            {
                Delegates.glMultiTexCoord4hvNV((OpenTK.Graphics.TextureUnit)target, (OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glFogCoordhNV")]
            public static 
            void FogCoordh(OpenTK.Math.Half fog)
            {
                Delegates.glFogCoordhNV((OpenTK.Math.Half)fog);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glFogCoordhvNV")]
            public static 
            void FogCoordhv(OpenTK.Math.Half[] fog)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* fog_ptr = fog)
                    {
                        Delegates.glFogCoordhvNV((OpenTK.Math.Half*)fog_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glFogCoordhvNV")]
            public static 
            void FogCoordhv(ref OpenTK.Math.Half fog)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* fog_ptr = &fog)
                    {
                        Delegates.glFogCoordhvNV((OpenTK.Math.Half*)fog_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glFogCoordhvNV")]
            public static 
            unsafe void FogCoordhv(OpenTK.Math.Half* fog)
            {
                Delegates.glFogCoordhvNV((OpenTK.Math.Half*)fog);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glSecondaryColor3hNV")]
            public static 
            void SecondaryColor3h(OpenTK.Math.Half red, OpenTK.Math.Half green, OpenTK.Math.Half blue)
            {
                Delegates.glSecondaryColor3hNV((OpenTK.Math.Half)red, (OpenTK.Math.Half)green, (OpenTK.Math.Half)blue);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glSecondaryColor3hvNV")]
            public static 
            void SecondaryColor3h(OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glSecondaryColor3hvNV")]
            public static 
            void SecondaryColor3h(ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3hvNV((OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glSecondaryColor3hvNV")]
            public static 
            unsafe void SecondaryColor3h(OpenTK.Math.Half* v)
            {
                Delegates.glSecondaryColor3hvNV((OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexWeighthNV")]
            public static 
            void VertexWeighth(OpenTK.Math.Half weight)
            {
                Delegates.glVertexWeighthNV((OpenTK.Math.Half)weight);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexWeighthvNV")]
            public static 
            void VertexWeighthv(OpenTK.Math.Half[] weight)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* weight_ptr = weight)
                    {
                        Delegates.glVertexWeighthvNV((OpenTK.Math.Half*)weight_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexWeighthvNV")]
            public static 
            void VertexWeighthv(ref OpenTK.Math.Half weight)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* weight_ptr = &weight)
                    {
                        Delegates.glVertexWeighthvNV((OpenTK.Math.Half*)weight_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexWeighthvNV")]
            public static 
            unsafe void VertexWeighthv(OpenTK.Math.Half* weight)
            {
                Delegates.glVertexWeighthvNV((OpenTK.Math.Half*)weight);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hNV")]
            public static 
            void VertexAttrib1h(UInt32 index, OpenTK.Math.Half x)
            {
                Delegates.glVertexAttrib1hNV((UInt32)index, (OpenTK.Math.Half)x);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hNV")]
            public static 
            void VertexAttrib1h(Int32 index, OpenTK.Math.Half x)
            {
                Delegates.glVertexAttrib1hNV((UInt32)index, (OpenTK.Math.Half)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hvNV")]
            public static 
            void VertexAttrib1hv(UInt32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hvNV")]
            public static 
            void VertexAttrib1hv(Int32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hvNV")]
            public static 
            void VertexAttrib1hv(UInt32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hvNV")]
            public static 
            void VertexAttrib1hv(Int32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hvNV")]
            public static 
            unsafe void VertexAttrib1hv(UInt32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib1hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib1hvNV")]
            public static 
            unsafe void VertexAttrib1hv(Int32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib1hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hNV")]
            public static 
            void VertexAttrib2h(UInt32 index, OpenTK.Math.Half x, OpenTK.Math.Half y)
            {
                Delegates.glVertexAttrib2hNV((UInt32)index, (OpenTK.Math.Half)x, (OpenTK.Math.Half)y);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hNV")]
            public static 
            void VertexAttrib2h(Int32 index, OpenTK.Math.Half x, OpenTK.Math.Half y)
            {
                Delegates.glVertexAttrib2hNV((UInt32)index, (OpenTK.Math.Half)x, (OpenTK.Math.Half)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hvNV")]
            public static 
            void VertexAttrib2h(UInt32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hvNV")]
            public static 
            void VertexAttrib2h(Int32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hvNV")]
            public static 
            void VertexAttrib2h(UInt32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hvNV")]
            public static 
            void VertexAttrib2h(Int32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hvNV")]
            public static 
            unsafe void VertexAttrib2h(UInt32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib2hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib2hvNV")]
            public static 
            unsafe void VertexAttrib2h(Int32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib2hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hNV")]
            public static 
            void VertexAttrib3h(UInt32 index, OpenTK.Math.Half x, OpenTK.Math.Half y, OpenTK.Math.Half z)
            {
                Delegates.glVertexAttrib3hNV((UInt32)index, (OpenTK.Math.Half)x, (OpenTK.Math.Half)y, (OpenTK.Math.Half)z);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hNV")]
            public static 
            void VertexAttrib3h(Int32 index, OpenTK.Math.Half x, OpenTK.Math.Half y, OpenTK.Math.Half z)
            {
                Delegates.glVertexAttrib3hNV((UInt32)index, (OpenTK.Math.Half)x, (OpenTK.Math.Half)y, (OpenTK.Math.Half)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hvNV")]
            public static 
            void VertexAttrib3h(UInt32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hvNV")]
            public static 
            void VertexAttrib3h(Int32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hvNV")]
            public static 
            void VertexAttrib3h(UInt32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hvNV")]
            public static 
            void VertexAttrib3h(Int32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hvNV")]
            public static 
            unsafe void VertexAttrib3h(UInt32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib3hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib3hvNV")]
            public static 
            unsafe void VertexAttrib3h(Int32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib3hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hNV")]
            public static 
            void VertexAttrib4h(UInt32 index, OpenTK.Math.Half x, OpenTK.Math.Half y, OpenTK.Math.Half z, OpenTK.Math.Half w)
            {
                Delegates.glVertexAttrib4hNV((UInt32)index, (OpenTK.Math.Half)x, (OpenTK.Math.Half)y, (OpenTK.Math.Half)z, (OpenTK.Math.Half)w);
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hNV")]
            public static 
            void VertexAttrib4h(Int32 index, OpenTK.Math.Half x, OpenTK.Math.Half y, OpenTK.Math.Half z, OpenTK.Math.Half w)
            {
                Delegates.glVertexAttrib4hNV((UInt32)index, (OpenTK.Math.Half)x, (OpenTK.Math.Half)y, (OpenTK.Math.Half)z, (OpenTK.Math.Half)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hvNV")]
            public static 
            void VertexAttrib4h(UInt32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hvNV")]
            public static 
            void VertexAttrib4h(Int32 index, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hvNV")]
            public static 
            void VertexAttrib4h(UInt32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hvNV")]
            public static 
            void VertexAttrib4h(Int32 index, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hvNV")]
            public static 
            unsafe void VertexAttrib4h(UInt32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib4hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttrib4hvNV")]
            public static 
            unsafe void VertexAttrib4h(Int32 index, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttrib4hvNV((UInt32)index, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs1hvNV")]
            public static 
            void VertexAttribs1h(UInt32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs1hvNV")]
            public static 
            void VertexAttribs1h(Int32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs1hvNV")]
            public static 
            void VertexAttribs1h(UInt32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs1hvNV")]
            public static 
            void VertexAttribs1h(Int32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs1hvNV")]
            public static 
            unsafe void VertexAttribs1h(UInt32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs1hvNV")]
            public static 
            unsafe void VertexAttribs1h(Int32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs2hvNV")]
            public static 
            void VertexAttribs2h(UInt32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs2hvNV")]
            public static 
            void VertexAttribs2h(Int32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs2hvNV")]
            public static 
            void VertexAttribs2h(UInt32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs2hvNV")]
            public static 
            void VertexAttribs2h(Int32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs2hvNV")]
            public static 
            unsafe void VertexAttribs2h(UInt32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs2hvNV")]
            public static 
            unsafe void VertexAttribs2h(Int32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs3hvNV")]
            public static 
            void VertexAttribs3h(UInt32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs3hvNV")]
            public static 
            void VertexAttribs3h(Int32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs3hvNV")]
            public static 
            void VertexAttribs3h(UInt32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs3hvNV")]
            public static 
            void VertexAttribs3h(Int32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs3hvNV")]
            public static 
            unsafe void VertexAttribs3h(UInt32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs3hvNV")]
            public static 
            unsafe void VertexAttribs3h(Int32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs4hvNV")]
            public static 
            void VertexAttribs4h(UInt32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs4hvNV")]
            public static 
            void VertexAttribs4h(Int32 index, Int32 n, OpenTK.Math.Half[] v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs4hvNV")]
            public static 
            void VertexAttribs4h(UInt32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs4hvNV")]
            public static 
            void VertexAttribs4h(Int32 index, Int32 n, ref OpenTK.Math.Half v)
            {
                unsafe
                {
                    fixed (OpenTK.Math.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs4hvNV")]
            public static 
            unsafe void VertexAttribs4h(UInt32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvHalfFloat", Version = "1.2", EntryPoint = "glVertexAttribs4hvNV")]
            public static 
            unsafe void VertexAttribs4h(Int32 index, Int32 n, OpenTK.Math.Half* v)
            {
                Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (OpenTK.Math.Half*)v);
            }

            [AutoGenerated(Category = "NvPixelDataRange", Version = "1.2", EntryPoint = "glPixelDataRangeNV")]
            public static 
            void PixelDataRange(OpenTK.Graphics.NvPixelDataRange target, Int32 length, [Out] IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glPixelDataRangeNV((OpenTK.Graphics.NvPixelDataRange)target, (Int32)length, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "NvPixelDataRange", Version = "1.2", EntryPoint = "glPixelDataRangeNV")]
            public static 
            void PixelDataRange(OpenTK.Graphics.NvPixelDataRange target, Int32 length, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glPixelDataRangeNV((OpenTK.Graphics.NvPixelDataRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvPixelDataRange", Version = "1.2", EntryPoint = "glFlushPixelDataRangeNV")]
            public static 
            void FlushPixelDataRange(OpenTK.Graphics.NvPixelDataRange target)
            {
                Delegates.glFlushPixelDataRangeNV((OpenTK.Graphics.NvPixelDataRange)target);
            }

            [AutoGenerated(Category = "NvPrimitiveRestart", Version = "1.2", EntryPoint = "glPrimitiveRestartNV")]
            public static 
            void PrimitiveRestart()
            {
                Delegates.glPrimitiveRestartNV();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvPrimitiveRestart", Version = "1.2", EntryPoint = "glPrimitiveRestartIndexNV")]
            public static 
            void PrimitiveRestartIndex(UInt32 index)
            {
                Delegates.glPrimitiveRestartIndexNV((UInt32)index);
            }

            [AutoGenerated(Category = "NvPrimitiveRestart", Version = "1.2", EntryPoint = "glPrimitiveRestartIndexNV")]
            public static 
            void PrimitiveRestartIndex(Int32 index)
            {
                Delegates.glPrimitiveRestartIndexNV((UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4iNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glProgramLocalParameterI4iNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4iNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glProgramLocalParameterI4iNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4ivNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4ivNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4ivNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4ivNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4ivNV")]
            public static 
            unsafe void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32* @params)
            {
                Delegates.glProgramLocalParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4ivNV")]
            public static 
            unsafe void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32* @params)
            {
                Delegates.glProgramLocalParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4ivNV")]
            public static 
            void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4ivNV")]
            public static 
            void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4ivNV")]
            public static 
            void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4ivNV")]
            public static 
            void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4ivNV")]
            public static 
            unsafe void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, Int32* @params)
            {
                Delegates.glProgramLocalParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4ivNV")]
            public static 
            unsafe void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 count, Int32* @params)
            {
                Delegates.glProgramLocalParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4uiNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                Delegates.glProgramLocalParameterI4uiNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4uivNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4uivNV")]
            public static 
            void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParameterI4uivNV")]
            public static 
            unsafe void ProgramLocalParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, UInt32* @params)
            {
                Delegates.glProgramLocalParameterI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4uivNV")]
            public static 
            void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4uivNV")]
            public static 
            void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramLocalParametersI4uivNV")]
            public static 
            unsafe void ProgramLocalParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32* @params)
            {
                Delegates.glProgramLocalParametersI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4iNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glProgramEnvParameterI4iNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4iNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glProgramEnvParameterI4iNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4ivNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4ivNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4ivNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4ivNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4ivNV")]
            public static 
            unsafe void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32* @params)
            {
                Delegates.glProgramEnvParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4ivNV")]
            public static 
            unsafe void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32* @params)
            {
                Delegates.glProgramEnvParameterI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4ivNV")]
            public static 
            void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4ivNV")]
            public static 
            void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4ivNV")]
            public static 
            void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4ivNV")]
            public static 
            void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4ivNV")]
            public static 
            unsafe void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, Int32* @params)
            {
                Delegates.glProgramEnvParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4ivNV")]
            public static 
            unsafe void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, Int32 count, Int32* @params)
            {
                Delegates.glProgramEnvParametersI4ivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4uiNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                Delegates.glProgramEnvParameterI4uiNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4uivNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4uivNV")]
            public static 
            void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParameterI4uivNV")]
            public static 
            unsafe void ProgramEnvParameterI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, UInt32* @params)
            {
                Delegates.glProgramEnvParameterI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4uivNV")]
            public static 
            void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4uivNV")]
            public static 
            void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glProgramEnvParametersI4uivNV")]
            public static 
            unsafe void ProgramEnvParametersI4(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32* @params)
            {
                Delegates.glProgramEnvParametersI4uivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIivNV")]
            public static 
            void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIivNV")]
            public static 
            void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIivNV")]
            public static 
            void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIivNV")]
            public static 
            void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIivNV")]
            public static 
            unsafe void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] Int32* @params)
            {
                Delegates.glGetProgramLocalParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIivNV")]
            public static 
            unsafe void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, [Out] Int32* @params)
            {
                Delegates.glGetProgramLocalParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIuivNV")]
            public static 
            void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIuivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIuivNV")]
            public static 
            void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIuivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramLocalParameterIuivNV")]
            public static 
            unsafe void GetProgramLocalParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] UInt32* @params)
            {
                Delegates.glGetProgramLocalParameterIuivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIivNV")]
            public static 
            void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIivNV")]
            public static 
            void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIivNV")]
            public static 
            void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIivNV")]
            public static 
            void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIivNV")]
            public static 
            unsafe void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] Int32* @params)
            {
                Delegates.glGetProgramEnvParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIivNV")]
            public static 
            unsafe void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, Int32 index, [Out] Int32* @params)
            {
                Delegates.glGetProgramEnvParameterIivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIuivNV")]
            public static 
            void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIuivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIuivNV")]
            public static 
            void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIuivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGpuProgram4", Version = "1.3", EntryPoint = "glGetProgramEnvParameterIuivNV")]
            public static 
            unsafe void GetProgramEnvParameterI(OpenTK.Graphics.NvGpuProgram4 target, UInt32 index, [Out] UInt32* @params)
            {
                Delegates.glGetProgramEnvParameterIuivNV((OpenTK.Graphics.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
            }

            [AutoGenerated(Category = "NvGeometryProgram4", Version = "2.0", EntryPoint = "glProgramVertexLimitNV")]
            public static 
            void ProgramVertexLimit(OpenTK.Graphics.NvGeometryProgram4 target, Int32 limit)
            {
                Delegates.glProgramVertexLimitNV((OpenTK.Graphics.NvGeometryProgram4)target, (Int32)limit);
            }

            [AutoGenerated(Category = "NvDepthBufferFloat", Version = "2.0", EntryPoint = "glDepthRangedNV")]
            public static 
            void DepthRange(Double zNear, Double zFar)
            {
                Delegates.glDepthRangedNV((Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "NvDepthBufferFloat", Version = "2.0", EntryPoint = "glClearDepthdNV")]
            public static 
            void ClearDepth(Double depth)
            {
                Delegates.glClearDepthdNV((Double)depth);
            }

            [AutoGenerated(Category = "NvDepthBufferFloat", Version = "2.0", EntryPoint = "glDepthBoundsdNV")]
            public static 
            void DepthBounds(Double zmin, Double zmax)
            {
                Delegates.glDepthBoundsdNV((Double)zmin, (Double)zmax);
            }

            [AutoGenerated(Category = "NvFramebufferMultisampleCoverage", Version = "1.5", EntryPoint = "glRenderbufferStorageMultisampleCoverageNV")]
            public static 
            void RenderbufferStorageMultisampleCoverage(OpenTK.Graphics.RenderbufferTarget target, Int32 coverageSamples, Int32 colorSamples, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageMultisampleCoverageNV((OpenTK.Graphics.RenderbufferTarget)target, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersfvNV")]
            public static 
            void ProgramBufferParameters(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersfvNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersfvNV")]
            public static 
            void ProgramBufferParameters(OpenTK.Graphics.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersfvNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersfvNV")]
            public static 
            void ProgramBufferParameters(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersfvNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersfvNV")]
            public static 
            void ProgramBufferParameters(OpenTK.Graphics.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersfvNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersfvNV")]
            public static 
            unsafe void ProgramBufferParameters(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramBufferParametersfvNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersfvNV")]
            public static 
            unsafe void ProgramBufferParameters(OpenTK.Graphics.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramBufferParametersfvNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIivNV")]
            public static 
            void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIivNV")]
            public static 
            void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIivNV")]
            public static 
            void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIivNV")]
            public static 
            void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIivNV")]
            public static 
            unsafe void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Int32* @params)
            {
                Delegates.glProgramBufferParametersIivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIivNV")]
            public static 
            unsafe void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Int32* @params)
            {
                Delegates.glProgramBufferParametersIivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIuivNV")]
            public static 
            void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIuivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIuivNV")]
            public static 
            void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIuivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvParameterBufferObject", Version = "1.2", EntryPoint = "glProgramBufferParametersIuivNV")]
            public static 
            unsafe void ProgramBufferParametersI(OpenTK.Graphics.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, UInt32* @params)
            {
                Delegates.glProgramBufferParametersIuivNV((OpenTK.Graphics.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params);
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glBeginTransformFeedbackNV")]
            public static 
            void BeginTransformFeedback(OpenTK.Graphics.NvTransformFeedback primitiveMode)
            {
                Delegates.glBeginTransformFeedbackNV((OpenTK.Graphics.NvTransformFeedback)primitiveMode);
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glEndTransformFeedbackNV")]
            public static 
            void EndTransformFeedback()
            {
                Delegates.glEndTransformFeedbackNV();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static 
            void TransformFeedbackAttrib(UInt32 count, Int32[] attribs, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* attribs_ptr = attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static 
            void TransformFeedbackAttrib(Int32 count, Int32[] attribs, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* attribs_ptr = attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static 
            void TransformFeedbackAttrib(UInt32 count, ref Int32 attribs, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* attribs_ptr = &attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static 
            void TransformFeedbackAttrib(Int32 count, ref Int32 attribs, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* attribs_ptr = &attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static 
            unsafe void TransformFeedbackAttrib(UInt32 count, Int32* attribs, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackAttribsNV")]
            public static 
            unsafe void TransformFeedbackAttrib(Int32 count, Int32* attribs, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glBindBufferRangeNV")]
            public static 
            void BindBufferRange(OpenTK.Graphics.NvTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeNV((OpenTK.Graphics.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glBindBufferRangeNV")]
            public static 
            void BindBufferRange(OpenTK.Graphics.NvTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeNV((OpenTK.Graphics.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glBindBufferOffsetNV")]
            public static 
            void BindBufferOffset(OpenTK.Graphics.NvTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetNV((OpenTK.Graphics.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glBindBufferOffsetNV")]
            public static 
            void BindBufferOffset(OpenTK.Graphics.NvTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetNV((OpenTK.Graphics.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glBindBufferBaseNV")]
            public static 
            void BindBufferBase(OpenTK.Graphics.NvTransformFeedback target, UInt32 index, UInt32 buffer)
            {
                Delegates.glBindBufferBaseNV((OpenTK.Graphics.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer);
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glBindBufferBaseNV")]
            public static 
            void BindBufferBase(OpenTK.Graphics.NvTransformFeedback target, Int32 index, Int32 buffer)
            {
                Delegates.glBindBufferBaseNV((OpenTK.Graphics.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static 
            void TransformFeedbackVarying(UInt32 program, Int32 count, Int32[] locations, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = locations)
                    {
                        Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static 
            void TransformFeedbackVarying(Int32 program, Int32 count, Int32[] locations, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = locations)
                    {
                        Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static 
            void TransformFeedbackVarying(UInt32 program, Int32 count, ref Int32 locations, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = &locations)
                    {
                        Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static 
            void TransformFeedbackVarying(Int32 program, Int32 count, ref Int32 locations, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = &locations)
                    {
                        Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static 
            unsafe void TransformFeedbackVarying(UInt32 program, Int32 count, Int32* locations, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glTransformFeedbackVaryingsNV")]
            public static 
            unsafe void TransformFeedbackVarying(Int32 program, Int32 count, Int32* locations, OpenTK.Graphics.NvTransformFeedback bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, (Int32*)locations, (OpenTK.Graphics.NvTransformFeedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glActiveVaryingNV")]
            public static 
            void ActiveVarying(UInt32 program, System.String name)
            {
                Delegates.glActiveVaryingNV((UInt32)program, (System.String)name);
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glActiveVaryingNV")]
            public static 
            void ActiveVarying(Int32 program, System.String name)
            {
                Delegates.glActiveVaryingNV((UInt32)program, (System.String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetVaryingLocationNV")]
            public static 
            Int32 GetVaryingLocation(UInt32 program, System.String name)
            {
                return Delegates.glGetVaryingLocationNV((UInt32)program, (System.String)name);
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetVaryingLocationNV")]
            public static 
            Int32 GetVaryingLocation(Int32 program, System.String name)
            {
                return Delegates.glGetVaryingLocationNV((UInt32)program, (System.String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetActiveVaryingNV")]
            public static 
            void GetActiveVarying(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.NvTransformFeedback[] type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Int32* size_ptr = size)
                    fixed (OpenTK.Graphics.NvTransformFeedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.NvTransformFeedback*)type_ptr, (System.Text.StringBuilder)name);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetActiveVaryingNV")]
            public static 
            void GetActiveVarying(Int32 program, Int32 index, Int32 bufSize, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.NvTransformFeedback[] type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Int32* size_ptr = size)
                    fixed (OpenTK.Graphics.NvTransformFeedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.NvTransformFeedback*)type_ptr, (System.Text.StringBuilder)name);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetActiveVaryingNV")]
            public static 
            void GetActiveVarying(UInt32 program, UInt32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.NvTransformFeedback type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.NvTransformFeedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.NvTransformFeedback*)type_ptr, (System.Text.StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetActiveVaryingNV")]
            public static 
            void GetActiveVarying(Int32 program, Int32 index, Int32 bufSize, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.NvTransformFeedback type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.NvTransformFeedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.NvTransformFeedback*)type_ptr, (System.Text.StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetActiveVaryingNV")]
            public static 
            unsafe void GetActiveVarying(UInt32 program, UInt32 index, Int32 bufSize, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.NvTransformFeedback* type, [Out] System.Text.StringBuilder name)
            {
                Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.NvTransformFeedback*)type, (System.Text.StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetActiveVaryingNV")]
            public static 
            unsafe void GetActiveVarying(Int32 program, Int32 index, Int32 bufSize, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.NvTransformFeedback* type, [Out] System.Text.StringBuilder name)
            {
                Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.NvTransformFeedback*)type, (System.Text.StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static 
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] Int32[] location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static 
            void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] Int32[] location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static 
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] out Int32 location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = &location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                        location = *location_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static 
            void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] out Int32 location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = &location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                        location = *location_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static 
            unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] Int32* location)
            {
                Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback", Version = "1.5", EntryPoint = "glGetTransformFeedbackVaryingNV")]
            public static 
            unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] Int32* location)
            {
                Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvConditionalRender", Version = "", EntryPoint = "glBeginConditionalRenderNV")]
            public static 
            void BeginConditionalRender(UInt32 id, OpenTK.Graphics.NvConditionalRender mode)
            {
                Delegates.glBeginConditionalRenderNV((UInt32)id, (OpenTK.Graphics.NvConditionalRender)mode);
            }

            [AutoGenerated(Category = "NvConditionalRender", Version = "", EntryPoint = "glBeginConditionalRenderNV")]
            public static 
            void BeginConditionalRender(Int32 id, OpenTK.Graphics.NvConditionalRender mode)
            {
                Delegates.glBeginConditionalRenderNV((UInt32)id, (OpenTK.Graphics.NvConditionalRender)mode);
            }

            [AutoGenerated(Category = "NvConditionalRender", Version = "", EntryPoint = "glEndConditionalRenderNV")]
            public static 
            void EndConditionalRender()
            {
                Delegates.glEndConditionalRenderNV();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glGetMultisamplefvNV")]
            public static 
            void GetMultisample(OpenTK.Graphics.NvExplicitMultisample pname, UInt32 index, [Out] Single[] val)
            {
                unsafe
                {
                    fixed (Single* val_ptr = val)
                    {
                        Delegates.glGetMultisamplefvNV((OpenTK.Graphics.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glGetMultisamplefvNV")]
            public static 
            void GetMultisample(OpenTK.Graphics.NvExplicitMultisample pname, Int32 index, [Out] Single[] val)
            {
                unsafe
                {
                    fixed (Single* val_ptr = val)
                    {
                        Delegates.glGetMultisamplefvNV((OpenTK.Graphics.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glGetMultisamplefvNV")]
            public static 
            void GetMultisample(OpenTK.Graphics.NvExplicitMultisample pname, UInt32 index, [Out] out Single val)
            {
                unsafe
                {
                    fixed (Single* val_ptr = &val)
                    {
                        Delegates.glGetMultisamplefvNV((OpenTK.Graphics.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                        val = *val_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glGetMultisamplefvNV")]
            public static 
            void GetMultisample(OpenTK.Graphics.NvExplicitMultisample pname, Int32 index, [Out] out Single val)
            {
                unsafe
                {
                    fixed (Single* val_ptr = &val)
                    {
                        Delegates.glGetMultisamplefvNV((OpenTK.Graphics.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                        val = *val_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glGetMultisamplefvNV")]
            public static 
            unsafe void GetMultisample(OpenTK.Graphics.NvExplicitMultisample pname, UInt32 index, [Out] Single* val)
            {
                Delegates.glGetMultisamplefvNV((OpenTK.Graphics.NvExplicitMultisample)pname, (UInt32)index, (Single*)val);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glGetMultisamplefvNV")]
            public static 
            unsafe void GetMultisample(OpenTK.Graphics.NvExplicitMultisample pname, Int32 index, [Out] Single* val)
            {
                Delegates.glGetMultisamplefvNV((OpenTK.Graphics.NvExplicitMultisample)pname, (UInt32)index, (Single*)val);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glSampleMaskIndexedNV")]
            public static 
            void SampleMaskIndexe(UInt32 index, UInt32 mask)
            {
                Delegates.glSampleMaskIndexedNV((UInt32)index, (UInt32)mask);
            }

            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glSampleMaskIndexedNV")]
            public static 
            void SampleMaskIndexe(Int32 index, Int32 mask)
            {
                Delegates.glSampleMaskIndexedNV((UInt32)index, (UInt32)mask);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glTexRenderbufferNV")]
            public static 
            void TexRenderbuffer(OpenTK.Graphics.TextureTarget target, UInt32 renderbuffer)
            {
                Delegates.glTexRenderbufferNV((OpenTK.Graphics.TextureTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "NvExplicitMultisample", Version = "", EntryPoint = "glTexRenderbufferNV")]
            public static 
            void TexRenderbuffer(OpenTK.Graphics.TextureTarget target, Int32 renderbuffer)
            {
                Delegates.glTexRenderbufferNV((OpenTK.Graphics.TextureTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glBindTransformFeedbackNV")]
            public static 
            void BindTransformFeedback(OpenTK.Graphics.NvTransformFeedback2 target, UInt32 id)
            {
                Delegates.glBindTransformFeedbackNV((OpenTK.Graphics.NvTransformFeedback2)target, (UInt32)id);
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glBindTransformFeedbackNV")]
            public static 
            void BindTransformFeedback(OpenTK.Graphics.NvTransformFeedback2 target, Int32 id)
            {
                Delegates.glBindTransformFeedbackNV((OpenTK.Graphics.NvTransformFeedback2)target, (UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static 
            void DeleteTransformFeedback(Int32 n, UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static 
            void DeleteTransformFeedback(Int32 n, Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static 
            void DeleteTransformFeedback(Int32 n, ref UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static 
            void DeleteTransformFeedback(Int32 n, ref Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static 
            unsafe void DeleteTransformFeedback(Int32 n, UInt32* ids)
            {
                Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDeleteTransformFeedbacksNV")]
            public static 
            unsafe void DeleteTransformFeedback(Int32 n, Int32* ids)
            {
                Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static 
            void GenTransformFeedback(Int32 n, [Out] UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static 
            void GenTransformFeedback(Int32 n, [Out] Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static 
            void GenTransformFeedback(Int32 n, [Out] out UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static 
            void GenTransformFeedback(Int32 n, [Out] out Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static 
            unsafe void GenTransformFeedback(Int32 n, [Out] UInt32* ids)
            {
                Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glGenTransformFeedbacksNV")]
            public static 
            unsafe void GenTransformFeedback(Int32 n, [Out] Int32* ids)
            {
                Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glIsTransformFeedbackNV")]
            public static 
            bool IsTransformFeedback(UInt32 id)
            {
                return Delegates.glIsTransformFeedbackNV((UInt32)id);
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glIsTransformFeedbackNV")]
            public static 
            bool IsTransformFeedback(Int32 id)
            {
                return Delegates.glIsTransformFeedbackNV((UInt32)id);
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glPauseTransformFeedbackNV")]
            public static 
            void PauseTransformFeedback()
            {
                Delegates.glPauseTransformFeedbackNV();
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glResumeTransformFeedbackNV")]
            public static 
            void ResumeTransformFeedback()
            {
                Delegates.glResumeTransformFeedbackNV();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDrawTransformFeedbackNV")]
            public static 
            void DrawTransformFeedback(OpenTK.Graphics.NvTransformFeedback2 mode, UInt32 id)
            {
                Delegates.glDrawTransformFeedbackNV((OpenTK.Graphics.NvTransformFeedback2)mode, (UInt32)id);
            }

            [AutoGenerated(Category = "NvTransformFeedback2", Version = "", EntryPoint = "glDrawTransformFeedbackNV")]
            public static 
            void DrawTransformFeedback(OpenTK.Graphics.NvTransformFeedback2 mode, Int32 id)
            {
                Delegates.glDrawTransformFeedbackNV((OpenTK.Graphics.NvTransformFeedback2)mode, (UInt32)id);
            }

        }

        public static partial class Arb
        {
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glActiveTextureARB")]
            public static 
            void ActiveTexture(OpenTK.Graphics.TextureUnit texture)
            {
                Delegates.glActiveTextureARB((OpenTK.Graphics.TextureUnit)texture);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glClientActiveTextureARB")]
            public static 
            void ClientActiveTexture(OpenTK.Graphics.TextureUnit texture)
            {
                Delegates.glClientActiveTextureARB((OpenTK.Graphics.TextureUnit)texture);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dARB")]
            public static 
            void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Double s)
            {
                Delegates.glMultiTexCoord1dARB((OpenTK.Graphics.TextureUnit)target, (Double)s);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dvARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dvARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1dvARB")]
            public static 
            unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord1dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fARB")]
            public static 
            void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Single s)
            {
                Delegates.glMultiTexCoord1fARB((OpenTK.Graphics.TextureUnit)target, (Single)s);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fvARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fvARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1fvARB")]
            public static 
            unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord1fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1iARB")]
            public static 
            void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Int32 s)
            {
                Delegates.glMultiTexCoord1iARB((OpenTK.Graphics.TextureUnit)target, (Int32)s);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1ivARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1ivARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1ivARB")]
            public static 
            unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord1ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1sARB")]
            public static 
            void MultiTexCoord1(OpenTK.Graphics.TextureUnit target, Int16 s)
            {
                Delegates.glMultiTexCoord1sARB((OpenTK.Graphics.TextureUnit)target, (Int16)s);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1svARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1svARB")]
            public static 
            void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord1svARB")]
            public static 
            unsafe void MultiTexCoord1v(OpenTK.Graphics.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord1svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Double s, Double t)
            {
                Delegates.glMultiTexCoord2dARB((OpenTK.Graphics.TextureUnit)target, (Double)s, (Double)t);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2dvARB")]
            public static 
            unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord2dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Single s, Single t)
            {
                Delegates.glMultiTexCoord2fARB((OpenTK.Graphics.TextureUnit)target, (Single)s, (Single)t);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2fvARB")]
            public static 
            unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord2fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2iARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int32 s, Int32 t)
            {
                Delegates.glMultiTexCoord2iARB((OpenTK.Graphics.TextureUnit)target, (Int32)s, (Int32)t);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2ivARB")]
            public static 
            unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord2ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2sARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int16 s, Int16 t)
            {
                Delegates.glMultiTexCoord2sARB((OpenTK.Graphics.TextureUnit)target, (Int16)s, (Int16)t);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static 
            void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord2svARB")]
            public static 
            unsafe void MultiTexCoord2(OpenTK.Graphics.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord2svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Double s, Double t, Double r)
            {
                Delegates.glMultiTexCoord3dARB((OpenTK.Graphics.TextureUnit)target, (Double)s, (Double)t, (Double)r);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3dvARB")]
            public static 
            unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord3dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Single s, Single t, Single r)
            {
                Delegates.glMultiTexCoord3fARB((OpenTK.Graphics.TextureUnit)target, (Single)s, (Single)t, (Single)r);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3fvARB")]
            public static 
            unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord3fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3iARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int32 s, Int32 t, Int32 r)
            {
                Delegates.glMultiTexCoord3iARB((OpenTK.Graphics.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3ivARB")]
            public static 
            unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord3ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3sARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int16 s, Int16 t, Int16 r)
            {
                Delegates.glMultiTexCoord3sARB((OpenTK.Graphics.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static 
            void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord3svARB")]
            public static 
            unsafe void MultiTexCoord3(OpenTK.Graphics.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord3svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Double s, Double t, Double r, Double q)
            {
                Delegates.glMultiTexCoord4dARB((OpenTK.Graphics.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4dvARB")]
            public static 
            unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Double* v)
            {
                Delegates.glMultiTexCoord4dvARB((OpenTK.Graphics.TextureUnit)target, (Double*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Single s, Single t, Single r, Single q)
            {
                Delegates.glMultiTexCoord4fARB((OpenTK.Graphics.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4fvARB")]
            public static 
            unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Single* v)
            {
                Delegates.glMultiTexCoord4fvARB((OpenTK.Graphics.TextureUnit)target, (Single*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4iARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q)
            {
                Delegates.glMultiTexCoord4iARB((OpenTK.Graphics.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4ivARB")]
            public static 
            unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int32* v)
            {
                Delegates.glMultiTexCoord4ivARB((OpenTK.Graphics.TextureUnit)target, (Int32*)v);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4sARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q)
            {
                Delegates.glMultiTexCoord4sARB((OpenTK.Graphics.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static 
            void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMultitexture", Version = "1.2", EntryPoint = "glMultiTexCoord4svARB")]
            public static 
            unsafe void MultiTexCoord4(OpenTK.Graphics.TextureUnit target, Int16* v)
            {
                Delegates.glMultiTexCoord4svARB((OpenTK.Graphics.TextureUnit)target, (Int16*)v);
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixfARB")]
            public static 
            void LoadTransposeMatrix(Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixfARB")]
            public static 
            void LoadTransposeMatrix(ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixfARB")]
            public static 
            unsafe void LoadTransposeMatrix(Single* m)
            {
                Delegates.glLoadTransposeMatrixfARB((Single*)m);
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixdARB")]
            public static 
            void LoadTransposeMatrix(Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixdARB")]
            public static 
            void LoadTransposeMatrix(ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glLoadTransposeMatrixdARB")]
            public static 
            unsafe void LoadTransposeMatrix(Double* m)
            {
                Delegates.glLoadTransposeMatrixdARB((Double*)m);
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixfARB")]
            public static 
            void MultTransposeMatrix(Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixfARB")]
            public static 
            void MultTransposeMatrix(ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixfARB")]
            public static 
            unsafe void MultTransposeMatrix(Single* m)
            {
                Delegates.glMultTransposeMatrixfARB((Single*)m);
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixdARB")]
            public static 
            void MultTransposeMatrix(Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixdARB")]
            public static 
            void MultTransposeMatrix(ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbTransposeMatrix", Version = "1.2", EntryPoint = "glMultTransposeMatrixdARB")]
            public static 
            unsafe void MultTransposeMatrix(Double* m)
            {
                Delegates.glMultTransposeMatrixdARB((Double*)m);
            }

            [AutoGenerated(Category = "ArbMultisample", Version = "1.2", EntryPoint = "glSampleCoverageARB")]
            public static 
            void SampleCoverage(Single value, bool invert)
            {
                Delegates.glSampleCoverageARB((Single)value, (bool)invert);
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static 
            void CompressedTexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexImage3DARB")]
            public static 
            void CompressedTexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static 
            void CompressedTexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexImage2DARB")]
            public static 
            void CompressedTexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static 
            void CompressedTexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexImage1DARB")]
            public static 
            void CompressedTexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage1DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static 
            void CompressedTexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexSubImage3DARB")]
            public static 
            void CompressedTexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static 
            void CompressedTexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexSubImage2DARB")]
            public static 
            void CompressedTexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static 
            void CompressedTexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                unsafe
                {
                    Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glCompressedTexSubImage1DARB")]
            public static 
            void CompressedTexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage1DARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static 
            void GetCompressedTexImage(OpenTK.Graphics.TextureTarget target, Int32 level, [Out] IntPtr img)
            {
                unsafe
                {
                    Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img);
                }
            }

            [AutoGenerated(Category = "ArbTextureCompression", Version = "1.2", EntryPoint = "glGetCompressedTexImageARB")]
            public static 
            void GetCompressedTexImage(OpenTK.Graphics.TextureTarget target, Int32 level, [In, Out] object img)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTexImageARB((OpenTK.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbPointParameters", Version = "1.0", EntryPoint = "glPointParameterfARB")]
            public static 
            void PointParameter(OpenTK.Graphics.ArbPointParameters pname, Single param)
            {
                Delegates.glPointParameterfARB((OpenTK.Graphics.ArbPointParameters)pname, (Single)param);
            }

            [AutoGenerated(Category = "ArbPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvARB")]
            public static 
            void PointParameterv(OpenTK.Graphics.ArbPointParameters pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvARB((OpenTK.Graphics.ArbPointParameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvARB")]
            public static 
            void PointParameterv(OpenTK.Graphics.ArbPointParameters pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterfvARB((OpenTK.Graphics.ArbPointParameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvARB")]
            public static 
            unsafe void PointParameterv(OpenTK.Graphics.ArbPointParameters pname, Single* @params)
            {
                Delegates.glPointParameterfvARB((OpenTK.Graphics.ArbPointParameters)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightbvARB")]
            public static 
            void Weight(Int32 size, SByte[] weights)
            {
                unsafe
                {
                    fixed (SByte* weights_ptr = weights)
                    {
                        Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightbvARB")]
            public static 
            void Weight(Int32 size, ref SByte weights)
            {
                unsafe
                {
                    fixed (SByte* weights_ptr = &weights)
                    {
                        Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightbvARB")]
            public static 
            unsafe void Weight(Int32 size, SByte* weights)
            {
                Delegates.glWeightbvARB((Int32)size, (SByte*)weights);
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightsvARB")]
            public static 
            void Weight(Int32 size, Int16[] weights)
            {
                unsafe
                {
                    fixed (Int16* weights_ptr = weights)
                    {
                        Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightsvARB")]
            public static 
            void Weight(Int32 size, ref Int16 weights)
            {
                unsafe
                {
                    fixed (Int16* weights_ptr = &weights)
                    {
                        Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightsvARB")]
            public static 
            unsafe void Weight(Int32 size, Int16* weights)
            {
                Delegates.glWeightsvARB((Int32)size, (Int16*)weights);
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightivARB")]
            public static 
            void Weight(Int32 size, Int32[] weights)
            {
                unsafe
                {
                    fixed (Int32* weights_ptr = weights)
                    {
                        Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightivARB")]
            public static 
            void Weight(Int32 size, ref Int32 weights)
            {
                unsafe
                {
                    fixed (Int32* weights_ptr = &weights)
                    {
                        Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightivARB")]
            public static 
            unsafe void Weight(Int32 size, Int32* weights)
            {
                Delegates.glWeightivARB((Int32)size, (Int32*)weights);
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightfvARB")]
            public static 
            void Weight(Int32 size, Single[] weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = weights)
                    {
                        Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightfvARB")]
            public static 
            void Weight(Int32 size, ref Single weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = &weights)
                    {
                        Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightfvARB")]
            public static 
            unsafe void Weight(Int32 size, Single* weights)
            {
                Delegates.glWeightfvARB((Int32)size, (Single*)weights);
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightdvARB")]
            public static 
            void Weight(Int32 size, Double[] weights)
            {
                unsafe
                {
                    fixed (Double* weights_ptr = weights)
                    {
                        Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightdvARB")]
            public static 
            void Weight(Int32 size, ref Double weights)
            {
                unsafe
                {
                    fixed (Double* weights_ptr = &weights)
                    {
                        Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightdvARB")]
            public static 
            unsafe void Weight(Int32 size, Double* weights)
            {
                Delegates.glWeightdvARB((Int32)size, (Double*)weights);
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightubvARB")]
            public static 
            void Weight(Int32 size, Byte[] weights)
            {
                unsafe
                {
                    fixed (Byte* weights_ptr = weights)
                    {
                        Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightubvARB")]
            public static 
            void Weight(Int32 size, ref Byte weights)
            {
                unsafe
                {
                    fixed (Byte* weights_ptr = &weights)
                    {
                        Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightubvARB")]
            public static 
            unsafe void Weight(Int32 size, Byte* weights)
            {
                Delegates.glWeightubvARB((Int32)size, (Byte*)weights);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightusvARB")]
            public static 
            void Weight(Int32 size, UInt16[] weights)
            {
                unsafe
                {
                    fixed (UInt16* weights_ptr = weights)
                    {
                        Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightusvARB")]
            public static 
            void Weight(Int32 size, ref UInt16 weights)
            {
                unsafe
                {
                    fixed (UInt16* weights_ptr = &weights)
                    {
                        Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightusvARB")]
            public static 
            unsafe void Weight(Int32 size, UInt16* weights)
            {
                Delegates.glWeightusvARB((Int32)size, (UInt16*)weights);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightuivARB")]
            public static 
            void Weight(Int32 size, UInt32[] weights)
            {
                unsafe
                {
                    fixed (UInt32* weights_ptr = weights)
                    {
                        Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightuivARB")]
            public static 
            void Weight(Int32 size, ref UInt32 weights)
            {
                unsafe
                {
                    fixed (UInt32* weights_ptr = &weights)
                    {
                        Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightuivARB")]
            public static 
            unsafe void Weight(Int32 size, UInt32* weights)
            {
                Delegates.glWeightuivARB((Int32)size, (UInt32*)weights);
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static 
            void WeightPointer(Int32 size, OpenTK.Graphics.ArbVertexBlend type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.ArbVertexBlend)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glWeightPointerARB")]
            public static 
            void WeightPointer(Int32 size, OpenTK.Graphics.ArbVertexBlend type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glWeightPointerARB((Int32)size, (OpenTK.Graphics.ArbVertexBlend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBlend", Version = "1.1", EntryPoint = "glVertexBlendARB")]
            public static 
            void VertexBlend(Int32 count)
            {
                Delegates.glVertexBlendARB((Int32)count);
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glCurrentPaletteMatrixARB")]
            public static 
            void CurrentPaletteMatrix(Int32 index)
            {
                Delegates.glCurrentPaletteMatrixARB((Int32)index);
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexubvARB")]
            public static 
            void MatrixIndex(Int32 size, Byte[] indices)
            {
                unsafe
                {
                    fixed (Byte* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexubvARB")]
            public static 
            void MatrixIndex(Int32 size, ref Byte indices)
            {
                unsafe
                {
                    fixed (Byte* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexubvARB")]
            public static 
            unsafe void MatrixIndex(Int32 size, Byte* indices)
            {
                Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static 
            void MatrixIndex(Int32 size, UInt16[] indices)
            {
                unsafe
                {
                    fixed (UInt16* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static 
            void MatrixIndex(Int32 size, Int16[] indices)
            {
                unsafe
                {
                    fixed (Int16* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static 
            void MatrixIndex(Int32 size, ref UInt16 indices)
            {
                unsafe
                {
                    fixed (UInt16* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static 
            void MatrixIndex(Int32 size, ref Int16 indices)
            {
                unsafe
                {
                    fixed (Int16* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static 
            unsafe void MatrixIndex(Int32 size, UInt16* indices)
            {
                Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexusvARB")]
            public static 
            unsafe void MatrixIndex(Int32 size, Int16* indices)
            {
                Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static 
            void MatrixIndex(Int32 size, UInt32[] indices)
            {
                unsafe
                {
                    fixed (UInt32* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static 
            void MatrixIndex(Int32 size, Int32[] indices)
            {
                unsafe
                {
                    fixed (Int32* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static 
            void MatrixIndex(Int32 size, ref UInt32 indices)
            {
                unsafe
                {
                    fixed (UInt32* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static 
            void MatrixIndex(Int32 size, ref Int32 indices)
            {
                unsafe
                {
                    fixed (Int32* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static 
            unsafe void MatrixIndex(Int32 size, UInt32* indices)
            {
                Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexuivARB")]
            public static 
            unsafe void MatrixIndex(Int32 size, Int32* indices)
            {
                Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static 
            void MatrixIndexPointer(Int32 size, OpenTK.Graphics.ArbMatrixPalette type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.ArbMatrixPalette)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ArbMatrixPalette", Version = "1.1", EntryPoint = "glMatrixIndexPointerARB")]
            public static 
            void MatrixIndexPointer(Int32 size, OpenTK.Graphics.ArbMatrixPalette type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMatrixIndexPointerARB((Int32)size, (OpenTK.Graphics.ArbMatrixPalette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dARB")]
            public static 
            void WindowPos2(Double x, Double y)
            {
                Delegates.glWindowPos2dARB((Double)x, (Double)y);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dvARB")]
            public static 
            void WindowPos2(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos2dvARB((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dvARB")]
            public static 
            void WindowPos2(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dvARB((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dvARB")]
            public static 
            unsafe void WindowPos2(Double* v)
            {
                Delegates.glWindowPos2dvARB((Double*)v);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fARB")]
            public static 
            void WindowPos2(Single x, Single y)
            {
                Delegates.glWindowPos2fARB((Single)x, (Single)y);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fvARB")]
            public static 
            void WindowPos2(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos2fvARB((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fvARB")]
            public static 
            void WindowPos2(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fvARB((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fvARB")]
            public static 
            unsafe void WindowPos2(Single* v)
            {
                Delegates.glWindowPos2fvARB((Single*)v);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2iARB")]
            public static 
            void WindowPos2(Int32 x, Int32 y)
            {
                Delegates.glWindowPos2iARB((Int32)x, (Int32)y);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2ivARB")]
            public static 
            void WindowPos2(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos2ivARB((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2ivARB")]
            public static 
            void WindowPos2(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos2ivARB((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2ivARB")]
            public static 
            unsafe void WindowPos2(Int32* v)
            {
                Delegates.glWindowPos2ivARB((Int32*)v);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2sARB")]
            public static 
            void WindowPos2(Int16 x, Int16 y)
            {
                Delegates.glWindowPos2sARB((Int16)x, (Int16)y);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2svARB")]
            public static 
            void WindowPos2(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos2svARB((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2svARB")]
            public static 
            void WindowPos2(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos2svARB((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos2svARB")]
            public static 
            unsafe void WindowPos2(Int16* v)
            {
                Delegates.glWindowPos2svARB((Int16*)v);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dARB")]
            public static 
            void WindowPos3(Double x, Double y, Double z)
            {
                Delegates.glWindowPos3dARB((Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dvARB")]
            public static 
            void WindowPos3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos3dvARB((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dvARB")]
            public static 
            void WindowPos3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dvARB((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dvARB")]
            public static 
            unsafe void WindowPos3(Double* v)
            {
                Delegates.glWindowPos3dvARB((Double*)v);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fARB")]
            public static 
            void WindowPos3(Single x, Single y, Single z)
            {
                Delegates.glWindowPos3fARB((Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fvARB")]
            public static 
            void WindowPos3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos3fvARB((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fvARB")]
            public static 
            void WindowPos3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fvARB((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fvARB")]
            public static 
            unsafe void WindowPos3(Single* v)
            {
                Delegates.glWindowPos3fvARB((Single*)v);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3iARB")]
            public static 
            void WindowPos3(Int32 x, Int32 y, Int32 z)
            {
                Delegates.glWindowPos3iARB((Int32)x, (Int32)y, (Int32)z);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3ivARB")]
            public static 
            void WindowPos3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos3ivARB((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3ivARB")]
            public static 
            void WindowPos3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos3ivARB((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3ivARB")]
            public static 
            unsafe void WindowPos3(Int32* v)
            {
                Delegates.glWindowPos3ivARB((Int32*)v);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3sARB")]
            public static 
            void WindowPos3(Int16 x, Int16 y, Int16 z)
            {
                Delegates.glWindowPos3sARB((Int16)x, (Int16)y, (Int16)z);
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3svARB")]
            public static 
            void WindowPos3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos3svARB((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3svARB")]
            public static 
            void WindowPos3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos3svARB((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbWindowPos", Version = "1.0", EntryPoint = "glWindowPos3svARB")]
            public static 
            unsafe void WindowPos3(Int16* v)
            {
                Delegates.glWindowPos3svARB((Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dARB")]
            public static 
            void VertexAttrib1(UInt32 index, Double x)
            {
                Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dARB")]
            public static 
            void VertexAttrib1(Int32 index, Double x)
            {
                Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static 
            void VertexAttrib1v(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static 
            void VertexAttrib1v(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static 
            void VertexAttrib1v(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static 
            void VertexAttrib1v(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static 
            unsafe void VertexAttrib1v(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1dvARB")]
            public static 
            unsafe void VertexAttrib1v(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fARB")]
            public static 
            void VertexAttrib1(UInt32 index, Single x)
            {
                Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fARB")]
            public static 
            void VertexAttrib1(Int32 index, Single x)
            {
                Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static 
            void VertexAttrib1v(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static 
            void VertexAttrib1v(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static 
            void VertexAttrib1v(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static 
            void VertexAttrib1v(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static 
            unsafe void VertexAttrib1v(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1fvARB")]
            public static 
            unsafe void VertexAttrib1v(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1sARB")]
            public static 
            void VertexAttrib1(UInt32 index, Int16 x)
            {
                Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1sARB")]
            public static 
            void VertexAttrib1(Int32 index, Int16 x)
            {
                Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static 
            void VertexAttrib1v(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static 
            void VertexAttrib1v(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static 
            void VertexAttrib1v(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static 
            void VertexAttrib1v(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static 
            unsafe void VertexAttrib1v(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib1svARB")]
            public static 
            unsafe void VertexAttrib1v(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dARB")]
            public static 
            void VertexAttrib2(UInt32 index, Double x, Double y)
            {
                Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dARB")]
            public static 
            void VertexAttrib2(Int32 index, Double x, Double y)
            {
                Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static 
            void VertexAttrib2(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static 
            void VertexAttrib2(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static 
            void VertexAttrib2(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static 
            void VertexAttrib2(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static 
            unsafe void VertexAttrib2(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2dvARB")]
            public static 
            unsafe void VertexAttrib2(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fARB")]
            public static 
            void VertexAttrib2(UInt32 index, Single x, Single y)
            {
                Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fARB")]
            public static 
            void VertexAttrib2(Int32 index, Single x, Single y)
            {
                Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static 
            void VertexAttrib2(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static 
            void VertexAttrib2(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static 
            void VertexAttrib2(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static 
            void VertexAttrib2(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static 
            unsafe void VertexAttrib2(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2fvARB")]
            public static 
            unsafe void VertexAttrib2(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2sARB")]
            public static 
            void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
            {
                Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2sARB")]
            public static 
            void VertexAttrib2(Int32 index, Int16 x, Int16 y)
            {
                Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static 
            void VertexAttrib2(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static 
            void VertexAttrib2(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static 
            void VertexAttrib2(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static 
            void VertexAttrib2(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static 
            unsafe void VertexAttrib2(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib2svARB")]
            public static 
            unsafe void VertexAttrib2(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dARB")]
            public static 
            void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
            {
                Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dARB")]
            public static 
            void VertexAttrib3(Int32 index, Double x, Double y, Double z)
            {
                Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static 
            void VertexAttrib3(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static 
            void VertexAttrib3(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static 
            void VertexAttrib3(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static 
            void VertexAttrib3(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static 
            unsafe void VertexAttrib3(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3dvARB")]
            public static 
            unsafe void VertexAttrib3(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fARB")]
            public static 
            void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
            {
                Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fARB")]
            public static 
            void VertexAttrib3(Int32 index, Single x, Single y, Single z)
            {
                Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static 
            void VertexAttrib3(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static 
            void VertexAttrib3(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static 
            void VertexAttrib3(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static 
            void VertexAttrib3(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static 
            unsafe void VertexAttrib3(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3fvARB")]
            public static 
            unsafe void VertexAttrib3(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3sARB")]
            public static 
            void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
            {
                Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3sARB")]
            public static 
            void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
            {
                Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static 
            void VertexAttrib3(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static 
            void VertexAttrib3(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static 
            void VertexAttrib3(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static 
            void VertexAttrib3(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static 
            unsafe void VertexAttrib3(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib3svARB")]
            public static 
            unsafe void VertexAttrib3(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NbvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NbvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NbvARB")]
            public static 
            unsafe void VertexAttrib4N(UInt32 index, SByte* v)
            {
                Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static 
            void VertexAttrib4N(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static 
            void VertexAttrib4N(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static 
            void VertexAttrib4N(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static 
            void VertexAttrib4N(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static 
            unsafe void VertexAttrib4N(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NivARB")]
            public static 
            unsafe void VertexAttrib4N(Int32 index, Int32* v)
            {
                Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static 
            void VertexAttrib4N(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static 
            void VertexAttrib4N(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static 
            unsafe void VertexAttrib4N(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NsvARB")]
            public static 
            unsafe void VertexAttrib4N(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubARB")]
            public static 
            void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w)
            {
                Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubARB")]
            public static 
            void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w)
            {
                Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static 
            void VertexAttrib4N(Int32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static 
            void VertexAttrib4N(Int32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static 
            unsafe void VertexAttrib4N(UInt32 index, Byte* v)
            {
                Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NubvARB")]
            public static 
            unsafe void VertexAttrib4N(Int32 index, Byte* v)
            {
                Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NuivARB")]
            public static 
            void VertexAttrib4N(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NuivARB")]
            public static 
            void VertexAttrib4N(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NuivARB")]
            public static 
            unsafe void VertexAttrib4N(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NusvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NusvARB")]
            public static 
            void VertexAttrib4N(UInt32 index, ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4NusvARB")]
            public static 
            unsafe void VertexAttrib4N(UInt32 index, UInt16* v)
            {
                Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4bvARB")]
            public static 
            void VertexAttrib4(UInt32 index, SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4bvARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4bvARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, SByte* v)
            {
                Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dARB")]
            public static 
            void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dARB")]
            public static 
            void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static 
            void VertexAttrib4(UInt32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static 
            void VertexAttrib4(Int32 index, Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static 
            void VertexAttrib4(Int32 index, ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Double* v)
            {
                Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4dvARB")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Double* v)
            {
                Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fARB")]
            public static 
            void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fARB")]
            public static 
            void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static 
            void VertexAttrib4(UInt32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static 
            void VertexAttrib4(Int32 index, Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static 
            void VertexAttrib4(Int32 index, ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Single* v)
            {
                Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4fvARB")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Single* v)
            {
                Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static 
            void VertexAttrib4(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static 
            void VertexAttrib4(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static 
            void VertexAttrib4(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ivARB")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Int32* v)
            {
                Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4sARB")]
            public static 
            void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4sARB")]
            public static 
            void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static 
            void VertexAttrib4(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static 
            void VertexAttrib4(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static 
            void VertexAttrib4(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4svARB")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Int16* v)
            {
                Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static 
            void VertexAttrib4(UInt32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static 
            void VertexAttrib4(Int32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static 
            void VertexAttrib4(Int32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, Byte* v)
            {
                Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4ubvARB")]
            public static 
            unsafe void VertexAttrib4(Int32 index, Byte* v)
            {
                Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4uivARB")]
            public static 
            void VertexAttrib4(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4uivARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4uivARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4usvARB")]
            public static 
            void VertexAttrib4(UInt32 index, UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4usvARB")]
            public static 
            void VertexAttrib4(UInt32 index, ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttrib4usvARB")]
            public static 
            unsafe void VertexAttrib4(UInt32 index, UInt16* v)
            {
                Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static 
            void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static 
            void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static 
            void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glVertexAttribPointerARB")]
            public static 
            void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (OpenTK.Graphics.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glEnableVertexAttribArrayARB")]
            public static 
            void EnableVertexAttribArray(UInt32 index)
            {
                Delegates.glEnableVertexAttribArrayARB((UInt32)index);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glEnableVertexAttribArrayARB")]
            public static 
            void EnableVertexAttribArray(Int32 index)
            {
                Delegates.glEnableVertexAttribArrayARB((UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDisableVertexAttribArrayARB")]
            public static 
            void DisableVertexAttribArray(UInt32 index)
            {
                Delegates.glDisableVertexAttribArrayARB((UInt32)index);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDisableVertexAttribArrayARB")]
            public static 
            void DisableVertexAttribArray(Int32 index)
            {
                Delegates.glDisableVertexAttribArrayARB((UInt32)index);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static 
            void ProgramString(OpenTK.Graphics.AssemblyProgramTargetArb target, OpenTK.Graphics.AssemblyProgramFormatArb format, Int32 len, IntPtr @string)
            {
                unsafe
                {
                    Delegates.glProgramStringARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (OpenTK.Graphics.AssemblyProgramFormatArb)format, (Int32)len, (IntPtr)@string);
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramStringARB")]
            public static 
            void ProgramString(OpenTK.Graphics.AssemblyProgramTargetArb target, OpenTK.Graphics.AssemblyProgramFormatArb format, Int32 len, [In, Out] object @string)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramStringARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (OpenTK.Graphics.AssemblyProgramFormatArb)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glBindProgramARB")]
            public static 
            void BindProgram(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 program)
            {
                Delegates.glBindProgramARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)program);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glBindProgramARB")]
            public static 
            void BindProgram(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 program)
            {
                Delegates.glBindProgramARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static 
            void DeleteProgram(Int32 n, UInt32[] programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static 
            void DeleteProgram(Int32 n, Int32[] programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static 
            void DeleteProgram(Int32 n, ref UInt32 programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static 
            void DeleteProgram(Int32 n, ref Int32 programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static 
            unsafe void DeleteProgram(Int32 n, UInt32* programs)
            {
                Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glDeleteProgramsARB")]
            public static 
            unsafe void DeleteProgram(Int32 n, Int32* programs)
            {
                Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static 
            void GenProgram(Int32 n, [Out] UInt32[] programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static 
            void GenProgram(Int32 n, [Out] Int32[] programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static 
            void GenProgram(Int32 n, [Out] out UInt32 programs)
            {
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static 
            void GenProgram(Int32 n, [Out] out Int32 programs)
            {
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static 
            unsafe void GenProgram(Int32 n, [Out] UInt32* programs)
            {
                Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGenProgramsARB")]
            public static 
            unsafe void GenProgram(Int32 n, [Out] Int32* programs)
            {
                Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramEnvParameter4dARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramEnvParameter4dARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static 
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Double* @params)
            {
                Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4dvARB")]
            public static 
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Double* @params)
            {
                Delegates.glProgramEnvParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramEnvParameter4fARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramEnvParameter4fARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static 
            void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static 
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Single* @params)
            {
                Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramEnvParameter4fvARB")]
            public static 
            unsafe void ProgramEnvParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Single* @params)
            {
                Delegates.glProgramEnvParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramLocalParameter4dARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glProgramLocalParameter4dARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static 
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Double* @params)
            {
                Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4dvARB")]
            public static 
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Double* @params)
            {
                Delegates.glProgramLocalParameter4dvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramLocalParameter4fARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glProgramLocalParameter4fARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static 
            void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static 
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, Single* @params)
            {
                Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glProgramLocalParameter4fvARB")]
            public static 
            unsafe void ProgramLocalParameter4(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, Single* @params)
            {
                Delegates.glProgramLocalParameter4fvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static 
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Double* @params)
            {
                Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterdvARB")]
            public static 
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Double* @params)
            {
                Delegates.glGetProgramEnvParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static 
            void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static 
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Single* @params)
            {
                Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramEnvParameterfvARB")]
            public static 
            unsafe void GetProgramEnvParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Single* @params)
            {
                Delegates.glGetProgramEnvParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static 
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Double* @params)
            {
                Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterdvARB")]
            public static 
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Double* @params)
            {
                Delegates.glGetProgramLocalParameterdvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static 
            void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static 
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, UInt32 index, [Out] Single* @params)
            {
                Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramLocalParameterfvARB")]
            public static 
            unsafe void GetProgramLocalParameter(OpenTK.Graphics.AssemblyProgramTargetArb target, Int32 index, [Out] Single* @params)
            {
                Delegates.glGetProgramLocalParameterfvARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramivARB")]
            public static 
            void GetProgram(OpenTK.Graphics.AssemblyProgramTargetArb target, OpenTK.Graphics.AssemblyProgramParameterArb pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramivARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (OpenTK.Graphics.AssemblyProgramParameterArb)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramivARB")]
            public static 
            void GetProgram(OpenTK.Graphics.AssemblyProgramTargetArb target, OpenTK.Graphics.AssemblyProgramParameterArb pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (OpenTK.Graphics.AssemblyProgramParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramivARB")]
            public static 
            unsafe void GetProgram(OpenTK.Graphics.AssemblyProgramTargetArb target, OpenTK.Graphics.AssemblyProgramParameterArb pname, [Out] Int32* @params)
            {
                Delegates.glGetProgramivARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (OpenTK.Graphics.AssemblyProgramParameterArb)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static 
            void GetProgramString(OpenTK.Graphics.AssemblyProgramTargetArb target, OpenTK.Graphics.AssemblyProgramStringParameterArb pname, [Out] IntPtr @string)
            {
                unsafe
                {
                    Delegates.glGetProgramStringARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (OpenTK.Graphics.AssemblyProgramStringParameterArb)pname, (IntPtr)@string);
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetProgramStringARB")]
            public static 
            void GetProgramString(OpenTK.Graphics.AssemblyProgramTargetArb target, OpenTK.Graphics.AssemblyProgramStringParameterArb pname, [In, Out] object @string)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetProgramStringARB((OpenTK.Graphics.AssemblyProgramTargetArb)target, (OpenTK.Graphics.AssemblyProgramStringParameterArb)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static 
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Double* @params)
            {
                Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribdvARB")]
            public static 
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Double* @params)
            {
                Delegates.glGetVertexAttribdvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static 
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Single* @params)
            {
                Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribfvARB")]
            public static 
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Single* @params)
            {
                Delegates.glGetVertexAttribfvARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static 
            void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static 
            void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static 
            unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribivARB")]
            public static 
            unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.VertexAttribParameterArb pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribivARB((UInt32)index, (OpenTK.Graphics.VertexAttribParameterArb)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static 
            void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.VertexAttribPointerParameterArb pname, [Out] IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameterArb)pname, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static 
            void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.VertexAttribPointerParameterArb pname, [Out] IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameterArb)pname, (IntPtr)pointer);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static 
            void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.VertexAttribPointerParameterArb pname, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glGetVertexAttribPointervARB")]
            public static 
            void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.VertexAttribPointerParameterArb pname, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (OpenTK.Graphics.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glIsProgramARB")]
            public static 
            bool IsProgram(UInt32 program)
            {
                return Delegates.glIsProgramARB((UInt32)program);
            }

            [AutoGenerated(Category = "ArbVertexProgram", Version = "1.3", EntryPoint = "glIsProgramARB")]
            public static 
            bool IsProgram(Int32 program)
            {
                return Delegates.glIsProgramARB((UInt32)program);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glBindBufferARB")]
            public static 
            void BindBuffer(OpenTK.Graphics.BufferTargetArb target, UInt32 buffer)
            {
                Delegates.glBindBufferARB((OpenTK.Graphics.BufferTargetArb)target, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glBindBufferARB")]
            public static 
            void BindBuffer(OpenTK.Graphics.BufferTargetArb target, Int32 buffer)
            {
                Delegates.glBindBufferARB((OpenTK.Graphics.BufferTargetArb)target, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static 
            void DeleteBuffers(Int32 n, UInt32[] buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static 
            void DeleteBuffers(Int32 n, Int32[] buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static 
            void DeleteBuffers(Int32 n, ref UInt32 buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static 
            void DeleteBuffers(Int32 n, ref Int32 buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static 
            unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
            {
                Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glDeleteBuffersARB")]
            public static 
            unsafe void DeleteBuffers(Int32 n, Int32* buffers)
            {
                Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static 
            void GenBuffers(Int32 n, [Out] UInt32[] buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static 
            void GenBuffers(Int32 n, [Out] Int32[] buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static 
            void GenBuffers(Int32 n, [Out] out UInt32 buffers)
            {
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static 
            void GenBuffers(Int32 n, [Out] out Int32 buffers)
            {
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static 
            unsafe void GenBuffers(Int32 n, [Out] UInt32* buffers)
            {
                Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGenBuffersARB")]
            public static 
            unsafe void GenBuffers(Int32 n, [Out] Int32* buffers)
            {
                Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glIsBufferARB")]
            public static 
            bool IsBuffer(UInt32 buffer)
            {
                return Delegates.glIsBufferARB((UInt32)buffer);
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glIsBufferARB")]
            public static 
            bool IsBuffer(Int32 buffer)
            {
                return Delegates.glIsBufferARB((UInt32)buffer);
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static 
            void BufferData(OpenTK.Graphics.BufferTargetArb target, IntPtr size, IntPtr data, OpenTK.Graphics.BufferUsageArb usage)
            {
                unsafe
                {
                    Delegates.glBufferDataARB((OpenTK.Graphics.BufferTargetArb)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.BufferUsageArb)usage);
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glBufferDataARB")]
            public static 
            void BufferData(OpenTK.Graphics.BufferTargetArb target, IntPtr size, [In, Out] object data, OpenTK.Graphics.BufferUsageArb usage)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferDataARB((OpenTK.Graphics.BufferTargetArb)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.BufferUsageArb)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static 
            void BufferSubData(OpenTK.Graphics.BufferTargetArb target, IntPtr offset, IntPtr size, IntPtr data)
            {
                unsafe
                {
                    Delegates.glBufferSubDataARB((OpenTK.Graphics.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glBufferSubDataARB")]
            public static 
            void BufferSubData(OpenTK.Graphics.BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubDataARB((OpenTK.Graphics.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static 
            void GetBufferSubData(OpenTK.Graphics.BufferTargetArb target, IntPtr offset, IntPtr size, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetBufferSubDataARB((OpenTK.Graphics.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGetBufferSubDataARB")]
            public static 
            void GetBufferSubData(OpenTK.Graphics.BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferSubDataARB((OpenTK.Graphics.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glMapBufferARB")]
            public static 
            unsafe IntPtr MapBuffer(OpenTK.Graphics.BufferTargetArb target, OpenTK.Graphics.BufferAccessArb access)
            {
                return Delegates.glMapBufferARB((OpenTK.Graphics.BufferTargetArb)target, (OpenTK.Graphics.BufferAccessArb)access);
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glUnmapBufferARB")]
            public static 
            bool UnmapBuffer(OpenTK.Graphics.BufferTargetArb target)
            {
                return Delegates.glUnmapBufferARB((OpenTK.Graphics.BufferTargetArb)target);
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static 
            void GetBufferParameter(OpenTK.Graphics.ArbVertexBufferObject target, OpenTK.Graphics.BufferParameterNameArb pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetBufferParameterivARB((OpenTK.Graphics.ArbVertexBufferObject)target, (OpenTK.Graphics.BufferParameterNameArb)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static 
            void GetBufferParameter(OpenTK.Graphics.ArbVertexBufferObject target, OpenTK.Graphics.BufferParameterNameArb pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetBufferParameterivARB((OpenTK.Graphics.ArbVertexBufferObject)target, (OpenTK.Graphics.BufferParameterNameArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGetBufferParameterivARB")]
            public static 
            unsafe void GetBufferParameter(OpenTK.Graphics.ArbVertexBufferObject target, OpenTK.Graphics.BufferParameterNameArb pname, [Out] Int32* @params)
            {
                Delegates.glGetBufferParameterivARB((OpenTK.Graphics.ArbVertexBufferObject)target, (OpenTK.Graphics.BufferParameterNameArb)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static 
            void GetBufferPointer(OpenTK.Graphics.ArbVertexBufferObject target, OpenTK.Graphics.BufferPointerNameArb pname, [Out] IntPtr @params)
            {
                unsafe
                {
                    Delegates.glGetBufferPointervARB((OpenTK.Graphics.ArbVertexBufferObject)target, (OpenTK.Graphics.BufferPointerNameArb)pname, (IntPtr)@params);
                }
            }

            [AutoGenerated(Category = "ArbVertexBufferObject", Version = "1.2", EntryPoint = "glGetBufferPointervARB")]
            public static 
            void GetBufferPointer(OpenTK.Graphics.ArbVertexBufferObject target, OpenTK.Graphics.BufferPointerNameArb pname, [In, Out] object @params)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervARB((OpenTK.Graphics.ArbVertexBufferObject)target, (OpenTK.Graphics.BufferPointerNameArb)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static 
            void GenQueries(Int32 n, [Out] UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static 
            void GenQueries(Int32 n, [Out] Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static 
            void GenQueries(Int32 n, [Out] out UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static 
            void GenQueries(Int32 n, [Out] out Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static 
            unsafe void GenQueries(Int32 n, [Out] UInt32* ids)
            {
                Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGenQueriesARB")]
            public static 
            unsafe void GenQueries(Int32 n, [Out] Int32* ids)
            {
                Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static 
            void DeleteQueries(Int32 n, UInt32[] ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static 
            void DeleteQueries(Int32 n, Int32[] ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static 
            void DeleteQueries(Int32 n, ref UInt32 ids)
            {
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static 
            void DeleteQueries(Int32 n, ref Int32 ids)
            {
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static 
            unsafe void DeleteQueries(Int32 n, UInt32* ids)
            {
                Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glDeleteQueriesARB")]
            public static 
            unsafe void DeleteQueries(Int32 n, Int32* ids)
            {
                Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glIsQueryARB")]
            public static 
            bool IsQuery(UInt32 id)
            {
                return Delegates.glIsQueryARB((UInt32)id);
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glIsQueryARB")]
            public static 
            bool IsQuery(Int32 id)
            {
                return Delegates.glIsQueryARB((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glBeginQueryARB")]
            public static 
            void BeginQuery(OpenTK.Graphics.ArbOcclusionQuery target, UInt32 id)
            {
                Delegates.glBeginQueryARB((OpenTK.Graphics.ArbOcclusionQuery)target, (UInt32)id);
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glBeginQueryARB")]
            public static 
            void BeginQuery(OpenTK.Graphics.ArbOcclusionQuery target, Int32 id)
            {
                Delegates.glBeginQueryARB((OpenTK.Graphics.ArbOcclusionQuery)target, (UInt32)id);
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glEndQueryARB")]
            public static 
            void EndQuery(OpenTK.Graphics.ArbOcclusionQuery target)
            {
                Delegates.glEndQueryARB((OpenTK.Graphics.ArbOcclusionQuery)target);
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static 
            void GetQuery(OpenTK.Graphics.ArbOcclusionQuery target, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryivARB((OpenTK.Graphics.ArbOcclusionQuery)target, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static 
            void GetQuery(OpenTK.Graphics.ArbOcclusionQuery target, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryivARB((OpenTK.Graphics.ArbOcclusionQuery)target, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryivARB")]
            public static 
            unsafe void GetQuery(OpenTK.Graphics.ArbOcclusionQuery target, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] Int32* @params)
            {
                Delegates.glGetQueryivARB((OpenTK.Graphics.ArbOcclusionQuery)target, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static 
            void GetQueryObject(UInt32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static 
            void GetQueryObject(Int32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static 
            void GetQueryObject(UInt32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static 
            void GetQueryObject(Int32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static 
            unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] Int32* @params)
            {
                Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectivARB")]
            public static 
            unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] Int32* @params)
            {
                Delegates.glGetQueryObjectivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static 
            void GetQueryObject(UInt32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static 
            void GetQueryObject(UInt32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbOcclusionQuery", Version = "1.5", EntryPoint = "glGetQueryObjectuivARB")]
            public static 
            unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ArbOcclusionQuery pname, [Out] UInt32* @params)
            {
                Delegates.glGetQueryObjectuivARB((UInt32)id, (OpenTK.Graphics.ArbOcclusionQuery)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glDeleteObjectARB")]
            public static 
            void DeleteObject(UInt32 obj)
            {
                Delegates.glDeleteObjectARB((UInt32)obj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glDeleteObjectARB")]
            public static 
            void DeleteObject(Int32 obj)
            {
                Delegates.glDeleteObjectARB((UInt32)obj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetHandleARB")]
            public static 
            Int32 GetHandle(OpenTK.Graphics.ArbShaderObjects pname)
            {
                return Delegates.glGetHandleARB((OpenTK.Graphics.ArbShaderObjects)pname);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glDetachObjectARB")]
            public static 
            void DetachObject(UInt32 containerObj, UInt32 attachedObj)
            {
                Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glDetachObjectARB")]
            public static 
            void DetachObject(Int32 containerObj, Int32 attachedObj)
            {
                Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glCreateShaderObjectARB")]
            public static 
            Int32 CreateShaderObject(OpenTK.Graphics.ArbShaderObjects shaderType)
            {
                return Delegates.glCreateShaderObjectARB((OpenTK.Graphics.ArbShaderObjects)shaderType);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static 
            void ShaderSource(UInt32 shaderObj, Int32 count, System.String[] @string, Int32[] length)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static 
            void ShaderSource(Int32 shaderObj, Int32 count, System.String[] @string, Int32[] length)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static 
            void ShaderSource(UInt32 shaderObj, Int32 count, System.String[] @string, ref Int32 length)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static 
            void ShaderSource(Int32 shaderObj, Int32 count, System.String[] @string, ref Int32 length)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static 
            unsafe void ShaderSource(UInt32 shaderObj, Int32 count, System.String[] @string, Int32* length)
            {
                Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glShaderSourceARB")]
            public static 
            unsafe void ShaderSource(Int32 shaderObj, Int32 count, System.String[] @string, Int32* length)
            {
                Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, (System.String[])@string, (Int32*)length);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glCompileShaderARB")]
            public static 
            void CompileShader(UInt32 shaderObj)
            {
                Delegates.glCompileShaderARB((UInt32)shaderObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glCompileShaderARB")]
            public static 
            void CompileShader(Int32 shaderObj)
            {
                Delegates.glCompileShaderARB((UInt32)shaderObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glCreateProgramObjectARB")]
            public static 
            Int32 CreateProgramObject()
            {
                return Delegates.glCreateProgramObjectARB();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glAttachObjectARB")]
            public static 
            void AttachObject(UInt32 containerObj, UInt32 obj)
            {
                Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glAttachObjectARB")]
            public static 
            void AttachObject(Int32 containerObj, Int32 obj)
            {
                Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glLinkProgramARB")]
            public static 
            void LinkProgram(UInt32 programObj)
            {
                Delegates.glLinkProgramARB((UInt32)programObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glLinkProgramARB")]
            public static 
            void LinkProgram(Int32 programObj)
            {
                Delegates.glLinkProgramARB((UInt32)programObj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUseProgramObjectARB")]
            public static 
            void UseProgramObject(UInt32 programObj)
            {
                Delegates.glUseProgramObjectARB((UInt32)programObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUseProgramObjectARB")]
            public static 
            void UseProgramObject(Int32 programObj)
            {
                Delegates.glUseProgramObjectARB((UInt32)programObj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glValidateProgramARB")]
            public static 
            void ValidateProgram(UInt32 programObj)
            {
                Delegates.glValidateProgramARB((UInt32)programObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glValidateProgramARB")]
            public static 
            void ValidateProgram(Int32 programObj)
            {
                Delegates.glValidateProgramARB((UInt32)programObj);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1fARB")]
            public static 
            void Uniform1(Int32 location, Single v0)
            {
                Delegates.glUniform1fARB((Int32)location, (Single)v0);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2fARB")]
            public static 
            void Uniform2(Int32 location, Single v0, Single v1)
            {
                Delegates.glUniform2fARB((Int32)location, (Single)v0, (Single)v1);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3fARB")]
            public static 
            void Uniform3(Int32 location, Single v0, Single v1, Single v2)
            {
                Delegates.glUniform3fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4fARB")]
            public static 
            void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                Delegates.glUniform4fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1iARB")]
            public static 
            void Uniform1(Int32 location, Int32 v0)
            {
                Delegates.glUniform1iARB((Int32)location, (Int32)v0);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2iARB")]
            public static 
            void Uniform2(Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glUniform2iARB((Int32)location, (Int32)v0, (Int32)v1);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3iARB")]
            public static 
            void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glUniform3iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4iARB")]
            public static 
            void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glUniform4iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1fvARB")]
            public static 
            void Uniform1(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1fvARB")]
            public static 
            void Uniform1(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1fvARB")]
            public static 
            unsafe void Uniform1(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2fvARB")]
            public static 
            void Uniform2v(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2fvARB")]
            public static 
            void Uniform2v(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2fvARB")]
            public static 
            unsafe void Uniform2v(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3fvARB")]
            public static 
            void Uniform3(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3fvARB")]
            public static 
            void Uniform3(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3fvARB")]
            public static 
            unsafe void Uniform3(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4fvARB")]
            public static 
            void Uniform4(Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4fvARB")]
            public static 
            void Uniform4(Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4fvARB")]
            public static 
            unsafe void Uniform4(Int32 location, Int32 count, Single* value)
            {
                Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1ivARB")]
            public static 
            void Uniform1(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1ivARB")]
            public static 
            void Uniform1(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform1ivARB")]
            public static 
            unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2ivARB")]
            public static 
            void Uniform2v(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2ivARB")]
            public static 
            void Uniform2v(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform2ivARB")]
            public static 
            unsafe void Uniform2v(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3ivARB")]
            public static 
            void Uniform3(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3ivARB")]
            public static 
            void Uniform3(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform3ivARB")]
            public static 
            unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4ivARB")]
            public static 
            void Uniform4(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4ivARB")]
            public static 
            void Uniform4(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniform4ivARB")]
            public static 
            unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix2fvARB")]
            public static 
            void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix2fvARB")]
            public static 
            void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix2fvARB")]
            public static 
            unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix3fvARB")]
            public static 
            void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix3fvARB")]
            public static 
            void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix3fvARB")]
            public static 
            unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix4fvARB")]
            public static 
            void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix4fvARB")]
            public static 
            void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glUniformMatrix4fvARB")]
            public static 
            unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static 
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static 
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static 
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static 
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static 
            unsafe void GetObjectParameter(UInt32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Single* @params)
            {
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterfvARB")]
            public static 
            unsafe void GetObjectParameter(Int32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Single* @params)
            {
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static 
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static 
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static 
            void GetObjectParameter(UInt32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static 
            void GetObjectParameter(Int32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static 
            unsafe void GetObjectParameter(UInt32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Int32* @params)
            {
                Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetObjectParameterivARB")]
            public static 
            unsafe void GetObjectParameter(Int32 obj, OpenTK.Graphics.ArbShaderObjects pname, [Out] Int32* @params)
            {
                Delegates.glGetObjectParameterivARB((UInt32)obj, (OpenTK.Graphics.ArbShaderObjects)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static 
            void GetInfoLog(UInt32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static 
            void GetInfoLog(Int32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder infoLog)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static 
            void GetInfoLog(UInt32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static 
            void GetInfoLog(Int32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder infoLog)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder)infoLog);
                        length = *length_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static 
            unsafe void GetInfoLog(UInt32 obj, Int32 maxLength, [Out] Int32* length, [Out] System.Text.StringBuilder infoLog)
            {
                Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetInfoLogARB")]
            public static 
            unsafe void GetInfoLog(Int32 obj, Int32 maxLength, [Out] Int32* length, [Out] System.Text.StringBuilder infoLog)
            {
                Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder)infoLog);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static 
            void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] UInt32[] obj)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    fixed (UInt32* obj_ptr = obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static 
            void GetAttachedObjects(Int32 containerObj, Int32 maxCount, [Out] Int32[] count, [Out] Int32[] obj)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    fixed (Int32* obj_ptr = obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static 
            void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] out UInt32 obj)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (UInt32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static 
            void GetAttachedObjects(Int32 containerObj, Int32 maxCount, [Out] out Int32 count, [Out] out Int32 obj)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (Int32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static 
            unsafe void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, [Out] Int32* count, [Out] UInt32* obj)
            {
                Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetAttachedObjectsARB")]
            public static 
            unsafe void GetAttachedObjects(Int32 containerObj, Int32 maxCount, [Out] Int32* count, [Out] Int32* obj)
            {
                Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformLocationARB")]
            public static 
            Int32 GetUniformLocation(UInt32 programObj, System.String name)
            {
                return Delegates.glGetUniformLocationARB((UInt32)programObj, (System.String)name);
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformLocationARB")]
            public static 
            Int32 GetUniformLocation(Int32 programObj, System.String name)
            {
                return Delegates.glGetUniformLocationARB((UInt32)programObj, (System.String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static 
            void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ArbShaderObjects[] type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Int32* size_ptr = size)
                    fixed (OpenTK.Graphics.ArbShaderObjects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbShaderObjects*)type_ptr, (System.Text.StringBuilder)name);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static 
            void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ArbShaderObjects[] type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Int32* size_ptr = size)
                    fixed (OpenTK.Graphics.ArbShaderObjects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbShaderObjects*)type_ptr, (System.Text.StringBuilder)name);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static 
            void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ArbShaderObjects type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.ArbShaderObjects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbShaderObjects*)type_ptr, (System.Text.StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static 
            void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ArbShaderObjects type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.ArbShaderObjects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbShaderObjects*)type_ptr, (System.Text.StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static 
            unsafe void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ArbShaderObjects* type, [Out] System.Text.StringBuilder name)
            {
                Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ArbShaderObjects*)type, (System.Text.StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetActiveUniformARB")]
            public static 
            unsafe void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ArbShaderObjects* type, [Out] System.Text.StringBuilder name)
            {
                Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ArbShaderObjects*)type, (System.Text.StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static 
            void GetUniform(UInt32 programObj, Int32 location, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static 
            void GetUniform(Int32 programObj, Int32 location, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static 
            void GetUniform(UInt32 programObj, Int32 location, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static 
            void GetUniform(Int32 programObj, Int32 location, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static 
            unsafe void GetUniform(UInt32 programObj, Int32 location, [Out] Single* @params)
            {
                Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformfvARB")]
            public static 
            unsafe void GetUniform(Int32 programObj, Int32 location, [Out] Single* @params)
            {
                Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static 
            void GetUniform(UInt32 programObj, Int32 location, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static 
            void GetUniform(Int32 programObj, Int32 location, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static 
            void GetUniform(UInt32 programObj, Int32 location, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static 
            void GetUniform(Int32 programObj, Int32 location, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static 
            unsafe void GetUniform(UInt32 programObj, Int32 location, [Out] Int32* @params)
            {
                Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetUniformivARB")]
            public static 
            unsafe void GetUniform(Int32 programObj, Int32 location, [Out] Int32* @params)
            {
                Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static 
            void GetShaderSource(UInt32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static 
            void GetShaderSource(Int32 obj, Int32 maxLength, [Out] Int32[] length, [Out] System.Text.StringBuilder[] source)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static 
            void GetShaderSource(UInt32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                        length = *length_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static 
            void GetShaderSource(Int32 obj, Int32 maxLength, [Out] out Int32 length, [Out] System.Text.StringBuilder[] source)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, (System.Text.StringBuilder[])source);
                        length = *length_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static 
            unsafe void GetShaderSource(UInt32 obj, Int32 maxLength, [Out] Int32* length, [Out] System.Text.StringBuilder[] source)
            {
                Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder[])source);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbShaderObjects", Version = "1.2", EntryPoint = "glGetShaderSourceARB")]
            public static 
            unsafe void GetShaderSource(Int32 obj, Int32 maxLength, [Out] Int32* length, [Out] System.Text.StringBuilder[] source)
            {
                Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, (System.Text.StringBuilder[])source);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glBindAttribLocationARB")]
            public static 
            void BindAttribLocation(UInt32 programObj, UInt32 index, System.String name)
            {
                Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (System.String)name);
            }

            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glBindAttribLocationARB")]
            public static 
            void BindAttribLocation(Int32 programObj, Int32 index, System.String name)
            {
                Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, (System.String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static 
            void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ArbVertexShader[] type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Int32* size_ptr = size)
                    fixed (OpenTK.Graphics.ArbVertexShader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbVertexShader*)type_ptr, (System.Text.StringBuilder)name);
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static 
            void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32[] length, [Out] Int32[] size, [Out] OpenTK.Graphics.ArbVertexShader[] type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Int32* size_ptr = size)
                    fixed (OpenTK.Graphics.ArbVertexShader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbVertexShader*)type_ptr, (System.Text.StringBuilder)name);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static 
            void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ArbVertexShader type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.ArbVertexShader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbVertexShader*)type_ptr, (System.Text.StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static 
            void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, [Out] out Int32 length, [Out] out Int32 size, [Out] out OpenTK.Graphics.ArbVertexShader type, [Out] System.Text.StringBuilder name)
            {
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (OpenTK.Graphics.ArbVertexShader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ArbVertexShader*)type_ptr, (System.Text.StringBuilder)name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static 
            unsafe void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ArbVertexShader* type, [Out] System.Text.StringBuilder name)
            {
                Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ArbVertexShader*)type, (System.Text.StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetActiveAttribARB")]
            public static 
            unsafe void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, [Out] Int32* length, [Out] Int32* size, [Out] OpenTK.Graphics.ArbVertexShader* type, [Out] System.Text.StringBuilder name)
            {
                Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ArbVertexShader*)type, (System.Text.StringBuilder)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetAttribLocationARB")]
            public static 
            Int32 GetAttribLocation(UInt32 programObj, System.String name)
            {
                return Delegates.glGetAttribLocationARB((UInt32)programObj, (System.String)name);
            }

            [AutoGenerated(Category = "ArbVertexShader", Version = "1.2", EntryPoint = "glGetAttribLocationARB")]
            public static 
            Int32 GetAttribLocation(Int32 programObj, System.String name)
            {
                return Delegates.glGetAttribLocationARB((UInt32)programObj, (System.String)name);
            }

            [AutoGenerated(Category = "ArbDrawBuffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static 
            void DrawBuffers(Int32 n, OpenTK.Graphics.ArbDrawBuffers[] bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.ArbDrawBuffers* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.ArbDrawBuffers*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ArbDrawBuffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static 
            void DrawBuffers(Int32 n, ref OpenTK.Graphics.ArbDrawBuffers bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.ArbDrawBuffers* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.ArbDrawBuffers*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbDrawBuffers", Version = "1.5", EntryPoint = "glDrawBuffersARB")]
            public static 
            unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ArbDrawBuffers* bufs)
            {
                Delegates.glDrawBuffersARB((Int32)n, (OpenTK.Graphics.ArbDrawBuffers*)bufs);
            }

            [AutoGenerated(Category = "ArbColorBufferFloat", Version = "1.5", EntryPoint = "glClampColorARB")]
            public static 
            void ClampColor(OpenTK.Graphics.ArbColorBufferFloat target, OpenTK.Graphics.ArbColorBufferFloat clamp)
            {
                Delegates.glClampColorARB((OpenTK.Graphics.ArbColorBufferFloat)target, (OpenTK.Graphics.ArbColorBufferFloat)clamp);
            }

            [AutoGenerated(Category = "ArbDrawInstanced", Version = "2.0", EntryPoint = "glDrawArraysInstancedARB")]
            public static 
            void DrawArraysInstance(OpenTK.Graphics.BeginMode mode, Int32 first, Int32 count, Int32 primcount)
            {
                Delegates.glDrawArraysInstancedARB((OpenTK.Graphics.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "ArbDrawInstanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static 
            void DrawElementsInstance(OpenTK.Graphics.BeginMode mode, Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.BeginMode)mode, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }

            [AutoGenerated(Category = "ArbDrawInstanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedARB")]
            public static 
            void DrawElementsInstance(OpenTK.Graphics.BeginMode mode, Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedARB((OpenTK.Graphics.BeginMode)mode, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glProgramParameteriARB")]
            public static 
            void ProgramParameter(UInt32 program, OpenTK.Graphics.ArbGeometryShader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriARB((UInt32)program, (OpenTK.Graphics.ArbGeometryShader4)pname, (Int32)value);
            }

            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glProgramParameteriARB")]
            public static 
            void ProgramParameter(Int32 program, OpenTK.Graphics.ArbGeometryShader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriARB((UInt32)program, (OpenTK.Graphics.ArbGeometryShader4)pname, (Int32)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glFramebufferTextureARB")]
            public static 
            void FramebufferTexture(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureARB((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glFramebufferTextureARB")]
            public static 
            void FramebufferTexture(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureARB((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glFramebufferTextureLayerARB")]
            public static 
            void FramebufferTextureLayer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerARB((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glFramebufferTextureLayerARB")]
            public static 
            void FramebufferTextureLayer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerARB((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glFramebufferTextureFaceARB")]
            public static 
            void FramebufferTextureFace(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, OpenTK.Graphics.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceARB((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.TextureTarget)face);
            }

            [AutoGenerated(Category = "ArbGeometryShader4", Version = "3.0", EntryPoint = "glFramebufferTextureFaceARB")]
            public static 
            void FramebufferTextureFace(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, OpenTK.Graphics.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceARB((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ArbTextureBufferObject", Version = "3.0", EntryPoint = "glTexBufferARB")]
            public static 
            void TexBuffer(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ArbTextureBufferObject internalformat, UInt32 buffer)
            {
                Delegates.glTexBufferARB((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ArbTextureBufferObject)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ArbTextureBufferObject", Version = "3.0", EntryPoint = "glTexBufferARB")]
            public static 
            void TexBuffer(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ArbTextureBufferObject internalformat, Int32 buffer)
            {
                Delegates.glTexBufferARB((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ArbTextureBufferObject)internalformat, (UInt32)buffer);
            }

        }

        public static partial class Ext
        {
            [AutoGenerated(Category = "ExtBlendColor", Version = "1.0", EntryPoint = "glBlendColorEXT")]
            public static 
            void BlendColor(Single red, Single green, Single blue, Single alpha)
            {
                Delegates.glBlendColorEXT((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }

            [AutoGenerated(Category = "ExtPolygonOffset", Version = "1.0", EntryPoint = "glPolygonOffsetEXT")]
            public static 
            void PolygonOffset(Single factor, Single bias)
            {
                Delegates.glPolygonOffsetEXT((Single)factor, (Single)bias);
            }

            [AutoGenerated(Category = "ExtTexture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static 
            void TexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTexImage3DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtTexture3D", Version = "1.0", EntryPoint = "glTexImage3DEXT")]
            public static 
            void TexImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtTexture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static 
            void TexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTexSubImage3DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtTexture3D", Version = "1.0", EntryPoint = "glTexSubImage3DEXT")]
            public static 
            void TexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtSubtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static 
            void TexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTexSubImage1DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtSubtexture", Version = "1.0", EntryPoint = "glTexSubImage1DEXT")]
            public static 
            void TexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage1DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtSubtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static 
            void TexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTexSubImage2DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtSubtexture", Version = "1.0", EntryPoint = "glTexSubImage2DEXT")]
            public static 
            void TexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtCopyTexture", Version = "1.0", EntryPoint = "glCopyTexImage1DEXT")]
            public static 
            void CopyTexImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTexImage1DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "ExtCopyTexture", Version = "1.0", EntryPoint = "glCopyTexImage2DEXT")]
            public static 
            void CopyTexImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTexImage2DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "ExtCopyTexture", Version = "1.0", EntryPoint = "glCopyTexSubImage1DEXT")]
            public static 
            void CopyTexSubImage1D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTexSubImage1DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "ExtCopyTexture", Version = "1.0", EntryPoint = "glCopyTexSubImage2DEXT")]
            public static 
            void CopyTexSubImage2D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTexSubImage2DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtCopyTexture", Version = "1.0", EntryPoint = "glCopyTexSubImage3DEXT")]
            public static 
            void CopyTexSubImage3D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTexSubImage3DEXT((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static 
            void GetHistogram(OpenTK.Graphics.ExtHistogram target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr values)
            {
                unsafe
                {
                    Delegates.glGetHistogramEXT((OpenTK.Graphics.ExtHistogram)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values);
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramEXT")]
            public static 
            void GetHistogram(OpenTK.Graphics.ExtHistogram target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object values)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetHistogramEXT((OpenTK.Graphics.ExtHistogram)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static 
            void GetHistogramParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static 
            void GetHistogramParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramParameterfvEXT")]
            public static 
            unsafe void GetHistogramParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Single* @params)
            {
                Delegates.glGetHistogramParameterfvEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static 
            void GetHistogramParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static 
            void GetHistogramParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetHistogramParameterivEXT")]
            public static 
            unsafe void GetHistogramParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Int32* @params)
            {
                Delegates.glGetHistogramParameterivEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static 
            void GetMinmax(OpenTK.Graphics.ExtHistogram target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr values)
            {
                unsafe
                {
                    Delegates.glGetMinmaxEXT((OpenTK.Graphics.ExtHistogram)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values);
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxEXT")]
            public static 
            void GetMinmax(OpenTK.Graphics.ExtHistogram target, bool reset, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object values)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMinmaxEXT((OpenTK.Graphics.ExtHistogram)target, (bool)reset, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static 
            void GetMinmaxParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static 
            void GetMinmaxParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterfvEXT")]
            public static 
            unsafe void GetMinmaxParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Single* @params)
            {
                Delegates.glGetMinmaxParameterfvEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static 
            void GetMinmaxParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static 
            void GetMinmaxParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glGetMinmaxParameterivEXT")]
            public static 
            unsafe void GetMinmaxParameter(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.ExtHistogram pname, [Out] Int32* @params)
            {
                Delegates.glGetMinmaxParameterivEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.ExtHistogram)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glHistogramEXT")]
            public static 
            void Histogram(OpenTK.Graphics.ExtHistogram target, Int32 width, OpenTK.Graphics.PixelInternalFormat internalformat, bool sink)
            {
                Delegates.glHistogramEXT((OpenTK.Graphics.ExtHistogram)target, (Int32)width, (OpenTK.Graphics.PixelInternalFormat)internalformat, (bool)sink);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glMinmaxEXT")]
            public static 
            void Minmax(OpenTK.Graphics.ExtHistogram target, OpenTK.Graphics.PixelInternalFormat internalformat, bool sink)
            {
                Delegates.glMinmaxEXT((OpenTK.Graphics.ExtHistogram)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (bool)sink);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glResetHistogramEXT")]
            public static 
            void ResetHistogram(OpenTK.Graphics.ExtHistogram target)
            {
                Delegates.glResetHistogramEXT((OpenTK.Graphics.ExtHistogram)target);
            }

            [AutoGenerated(Category = "ExtHistogram", Version = "1.0", EntryPoint = "glResetMinmaxEXT")]
            public static 
            void ResetMinmax(OpenTK.Graphics.ExtHistogram target)
            {
                Delegates.glResetMinmaxEXT((OpenTK.Graphics.ExtHistogram)target);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static 
            void ConvolutionFilter1D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr image)
            {
                unsafe
                {
                    Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image);
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionFilter1DEXT")]
            public static 
            void ConvolutionFilter1D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object image)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter1DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static 
            void ConvolutionFilter2D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr image)
            {
                unsafe
                {
                    Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image);
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionFilter2DEXT")]
            public static 
            void ConvolutionFilter2D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object image)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter2DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameterfEXT")]
            public static 
            void ConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, Single @params)
            {
                Delegates.glConvolutionParameterfEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Single)@params);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameterfvEXT")]
            public static 
            void ConvolutionParameterv(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterfvEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameterfvEXT")]
            public static 
            void ConvolutionParameterv(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glConvolutionParameterfvEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameterfvEXT")]
            public static 
            unsafe void ConvolutionParameterv(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, Single* @params)
            {
                Delegates.glConvolutionParameterfvEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameteriEXT")]
            public static 
            void ConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, Int32 @params)
            {
                Delegates.glConvolutionParameteriEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Int32)@params);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameterivEXT")]
            public static 
            void ConvolutionParameterv(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterivEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameterivEXT")]
            public static 
            void ConvolutionParameterv(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glConvolutionParameterivEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glConvolutionParameterivEXT")]
            public static 
            unsafe void ConvolutionParameterv(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, Int32* @params)
            {
                Delegates.glConvolutionParameterivEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glCopyConvolutionFilter1DEXT")]
            public static 
            void CopyConvolutionFilter1D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyConvolutionFilter1DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glCopyConvolutionFilter2DEXT")]
            public static 
            void CopyConvolutionFilter2D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyConvolutionFilter2DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static 
            void GetConvolutionFilter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr image)
            {
                unsafe
                {
                    Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image);
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionFilterEXT")]
            public static 
            void GetConvolutionFilter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object image)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetConvolutionFilterEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static 
            void GetConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static 
            void GetConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterfvEXT")]
            public static 
            unsafe void GetConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, [Out] Single* @params)
            {
                Delegates.glGetConvolutionParameterfvEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static 
            void GetConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static 
            void GetConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetConvolutionParameterivEXT")]
            public static 
            unsafe void GetConvolutionParameter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.ExtConvolution pname, [Out] Int32* @params)
            {
                Delegates.glGetConvolutionParameterivEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.ExtConvolution)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static 
            void GetSeparableFilter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
            {
                unsafe
                {
                    Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glGetSeparableFilterEXT")]
            public static 
            void GetSeparableFilter(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object row, [In, Out] object column, [In, Out] object span)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                    System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                    System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static 
            void SeparableFilter2D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr row, IntPtr column)
            {
                unsafe
                {
                    Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column);
                }
            }

            [AutoGenerated(Category = "ExtConvolution", Version = "1.0", EntryPoint = "glSeparableFilter2DEXT")]
            public static 
            void SeparableFilter2D(OpenTK.Graphics.ExtConvolution target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object row, [In, Out] object column)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                    System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((OpenTK.Graphics.ExtConvolution)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static 
            bool AreTexturesResident(Int32 n, UInt32[] textures, [Out] bool[] residences)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static 
            bool AreTexturesResident(Int32 n, Int32[] textures, [Out] bool[] residences)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static 
            bool AreTexturesResident(Int32 n, ref UInt32 textures, [Out] out bool residences)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static 
            bool AreTexturesResident(Int32 n, ref Int32 textures, [Out] out bool residences)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static 
            unsafe bool AreTexturesResident(Int32 n, UInt32* textures, [Out] bool* residences)
            {
                return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (bool*)residences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glAreTexturesResidentEXT")]
            public static 
            unsafe bool AreTexturesResident(Int32 n, Int32* textures, [Out] bool* residences)
            {
                return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (bool*)residences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glBindTextureEXT")]
            public static 
            void BindTexture(OpenTK.Graphics.TextureTarget target, UInt32 texture)
            {
                Delegates.glBindTextureEXT((OpenTK.Graphics.TextureTarget)target, (UInt32)texture);
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glBindTextureEXT")]
            public static 
            void BindTexture(OpenTK.Graphics.TextureTarget target, Int32 texture)
            {
                Delegates.glBindTextureEXT((OpenTK.Graphics.TextureTarget)target, (UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static 
            void DeleteTextures(Int32 n, UInt32[] textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static 
            void DeleteTextures(Int32 n, Int32[] textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static 
            void DeleteTextures(Int32 n, ref UInt32 textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static 
            void DeleteTextures(Int32 n, ref Int32 textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static 
            unsafe void DeleteTextures(Int32 n, UInt32* textures)
            {
                Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glDeleteTexturesEXT")]
            public static 
            unsafe void DeleteTextures(Int32 n, Int32* textures)
            {
                Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static 
            void GenTextures(Int32 n, [Out] UInt32[] textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static 
            void GenTextures(Int32 n, [Out] Int32[] textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static 
            void GenTextures(Int32 n, [Out] out UInt32 textures)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                        textures = *textures_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static 
            void GenTextures(Int32 n, [Out] out Int32 textures)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                        textures = *textures_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static 
            unsafe void GenTextures(Int32 n, [Out] UInt32* textures)
            {
                Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glGenTexturesEXT")]
            public static 
            unsafe void GenTextures(Int32 n, [Out] Int32* textures)
            {
                Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glIsTextureEXT")]
            public static 
            bool IsTexture(UInt32 texture)
            {
                return Delegates.glIsTextureEXT((UInt32)texture);
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glIsTextureEXT")]
            public static 
            bool IsTexture(Int32 texture)
            {
                return Delegates.glIsTextureEXT((UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static 
            void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    fixed (Single* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static 
            void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    fixed (Single* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static 
            void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
            {
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    fixed (Single* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static 
            void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
            {
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    fixed (Single* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static 
            unsafe void PrioritizeTextures(Int32 n, UInt32* textures, Single* priorities)
            {
                Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureObject", Version = "1.0", EntryPoint = "glPrioritizeTexturesEXT")]
            public static 
            unsafe void PrioritizeTextures(Int32 n, Int32* textures, Single* priorities)
            {
                Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glArrayElementEXT")]
            public static 
            void ArrayElement(Int32 i)
            {
                Delegates.glArrayElementEXT((Int32)i);
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static 
            void ColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glColorPointerEXT")]
            public static 
            void ColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, Int32 count, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerEXT((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glDrawArraysEXT")]
            public static 
            void DrawArrays(OpenTK.Graphics.BeginMode mode, Int32 first, Int32 count)
            {
                Delegates.glDrawArraysEXT((OpenTK.Graphics.BeginMode)mode, (Int32)first, (Int32)count);
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glEdgeFlagPointerEXT")]
            public static 
            void EdgeFlagPointer(Int32 stride, Int32 count, bool[] pointer)
            {
                unsafe
                {
                    fixed (bool* pointer_ptr = pointer)
                    {
                        Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glEdgeFlagPointerEXT")]
            public static 
            void EdgeFlagPointer(Int32 stride, Int32 count, ref bool pointer)
            {
                unsafe
                {
                    fixed (bool* pointer_ptr = &pointer)
                    {
                        Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glEdgeFlagPointerEXT")]
            public static 
            unsafe void EdgeFlagPointer(Int32 stride, Int32 count, bool* pointer)
            {
                Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer);
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static 
            void GetPointer(OpenTK.Graphics.GetPointervPName pname, [Out] IntPtr @params)
            {
                unsafe
                {
                    Delegates.glGetPointervEXT((OpenTK.Graphics.GetPointervPName)pname, (IntPtr)@params);
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glGetPointervEXT")]
            public static 
            void GetPointer(OpenTK.Graphics.GetPointervPName pname, [In, Out] object @params)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointervEXT((OpenTK.Graphics.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static 
            void IndexPointer(OpenTK.Graphics.IndexPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glIndexPointerEXT((OpenTK.Graphics.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glIndexPointerEXT")]
            public static 
            void IndexPointer(OpenTK.Graphics.IndexPointerType type, Int32 stride, Int32 count, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerEXT((OpenTK.Graphics.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static 
            void NormalPointer(OpenTK.Graphics.NormalPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glNormalPointerEXT((OpenTK.Graphics.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glNormalPointerEXT")]
            public static 
            void NormalPointer(OpenTK.Graphics.NormalPointerType type, Int32 stride, Int32 count, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerEXT((OpenTK.Graphics.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static 
            void TexCoordPointer(Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glTexCoordPointerEXT")]
            public static 
            void TexCoordPointer(Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, Int32 count, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerEXT((Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static 
            void VertexPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtVertexArray", Version = "1.0", EntryPoint = "glVertexPointerEXT")]
            public static 
            void VertexPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, Int32 stride, Int32 count, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerEXT((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtBlendMinmax", Version = "1.0", EntryPoint = "glBlendEquationEXT")]
            public static 
            void BlendEquation(OpenTK.Graphics.ExtBlendMinmax mode)
            {
                Delegates.glBlendEquationEXT((OpenTK.Graphics.ExtBlendMinmax)mode);
            }

            [AutoGenerated(Category = "ExtPointParameters", Version = "1.0", EntryPoint = "glPointParameterfEXT")]
            public static 
            void PointParameter(OpenTK.Graphics.ExtPointParameters pname, Single param)
            {
                Delegates.glPointParameterfEXT((OpenTK.Graphics.ExtPointParameters)pname, (Single)param);
            }

            [AutoGenerated(Category = "ExtPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvEXT")]
            public static 
            void PointParameterv(OpenTK.Graphics.ExtPointParameters pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvEXT((OpenTK.Graphics.ExtPointParameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvEXT")]
            public static 
            void PointParameterv(OpenTK.Graphics.ExtPointParameters pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterfvEXT((OpenTK.Graphics.ExtPointParameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvEXT")]
            public static 
            unsafe void PointParameterv(OpenTK.Graphics.ExtPointParameters pname, Single* @params)
            {
                Delegates.glPointParameterfvEXT((OpenTK.Graphics.ExtPointParameters)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtColorSubtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static 
            void ColorSubTable(OpenTK.Graphics.ExtColorSubtable target, Int32 start, Int32 count, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr data)
            {
                unsafe
                {
                    Delegates.glColorSubTableEXT((OpenTK.Graphics.ExtColorSubtable)target, (Int32)start, (Int32)count, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ExtColorSubtable", Version = "1.2", EntryPoint = "glColorSubTableEXT")]
            public static 
            void ColorSubTable(OpenTK.Graphics.ExtColorSubtable target, Int32 start, Int32 count, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorSubTableEXT((OpenTK.Graphics.ExtColorSubtable)target, (Int32)start, (Int32)count, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtColorSubtable", Version = "1.2", EntryPoint = "glCopyColorSubTableEXT")]
            public static 
            void CopyColorSubTable(OpenTK.Graphics.ExtColorSubtable target, Int32 start, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyColorSubTableEXT((OpenTK.Graphics.ExtColorSubtable)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static 
            void ColorTable(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.PixelInternalFormat internalFormat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr table)
            {
                unsafe
                {
                    Delegates.glColorTableEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table);
                }
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glColorTableEXT")]
            public static 
            void ColorTable(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.PixelInternalFormat internalFormat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object table)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.PixelInternalFormat)internalFormat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static 
            void GetColorTable(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetColorTableEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableEXT")]
            public static 
            void GetColorTable(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.ExtPalettedTexture pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.ExtPalettedTexture)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.ExtPalettedTexture pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.ExtPalettedTexture)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableParameterivEXT")]
            public static 
            unsafe void GetColorTableParameter(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.ExtPalettedTexture pname, [Out] Int32* @params)
            {
                Delegates.glGetColorTableParameterivEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.ExtPalettedTexture)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.ExtPalettedTexture pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.ExtPalettedTexture)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.ExtPalettedTexture pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.ExtPalettedTexture)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtPalettedTexture", Version = "1.1", EntryPoint = "glGetColorTableParameterfvEXT")]
            public static 
            unsafe void GetColorTableParameter(OpenTK.Graphics.ExtPalettedTexture target, OpenTK.Graphics.ExtPalettedTexture pname, [Out] Single* @params)
            {
                Delegates.glGetColorTableParameterfvEXT((OpenTK.Graphics.ExtPalettedTexture)target, (OpenTK.Graphics.ExtPalettedTexture)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtIndexMaterial", Version = "1.1", EntryPoint = "glIndexMaterialEXT")]
            public static 
            void IndexMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.ExtIndexMaterial mode)
            {
                Delegates.glIndexMaterialEXT((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.ExtIndexMaterial)mode);
            }

            [AutoGenerated(Category = "ExtIndexFunc", Version = "1.1", EntryPoint = "glIndexFuncEXT")]
            public static 
            void IndexFunc(OpenTK.Graphics.ExtIndexFunc func, Single @ref)
            {
                Delegates.glIndexFuncEXT((OpenTK.Graphics.ExtIndexFunc)func, (Single)@ref);
            }

            [AutoGenerated(Category = "ExtCompiledVertexArray", Version = "1.1", EntryPoint = "glLockArraysEXT")]
            public static 
            void LockArrays(Int32 first, Int32 count)
            {
                Delegates.glLockArraysEXT((Int32)first, (Int32)count);
            }

            [AutoGenerated(Category = "ExtCompiledVertexArray", Version = "1.1", EntryPoint = "glUnlockArraysEXT")]
            public static 
            void UnlockArrays()
            {
                Delegates.glUnlockArraysEXT();
            }

            [AutoGenerated(Category = "ExtCullVertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static 
            void CullParameter(OpenTK.Graphics.ExtCullVertex pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glCullParameterdvEXT((OpenTK.Graphics.ExtCullVertex)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCullVertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static 
            void CullParameter(OpenTK.Graphics.ExtCullVertex pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterdvEXT((OpenTK.Graphics.ExtCullVertex)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCullVertex", Version = "1.1", EntryPoint = "glCullParameterdvEXT")]
            public static 
            unsafe void CullParameter(OpenTK.Graphics.ExtCullVertex pname, [Out] Double* @params)
            {
                Delegates.glCullParameterdvEXT((OpenTK.Graphics.ExtCullVertex)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "ExtCullVertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static 
            void CullParameter(OpenTK.Graphics.ExtCullVertex pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCullParameterfvEXT((OpenTK.Graphics.ExtCullVertex)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCullVertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static 
            void CullParameter(OpenTK.Graphics.ExtCullVertex pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterfvEXT((OpenTK.Graphics.ExtCullVertex)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCullVertex", Version = "1.1", EntryPoint = "glCullParameterfvEXT")]
            public static 
            unsafe void CullParameter(OpenTK.Graphics.ExtCullVertex pname, [Out] Single* @params)
            {
                Delegates.glCullParameterfvEXT((OpenTK.Graphics.ExtCullVertex)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawRangeElements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static 
            void DrawRangeElements(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices)
            {
                unsafe
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices);
                }
            }

            [AutoGenerated(Category = "ExtDrawRangeElements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static 
            void DrawRangeElements(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices)
            {
                unsafe
                {
                    Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawRangeElements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static 
            void DrawRangeElements(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDrawRangeElements", Version = "1.1", EntryPoint = "glDrawRangeElementsEXT")]
            public static 
            void DrawRangeElements(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtLightTexture", Version = "1.1", EntryPoint = "glApplyTextureEXT")]
            public static 
            void ApplyTexture(OpenTK.Graphics.ExtLightTexture mode)
            {
                Delegates.glApplyTextureEXT((OpenTK.Graphics.ExtLightTexture)mode);
            }

            [AutoGenerated(Category = "ExtLightTexture", Version = "1.1", EntryPoint = "glTextureLightEXT")]
            public static 
            void TextureLight(OpenTK.Graphics.ExtLightTexture pname)
            {
                Delegates.glTextureLightEXT((OpenTK.Graphics.ExtLightTexture)pname);
            }

            [AutoGenerated(Category = "ExtLightTexture", Version = "1.1", EntryPoint = "glTextureMaterialEXT")]
            public static 
            void TextureMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter mode)
            {
                Delegates.glTextureMaterialEXT((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)mode);
            }

            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameteriEXT")]
            public static 
            void PixelTransformParameter(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, Int32 param)
            {
                Delegates.glPixelTransformParameteriEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Int32)param);
            }

            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameterfEXT")]
            public static 
            void PixelTransformParameter(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, Single param)
            {
                Delegates.glPixelTransformParameterfEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Single)param);
            }

            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameterivEXT")]
            public static 
            void PixelTransformParameterv(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glPixelTransformParameterivEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameterivEXT")]
            public static 
            void PixelTransformParameterv(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glPixelTransformParameterivEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameterivEXT")]
            public static 
            unsafe void PixelTransformParameterv(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, Int32* @params)
            {
                Delegates.glPixelTransformParameterivEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameterfvEXT")]
            public static 
            void PixelTransformParameterv(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPixelTransformParameterfvEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameterfvEXT")]
            public static 
            void PixelTransformParameterv(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glPixelTransformParameterfvEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtPixelTransform", Version = "1.1", EntryPoint = "glPixelTransformParameterfvEXT")]
            public static 
            unsafe void PixelTransformParameterv(OpenTK.Graphics.ExtPixelTransform target, OpenTK.Graphics.ExtPixelTransform pname, Single* @params)
            {
                Delegates.glPixelTransformParameterfvEXT((OpenTK.Graphics.ExtPixelTransform)target, (OpenTK.Graphics.ExtPixelTransform)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3bEXT")]
            public static 
            void SecondaryColor3(SByte red, SByte green, SByte blue)
            {
                Delegates.glSecondaryColor3bEXT((SByte)red, (SByte)green, (SByte)blue);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3bvEXT")]
            public static 
            void SecondaryColor3(SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3bvEXT")]
            public static 
            void SecondaryColor3(ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3bvEXT")]
            public static 
            unsafe void SecondaryColor3(SByte* v)
            {
                Delegates.glSecondaryColor3bvEXT((SByte*)v);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3dEXT")]
            public static 
            void SecondaryColor3(Double red, Double green, Double blue)
            {
                Delegates.glSecondaryColor3dEXT((Double)red, (Double)green, (Double)blue);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3dvEXT")]
            public static 
            void SecondaryColor3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3dvEXT")]
            public static 
            void SecondaryColor3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3dvEXT")]
            public static 
            unsafe void SecondaryColor3(Double* v)
            {
                Delegates.glSecondaryColor3dvEXT((Double*)v);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3fEXT")]
            public static 
            void SecondaryColor3(Single red, Single green, Single blue)
            {
                Delegates.glSecondaryColor3fEXT((Single)red, (Single)green, (Single)blue);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3fvEXT")]
            public static 
            void SecondaryColor3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3fvEXT")]
            public static 
            void SecondaryColor3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3fvEXT")]
            public static 
            unsafe void SecondaryColor3(Single* v)
            {
                Delegates.glSecondaryColor3fvEXT((Single*)v);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3iEXT")]
            public static 
            void SecondaryColor3(Int32 red, Int32 green, Int32 blue)
            {
                Delegates.glSecondaryColor3iEXT((Int32)red, (Int32)green, (Int32)blue);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3ivEXT")]
            public static 
            void SecondaryColor3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3ivEXT")]
            public static 
            void SecondaryColor3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3ivEXT")]
            public static 
            unsafe void SecondaryColor3(Int32* v)
            {
                Delegates.glSecondaryColor3ivEXT((Int32*)v);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3sEXT")]
            public static 
            void SecondaryColor3(Int16 red, Int16 green, Int16 blue)
            {
                Delegates.glSecondaryColor3sEXT((Int16)red, (Int16)green, (Int16)blue);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3svEXT")]
            public static 
            void SecondaryColor3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3svEXT")]
            public static 
            void SecondaryColor3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3svEXT")]
            public static 
            unsafe void SecondaryColor3(Int16* v)
            {
                Delegates.glSecondaryColor3svEXT((Int16*)v);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3ubEXT")]
            public static 
            void SecondaryColor3(Byte red, Byte green, Byte blue)
            {
                Delegates.glSecondaryColor3ubEXT((Byte)red, (Byte)green, (Byte)blue);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3ubvEXT")]
            public static 
            void SecondaryColor3(Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3ubvEXT")]
            public static 
            void SecondaryColor3(ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3ubvEXT")]
            public static 
            unsafe void SecondaryColor3(Byte* v)
            {
                Delegates.glSecondaryColor3ubvEXT((Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3uiEXT")]
            public static 
            void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue)
            {
                Delegates.glSecondaryColor3uiEXT((UInt32)red, (UInt32)green, (UInt32)blue);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3uivEXT")]
            public static 
            void SecondaryColor3(UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3uivEXT")]
            public static 
            void SecondaryColor3(ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3uivEXT")]
            public static 
            unsafe void SecondaryColor3(UInt32* v)
            {
                Delegates.glSecondaryColor3uivEXT((UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3usEXT")]
            public static 
            void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue)
            {
                Delegates.glSecondaryColor3usEXT((UInt16)red, (UInt16)green, (UInt16)blue);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3usvEXT")]
            public static 
            void SecondaryColor3(UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3usvEXT")]
            public static 
            void SecondaryColor3(ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColor3usvEXT")]
            public static 
            unsafe void SecondaryColor3(UInt16* v)
            {
                Delegates.glSecondaryColor3usvEXT((UInt16*)v);
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static 
            void SecondaryColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtSecondaryColor", Version = "1.1", EntryPoint = "glSecondaryColorPointerEXT")]
            public static 
            void SecondaryColorPointer(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerEXT((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtTexturePerturbNormal", Version = "1.1", EntryPoint = "glTextureNormalEXT")]
            public static 
            void TextureNormal(OpenTK.Graphics.ExtTexturePerturbNormal mode)
            {
                Delegates.glTextureNormalEXT((OpenTK.Graphics.ExtTexturePerturbNormal)mode);
            }

            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static 
            void MultiDrawArrays(OpenTK.Graphics.BeginMode mode, [Out] Int32[] first, [Out] Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static 
            void MultiDrawArrays(OpenTK.Graphics.BeginMode mode, [Out] out Int32 first, [Out] out Int32 count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                        first = *first_ptr;
                        count = *count_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawArraysEXT")]
            public static 
            unsafe void MultiDrawArrays(OpenTK.Graphics.BeginMode mode, [Out] Int32* first, [Out] Int32* count, Int32 primcount)
            {
                Delegates.glMultiDrawArraysEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static 
            void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32[] count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static 
            void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32[] count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static 
            void MultiDrawElements(OpenTK.Graphics.BeginMode mode, ref Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static 
            void MultiDrawElements(OpenTK.Graphics.BeginMode mode, ref Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static 
            unsafe void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32* count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtMultiDrawArrays", Version = "1.1", EntryPoint = "glMultiDrawElementsEXT")]
            public static 
            unsafe void MultiDrawElements(OpenTK.Graphics.BeginMode mode, Int32* count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((OpenTK.Graphics.BeginMode)mode, (Int32*)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoordfEXT")]
            public static 
            void FogCoord(Single coord)
            {
                Delegates.glFogCoordfEXT((Single)coord);
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoordfvEXT")]
            public static 
            void FogCoordv(Single[] coord)
            {
                unsafe
                {
                    fixed (Single* coord_ptr = coord)
                    {
                        Delegates.glFogCoordfvEXT((Single*)coord_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoordfvEXT")]
            public static 
            void FogCoordv(ref Single coord)
            {
                unsafe
                {
                    fixed (Single* coord_ptr = &coord)
                    {
                        Delegates.glFogCoordfvEXT((Single*)coord_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoordfvEXT")]
            public static 
            unsafe void FogCoordv(Single* coord)
            {
                Delegates.glFogCoordfvEXT((Single*)coord);
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoorddEXT")]
            public static 
            void FogCoord(Double coord)
            {
                Delegates.glFogCoorddEXT((Double)coord);
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoorddvEXT")]
            public static 
            void FogCoordv(Double[] coord)
            {
                unsafe
                {
                    fixed (Double* coord_ptr = coord)
                    {
                        Delegates.glFogCoorddvEXT((Double*)coord_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoorddvEXT")]
            public static 
            void FogCoordv(ref Double coord)
            {
                unsafe
                {
                    fixed (Double* coord_ptr = &coord)
                    {
                        Delegates.glFogCoorddvEXT((Double*)coord_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoorddvEXT")]
            public static 
            unsafe void FogCoordv(Double* coord)
            {
                Delegates.glFogCoorddvEXT((Double*)coord);
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static 
            void FogCoordPointer(OpenTK.Graphics.ExtFogCoord type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glFogCoordPointerEXT((OpenTK.Graphics.ExtFogCoord)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtFogCoord", Version = "1.1", EntryPoint = "glFogCoordPointerEXT")]
            public static 
            void FogCoordPointer(OpenTK.Graphics.ExtFogCoord type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerEXT((OpenTK.Graphics.ExtFogCoord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bEXT")]
            public static 
            void Tangent3(SByte tx, SByte ty, SByte tz)
            {
                Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bEXT")]
            public static 
            void Tangent3(Byte tx, Byte ty, Byte tz)
            {
                Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static 
            void Tangent3(SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static 
            void Tangent3(Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static 
            void Tangent3(ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static 
            void Tangent3(ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static 
            unsafe void Tangent3(SByte* v)
            {
                Delegates.glTangent3bvEXT((SByte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3bvEXT")]
            public static 
            unsafe void Tangent3(Byte* v)
            {
                Delegates.glTangent3bvEXT((SByte*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3dEXT")]
            public static 
            void Tangent3(Double tx, Double ty, Double tz)
            {
                Delegates.glTangent3dEXT((Double)tx, (Double)ty, (Double)tz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3dvEXT")]
            public static 
            void Tangent3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glTangent3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3dvEXT")]
            public static 
            void Tangent3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glTangent3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3dvEXT")]
            public static 
            unsafe void Tangent3(Double* v)
            {
                Delegates.glTangent3dvEXT((Double*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3fEXT")]
            public static 
            void Tangent3(Single tx, Single ty, Single tz)
            {
                Delegates.glTangent3fEXT((Single)tx, (Single)ty, (Single)tz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3fvEXT")]
            public static 
            void Tangent3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTangent3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3fvEXT")]
            public static 
            void Tangent3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTangent3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3fvEXT")]
            public static 
            unsafe void Tangent3(Single* v)
            {
                Delegates.glTangent3fvEXT((Single*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3iEXT")]
            public static 
            void Tangent3(Int32 tx, Int32 ty, Int32 tz)
            {
                Delegates.glTangent3iEXT((Int32)tx, (Int32)ty, (Int32)tz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3ivEXT")]
            public static 
            void Tangent3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glTangent3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3ivEXT")]
            public static 
            void Tangent3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glTangent3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3ivEXT")]
            public static 
            unsafe void Tangent3(Int32* v)
            {
                Delegates.glTangent3ivEXT((Int32*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3sEXT")]
            public static 
            void Tangent3(Int16 tx, Int16 ty, Int16 tz)
            {
                Delegates.glTangent3sEXT((Int16)tx, (Int16)ty, (Int16)tz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3svEXT")]
            public static 
            void Tangent3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glTangent3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3svEXT")]
            public static 
            void Tangent3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glTangent3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangent3svEXT")]
            public static 
            unsafe void Tangent3(Int16* v)
            {
                Delegates.glTangent3svEXT((Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bEXT")]
            public static 
            void Binormal3(SByte bx, SByte by, SByte bz)
            {
                Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bEXT")]
            public static 
            void Binormal3(Byte bx, Byte by, Byte bz)
            {
                Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static 
            void Binormal3(SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static 
            void Binormal3(Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static 
            void Binormal3(ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static 
            void Binormal3(ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static 
            unsafe void Binormal3(SByte* v)
            {
                Delegates.glBinormal3bvEXT((SByte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3bvEXT")]
            public static 
            unsafe void Binormal3(Byte* v)
            {
                Delegates.glBinormal3bvEXT((SByte*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3dEXT")]
            public static 
            void Binormal3(Double bx, Double by, Double bz)
            {
                Delegates.glBinormal3dEXT((Double)bx, (Double)by, (Double)bz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3dvEXT")]
            public static 
            void Binormal3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glBinormal3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3dvEXT")]
            public static 
            void Binormal3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glBinormal3dvEXT((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3dvEXT")]
            public static 
            unsafe void Binormal3(Double* v)
            {
                Delegates.glBinormal3dvEXT((Double*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3fEXT")]
            public static 
            void Binormal3(Single bx, Single by, Single bz)
            {
                Delegates.glBinormal3fEXT((Single)bx, (Single)by, (Single)bz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3fvEXT")]
            public static 
            void Binormal3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glBinormal3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3fvEXT")]
            public static 
            void Binormal3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glBinormal3fvEXT((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3fvEXT")]
            public static 
            unsafe void Binormal3(Single* v)
            {
                Delegates.glBinormal3fvEXT((Single*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3iEXT")]
            public static 
            void Binormal3(Int32 bx, Int32 by, Int32 bz)
            {
                Delegates.glBinormal3iEXT((Int32)bx, (Int32)by, (Int32)bz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3ivEXT")]
            public static 
            void Binormal3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glBinormal3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3ivEXT")]
            public static 
            void Binormal3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glBinormal3ivEXT((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3ivEXT")]
            public static 
            unsafe void Binormal3(Int32* v)
            {
                Delegates.glBinormal3ivEXT((Int32*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3sEXT")]
            public static 
            void Binormal3(Int16 bx, Int16 by, Int16 bz)
            {
                Delegates.glBinormal3sEXT((Int16)bx, (Int16)by, (Int16)bz);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3svEXT")]
            public static 
            void Binormal3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glBinormal3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3svEXT")]
            public static 
            void Binormal3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glBinormal3svEXT((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormal3svEXT")]
            public static 
            unsafe void Binormal3(Int16* v)
            {
                Delegates.glBinormal3svEXT((Int16*)v);
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static 
            void TangentPointer(OpenTK.Graphics.ExtCoordinateFrame type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glTangentPointerEXT((OpenTK.Graphics.ExtCoordinateFrame)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glTangentPointerEXT")]
            public static 
            void TangentPointer(OpenTK.Graphics.ExtCoordinateFrame type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTangentPointerEXT((OpenTK.Graphics.ExtCoordinateFrame)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static 
            void BinormalPointer(OpenTK.Graphics.ExtCoordinateFrame type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glBinormalPointerEXT((OpenTK.Graphics.ExtCoordinateFrame)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtCoordinateFrame", Version = "1.1", EntryPoint = "glBinormalPointerEXT")]
            public static 
            void BinormalPointer(OpenTK.Graphics.ExtCoordinateFrame type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBinormalPointerEXT((OpenTK.Graphics.ExtCoordinateFrame)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtBlendFuncSeparate", Version = "1.0", EntryPoint = "glBlendFuncSeparateEXT")]
            public static 
            void BlendFuncSeparate(OpenTK.Graphics.ExtBlendFuncSeparate sfactorRGB, OpenTK.Graphics.ExtBlendFuncSeparate dfactorRGB, OpenTK.Graphics.ExtBlendFuncSeparate sfactorAlpha, OpenTK.Graphics.ExtBlendFuncSeparate dfactorAlpha)
            {
                Delegates.glBlendFuncSeparateEXT((OpenTK.Graphics.ExtBlendFuncSeparate)sfactorRGB, (OpenTK.Graphics.ExtBlendFuncSeparate)dfactorRGB, (OpenTK.Graphics.ExtBlendFuncSeparate)sfactorAlpha, (OpenTK.Graphics.ExtBlendFuncSeparate)dfactorAlpha);
            }

            [AutoGenerated(Category = "ExtVertexWeighting", Version = "1.1", EntryPoint = "glVertexWeightfEXT")]
            public static 
            void VertexWeight(Single weight)
            {
                Delegates.glVertexWeightfEXT((Single)weight);
            }

            [AutoGenerated(Category = "ExtVertexWeighting", Version = "1.1", EntryPoint = "glVertexWeightfvEXT")]
            public static 
            void VertexWeightv(Single[] weight)
            {
                unsafe
                {
                    fixed (Single* weight_ptr = weight)
                    {
                        Delegates.glVertexWeightfvEXT((Single*)weight_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexWeighting", Version = "1.1", EntryPoint = "glVertexWeightfvEXT")]
            public static 
            void VertexWeightv(ref Single weight)
            {
                unsafe
                {
                    fixed (Single* weight_ptr = &weight)
                    {
                        Delegates.glVertexWeightfvEXT((Single*)weight_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexWeighting", Version = "1.1", EntryPoint = "glVertexWeightfvEXT")]
            public static 
            unsafe void VertexWeightv(Single* weight)
            {
                Delegates.glVertexWeightfvEXT((Single*)weight);
            }

            [AutoGenerated(Category = "ExtVertexWeighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static 
            void VertexWeightPointer(Int32 size, OpenTK.Graphics.ExtVertexWeighting type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.ExtVertexWeighting)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtVertexWeighting", Version = "1.1", EntryPoint = "glVertexWeightPointerEXT")]
            public static 
            void VertexWeightPointer(Int32 size, OpenTK.Graphics.ExtVertexWeighting type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexWeightPointerEXT((Int32)size, (OpenTK.Graphics.ExtVertexWeighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtMultisample", Version = "1.0", EntryPoint = "glSampleMaskEXT")]
            public static 
            void SampleMask(Single value, bool invert)
            {
                Delegates.glSampleMaskEXT((Single)value, (bool)invert);
            }

            [AutoGenerated(Category = "ExtMultisample", Version = "1.0", EntryPoint = "glSamplePatternEXT")]
            public static 
            void SamplePattern(OpenTK.Graphics.ExtMultisample pattern)
            {
                Delegates.glSamplePatternEXT((OpenTK.Graphics.ExtMultisample)pattern);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBeginVertexShaderEXT")]
            public static 
            void BeginVertexShader()
            {
                Delegates.glBeginVertexShaderEXT();
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glEndVertexShaderEXT")]
            public static 
            void EndVertexShader()
            {
                Delegates.glEndVertexShaderEXT();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBindVertexShaderEXT")]
            public static 
            void BindVertexShader(UInt32 id)
            {
                Delegates.glBindVertexShaderEXT((UInt32)id);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBindVertexShaderEXT")]
            public static 
            void BindVertexShader(Int32 id)
            {
                Delegates.glBindVertexShaderEXT((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGenVertexShadersEXT")]
            public static 
            Int32 GenVertexShaders(UInt32 range)
            {
                return Delegates.glGenVertexShadersEXT((UInt32)range);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGenVertexShadersEXT")]
            public static 
            Int32 GenVertexShaders(Int32 range)
            {
                return Delegates.glGenVertexShadersEXT((UInt32)range);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glDeleteVertexShaderEXT")]
            public static 
            void DeleteVertexShader(UInt32 id)
            {
                Delegates.glDeleteVertexShaderEXT((UInt32)id);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glDeleteVertexShaderEXT")]
            public static 
            void DeleteVertexShader(Int32 id)
            {
                Delegates.glDeleteVertexShaderEXT((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glShaderOp1EXT")]
            public static 
            void ShaderOp1(OpenTK.Graphics.ExtVertexShader op, UInt32 res, UInt32 arg1)
            {
                Delegates.glShaderOp1EXT((OpenTK.Graphics.ExtVertexShader)op, (UInt32)res, (UInt32)arg1);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glShaderOp1EXT")]
            public static 
            void ShaderOp1(OpenTK.Graphics.ExtVertexShader op, Int32 res, Int32 arg1)
            {
                Delegates.glShaderOp1EXT((OpenTK.Graphics.ExtVertexShader)op, (UInt32)res, (UInt32)arg1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glShaderOp2EXT")]
            public static 
            void ShaderOp2(OpenTK.Graphics.ExtVertexShader op, UInt32 res, UInt32 arg1, UInt32 arg2)
            {
                Delegates.glShaderOp2EXT((OpenTK.Graphics.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glShaderOp2EXT")]
            public static 
            void ShaderOp2(OpenTK.Graphics.ExtVertexShader op, Int32 res, Int32 arg1, Int32 arg2)
            {
                Delegates.glShaderOp2EXT((OpenTK.Graphics.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glShaderOp3EXT")]
            public static 
            void ShaderOp3(OpenTK.Graphics.ExtVertexShader op, UInt32 res, UInt32 arg1, UInt32 arg2, UInt32 arg3)
            {
                Delegates.glShaderOp3EXT((OpenTK.Graphics.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glShaderOp3EXT")]
            public static 
            void ShaderOp3(OpenTK.Graphics.ExtVertexShader op, Int32 res, Int32 arg1, Int32 arg2, Int32 arg3)
            {
                Delegates.glShaderOp3EXT((OpenTK.Graphics.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSwizzleEXT")]
            public static 
            void Swizzle(UInt32 res, UInt32 @in, OpenTK.Graphics.ExtVertexShader outX, OpenTK.Graphics.ExtVertexShader outY, OpenTK.Graphics.ExtVertexShader outZ, OpenTK.Graphics.ExtVertexShader outW)
            {
                Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.ExtVertexShader)outX, (OpenTK.Graphics.ExtVertexShader)outY, (OpenTK.Graphics.ExtVertexShader)outZ, (OpenTK.Graphics.ExtVertexShader)outW);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSwizzleEXT")]
            public static 
            void Swizzle(Int32 res, Int32 @in, OpenTK.Graphics.ExtVertexShader outX, OpenTK.Graphics.ExtVertexShader outY, OpenTK.Graphics.ExtVertexShader outZ, OpenTK.Graphics.ExtVertexShader outW)
            {
                Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.ExtVertexShader)outX, (OpenTK.Graphics.ExtVertexShader)outY, (OpenTK.Graphics.ExtVertexShader)outZ, (OpenTK.Graphics.ExtVertexShader)outW);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
            public static 
            void WriteMask(UInt32 res, UInt32 @in, OpenTK.Graphics.ExtVertexShader outX, OpenTK.Graphics.ExtVertexShader outY, OpenTK.Graphics.ExtVertexShader outZ, OpenTK.Graphics.ExtVertexShader outW)
            {
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.ExtVertexShader)outX, (OpenTK.Graphics.ExtVertexShader)outY, (OpenTK.Graphics.ExtVertexShader)outZ, (OpenTK.Graphics.ExtVertexShader)outW);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glWriteMaskEXT")]
            public static 
            void WriteMask(Int32 res, Int32 @in, OpenTK.Graphics.ExtVertexShader outX, OpenTK.Graphics.ExtVertexShader outY, OpenTK.Graphics.ExtVertexShader outZ, OpenTK.Graphics.ExtVertexShader outW)
            {
                Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (OpenTK.Graphics.ExtVertexShader)outX, (OpenTK.Graphics.ExtVertexShader)outY, (OpenTK.Graphics.ExtVertexShader)outZ, (OpenTK.Graphics.ExtVertexShader)outW);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glInsertComponentEXT")]
            public static 
            void InsertComponent(UInt32 res, UInt32 src, UInt32 num)
            {
                Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glInsertComponentEXT")]
            public static 
            void InsertComponent(Int32 res, Int32 src, Int32 num)
            {
                Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glExtractComponentEXT")]
            public static 
            void ExtractComponent(UInt32 res, UInt32 src, UInt32 num)
            {
                Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glExtractComponentEXT")]
            public static 
            void ExtractComponent(Int32 res, Int32 src, Int32 num)
            {
                Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGenSymbolsEXT")]
            public static 
            Int32 GenSymbol(OpenTK.Graphics.ExtVertexShader datatype, OpenTK.Graphics.ExtVertexShader storagetype, OpenTK.Graphics.ExtVertexShader range, UInt32 components)
            {
                return Delegates.glGenSymbolsEXT((OpenTK.Graphics.ExtVertexShader)datatype, (OpenTK.Graphics.ExtVertexShader)storagetype, (OpenTK.Graphics.ExtVertexShader)range, (UInt32)components);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGenSymbolsEXT")]
            public static 
            Int32 GenSymbol(OpenTK.Graphics.ExtVertexShader datatype, OpenTK.Graphics.ExtVertexShader storagetype, OpenTK.Graphics.ExtVertexShader range, Int32 components)
            {
                return Delegates.glGenSymbolsEXT((OpenTK.Graphics.ExtVertexShader)datatype, (OpenTK.Graphics.ExtVertexShader)storagetype, (OpenTK.Graphics.ExtVertexShader)range, (UInt32)components);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static 
            void SetInvariant(UInt32 id, OpenTK.Graphics.ExtVertexShader type, IntPtr addr)
            {
                unsafe
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr);
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static 
            void SetInvariant(Int32 id, OpenTK.Graphics.ExtVertexShader type, IntPtr addr)
            {
                unsafe
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static 
            void SetInvariant(UInt32 id, OpenTK.Graphics.ExtVertexShader type, [In, Out] object addr)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetInvariantEXT")]
            public static 
            void SetInvariant(Int32 id, OpenTK.Graphics.ExtVertexShader type, [In, Out] object addr)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static 
            void SetLocalConstant(UInt32 id, OpenTK.Graphics.ExtVertexShader type, IntPtr addr)
            {
                unsafe
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr);
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static 
            void SetLocalConstant(Int32 id, OpenTK.Graphics.ExtVertexShader type, IntPtr addr)
            {
                unsafe
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static 
            void SetLocalConstant(UInt32 id, OpenTK.Graphics.ExtVertexShader type, [In, Out] object addr)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glSetLocalConstantEXT")]
            public static 
            void SetLocalConstant(Int32 id, OpenTK.Graphics.ExtVertexShader type, [In, Out] object addr)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantbvEXT")]
            public static 
            void Variant(UInt32 id, SByte[] addr)
            {
                unsafe
                {
                    fixed (SByte* addr_ptr = addr)
                    {
                        Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantbvEXT")]
            public static 
            void Variant(UInt32 id, ref SByte addr)
            {
                unsafe
                {
                    fixed (SByte* addr_ptr = &addr)
                    {
                        Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantbvEXT")]
            public static 
            unsafe void Variant(UInt32 id, SByte* addr)
            {
                Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static 
            void Variant(UInt32 id, Int16[] addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static 
            void Variant(Int32 id, Int16[] addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static 
            void Variant(UInt32 id, ref Int16 addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = &addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static 
            void Variant(Int32 id, ref Int16 addr)
            {
                unsafe
                {
                    fixed (Int16* addr_ptr = &addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static 
            unsafe void Variant(UInt32 id, Int16* addr)
            {
                Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantsvEXT")]
            public static 
            unsafe void Variant(Int32 id, Int16* addr)
            {
                Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static 
            void Variant(UInt32 id, Int32[] addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static 
            void Variant(Int32 id, Int32[] addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static 
            void Variant(UInt32 id, ref Int32 addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = &addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static 
            void Variant(Int32 id, ref Int32 addr)
            {
                unsafe
                {
                    fixed (Int32* addr_ptr = &addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static 
            unsafe void Variant(UInt32 id, Int32* addr)
            {
                Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantivEXT")]
            public static 
            unsafe void Variant(Int32 id, Int32* addr)
            {
                Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static 
            void Variant(UInt32 id, Single[] addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static 
            void Variant(Int32 id, Single[] addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static 
            void Variant(UInt32 id, ref Single addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = &addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static 
            void Variant(Int32 id, ref Single addr)
            {
                unsafe
                {
                    fixed (Single* addr_ptr = &addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static 
            unsafe void Variant(UInt32 id, Single* addr)
            {
                Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantfvEXT")]
            public static 
            unsafe void Variant(Int32 id, Single* addr)
            {
                Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static 
            void Variant(UInt32 id, Double[] addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static 
            void Variant(Int32 id, Double[] addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static 
            void Variant(UInt32 id, ref Double addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = &addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static 
            void Variant(Int32 id, ref Double addr)
            {
                unsafe
                {
                    fixed (Double* addr_ptr = &addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static 
            unsafe void Variant(UInt32 id, Double* addr)
            {
                Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantdvEXT")]
            public static 
            unsafe void Variant(Int32 id, Double* addr)
            {
                Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static 
            void Variant(UInt32 id, Byte[] addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static 
            void Variant(Int32 id, Byte[] addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static 
            void Variant(UInt32 id, ref Byte addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = &addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static 
            void Variant(Int32 id, ref Byte addr)
            {
                unsafe
                {
                    fixed (Byte* addr_ptr = &addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static 
            unsafe void Variant(UInt32 id, Byte* addr)
            {
                Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantubvEXT")]
            public static 
            unsafe void Variant(Int32 id, Byte* addr)
            {
                Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static 
            void Variant(UInt32 id, UInt16[] addr)
            {
                unsafe
                {
                    fixed (UInt16* addr_ptr = addr)
                    {
                        Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static 
            void Variant(UInt32 id, ref UInt16 addr)
            {
                unsafe
                {
                    fixed (UInt16* addr_ptr = &addr)
                    {
                        Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantusvEXT")]
            public static 
            unsafe void Variant(UInt32 id, UInt16* addr)
            {
                Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static 
            void Variant(UInt32 id, UInt32[] addr)
            {
                unsafe
                {
                    fixed (UInt32* addr_ptr = addr)
                    {
                        Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static 
            void Variant(UInt32 id, ref UInt32 addr)
            {
                unsafe
                {
                    fixed (UInt32* addr_ptr = &addr)
                    {
                        Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantuivEXT")]
            public static 
            unsafe void Variant(UInt32 id, UInt32* addr)
            {
                Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static 
            void VariantPointer(UInt32 id, OpenTK.Graphics.ExtVertexShader type, UInt32 stride, IntPtr addr)
            {
                unsafe
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr);
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static 
            void VariantPointer(Int32 id, OpenTK.Graphics.ExtVertexShader type, Int32 stride, IntPtr addr)
            {
                unsafe
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static 
            void VariantPointer(UInt32 id, OpenTK.Graphics.ExtVertexShader type, UInt32 stride, [In, Out] object addr)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glVariantPointerEXT")]
            public static 
            void VariantPointer(Int32 id, OpenTK.Graphics.ExtVertexShader type, Int32 stride, [In, Out] object addr)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glEnableVariantClientStateEXT")]
            public static 
            void EnableVariantClientState(UInt32 id)
            {
                Delegates.glEnableVariantClientStateEXT((UInt32)id);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glEnableVariantClientStateEXT")]
            public static 
            void EnableVariantClientState(Int32 id)
            {
                Delegates.glEnableVariantClientStateEXT((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glDisableVariantClientStateEXT")]
            public static 
            void DisableVariantClientState(UInt32 id)
            {
                Delegates.glDisableVariantClientStateEXT((UInt32)id);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glDisableVariantClientStateEXT")]
            public static 
            void DisableVariantClientState(Int32 id)
            {
                Delegates.glDisableVariantClientStateEXT((UInt32)id);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBindLightParameterEXT")]
            public static 
            Int32 BindLightParameter(OpenTK.Graphics.LightName light, OpenTK.Graphics.LightParameter value)
            {
                return Delegates.glBindLightParameterEXT((OpenTK.Graphics.LightName)light, (OpenTK.Graphics.LightParameter)value);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBindMaterialParameterEXT")]
            public static 
            Int32 BindMaterialParameter(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter value)
            {
                return Delegates.glBindMaterialParameterEXT((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)value);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBindTexGenParameterEXT")]
            public static 
            Int32 BindTexGenParameter(OpenTK.Graphics.TextureUnit unit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter value)
            {
                return Delegates.glBindTexGenParameterEXT((OpenTK.Graphics.TextureUnit)unit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)value);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBindTextureUnitParameterEXT")]
            public static 
            Int32 BindTextureUnitParameter(OpenTK.Graphics.TextureUnit unit, OpenTK.Graphics.ExtVertexShader value)
            {
                return Delegates.glBindTextureUnitParameterEXT((OpenTK.Graphics.TextureUnit)unit, (OpenTK.Graphics.ExtVertexShader)value);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glBindParameterEXT")]
            public static 
            Int32 BindParameter(OpenTK.Graphics.ExtVertexShader value)
            {
                return Delegates.glBindParameterEXT((OpenTK.Graphics.ExtVertexShader)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glIsVariantEnabledEXT")]
            public static 
            bool IsVariantEnabled(UInt32 id, OpenTK.Graphics.ExtVertexShader cap)
            {
                return Delegates.glIsVariantEnabledEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)cap);
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glIsVariantEnabledEXT")]
            public static 
            bool IsVariantEnabled(Int32 id, OpenTK.Graphics.ExtVertexShader cap)
            {
                return Delegates.glIsVariantEnabledEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)cap);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static 
            void GetVariantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static 
            void GetVariantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static 
            void GetVariantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static 
            void GetVariantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static 
            unsafe void GetVariantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool* data)
            {
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantBooleanvEXT")]
            public static 
            unsafe void GetVariantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool* data)
            {
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static 
            void GetVariantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static 
            void GetVariantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static 
            void GetVariantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static 
            void GetVariantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static 
            unsafe void GetVariantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32* data)
            {
                Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantIntegervEXT")]
            public static 
            unsafe void GetVariantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32* data)
            {
                Delegates.glGetVariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static 
            void GetVariantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static 
            void GetVariantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static 
            void GetVariantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static 
            void GetVariantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static 
            unsafe void GetVariantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single* data)
            {
                Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantFloatvEXT")]
            public static 
            unsafe void GetVariantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single* data)
            {
                Delegates.glGetVariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static 
            void GetVariantPointer(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static 
            void GetVariantPointer(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (IntPtr)data);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static 
            void GetVariantPointer(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetVariantPointervEXT")]
            public static 
            void GetVariantPointer(Int32 id, OpenTK.Graphics.ExtVertexShader value, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static 
            void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static 
            void GetInvariantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static 
            void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static 
            void GetInvariantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static 
            unsafe void GetInvariantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool* data)
            {
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantBooleanvEXT")]
            public static 
            unsafe void GetInvariantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool* data)
            {
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static 
            void GetInvariantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static 
            void GetInvariantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static 
            void GetInvariantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static 
            void GetInvariantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static 
            unsafe void GetInvariantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32* data)
            {
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantIntegervEXT")]
            public static 
            unsafe void GetInvariantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32* data)
            {
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static 
            void GetInvariantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static 
            void GetInvariantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static 
            void GetInvariantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static 
            void GetInvariantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static 
            unsafe void GetInvariantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single* data)
            {
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetInvariantFloatvEXT")]
            public static 
            unsafe void GetInvariantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single* data)
            {
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static 
            void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static 
            void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static 
            void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static 
            void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static 
            unsafe void GetLocalConstantBoolean(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool* data)
            {
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantBooleanvEXT")]
            public static 
            unsafe void GetLocalConstantBoolean(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] bool* data)
            {
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static 
            void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static 
            void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static 
            void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static 
            void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static 
            unsafe void GetLocalConstantInteger(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32* data)
            {
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantIntegervEXT")]
            public static 
            unsafe void GetLocalConstantInteger(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Int32* data)
            {
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static 
            void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static 
            void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static 
            void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static 
            void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static 
            unsafe void GetLocalConstantFloat(UInt32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single* data)
            {
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtVertexShader", Version = "1.2", EntryPoint = "glGetLocalConstantFloatvEXT")]
            public static 
            unsafe void GetLocalConstantFloat(Int32 id, OpenTK.Graphics.ExtVertexShader value, [Out] Single* data)
            {
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (OpenTK.Graphics.ExtVertexShader)value, (Single*)data);
            }

            [AutoGenerated(Category = "ExtStencilTwoSide", Version = "1.3", EntryPoint = "glActiveStencilFaceEXT")]
            public static 
            void ActiveStencilFace(OpenTK.Graphics.ExtStencilTwoSide face)
            {
                Delegates.glActiveStencilFaceEXT((OpenTK.Graphics.ExtStencilTwoSide)face);
            }

            [AutoGenerated(Category = "ExtDepthBoundsTest", Version = "1.2", EntryPoint = "glDepthBoundsEXT")]
            public static 
            void DepthBounds(Double zmin, Double zmax)
            {
                Delegates.glDepthBoundsEXT((Double)zmin, (Double)zmax);
            }

            [AutoGenerated(Category = "ExtBlendEquationSeparate", Version = "1.2", EntryPoint = "glBlendEquationSeparateEXT")]
            public static 
            void BlendEquationSeparate(OpenTK.Graphics.ExtBlendEquationSeparate modeRGB, OpenTK.Graphics.ExtBlendEquationSeparate modeAlpha)
            {
                Delegates.glBlendEquationSeparateEXT((OpenTK.Graphics.ExtBlendEquationSeparate)modeRGB, (OpenTK.Graphics.ExtBlendEquationSeparate)modeAlpha);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glIsRenderbufferEXT")]
            public static 
            bool IsRenderbuffer(UInt32 renderbuffer)
            {
                return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glIsRenderbufferEXT")]
            public static 
            bool IsRenderbuffer(Int32 renderbuffer)
            {
                return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glBindRenderbufferEXT")]
            public static 
            void BindRenderbuffer(OpenTK.Graphics.RenderbufferTarget target, UInt32 renderbuffer)
            {
                Delegates.glBindRenderbufferEXT((OpenTK.Graphics.RenderbufferTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glBindRenderbufferEXT")]
            public static 
            void BindRenderbuffer(OpenTK.Graphics.RenderbufferTarget target, Int32 renderbuffer)
            {
                Delegates.glBindRenderbufferEXT((OpenTK.Graphics.RenderbufferTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static 
            void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static 
            void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static 
            void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static 
            void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static 
            unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
            {
                Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteRenderbuffersEXT")]
            public static 
            unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
            {
                Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static 
            void GenRenderbuffers(Int32 n, [Out] UInt32[] renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static 
            void GenRenderbuffers(Int32 n, [Out] Int32[] renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static 
            void GenRenderbuffers(Int32 n, [Out] out UInt32 renderbuffers)
            {
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static 
            void GenRenderbuffers(Int32 n, [Out] out Int32 renderbuffers)
            {
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static 
            unsafe void GenRenderbuffers(Int32 n, [Out] UInt32* renderbuffers)
            {
                Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenRenderbuffersEXT")]
            public static 
            unsafe void GenRenderbuffers(Int32 n, [Out] Int32* renderbuffers)
            {
                Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glRenderbufferStorageEXT")]
            public static 
            void RenderbufferStorage(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferStorage internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageEXT((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static 
            void GetRenderbufferParameter(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static 
            void GetRenderbufferParameter(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferParameterName pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGetRenderbufferParameterivEXT")]
            public static 
            unsafe void GetRenderbufferParameter(OpenTK.Graphics.RenderbufferTarget target, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32* @params)
            {
                Delegates.glGetRenderbufferParameterivEXT((OpenTK.Graphics.RenderbufferTarget)target, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glIsFramebufferEXT")]
            public static 
            bool IsFramebuffer(UInt32 framebuffer)
            {
                return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glIsFramebufferEXT")]
            public static 
            bool IsFramebuffer(Int32 framebuffer)
            {
                return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glBindFramebufferEXT")]
            public static 
            void BindFramebuffer(OpenTK.Graphics.FramebufferTarget target, UInt32 framebuffer)
            {
                Delegates.glBindFramebufferEXT((OpenTK.Graphics.FramebufferTarget)target, (UInt32)framebuffer);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glBindFramebufferEXT")]
            public static 
            void BindFramebuffer(OpenTK.Graphics.FramebufferTarget target, Int32 framebuffer)
            {
                Delegates.glBindFramebufferEXT((OpenTK.Graphics.FramebufferTarget)target, (UInt32)framebuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static 
            void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static 
            void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static 
            void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static 
            void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static 
            unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
            {
                Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glDeleteFramebuffersEXT")]
            public static 
            unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
            {
                Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static 
            void GenFramebuffers(Int32 n, [Out] UInt32[] framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static 
            void GenFramebuffers(Int32 n, [Out] Int32[] framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static 
            void GenFramebuffers(Int32 n, [Out] out UInt32 framebuffers)
            {
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static 
            void GenFramebuffers(Int32 n, [Out] out Int32 framebuffers)
            {
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static 
            unsafe void GenFramebuffers(Int32 n, [Out] UInt32* framebuffers)
            {
                Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenFramebuffersEXT")]
            public static 
            unsafe void GenFramebuffers(Int32 n, [Out] Int32* framebuffers)
            {
                Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glCheckFramebufferStatusEXT")]
            public static 
            OpenTK.Graphics.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.FramebufferTarget target)
            {
                return Delegates.glCheckFramebufferStatusEXT((OpenTK.Graphics.FramebufferTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferTexture1DEXT")]
            public static 
            void FramebufferTexture1D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture1DEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferTexture1DEXT")]
            public static 
            void FramebufferTexture1D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture1DEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferTexture2DEXT")]
            public static 
            void FramebufferTexture2D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture2DEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferTexture2DEXT")]
            public static 
            void FramebufferTexture2D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTexture2DEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferTexture3DEXT")]
            public static 
            void FramebufferTexture3D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glFramebufferTexture3DEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferTexture3DEXT")]
            public static 
            void FramebufferTexture3D(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glFramebufferTexture3DEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferRenderbufferEXT")]
            public static 
            void FramebufferRenderbuffer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
            {
                Delegates.glFramebufferRenderbufferEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glFramebufferRenderbufferEXT")]
            public static 
            void FramebufferRenderbuffer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
            {
                Delegates.glFramebufferRenderbufferEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static 
            void GetFramebufferAttachmentParameter(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.FramebufferParameterName pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static 
            void GetFramebufferAttachmentParameter(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.FramebufferParameterName pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.FramebufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
            public static 
            unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.FramebufferParameterName pname, [Out] Int32* @params)
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.FramebufferParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtFramebufferObject", Version = "1.2", EntryPoint = "glGenerateMipmapEXT")]
            public static 
            void GenerateMipmap(OpenTK.Graphics.GenerateMipmapTarget target)
            {
                Delegates.glGenerateMipmapEXT((OpenTK.Graphics.GenerateMipmapTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtStencilClearTag", Version = "1.5", EntryPoint = "glStencilClearTagEXT")]
            public static 
            void StencilClearTag(Int32 stencilTagBits, UInt32 stencilClearTag)
            {
                Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
            }

            [AutoGenerated(Category = "ExtStencilClearTag", Version = "1.5", EntryPoint = "glStencilClearTagEXT")]
            public static 
            void StencilClearTag(Int32 stencilTagBits, Int32 stencilClearTag)
            {
                Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
            }

            [AutoGenerated(Category = "ExtFramebufferBlit", Version = "1.5", EntryPoint = "glBlitFramebufferEXT")]
            public static 
            void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ClearBufferMask mask, OpenTK.Graphics.ExtFramebufferBlit filter)
            {
                Delegates.glBlitFramebufferEXT((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (OpenTK.Graphics.ClearBufferMask)mask, (OpenTK.Graphics.ExtFramebufferBlit)filter);
            }

            [AutoGenerated(Category = "ExtFramebufferMultisample", Version = "1.5", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static 
            void RenderbufferStorageMultisample(OpenTK.Graphics.ExtFramebufferMultisample target, Int32 samples, OpenTK.Graphics.ExtFramebufferMultisample internalformat, Int32 width, Int32 height)
            {
                Delegates.glRenderbufferStorageMultisampleEXT((OpenTK.Graphics.ExtFramebufferMultisample)target, (Int32)samples, (OpenTK.Graphics.ExtFramebufferMultisample)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static 
            void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (Int64*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static 
            void GetQueryObjecti64(Int32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (Int64*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static 
            void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static 
            void GetQueryObjecti64(Int32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static 
            unsafe void GetQueryObjecti64(UInt32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] Int64* @params)
            {
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (Int64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjecti64vEXT")]
            public static 
            unsafe void GetQueryObjecti64(Int32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] Int64* @params)
            {
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (Int64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static 
            void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] UInt64[] @params)
            {
                unsafe
                {
                    fixed (UInt64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static 
            void GetQueryObjectui64(Int32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] Int64[] @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static 
            void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] out UInt64 @params)
            {
                unsafe
                {
                    fixed (UInt64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static 
            void GetQueryObjectui64(Int32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] out Int64 @params)
            {
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static 
            unsafe void GetQueryObjectui64(UInt32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] UInt64* @params)
            {
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (UInt64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTimerQuery", Version = "1.5", EntryPoint = "glGetQueryObjectui64vEXT")]
            public static 
            unsafe void GetQueryObjectui64(Int32 id, OpenTK.Graphics.ExtTimerQuery pname, [Out] Int64* @params)
            {
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (OpenTK.Graphics.ExtTimerQuery)pname, (UInt64*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static 
            void ProgramEnvParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static 
            void ProgramEnvParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static 
            void ProgramEnvParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static 
            void ProgramEnvParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static 
            unsafe void ProgramEnvParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramEnvParameters4fvEXT")]
            public static 
            unsafe void ProgramEnvParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramEnvParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static 
            void ProgramLocalParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static 
            void ProgramLocalParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static 
            void ProgramLocalParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static 
            void ProgramLocalParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static 
            unsafe void ProgramLocalParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuProgramParameters", Version = "1.2", EntryPoint = "glProgramLocalParameters4fvEXT")]
            public static 
            unsafe void ProgramLocalParameters4(OpenTK.Graphics.ExtGpuProgramParameters target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glProgramLocalParameters4fvEXT((OpenTK.Graphics.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGeometryProgram4", Version = "2.0", EntryPoint = "glFramebufferTextureEXT")]
            public static 
            void FramebufferTexture(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "NvGeometryProgram4", Version = "2.0", EntryPoint = "glFramebufferTextureEXT")]
            public static 
            void FramebufferTexture(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                Delegates.glFramebufferTextureEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGeometryProgram4", Version = "2.0", EntryPoint = "glFramebufferTextureLayerEXT")]
            public static 
            void FramebufferTextureLayer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "NvGeometryProgram4", Version = "2.0", EntryPoint = "glFramebufferTextureLayerEXT")]
            public static 
            void FramebufferTextureLayer(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glFramebufferTextureLayerEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvGeometryProgram4", Version = "2.0", EntryPoint = "glFramebufferTextureFaceEXT")]
            public static 
            void FramebufferTextureFace(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, OpenTK.Graphics.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.TextureTarget)face);
            }

            [AutoGenerated(Category = "NvGeometryProgram4", Version = "2.0", EntryPoint = "glFramebufferTextureFaceEXT")]
            public static 
            void FramebufferTextureFace(OpenTK.Graphics.FramebufferTarget target, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, OpenTK.Graphics.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceEXT((OpenTK.Graphics.FramebufferTarget)target, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGeometryShader4", Version = "2.0", EntryPoint = "glProgramParameteriEXT")]
            public static 
            void ProgramParameter(UInt32 program, OpenTK.Graphics.ExtGeometryShader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriEXT((UInt32)program, (OpenTK.Graphics.ExtGeometryShader4)pname, (Int32)value);
            }

            [AutoGenerated(Category = "ExtGeometryShader4", Version = "2.0", EntryPoint = "glProgramParameteriEXT")]
            public static 
            void ProgramParameter(Int32 program, OpenTK.Graphics.ExtGeometryShader4 pname, Int32 value)
            {
                Delegates.glProgramParameteriEXT((UInt32)program, (OpenTK.Graphics.ExtGeometryShader4)pname, (Int32)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1iEXT")]
            public static 
            void VertexAttribI1(UInt32 index, Int32 x)
            {
                Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1iEXT")]
            public static 
            void VertexAttribI1(Int32 index, Int32 x)
            {
                Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2iEXT")]
            public static 
            void VertexAttribI2(UInt32 index, Int32 x, Int32 y)
            {
                Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2iEXT")]
            public static 
            void VertexAttribI2(Int32 index, Int32 x, Int32 y)
            {
                Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3iEXT")]
            public static 
            void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z)
            {
                Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3iEXT")]
            public static 
            void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z)
            {
                Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4iEXT")]
            public static 
            void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4iEXT")]
            public static 
            void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1uiEXT")]
            public static 
            void VertexAttribI1(UInt32 index, UInt32 x)
            {
                Delegates.glVertexAttribI1uiEXT((UInt32)index, (UInt32)x);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2uiEXT")]
            public static 
            void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y)
            {
                Delegates.glVertexAttribI2uiEXT((UInt32)index, (UInt32)x, (UInt32)y);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3uiEXT")]
            public static 
            void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
            {
                Delegates.glVertexAttribI3uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4uiEXT")]
            public static 
            void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                Delegates.glVertexAttribI4uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static 
            void VertexAttribI1v(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static 
            void VertexAttribI1v(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static 
            void VertexAttribI1v(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static 
            void VertexAttribI1v(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static 
            unsafe void VertexAttribI1v(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1ivEXT")]
            public static 
            unsafe void VertexAttribI1v(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static 
            void VertexAttribI2(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static 
            void VertexAttribI2(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static 
            void VertexAttribI2(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static 
            void VertexAttribI2(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static 
            unsafe void VertexAttribI2(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2ivEXT")]
            public static 
            unsafe void VertexAttribI2(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static 
            void VertexAttribI3(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static 
            void VertexAttribI3(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static 
            void VertexAttribI3(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static 
            void VertexAttribI3(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static 
            unsafe void VertexAttribI3(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3ivEXT")]
            public static 
            unsafe void VertexAttribI3(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static 
            void VertexAttribI4(UInt32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static 
            void VertexAttribI4(Int32 index, Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static 
            void VertexAttribI4(UInt32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static 
            void VertexAttribI4(Int32 index, ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static 
            unsafe void VertexAttribI4(UInt32 index, Int32* v)
            {
                Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ivEXT")]
            public static 
            unsafe void VertexAttribI4(Int32 index, Int32* v)
            {
                Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1uivEXT")]
            public static 
            void VertexAttribI1v(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1uivEXT")]
            public static 
            void VertexAttribI1v(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI1uivEXT")]
            public static 
            unsafe void VertexAttribI1v(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2uivEXT")]
            public static 
            void VertexAttribI2(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2uivEXT")]
            public static 
            void VertexAttribI2(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI2uivEXT")]
            public static 
            unsafe void VertexAttribI2(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3uivEXT")]
            public static 
            void VertexAttribI3(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3uivEXT")]
            public static 
            void VertexAttribI3(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI3uivEXT")]
            public static 
            unsafe void VertexAttribI3(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4uivEXT")]
            public static 
            void VertexAttribI4(UInt32 index, UInt32[] v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4uivEXT")]
            public static 
            void VertexAttribI4(UInt32 index, ref UInt32 v)
            {
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4uivEXT")]
            public static 
            unsafe void VertexAttribI4(UInt32 index, UInt32* v)
            {
                Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4bvEXT")]
            public static 
            void VertexAttribI4(UInt32 index, SByte[] v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4bvEXT")]
            public static 
            void VertexAttribI4(UInt32 index, ref SByte v)
            {
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4bvEXT")]
            public static 
            unsafe void VertexAttribI4(UInt32 index, SByte* v)
            {
                Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static 
            void VertexAttribI4(UInt32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static 
            void VertexAttribI4(Int32 index, Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static 
            void VertexAttribI4(UInt32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static 
            void VertexAttribI4(Int32 index, ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static 
            unsafe void VertexAttribI4(UInt32 index, Int16* v)
            {
                Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4svEXT")]
            public static 
            unsafe void VertexAttribI4(Int32 index, Int16* v)
            {
                Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static 
            void VertexAttribI4(UInt32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static 
            void VertexAttribI4(Int32 index, Byte[] v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static 
            void VertexAttribI4(UInt32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static 
            void VertexAttribI4(Int32 index, ref Byte v)
            {
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static 
            unsafe void VertexAttribI4(UInt32 index, Byte* v)
            {
                Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4ubvEXT")]
            public static 
            unsafe void VertexAttribI4(Int32 index, Byte* v)
            {
                Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4usvEXT")]
            public static 
            void VertexAttribI4(UInt32 index, UInt16[] v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4usvEXT")]
            public static 
            void VertexAttribI4(UInt32 index, ref UInt16 v)
            {
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribI4usvEXT")]
            public static 
            unsafe void VertexAttribI4(UInt32 index, UInt16* v)
            {
                Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static 
            void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.NvVertexProgram4 type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static 
            void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.NvVertexProgram4 type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static 
            void VertexAttribIPointer(UInt32 index, Int32 size, OpenTK.Graphics.NvVertexProgram4 type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glVertexAttribIPointerEXT")]
            public static 
            void VertexAttribIPointer(Int32 index, Int32 size, OpenTK.Graphics.NvVertexProgram4 type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (OpenTK.Graphics.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static 
            void GetVertexAttribI(UInt32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static 
            void GetVertexAttribI(Int32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static 
            void GetVertexAttribI(UInt32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static 
            void GetVertexAttribI(Int32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static 
            unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIivEXT")]
            public static 
            unsafe void GetVertexAttribI(Int32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIuivEXT")]
            public static 
            void GetVertexAttribI(UInt32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribIuivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIuivEXT")]
            public static 
            void GetVertexAttribI(UInt32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIuivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "NvVertexProgram4", Version = "", EntryPoint = "glGetVertexAttribIuivEXT")]
            public static 
            unsafe void GetVertexAttribI(UInt32 index, OpenTK.Graphics.NvVertexProgram4 pname, [Out] UInt32* @params)
            {
                Delegates.glGetVertexAttribIuivEXT((UInt32)index, (OpenTK.Graphics.NvVertexProgram4)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static 
            void GetUniform(UInt32 program, Int32 location, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static 
            void GetUniform(Int32 program, Int32 location, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static 
            void GetUniform(UInt32 program, Int32 location, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static 
            void GetUniform(Int32 program, Int32 location, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static 
            unsafe void GetUniform(UInt32 program, Int32 location, [Out] UInt32* @params)
            {
                Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetUniformuivEXT")]
            public static 
            unsafe void GetUniform(Int32 program, Int32 location, [Out] Int32* @params)
            {
                Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glBindFragDataLocationEXT")]
            public static 
            void BindFragDataLocation(UInt32 program, UInt32 color, System.String name)
            {
                Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (System.String)name);
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glBindFragDataLocationEXT")]
            public static 
            void BindFragDataLocation(Int32 program, Int32 color, System.String name)
            {
                Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, (System.String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetFragDataLocationEXT")]
            public static 
            Int32 GetFragDataLocation(UInt32 program, System.String name)
            {
                return Delegates.glGetFragDataLocationEXT((UInt32)program, (System.String)name);
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glGetFragDataLocationEXT")]
            public static 
            Int32 GetFragDataLocation(Int32 program, System.String name)
            {
                return Delegates.glGetFragDataLocationEXT((UInt32)program, (System.String)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uiEXT")]
            public static 
            void Uniform1(Int32 location, UInt32 v0)
            {
                Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uiEXT")]
            public static 
            void Uniform1(Int32 location, Int32 v0)
            {
                Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uiEXT")]
            public static 
            void Uniform2(Int32 location, UInt32 v0, UInt32 v1)
            {
                Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uiEXT")]
            public static 
            void Uniform2(Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uiEXT")]
            public static 
            void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
            {
                Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uiEXT")]
            public static 
            void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uiEXT")]
            public static 
            void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
            {
                Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uiEXT")]
            public static 
            void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static 
            void Uniform1(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static 
            void Uniform1(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static 
            void Uniform1(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static 
            void Uniform1(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static 
            unsafe void Uniform1(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform1uivEXT")]
            public static 
            unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static 
            void Uniform2v(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static 
            void Uniform2v(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static 
            void Uniform2v(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static 
            void Uniform2v(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static 
            unsafe void Uniform2v(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform2uivEXT")]
            public static 
            unsafe void Uniform2v(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static 
            void Uniform3(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static 
            void Uniform3(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static 
            void Uniform3(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static 
            void Uniform3(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static 
            unsafe void Uniform3(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform3uivEXT")]
            public static 
            unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static 
            void Uniform4(Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static 
            void Uniform4(Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static 
            void Uniform4(Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static 
            void Uniform4(Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static 
            unsafe void Uniform4(Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtGpuShader4", Version = "2.0", EntryPoint = "glUniform4uivEXT")]
            public static 
            unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
            {
                Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
            }

            [AutoGenerated(Category = "ExtDrawInstanced", Version = "2.0", EntryPoint = "glDrawArraysInstancedEXT")]
            public static 
            void DrawArraysInstance(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 count, Int32 primcount)
            {
                Delegates.glDrawArraysInstancedEXT((OpenTK.Graphics.BeginMode)mode, (Int32)start, (Int32)count, (Int32)primcount);
            }

            [AutoGenerated(Category = "ExtDrawInstanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static 
            void DrawElementsInstance(OpenTK.Graphics.BeginMode mode, Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                unsafe
                {
                    Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.BeginMode)mode, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }

            [AutoGenerated(Category = "ExtDrawInstanced", Version = "2.0", EntryPoint = "glDrawElementsInstancedEXT")]
            public static 
            void DrawElementsInstance(OpenTK.Graphics.BeginMode mode, Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedEXT((OpenTK.Graphics.BeginMode)mode, (Int32)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureBufferObject", Version = "2.0", EntryPoint = "glTexBufferEXT")]
            public static 
            void TexBuffer(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ExtTextureBufferObject internalformat, UInt32 buffer)
            {
                Delegates.glTexBufferEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ExtTextureBufferObject)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ExtTextureBufferObject", Version = "2.0", EntryPoint = "glTexBufferEXT")]
            public static 
            void TexBuffer(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ExtTextureBufferObject internalformat, Int32 buffer)
            {
                Delegates.glTexBufferEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ExtTextureBufferObject)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glColorMaskIndexedEXT")]
            public static 
            void ColorMaskIndexe(UInt32 index, bool r, bool g, bool b, bool a)
            {
                Delegates.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glColorMaskIndexedEXT")]
            public static 
            void ColorMaskIndexe(Int32 index, bool r, bool g, bool b, bool a)
            {
                Delegates.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static 
            void GetBooleanIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static 
            void GetBooleanIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index, [Out] bool[] data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static 
            void GetBooleanIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static 
            void GetBooleanIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index, [Out] out bool data)
            {
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static 
            unsafe void GetBooleanIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index, [Out] bool* data)
            {
                Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetBooleanIndexedvEXT")]
            public static 
            unsafe void GetBooleanIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index, [Out] bool* data)
            {
                Delegates.glGetBooleanIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (bool*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static 
            void GetIntegerIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static 
            void GetIntegerIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index, [Out] Int32[] data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static 
            void GetIntegerIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static 
            void GetIntegerIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index, [Out] out Int32 data)
            {
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static 
            unsafe void GetIntegerIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index, [Out] Int32* data)
            {
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glGetIntegerIndexedvEXT")]
            public static 
            unsafe void GetIntegerIndexed(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index, [Out] Int32* data)
            {
                Delegates.glGetIntegerIndexedvEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glEnableIndexedEXT")]
            public static 
            void EnableIndexe(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index)
            {
                Delegates.glEnableIndexedEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glEnableIndexedEXT")]
            public static 
            void EnableIndexe(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index)
            {
                Delegates.glEnableIndexedEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glDisableIndexedEXT")]
            public static 
            void DisableIndexe(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index)
            {
                Delegates.glDisableIndexedEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glDisableIndexedEXT")]
            public static 
            void DisableIndexe(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index)
            {
                Delegates.glDisableIndexedEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glIsEnabledIndexedEXT")]
            public static 
            bool IsEnabledIndexe(OpenTK.Graphics.ExtDrawBuffers2 target, UInt32 index)
            {
                return Delegates.glIsEnabledIndexedEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index);
            }

            [AutoGenerated(Category = "ExtDrawBuffers2", Version = "2.0", EntryPoint = "glIsEnabledIndexedEXT")]
            public static 
            bool IsEnabledIndexe(OpenTK.Graphics.ExtDrawBuffers2 target, Int32 index)
            {
                return Delegates.glIsEnabledIndexedEXT((OpenTK.Graphics.ExtDrawBuffers2)target, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtBindableUniform", Version = "2.0", EntryPoint = "glUniformBufferEXT")]
            public static 
            void UniformBuffer(UInt32 program, Int32 location, UInt32 buffer)
            {
                Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ExtBindableUniform", Version = "2.0", EntryPoint = "glUniformBufferEXT")]
            public static 
            void UniformBuffer(Int32 program, Int32 location, Int32 buffer)
            {
                Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtBindableUniform", Version = "2.0", EntryPoint = "glGetUniformBufferSizeEXT")]
            public static 
            Int32 GetUniformBufferSize(UInt32 program, Int32 location)
            {
                return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
            }

            [AutoGenerated(Category = "ExtBindableUniform", Version = "2.0", EntryPoint = "glGetUniformBufferSizeEXT")]
            public static 
            Int32 GetUniformBufferSize(Int32 program, Int32 location)
            {
                return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtBindableUniform", Version = "2.0", EntryPoint = "glGetUniformOffsetEXT")]
            public static 
            IntPtr GetUniformOffset(UInt32 program, Int32 location)
            {
                return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
            }

            [AutoGenerated(Category = "ExtBindableUniform", Version = "2.0", EntryPoint = "glGetUniformOffsetEXT")]
            public static 
            IntPtr GetUniformOffset(Int32 program, Int32 location)
            {
                return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
            }

            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static 
            void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static 
            void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glTexParameterIivEXT")]
            public static 
            unsafe void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTexParameterIivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static 
            void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIuivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static 
            void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIuivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glTexParameterIuivEXT")]
            public static 
            unsafe void TexParameterIv(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32* @params)
            {
                Delegates.glTexParameterIuivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static 
            void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static 
            void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glGetTexParameterIivEXT")]
            public static 
            unsafe void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetTexParameterIivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static 
            void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static 
            void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glGetTexParameterIuivEXT")]
            public static 
            unsafe void GetTexParameterI(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32* @params)
            {
                Delegates.glGetTexParameterIuivEXT((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glClearColorIiEXT")]
            public static 
            void ClearColorI(Int32 red, Int32 green, Int32 blue, Int32 alpha)
            {
                Delegates.glClearColorIiEXT((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTextureInteger", Version = "2.0", EntryPoint = "glClearColorIuiEXT")]
            public static 
            void ClearColorI(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
            {
                Delegates.glClearColorIuiEXT((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glBeginTransformFeedbackEXT")]
            public static 
            void BeginTransformFeedback(OpenTK.Graphics.ExtTransformFeedback primitiveMode)
            {
                Delegates.glBeginTransformFeedbackEXT((OpenTK.Graphics.ExtTransformFeedback)primitiveMode);
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glEndTransformFeedbackEXT")]
            public static 
            void EndTransformFeedback()
            {
                Delegates.glEndTransformFeedbackEXT();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glBindBufferRangeEXT")]
            public static 
            void BindBufferRange(OpenTK.Graphics.ExtTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeEXT((OpenTK.Graphics.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glBindBufferRangeEXT")]
            public static 
            void BindBufferRange(OpenTK.Graphics.ExtTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
            {
                Delegates.glBindBufferRangeEXT((OpenTK.Graphics.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glBindBufferOffsetEXT")]
            public static 
            void BindBufferOffset(OpenTK.Graphics.ExtTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetEXT((OpenTK.Graphics.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glBindBufferOffsetEXT")]
            public static 
            void BindBufferOffset(OpenTK.Graphics.ExtTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset)
            {
                Delegates.glBindBufferOffsetEXT((OpenTK.Graphics.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glBindBufferBaseEXT")]
            public static 
            void BindBufferBase(OpenTK.Graphics.ExtTransformFeedback target, UInt32 index, UInt32 buffer)
            {
                Delegates.glBindBufferBaseEXT((OpenTK.Graphics.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glBindBufferBaseEXT")]
            public static 
            void BindBufferBase(OpenTK.Graphics.ExtTransformFeedback target, Int32 index, Int32 buffer)
            {
                Delegates.glBindBufferBaseEXT((OpenTK.Graphics.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static 
            void TransformFeedbackVarying(UInt32 program, Int32 count, Int32[] locations, OpenTK.Graphics.ExtTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = locations)
                    {
                        Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.ExtTransformFeedback)bufferMode);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static 
            void TransformFeedbackVarying(Int32 program, Int32 count, Int32[] locations, OpenTK.Graphics.ExtTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = locations)
                    {
                        Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.ExtTransformFeedback)bufferMode);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static 
            void TransformFeedbackVarying(UInt32 program, Int32 count, ref Int32 locations, OpenTK.Graphics.ExtTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = &locations)
                    {
                        Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.ExtTransformFeedback)bufferMode);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static 
            void TransformFeedbackVarying(Int32 program, Int32 count, ref Int32 locations, OpenTK.Graphics.ExtTransformFeedback bufferMode)
            {
                unsafe
                {
                    fixed (Int32* locations_ptr = &locations)
                    {
                        Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (Int32*)locations_ptr, (OpenTK.Graphics.ExtTransformFeedback)bufferMode);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static 
            unsafe void TransformFeedbackVarying(UInt32 program, Int32 count, Int32* locations, OpenTK.Graphics.ExtTransformFeedback bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (Int32*)locations, (OpenTK.Graphics.ExtTransformFeedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glTransformFeedbackVaryingsEXT")]
            public static 
            unsafe void TransformFeedbackVarying(Int32 program, Int32 count, Int32* locations, OpenTK.Graphics.ExtTransformFeedback bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, (Int32*)locations, (OpenTK.Graphics.ExtTransformFeedback)bufferMode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static 
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] Int32[] location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = location)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static 
            void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] Int32[] location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = location)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static 
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] out Int32 location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = &location)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                        location = *location_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static 
            void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] out Int32 location)
            {
                unsafe
                {
                    fixed (Int32* location_ptr = &location)
                    {
                        Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                        location = *location_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static 
            unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, [Out] Int32* location)
            {
                Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32*)location);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtTransformFeedback", Version = "2.0", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
            public static 
            unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, [Out] Int32* location)
            {
                Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32*)location);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glClientAttribDefaultEXT")]
            public static 
            void ClientAttribDefault(OpenTK.Graphics.ClientAttribMask mask)
            {
                Delegates.glClientAttribDefaultEXT((OpenTK.Graphics.ClientAttribMask)mask);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glPushClientAttribDefaultEXT")]
            public static 
            void PushClientAttribDefault(OpenTK.Graphics.ClientAttribMask mask)
            {
                Delegates.glPushClientAttribDefaultEXT((OpenTK.Graphics.ClientAttribMask)mask);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static 
            void MatrixLoad(OpenTK.Graphics.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadfEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static 
            void MatrixLoad(OpenTK.Graphics.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadfEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadfEXT")]
            public static 
            unsafe void MatrixLoad(OpenTK.Graphics.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixLoadfEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static 
            void MatrixLoad(OpenTK.Graphics.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoaddEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static 
            void MatrixLoad(OpenTK.Graphics.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoaddEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoaddEXT")]
            public static 
            unsafe void MatrixLoad(OpenTK.Graphics.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixLoaddEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static 
            void MatrixMult(OpenTK.Graphics.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultfEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static 
            void MatrixMult(OpenTK.Graphics.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultfEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultfEXT")]
            public static 
            unsafe void MatrixMult(OpenTK.Graphics.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixMultfEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static 
            void MatrixMult(OpenTK.Graphics.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultdEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static 
            void MatrixMult(OpenTK.Graphics.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultdEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultdEXT")]
            public static 
            unsafe void MatrixMult(OpenTK.Graphics.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixMultdEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadIdentityEXT")]
            public static 
            void MatrixLoadIdentity(OpenTK.Graphics.MatrixMode mode)
            {
                Delegates.glMatrixLoadIdentityEXT((OpenTK.Graphics.MatrixMode)mode);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixRotatefEXT")]
            public static 
            void MatrixRotate(OpenTK.Graphics.MatrixMode mode, Single angle, Single x, Single y, Single z)
            {
                Delegates.glMatrixRotatefEXT((OpenTK.Graphics.MatrixMode)mode, (Single)angle, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixRotatedEXT")]
            public static 
            void MatrixRotate(OpenTK.Graphics.MatrixMode mode, Double angle, Double x, Double y, Double z)
            {
                Delegates.glMatrixRotatedEXT((OpenTK.Graphics.MatrixMode)mode, (Double)angle, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixScalefEXT")]
            public static 
            void MatrixScale(OpenTK.Graphics.MatrixMode mode, Single x, Single y, Single z)
            {
                Delegates.glMatrixScalefEXT((OpenTK.Graphics.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixScaledEXT")]
            public static 
            void MatrixScale(OpenTK.Graphics.MatrixMode mode, Double x, Double y, Double z)
            {
                Delegates.glMatrixScaledEXT((OpenTK.Graphics.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixTranslatefEXT")]
            public static 
            void MatrixTranslate(OpenTK.Graphics.MatrixMode mode, Single x, Single y, Single z)
            {
                Delegates.glMatrixTranslatefEXT((OpenTK.Graphics.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixTranslatedEXT")]
            public static 
            void MatrixTranslate(OpenTK.Graphics.MatrixMode mode, Double x, Double y, Double z)
            {
                Delegates.glMatrixTranslatedEXT((OpenTK.Graphics.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixFrustumEXT")]
            public static 
            void MatrixFrustum(OpenTK.Graphics.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                Delegates.glMatrixFrustumEXT((OpenTK.Graphics.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixOrthoEXT")]
            public static 
            void MatrixOrtho(OpenTK.Graphics.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                Delegates.glMatrixOrthoEXT((OpenTK.Graphics.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixPopEXT")]
            public static 
            void MatrixPop(OpenTK.Graphics.MatrixMode mode)
            {
                Delegates.glMatrixPopEXT((OpenTK.Graphics.MatrixMode)mode);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixPushEXT")]
            public static 
            void MatrixPush(OpenTK.Graphics.MatrixMode mode)
            {
                Delegates.glMatrixPushEXT((OpenTK.Graphics.MatrixMode)mode);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static 
            void MatrixLoadTranspose(OpenTK.Graphics.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static 
            void MatrixLoadTranspose(OpenTK.Graphics.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadTransposefEXT")]
            public static 
            unsafe void MatrixLoadTranspose(OpenTK.Graphics.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixLoadTransposefEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static 
            void MatrixLoadTranspose(OpenTK.Graphics.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static 
            void MatrixLoadTranspose(OpenTK.Graphics.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixLoadTransposedEXT")]
            public static 
            unsafe void MatrixLoadTranspose(OpenTK.Graphics.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixLoadTransposedEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static 
            void MatrixMultTranspose(OpenTK.Graphics.MatrixMode mode, Single[] m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static 
            void MatrixMultTranspose(OpenTK.Graphics.MatrixMode mode, ref Single m)
            {
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultTransposefEXT")]
            public static 
            unsafe void MatrixMultTranspose(OpenTK.Graphics.MatrixMode mode, Single* m)
            {
                Delegates.glMatrixMultTransposefEXT((OpenTK.Graphics.MatrixMode)mode, (Single*)m);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static 
            void MatrixMultTranspose(OpenTK.Graphics.MatrixMode mode, Double[] m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static 
            void MatrixMultTranspose(OpenTK.Graphics.MatrixMode mode, ref Double m)
            {
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMatrixMultTransposedEXT")]
            public static 
            unsafe void MatrixMultTranspose(OpenTK.Graphics.MatrixMode mode, Double* m)
            {
                Delegates.glMatrixMultTransposedEXT((OpenTK.Graphics.MatrixMode)mode, (Double*)m);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static 
            void TextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single param)
            {
                Delegates.glTextureParameterfEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfEXT")]
            public static 
            void TextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single param)
            {
                Delegates.glTextureParameterfEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static 
            void TextureParameterv(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static 
            void TextureParameterv(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static 
            void TextureParameterv(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static 
            void TextureParameterv(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static 
            unsafe void TextureParameterv(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single* @params)
            {
                Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterfvEXT")]
            public static 
            unsafe void TextureParameterv(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single* @params)
            {
                Delegates.glTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static 
            void TextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32 param)
            {
                Delegates.glTextureParameteriEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameteriEXT")]
            public static 
            void TextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32 param)
            {
                Delegates.glTextureParameteriEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static 
            void TextureParameterv(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static 
            void TextureParameterv(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static 
            void TextureParameterv(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static 
            void TextureParameterv(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static 
            unsafe void TextureParameterv(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterivEXT")]
            public static 
            unsafe void TextureParameterv(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static 
            void TextureImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static 
            void TextureImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static 
            void TextureImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage1DEXT")]
            public static 
            void TextureImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static 
            void TextureImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static 
            void TextureImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static 
            void TextureImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage2DEXT")]
            public static 
            void TextureImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static 
            void TextureSubImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static 
            void TextureSubImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static 
            void TextureSubImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage1DEXT")]
            public static 
            void TextureSubImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static 
            void TextureSubImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static 
            void TextureSubImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static 
            void TextureSubImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage2DEXT")]
            public static 
            void TextureSubImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static 
            void CopyTextureImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureImage1DEXT")]
            public static 
            void CopyTextureImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static 
            void CopyTextureImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureImage2DEXT")]
            public static 
            void CopyTextureImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static 
            void CopyTextureSubImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureSubImage1DEXT")]
            public static 
            void CopyTextureSubImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static 
            void CopyTextureSubImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureSubImage2DEXT")]
            public static 
            void CopyTextureSubImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static 
            void GetTextureImage(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static 
            void GetTextureImage(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static 
            void GetTextureImage(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureImageEXT")]
            public static 
            void GetTextureImage(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static 
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static 
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static 
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static 
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static 
            unsafe void GetTextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
            {
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterfvEXT")]
            public static 
            unsafe void GetTextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
            {
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static 
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static 
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static 
            void GetTextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static 
            void GetTextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static 
            unsafe void GetTextureParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterivEXT")]
            public static 
            unsafe void GetTextureParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static 
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static 
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static 
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static 
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static 
            unsafe void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
            {
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterfvEXT")]
            public static 
            unsafe void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
            {
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static 
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static 
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static 
            void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static 
            void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static 
            unsafe void GetTextureLevelParameter(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureLevelParameterivEXT")]
            public static 
            unsafe void GetTextureLevelParameter(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static 
            void TextureImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static 
            void TextureImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static 
            void TextureImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureImage3DEXT")]
            public static 
            void TextureImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static 
            void TextureSubImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static 
            void TextureSubImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static 
            void TextureSubImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureSubImage3DEXT")]
            public static 
            void TextureSubImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static 
            void CopyTextureSubImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyTextureSubImage3DEXT")]
            public static 
            void CopyTextureSubImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterfEXT")]
            public static 
            void MultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single param)
            {
                Delegates.glMultiTexParameterfEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static 
            void MultiTexParameterv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static 
            void MultiTexParameterv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterfvEXT")]
            public static 
            unsafe void MultiTexParameterv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Single* @params)
            {
                Delegates.glMultiTexParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameteriEXT")]
            public static 
            void MultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32 param)
            {
                Delegates.glMultiTexParameteriEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static 
            void MultiTexParameterv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static 
            void MultiTexParameterv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterivEXT")]
            public static 
            unsafe void MultiTexParameterv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
            {
                Delegates.glMultiTexParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static 
            void MultiTexImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexImage1DEXT")]
            public static 
            void MultiTexImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static 
            void MultiTexImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexImage2DEXT")]
            public static 
            void MultiTexImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static 
            void MultiTexSubImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexSubImage1DEXT")]
            public static 
            void MultiTexSubImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static 
            void MultiTexSubImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexSubImage2DEXT")]
            public static 
            void MultiTexSubImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyMultiTexImage1DEXT")]
            public static 
            void CopyMultiTexImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                Delegates.glCopyMultiTexImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyMultiTexImage2DEXT")]
            public static 
            void CopyMultiTexImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                Delegates.glCopyMultiTexImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyMultiTexSubImage1DEXT")]
            public static 
            void CopyMultiTexSubImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyMultiTexSubImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyMultiTexSubImage2DEXT")]
            public static 
            void CopyMultiTexSubImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyMultiTexSubImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static 
            void GetMultiTexImage(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexImageEXT")]
            public static 
            void GetMultiTexImage(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMultiTexImageEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static 
            void GetMultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static 
            void GetMultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterfvEXT")]
            public static 
            unsafe void GetMultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
            {
                Delegates.glGetMultiTexParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static 
            void GetMultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static 
            void GetMultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterivEXT")]
            public static 
            unsafe void GetMultiTexParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetMultiTexParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static 
            void GetMultiTexLevelParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static 
            void GetMultiTexLevelParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
            public static 
            unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Single* @params)
            {
                Delegates.glGetMultiTexLevelParameterfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static 
            void GetMultiTexLevelParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static 
            void GetMultiTexLevelParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
            public static 
            unsafe void GetMultiTexLevelParameter(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetMultiTexLevelParameterivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static 
            void MultiTexImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexImage3DEXT")]
            public static 
            void MultiTexImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static 
            void MultiTexSubImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexSubImage3DEXT")]
            public static 
            void MultiTexSubImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCopyMultiTexSubImage3DEXT")]
            public static 
            void CopyMultiTexSubImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                Delegates.glCopyMultiTexSubImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static 
            void BindMultiTexture(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, UInt32 texture)
            {
                Delegates.glBindMultiTextureEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (UInt32)texture);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glBindMultiTextureEXT")]
            public static 
            void BindMultiTexture(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 texture)
            {
                Delegates.glBindMultiTextureEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (UInt32)texture);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static 
            void EnableClientStateIndexe(OpenTK.Graphics.EnableCap array, UInt32 index)
            {
                Delegates.glEnableClientStateIndexedEXT((OpenTK.Graphics.EnableCap)array, (UInt32)index);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glEnableClientStateIndexedEXT")]
            public static 
            void EnableClientStateIndexe(OpenTK.Graphics.EnableCap array, Int32 index)
            {
                Delegates.glEnableClientStateIndexedEXT((OpenTK.Graphics.EnableCap)array, (UInt32)index);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static 
            void DisableClientStateIndexe(OpenTK.Graphics.EnableCap array, UInt32 index)
            {
                Delegates.glDisableClientStateIndexedEXT((OpenTK.Graphics.EnableCap)array, (UInt32)index);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glDisableClientStateIndexedEXT")]
            public static 
            void DisableClientStateIndexe(OpenTK.Graphics.EnableCap array, Int32 index)
            {
                Delegates.glDisableClientStateIndexedEXT((OpenTK.Graphics.EnableCap)array, (UInt32)index);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static 
            void MultiTexCoordPointer(OpenTK.Graphics.TextureUnit texunit, Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexCoordPointerEXT")]
            public static 
            void MultiTexCoordPointer(OpenTK.Graphics.TextureUnit texunit, Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexCoordPointerEXT((OpenTK.Graphics.TextureUnit)texunit, (Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnvfEXT")]
            public static 
            void MultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Single param)
            {
                Delegates.glMultiTexEnvfEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static 
            void MultiTexEnvv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static 
            void MultiTexEnvv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexEnvfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnvfvEXT")]
            public static 
            unsafe void MultiTexEnvv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Single* @params)
            {
                Delegates.glMultiTexEnvfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnviEXT")]
            public static 
            void MultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Int32 param)
            {
                Delegates.glMultiTexEnviEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static 
            void MultiTexEnvv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static 
            void MultiTexEnvv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexEnvivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexEnvivEXT")]
            public static 
            unsafe void MultiTexEnvv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, Int32* @params)
            {
                Delegates.glMultiTexEnvivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGendEXT")]
            public static 
            void MultiTexGend(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Double param)
            {
                Delegates.glMultiTexGendEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static 
            void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGendvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static 
            void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexGendvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGendvEXT")]
            public static 
            unsafe void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Double* @params)
            {
                Delegates.glMultiTexGendvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGenfEXT")]
            public static 
            void MultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Single param)
            {
                Delegates.glMultiTexGenfEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static 
            void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static 
            void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexGenfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGenfvEXT")]
            public static 
            unsafe void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Single* @params)
            {
                Delegates.glMultiTexGenfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGeniEXT")]
            public static 
            void MultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Int32 param)
            {
                Delegates.glMultiTexGeniEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32)param);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static 
            void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static 
            void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexGenivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexGenivEXT")]
            public static 
            unsafe void MultiTexGenv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, Int32* @params)
            {
                Delegates.glMultiTexGenivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static 
            void GetMultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static 
            void GetMultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexEnvfvEXT")]
            public static 
            unsafe void GetMultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Single* @params)
            {
                Delegates.glGetMultiTexEnvfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static 
            void GetMultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static 
            void GetMultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexEnvivEXT")]
            public static 
            unsafe void GetMultiTexEnv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureEnvTarget target, OpenTK.Graphics.TextureEnvParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetMultiTexEnvivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureEnvTarget)target, (OpenTK.Graphics.TextureEnvParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static 
            void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static 
            void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGendvEXT")]
            public static 
            unsafe void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Double* @params)
            {
                Delegates.glGetMultiTexGendvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Double*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static 
            void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static 
            void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGenfvEXT")]
            public static 
            unsafe void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Single* @params)
            {
                Delegates.glGetMultiTexGenfvEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static 
            void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static 
            void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexGenivEXT")]
            public static 
            unsafe void GetMultiTexGen(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureCoordName coord, OpenTK.Graphics.TextureGenParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetMultiTexGenivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureCoordName)coord, (OpenTK.Graphics.TextureGenParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static 
            void GetFloatIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static 
            void GetFloatIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Single[] data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static 
            void GetFloatIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static 
            void GetFloatIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] out Single data)
            {
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static 
            unsafe void GetFloatIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Single* data)
            {
                Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFloatIndexedvEXT")]
            public static 
            unsafe void GetFloatIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Single* data)
            {
                Delegates.glGetFloatIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static 
            void GetDoubleIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Double[] data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static 
            void GetDoubleIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Double[] data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static 
            void GetDoubleIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] out Double data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static 
            void GetDoubleIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] out Double data)
            {
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static 
            unsafe void GetDoubleIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Double* data)
            {
                Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetDoubleIndexedvEXT")]
            public static 
            unsafe void GetDoubleIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Double* data)
            {
                Delegates.glGetDoubleIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)data);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static 
            void GetPointerIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static 
            void GetPointerIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static 
            void GetPointerIndexed(OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetPointerIndexedvEXT")]
            public static 
            void GetPointerIndexed(OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static 
            void CompressedTextureImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static 
            void CompressedTextureImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static 
            void CompressedTextureImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage3DEXT")]
            public static 
            void CompressedTextureImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static 
            void CompressedTextureImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static 
            void CompressedTextureImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static 
            void CompressedTextureImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage2DEXT")]
            public static 
            void CompressedTextureImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static 
            void CompressedTextureImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static 
            void CompressedTextureImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static 
            void CompressedTextureImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureImage1DEXT")]
            public static 
            void CompressedTextureImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static 
            void CompressedTextureSubImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static 
            void CompressedTextureSubImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static 
            void CompressedTextureSubImage3D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage3DEXT")]
            public static 
            void CompressedTextureSubImage3D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static 
            void CompressedTextureSubImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static 
            void CompressedTextureSubImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static 
            void CompressedTextureSubImage2D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage2DEXT")]
            public static 
            void CompressedTextureSubImage2D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static 
            void CompressedTextureSubImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static 
            void CompressedTextureSubImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static 
            void CompressedTextureSubImage1D(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedTextureSubImage1DEXT")]
            public static 
            void CompressedTextureSubImage1D(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static 
            void GetCompressedTextureImage(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 lod, [Out] IntPtr img)
            {
                unsafe
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)lod, (IntPtr)img);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static 
            void GetCompressedTextureImage(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 lod, [Out] IntPtr img)
            {
                unsafe
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)lod, (IntPtr)img);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static 
            void GetCompressedTextureImage(UInt32 texture, OpenTK.Graphics.TextureTarget target, Int32 lod, [In, Out] object img)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetCompressedTextureImageEXT")]
            public static 
            void GetCompressedTextureImage(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 lod, [In, Out] object img)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static 
            void CompressedMultiTexImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexImage3DEXT")]
            public static 
            void CompressedMultiTexImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static 
            void CompressedMultiTexImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexImage2DEXT")]
            public static 
            void CompressedMultiTexImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static 
            void CompressedMultiTexImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexImage1DEXT")]
            public static 
            void CompressedMultiTexImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static 
            void CompressedMultiTexSubImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
            public static 
            void CompressedMultiTexSubImage3D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage3DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static 
            void CompressedMultiTexSubImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
            public static 
            void CompressedMultiTexSubImage2D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage2DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static 
            void CompressedMultiTexSubImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                unsafe
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
            public static 
            void CompressedMultiTexSubImage1D(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, OpenTK.Graphics.PixelFormat format, Int32 imageSize, [In, Out] object bits)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle bits_ptr = System.Runtime.InteropServices.GCHandle.Alloc(bits, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage1DEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static 
            void GetCompressedMultiTexImage(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 lod, [Out] IntPtr img)
            {
                unsafe
                {
                    Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)lod, (IntPtr)img);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetCompressedMultiTexImageEXT")]
            public static 
            void GetCompressedMultiTexImage(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 lod, [In, Out] object img)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedMultiTexImageEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static 
            void NamedProgramString(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess format, Int32 len, IntPtr @string)
            {
                unsafe
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static 
            void NamedProgramString(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess format, Int32 len, IntPtr @string)
            {
                unsafe
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static 
            void NamedProgramString(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess format, Int32 len, [In, Out] object @string)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramStringEXT")]
            public static 
            void NamedProgramString(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess format, Int32 len, [In, Out] object @string)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static 
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
            public static 
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Double x, Double y, Double z, Double w)
            {
                Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static 
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static 
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static 
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static 
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, ref Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static 
            unsafe void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Double* @params)
            {
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
            public static 
            unsafe void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Double* @params)
            {
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static 
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
            public static 
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Single x, Single y, Single z, Single w)
            {
                Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static 
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static 
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static 
            void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static 
            void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static 
            unsafe void NamedProgramLocalParameter4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Single* @params)
            {
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
            public static 
            unsafe void NamedProgramLocalParameter4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Single* @params)
            {
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static 
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static 
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Double[] @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static 
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static 
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] out Double @params)
            {
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static 
            unsafe void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Double* @params)
            {
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
            public static 
            unsafe void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Double* @params)
            {
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static 
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static 
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static 
            void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static 
            void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static 
            unsafe void GetNamedProgramLocalParameter(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Single* @params)
            {
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
            public static 
            unsafe void GetNamedProgramLocalParameter(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Single* @params)
            {
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static 
            void GetNamedProgram(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static 
            void GetNamedProgram(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static 
            void GetNamedProgram(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static 
            void GetNamedProgram(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static 
            unsafe void GetNamedProgram(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramivEXT")]
            public static 
            unsafe void GetNamedProgram(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedProgramivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static 
            void GetNamedProgramString(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] IntPtr @string)
            {
                unsafe
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@string);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static 
            void GetNamedProgramString(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] IntPtr @string)
            {
                unsafe
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@string);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static 
            void GetNamedProgramString(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [In, Out] object @string)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramStringEXT")]
            public static 
            void GetNamedProgramString(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, OpenTK.Graphics.ExtDirectStateAccess pname, [In, Out] object @string)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static 
            void NamedProgramLocalParameters4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static 
            void NamedProgramLocalParameters4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32 count, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static 
            void NamedProgramLocalParameters4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static 
            void NamedProgramLocalParameters4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32 count, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static 
            unsafe void NamedProgramLocalParameters4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, Single* @params)
            {
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
            public static 
            unsafe void NamedProgramLocalParameters4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32 count, Single* @params)
            {
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static 
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
            public static 
            void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static 
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static 
            void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static 
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static 
            void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static 
            unsafe void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
            public static 
            unsafe void NamedProgramLocalParameterI4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static 
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static 
            void NamedProgramLocalParametersI4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32 count, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static 
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static 
            void NamedProgramLocalParametersI4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32 count, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static 
            unsafe void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, Int32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
            public static 
            unsafe void NamedProgramLocalParametersI4(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, Int32 count, Int32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uiEXT")]
            public static 
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                Delegates.glNamedProgramLocalParameterI4uiEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static 
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static 
            void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
            public static 
            unsafe void NamedProgramLocalParameterI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, UInt32* @params)
            {
                Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static 
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static 
            void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
            public static 
            unsafe void NamedProgramLocalParametersI4(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, Int32 count, UInt32* @params)
            {
                Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static 
            void GetNamedProgramLocalParameterI(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static 
            void GetNamedProgramLocalParameterI(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static 
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] Int32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
            public static 
            unsafe void GetNamedProgramLocalParameterI(Int32 program, OpenTK.Graphics.ExtDirectStateAccess target, Int32 index, [Out] Int32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
            public static 
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, OpenTK.Graphics.ExtDirectStateAccess target, UInt32 index, [Out] UInt32* @params)
            {
                Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (OpenTK.Graphics.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static 
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static 
            void TextureParameterI(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static 
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static 
            void TextureParameterI(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static 
            unsafe void TextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIivEXT")]
            public static 
            unsafe void TextureParameterI(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
            {
                Delegates.glTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static 
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static 
            void TextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureParameterIuivEXT")]
            public static 
            unsafe void TextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32* @params)
            {
                Delegates.glTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static 
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static 
            void GetTextureParameterI(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static 
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static 
            void GetTextureParameterI(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static 
            unsafe void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIivEXT")]
            public static 
            unsafe void GetTextureParameterI(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static 
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static 
            void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetTextureParameterIuivEXT")]
            public static 
            unsafe void GetTextureParameterI(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32* @params)
            {
                Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static 
            void MultiTexParameterIv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static 
            void MultiTexParameterIv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterIivEXT")]
            public static 
            unsafe void MultiTexParameterIv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, Int32* @params)
            {
                Delegates.glMultiTexParameterIivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static 
            void MultiTexParameterIv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static 
            void MultiTexParameterIv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, ref UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexParameterIuivEXT")]
            public static 
            unsafe void MultiTexParameterIv(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.TextureParameterName pname, UInt32* @params)
            {
                Delegates.glMultiTexParameterIuivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.TextureParameterName)pname, (UInt32*)@params);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static 
            void GetMultiTexParameterI(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static 
            void GetMultiTexParameterI(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterIivEXT")]
            public static 
            unsafe void GetMultiTexParameterI(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetMultiTexParameterIivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static 
            void GetMultiTexParameterI(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32[] @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static 
            void GetMultiTexParameterI(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] out UInt32 @params)
            {
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetMultiTexParameterIuivEXT")]
            public static 
            unsafe void GetMultiTexParameterI(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.GetTextureParameter pname, [Out] UInt32* @params)
            {
                Delegates.glGetMultiTexParameterIuivEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.GetTextureParameter)pname, (UInt32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Single v0)
            {
                Delegates.glProgramUniform1fEXT((UInt32)program, (Int32)location, (Single)v0);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            public static 
            void ProgramUniform1(Int32 program, Int32 location, Single v0)
            {
                Delegates.glProgramUniform1fEXT((UInt32)program, (Int32)location, (Single)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1)
            {
                Delegates.glProgramUniform2fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            public static 
            void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1)
            {
                Delegates.glProgramUniform2fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                Delegates.glProgramUniform3fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            public static 
            void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                Delegates.glProgramUniform3fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                Delegates.glProgramUniform4fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            public static 
            void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                Delegates.glProgramUniform4fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 v0)
            {
                Delegates.glProgramUniform1iEXT((UInt32)program, (Int32)location, (Int32)v0);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 v0)
            {
                Delegates.glProgramUniform1iEXT((UInt32)program, (Int32)location, (Int32)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glProgramUniform2iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            public static 
            void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1)
            {
                Delegates.glProgramUniform2iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glProgramUniform3iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                Delegates.glProgramUniform3iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glProgramUniform4iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                Delegates.glProgramUniform4iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static 
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            public static 
            unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static 
            void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static 
            void ProgramUniform2v(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static 
            void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static 
            void ProgramUniform2v(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static 
            unsafe void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            public static 
            unsafe void ProgramUniform2v(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static 
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            public static 
            unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static 
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            public static 
            unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value)
            {
                Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static 
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            public static 
            unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static 
            void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static 
            void ProgramUniform2v(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static 
            void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static 
            void ProgramUniform2v(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static 
            unsafe void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            public static 
            unsafe void ProgramUniform2v(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static 
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            public static 
            unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static 
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            public static 
            unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static 
            void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static 
            void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static 
            void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static 
            void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static 
            void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static 
            void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static 
            void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static 
            void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static 
            void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static 
            void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static 
            void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static 
            void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static 
            void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static 
            void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static 
            void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static 
            void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static 
            void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static 
            void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static 
            void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static 
            void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static 
            void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static 
            void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static 
            void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static 
            void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static 
            void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static 
            void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static 
            void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static 
            void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static 
            void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static 
            void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static 
            void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static 
            void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static 
            void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static 
            void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static 
            void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static 
            void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            public static 
            unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1uiEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0)
            {
                Delegates.glProgramUniform1uiEXT((UInt32)program, (Int32)location, (UInt32)v0);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2uiEXT")]
            public static 
            void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1)
            {
                Delegates.glProgramUniform2uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3uiEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
            {
                Delegates.glProgramUniform3uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4uiEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
            {
                Delegates.glProgramUniform4uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            public static 
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static 
            void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static 
            void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            public static 
            unsafe void ProgramUniform2v(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            public static 
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            public static 
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static 
            void NamedBufferData(UInt32 buffer, IntPtr size, IntPtr data, OpenTK.Graphics.ExtDirectStateAccess usage)
            {
                unsafe
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.ExtDirectStateAccess)usage);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static 
            void NamedBufferData(Int32 buffer, IntPtr size, IntPtr data, OpenTK.Graphics.ExtDirectStateAccess usage)
            {
                unsafe
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.ExtDirectStateAccess)usage);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static 
            void NamedBufferData(UInt32 buffer, IntPtr size, [In, Out] object data, OpenTK.Graphics.ExtDirectStateAccess usage)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferDataEXT")]
            public static 
            void NamedBufferData(Int32 buffer, IntPtr size, [In, Out] object data, OpenTK.Graphics.ExtDirectStateAccess usage)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static 
            void NamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                unsafe
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static 
            void NamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                unsafe
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static 
            void NamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedBufferSubDataEXT")]
            public static 
            void NamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static 
            unsafe IntPtr MapNamedBuffer(UInt32 buffer, OpenTK.Graphics.ExtDirectStateAccess access)
            {
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)access);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMapNamedBufferEXT")]
            public static 
            unsafe IntPtr MapNamedBuffer(Int32 buffer, OpenTK.Graphics.ExtDirectStateAccess access)
            {
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)access);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glUnmapNamedBufferEXT")]
            public static 
            bool UnmapNamedBuffer(UInt32 buffer)
            {
                return Delegates.glUnmapNamedBufferEXT((UInt32)buffer);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glUnmapNamedBufferEXT")]
            public static 
            bool UnmapNamedBuffer(Int32 buffer)
            {
                return Delegates.glUnmapNamedBufferEXT((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static 
            void GetNamedBufferParameter(UInt32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static 
            void GetNamedBufferParameter(Int32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static 
            void GetNamedBufferParameter(UInt32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static 
            void GetNamedBufferParameter(Int32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static 
            unsafe void GetNamedBufferParameter(UInt32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferParameterivEXT")]
            public static 
            unsafe void GetNamedBufferParameter(Int32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static 
            void GetNamedBufferPointer(UInt32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] IntPtr @params)
            {
                unsafe
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@params);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static 
            void GetNamedBufferPointer(Int32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] IntPtr @params)
            {
                unsafe
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@params);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static 
            void GetNamedBufferPointer(UInt32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [In, Out] object @params)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferPointervEXT")]
            public static 
            void GetNamedBufferPointer(Int32 buffer, OpenTK.Graphics.ExtDirectStateAccess pname, [In, Out] object @params)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static 
            void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static 
            void GetNamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, [Out] IntPtr data)
            {
                unsafe
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static 
            void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedBufferSubDataEXT")]
            public static 
            void GetNamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, [In, Out] object data)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static 
            void TextureBuffer(UInt32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ExtDirectStateAccess internalformat, UInt32 buffer)
            {
                Delegates.glTextureBufferEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureBufferEXT")]
            public static 
            void TextureBuffer(Int32 texture, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 buffer)
            {
                Delegates.glTextureBufferEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static 
            void MultiTexBuffer(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ExtDirectStateAccess internalformat, UInt32 buffer)
            {
                Delegates.glMultiTexBufferEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (UInt32)buffer);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexBufferEXT")]
            public static 
            void MultiTexBuffer(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.ExtDirectStateAccess internalformat, Int32 buffer)
            {
                Delegates.glMultiTexBufferEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.ExtDirectStateAccess)internalformat, (UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static 
            void NamedRenderbufferStorage(UInt32 renderbuffer, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedRenderbufferStorageEXT")]
            public static 
            void NamedRenderbufferStorage(Int32 renderbuffer, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static 
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static 
            void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static 
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenTK.Graphics.RenderbufferParameterName pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static 
            void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenTK.Graphics.RenderbufferParameterName pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static 
            unsafe void GetNamedRenderbufferParameter(UInt32 renderbuffer, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
            public static 
            unsafe void GetNamedRenderbufferParameter(Int32 renderbuffer, OpenTK.Graphics.RenderbufferParameterName pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (OpenTK.Graphics.RenderbufferParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static 
            OpenTK.Graphics.ExtDirectStateAccess CheckNamedFramebufferStatus(UInt32 framebuffer, OpenTK.Graphics.FramebufferTarget target)
            {
                return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferTarget)target);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
            public static 
            OpenTK.Graphics.ExtDirectStateAccess CheckNamedFramebufferStatus(Int32 framebuffer, OpenTK.Graphics.FramebufferTarget target)
            {
                return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static 
            void NamedFramebufferTexture1D(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTexture1DEXT")]
            public static 
            void NamedFramebufferTexture1D(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static 
            void NamedFramebufferTexture2D(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTexture2DEXT")]
            public static 
            void NamedFramebufferTexture2D(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static 
            void NamedFramebufferTexture3D(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTexture3DEXT")]
            public static 
            void NamedFramebufferTexture3D(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static 
            void NamedFramebufferRenderbuffer(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
            {
                Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
            public static 
            void NamedFramebufferRenderbuffer(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
            {
                Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static 
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static 
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static 
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static 
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static 
            unsafe void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
            public static 
            unsafe void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static 
            void GenerateTextureMipmap(UInt32 texture, OpenTK.Graphics.TextureTarget target)
            {
                Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGenerateTextureMipmapEXT")]
            public static 
            void GenerateTextureMipmap(Int32 texture, OpenTK.Graphics.TextureTarget target)
            {
                Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGenerateMultiTexMipmapEXT")]
            public static 
            void GenerateMultiTexMipmap(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target)
            {
                Delegates.glGenerateMultiTexMipmapEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static 
            void FramebufferDrawBuffer(UInt32 framebuffer, OpenTK.Graphics.DrawBufferMode mode)
            {
                Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.DrawBufferMode)mode);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBufferEXT")]
            public static 
            void FramebufferDrawBuffer(Int32 framebuffer, OpenTK.Graphics.DrawBufferMode mode)
            {
                Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.DrawBufferMode)mode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static 
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, OpenTK.Graphics.DrawBufferMode[] bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.DrawBufferMode* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static 
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, OpenTK.Graphics.DrawBufferMode[] bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.DrawBufferMode* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static 
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, ref OpenTK.Graphics.DrawBufferMode bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.DrawBufferMode* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static 
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, ref OpenTK.Graphics.DrawBufferMode bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.DrawBufferMode* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.DrawBufferMode*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static 
            unsafe void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, OpenTK.Graphics.DrawBufferMode* bufs)
            {
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.DrawBufferMode*)bufs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferDrawBuffersEXT")]
            public static 
            unsafe void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, OpenTK.Graphics.DrawBufferMode* bufs)
            {
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (OpenTK.Graphics.DrawBufferMode*)bufs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static 
            void FramebufferReadBuffer(UInt32 framebuffer, OpenTK.Graphics.ReadBufferMode mode)
            {
                Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.ReadBufferMode)mode);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glFramebufferReadBufferEXT")]
            public static 
            void FramebufferReadBuffer(Int32 framebuffer, OpenTK.Graphics.ReadBufferMode mode)
            {
                Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (OpenTK.Graphics.ReadBufferMode)mode);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static 
            void GetFramebufferParameter(UInt32 framebuffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static 
            void GetFramebufferParameter(Int32 framebuffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static 
            void GetFramebufferParameter(UInt32 framebuffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static 
            void GetFramebufferParameter(Int32 framebuffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static 
            unsafe void GetFramebufferParameter(UInt32 framebuffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glGetFramebufferParameterivEXT")]
            public static 
            unsafe void GetFramebufferParameter(Int32 framebuffer, OpenTK.Graphics.ExtDirectStateAccess pname, [Out] Int32* @params)
            {
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (OpenTK.Graphics.ExtDirectStateAccess)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static 
            void NamedRenderbufferStorageMultisample(UInt32 renderbuffer, Int32 samples, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
            public static 
            void NamedRenderbufferStorageMultisample(Int32 renderbuffer, Int32 samples, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static 
            void NamedRenderbufferStorageMultisampleCoverage(UInt32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
            public static 
            void NamedRenderbufferStorageMultisampleCoverage(Int32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static 
            void NamedFramebufferTexture(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTextureEXT")]
            public static 
            void NamedFramebufferTexture(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static 
            void NamedFramebufferTextureLayer(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
            public static 
            void NamedFramebufferTextureLayer(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static 
            void NamedFramebufferTextureFace(UInt32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, OpenTK.Graphics.TextureTarget face)
            {
                Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.TextureTarget)face);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
            public static 
            void NamedFramebufferTextureFace(Int32 framebuffer, OpenTK.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, OpenTK.Graphics.TextureTarget face)
            {
                Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (OpenTK.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (OpenTK.Graphics.TextureTarget)face);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static 
            void TextureRenderbuffer(UInt32 texture, OpenTK.Graphics.TextureTarget target, UInt32 renderbuffer)
            {
                Delegates.glTextureRenderbufferEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glTextureRenderbufferEXT")]
            public static 
            void TextureRenderbuffer(Int32 texture, OpenTK.Graphics.TextureTarget target, Int32 renderbuffer)
            {
                Delegates.glTextureRenderbufferEXT((UInt32)texture, (OpenTK.Graphics.TextureTarget)target, (UInt32)renderbuffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static 
            void MultiTexRenderbuffer(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, UInt32 renderbuffer)
            {
                Delegates.glMultiTexRenderbufferEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (UInt32)renderbuffer);
            }

            [AutoGenerated(Category = "ExtDirectStateAccess", Version = "", EntryPoint = "glMultiTexRenderbufferEXT")]
            public static 
            void MultiTexRenderbuffer(OpenTK.Graphics.TextureUnit texunit, OpenTK.Graphics.TextureTarget target, Int32 renderbuffer)
            {
                Delegates.glMultiTexRenderbufferEXT((OpenTK.Graphics.TextureUnit)texunit, (OpenTK.Graphics.TextureTarget)target, (UInt32)renderbuffer);
            }

        }

        public static partial class Sgis
        {
            [AutoGenerated(Category = "SgisTextureFilter4", Version = "1.0", EntryPoint = "glGetTexFilterFuncSGIS")]
            public static 
            void GetTexFilterFunc(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.SgisTextureFilter4 filter, [Out] Single[] weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = weights)
                    {
                        Delegates.glGetTexFilterFuncSGIS((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.SgisTextureFilter4)filter, (Single*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisTextureFilter4", Version = "1.0", EntryPoint = "glGetTexFilterFuncSGIS")]
            public static 
            void GetTexFilterFunc(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.SgisTextureFilter4 filter, [Out] out Single weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = &weights)
                    {
                        Delegates.glGetTexFilterFuncSGIS((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.SgisTextureFilter4)filter, (Single*)weights_ptr);
                        weights = *weights_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisTextureFilter4", Version = "1.0", EntryPoint = "glGetTexFilterFuncSGIS")]
            public static 
            unsafe void GetTexFilterFunc(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.SgisTextureFilter4 filter, [Out] Single* weights)
            {
                Delegates.glGetTexFilterFuncSGIS((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.SgisTextureFilter4)filter, (Single*)weights);
            }

            [AutoGenerated(Category = "SgisTextureFilter4", Version = "1.0", EntryPoint = "glTexFilterFuncSGIS")]
            public static 
            void TexFilterFunc(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.SgisTextureFilter4 filter, Int32 n, Single[] weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = weights)
                    {
                        Delegates.glTexFilterFuncSGIS((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.SgisTextureFilter4)filter, (Int32)n, (Single*)weights_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisTextureFilter4", Version = "1.0", EntryPoint = "glTexFilterFuncSGIS")]
            public static 
            void TexFilterFunc(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.SgisTextureFilter4 filter, Int32 n, ref Single weights)
            {
                unsafe
                {
                    fixed (Single* weights_ptr = &weights)
                    {
                        Delegates.glTexFilterFuncSGIS((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.SgisTextureFilter4)filter, (Int32)n, (Single*)weights_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisTextureFilter4", Version = "1.0", EntryPoint = "glTexFilterFuncSGIS")]
            public static 
            unsafe void TexFilterFunc(OpenTK.Graphics.TextureTarget target, OpenTK.Graphics.SgisTextureFilter4 filter, Int32 n, Single* weights)
            {
                Delegates.glTexFilterFuncSGIS((OpenTK.Graphics.TextureTarget)target, (OpenTK.Graphics.SgisTextureFilter4)filter, (Int32)n, (Single*)weights);
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameteriSGIS")]
            public static 
            void PixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, Int32 param)
            {
                Delegates.glPixelTexGenParameteriSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Int32)param);
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameterivSGIS")]
            public static 
            void PixelTexGenParameterv(OpenTK.Graphics.SgisPixelTexture pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glPixelTexGenParameterivSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameterivSGIS")]
            public static 
            void PixelTexGenParameterv(OpenTK.Graphics.SgisPixelTexture pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glPixelTexGenParameterivSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameterivSGIS")]
            public static 
            unsafe void PixelTexGenParameterv(OpenTK.Graphics.SgisPixelTexture pname, Int32* @params)
            {
                Delegates.glPixelTexGenParameterivSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameterfSGIS")]
            public static 
            void PixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, Single param)
            {
                Delegates.glPixelTexGenParameterfSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Single)param);
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameterfvSGIS")]
            public static 
            void PixelTexGenParameterv(OpenTK.Graphics.SgisPixelTexture pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPixelTexGenParameterfvSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameterfvSGIS")]
            public static 
            void PixelTexGenParameterv(OpenTK.Graphics.SgisPixelTexture pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glPixelTexGenParameterfvSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenParameterfvSGIS")]
            public static 
            unsafe void PixelTexGenParameterv(OpenTK.Graphics.SgisPixelTexture pname, Single* @params)
            {
                Delegates.glPixelTexGenParameterfvSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glGetPixelTexGenParameterivSGIS")]
            public static 
            void GetPixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetPixelTexGenParameterivSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glGetPixelTexGenParameterivSGIS")]
            public static 
            void GetPixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetPixelTexGenParameterivSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glGetPixelTexGenParameterivSGIS")]
            public static 
            unsafe void GetPixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, [Out] Int32* @params)
            {
                Delegates.glGetPixelTexGenParameterivSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glGetPixelTexGenParameterfvSGIS")]
            public static 
            void GetPixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetPixelTexGenParameterfvSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glGetPixelTexGenParameterfvSGIS")]
            public static 
            void GetPixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetPixelTexGenParameterfvSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisPixelTexture", Version = "1.0", EntryPoint = "glGetPixelTexGenParameterfvSGIS")]
            public static 
            unsafe void GetPixelTexGenParameter(OpenTK.Graphics.SgisPixelTexture pname, [Out] Single* @params)
            {
                Delegates.glGetPixelTexGenParameterfvSGIS((OpenTK.Graphics.SgisPixelTexture)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgisTexture4D", Version = "1.0", EntryPoint = "glTexImage4DSGIS")]
            public static 
            void TexImage4D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTexImage4DSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "SgisTexture4D", Version = "1.0", EntryPoint = "glTexImage4DSGIS")]
            public static 
            void TexImage4D(OpenTK.Graphics.TextureTarget target, Int32 level, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage4DSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)level, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "SgisTexture4D", Version = "1.0", EntryPoint = "glTexSubImage4DSGIS")]
            public static 
            void TexSubImage4D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr pixels)
            {
                unsafe
                {
                    Delegates.glTexSubImage4DSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels);
                }
            }

            [AutoGenerated(Category = "SgisTexture4D", Version = "1.0", EntryPoint = "glTexSubImage4DSGIS")]
            public static 
            void TexSubImage4D(OpenTK.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object pixels)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage4DSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "SgisDetailTexture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static 
            void DetailTexFunc(OpenTK.Graphics.TextureTarget target, Int32 n, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisDetailTexture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static 
            void DetailTexFunc(OpenTK.Graphics.TextureTarget target, Int32 n, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisDetailTexture", Version = "1.0", EntryPoint = "glDetailTexFuncSGIS")]
            public static 
            unsafe void DetailTexFunc(OpenTK.Graphics.TextureTarget target, Int32 n, Single* points)
            {
                Delegates.glDetailTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)n, (Single*)points);
            }

            [AutoGenerated(Category = "SgisDetailTexture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static 
            void GetDetailTexFunc(OpenTK.Graphics.TextureTarget target, [Out] Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisDetailTexture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static 
            void GetDetailTexFunc(OpenTK.Graphics.TextureTarget target, [Out] out Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisDetailTexture", Version = "1.0", EntryPoint = "glGetDetailTexFuncSGIS")]
            public static 
            unsafe void GetDetailTexFunc(OpenTK.Graphics.TextureTarget target, [Out] Single* points)
            {
                Delegates.glGetDetailTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Single*)points);
            }

            [AutoGenerated(Category = "SgisSharpenTexture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static 
            void SharpenTexFunc(OpenTK.Graphics.TextureTarget target, Int32 n, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisSharpenTexture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static 
            void SharpenTexFunc(OpenTK.Graphics.TextureTarget target, Int32 n, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisSharpenTexture", Version = "1.0", EntryPoint = "glSharpenTexFuncSGIS")]
            public static 
            unsafe void SharpenTexFunc(OpenTK.Graphics.TextureTarget target, Int32 n, Single* points)
            {
                Delegates.glSharpenTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Int32)n, (Single*)points);
            }

            [AutoGenerated(Category = "SgisSharpenTexture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static 
            void GetSharpenTexFunc(OpenTK.Graphics.TextureTarget target, [Out] Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisSharpenTexture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static 
            void GetSharpenTexFunc(OpenTK.Graphics.TextureTarget target, [Out] out Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisSharpenTexture", Version = "1.0", EntryPoint = "glGetSharpenTexFuncSGIS")]
            public static 
            unsafe void GetSharpenTexFunc(OpenTK.Graphics.TextureTarget target, [Out] Single* points)
            {
                Delegates.glGetSharpenTexFuncSGIS((OpenTK.Graphics.TextureTarget)target, (Single*)points);
            }

            [AutoGenerated(Category = "SgisMultisample", Version = "1.1", EntryPoint = "glSampleMaskSGIS")]
            public static 
            void SampleMask(Single value, bool invert)
            {
                Delegates.glSampleMaskSGIS((Single)value, (bool)invert);
            }

            [AutoGenerated(Category = "SgisMultisample", Version = "1.0", EntryPoint = "glSamplePatternSGIS")]
            public static 
            void SamplePattern(OpenTK.Graphics.SgisMultisample pattern)
            {
                Delegates.glSamplePatternSGIS((OpenTK.Graphics.SgisMultisample)pattern);
            }

            [AutoGenerated(Category = "SgisPointParameters", Version = "1.0", EntryPoint = "glPointParameterfSGIS")]
            public static 
            void PointParameter(OpenTK.Graphics.SgisPointParameters pname, Single param)
            {
                Delegates.glPointParameterfSGIS((OpenTK.Graphics.SgisPointParameters)pname, (Single)param);
            }

            [AutoGenerated(Category = "SgisPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvSGIS")]
            public static 
            void PointParameterv(OpenTK.Graphics.SgisPointParameters pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvSGIS((OpenTK.Graphics.SgisPointParameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvSGIS")]
            public static 
            void PointParameterv(OpenTK.Graphics.SgisPointParameters pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterfvSGIS((OpenTK.Graphics.SgisPointParameters)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisPointParameters", Version = "1.0", EntryPoint = "glPointParameterfvSGIS")]
            public static 
            unsafe void PointParameterv(OpenTK.Graphics.SgisPointParameters pname, Single* @params)
            {
                Delegates.glPointParameterfvSGIS((OpenTK.Graphics.SgisPointParameters)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgisFogFunction", Version = "1.1", EntryPoint = "glFogFuncSGIS")]
            public static 
            void FogFunc(Int32 n, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisFogFunction", Version = "1.1", EntryPoint = "glFogFuncSGIS")]
            public static 
            void FogFunc(Int32 n, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisFogFunction", Version = "1.1", EntryPoint = "glFogFuncSGIS")]
            public static 
            unsafe void FogFunc(Int32 n, Single* points)
            {
                Delegates.glFogFuncSGIS((Int32)n, (Single*)points);
            }

            [AutoGenerated(Category = "SgisFogFunction", Version = "1.1", EntryPoint = "glGetFogFuncSGIS")]
            public static 
            void GetFogFunc([Out] Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetFogFuncSGIS((Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgisFogFunction", Version = "1.1", EntryPoint = "glGetFogFuncSGIS")]
            public static 
            void GetFogFunc([Out] out Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetFogFuncSGIS((Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgisFogFunction", Version = "1.1", EntryPoint = "glGetFogFuncSGIS")]
            public static 
            unsafe void GetFogFunc([Out] Single* points)
            {
                Delegates.glGetFogFuncSGIS((Single*)points);
            }

            [AutoGenerated(Category = "SgisTextureColorMask", Version = "1.1", EntryPoint = "glTextureColorMaskSGIS")]
            public static 
            void TextureColorMask(bool red, bool green, bool blue, bool alpha)
            {
                Delegates.glTextureColorMaskSGIS((bool)red, (bool)green, (bool)blue, (bool)alpha);
            }

        }

        public static partial class Sgi
        {
            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableSGI")]
            public static 
            void ColorTable(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, IntPtr table)
            {
                unsafe
                {
                    Delegates.glColorTableSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table);
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableSGI")]
            public static 
            void ColorTable(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 width, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object table)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)width, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableParameterfvSGI")]
            public static 
            void ColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glColorTableParameterfvSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableParameterfvSGI")]
            public static 
            void ColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glColorTableParameterfvSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableParameterfvSGI")]
            public static 
            unsafe void ColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, Single* @params)
            {
                Delegates.glColorTableParameterfvSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableParameterivSGI")]
            public static 
            void ColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glColorTableParameterivSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableParameterivSGI")]
            public static 
            void ColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glColorTableParameterivSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glColorTableParameterivSGI")]
            public static 
            unsafe void ColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, Int32* @params)
            {
                Delegates.glColorTableParameterivSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glCopyColorTableSGI")]
            public static 
            void CopyColorTable(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
            {
                Delegates.glCopyColorTableSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableSGI")]
            public static 
            void GetColorTable(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [Out] IntPtr table)
            {
                unsafe
                {
                    Delegates.glGetColorTableSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table);
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableSGI")]
            public static 
            void GetColorTable(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.PixelFormat format, OpenTK.Graphics.PixelType type, [In, Out] object table)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.PixelFormat)format, (OpenTK.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableParameterfvSGI")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableParameterfvSGI")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableParameterfvSGI")]
            public static 
            unsafe void GetColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, [Out] Single* @params)
            {
                Delegates.glGetColorTableParameterfvSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableParameterivSGI")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableParameterivSGI")]
            public static 
            void GetColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgiColorTable", Version = "1.0", EntryPoint = "glGetColorTableParameterivSGI")]
            public static 
            unsafe void GetColorTableParameter(OpenTK.Graphics.SgiColorTable target, OpenTK.Graphics.SgiColorTable pname, [Out] Int32* @params)
            {
                Delegates.glGetColorTableParameterivSGI((OpenTK.Graphics.SgiColorTable)target, (OpenTK.Graphics.SgiColorTable)pname, (Int32*)@params);
            }

        }

        public static partial class Sgix
        {
            [AutoGenerated(Category = "SgixPixelTexture", Version = "1.0", EntryPoint = "glPixelTexGenSGIX")]
            public static 
            void PixelTexGen(OpenTK.Graphics.SgixPixelTexture mode)
            {
                Delegates.glPixelTexGenSGIX((OpenTK.Graphics.SgixPixelTexture)mode);
            }

            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameterfSGIX")]
            public static 
            void SpriteParameter(OpenTK.Graphics.SgixSprite pname, Single param)
            {
                Delegates.glSpriteParameterfSGIX((OpenTK.Graphics.SgixSprite)pname, (Single)param);
            }

            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameterfvSGIX")]
            public static 
            void SpriteParameterv(OpenTK.Graphics.SgixSprite pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glSpriteParameterfvSGIX((OpenTK.Graphics.SgixSprite)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameterfvSGIX")]
            public static 
            void SpriteParameterv(OpenTK.Graphics.SgixSprite pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glSpriteParameterfvSGIX((OpenTK.Graphics.SgixSprite)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameterfvSGIX")]
            public static 
            unsafe void SpriteParameterv(OpenTK.Graphics.SgixSprite pname, Single* @params)
            {
                Delegates.glSpriteParameterfvSGIX((OpenTK.Graphics.SgixSprite)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameteriSGIX")]
            public static 
            void SpriteParameter(OpenTK.Graphics.SgixSprite pname, Int32 param)
            {
                Delegates.glSpriteParameteriSGIX((OpenTK.Graphics.SgixSprite)pname, (Int32)param);
            }

            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameterivSGIX")]
            public static 
            void SpriteParameterv(OpenTK.Graphics.SgixSprite pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glSpriteParameterivSGIX((OpenTK.Graphics.SgixSprite)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameterivSGIX")]
            public static 
            void SpriteParameterv(OpenTK.Graphics.SgixSprite pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glSpriteParameterivSGIX((OpenTK.Graphics.SgixSprite)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixSprite", Version = "1.0", EntryPoint = "glSpriteParameterivSGIX")]
            public static 
            unsafe void SpriteParameterv(OpenTK.Graphics.SgixSprite pname, Int32* @params)
            {
                Delegates.glSpriteParameterivSGIX((OpenTK.Graphics.SgixSprite)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glGetInstrumentsSGIX")]
            public static 
            Int32 GetInstruments()
            {
                return Delegates.glGetInstrumentsSGIX();
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glInstrumentsBufferSGIX")]
            public static 
            void InstrumentsBuffer(Int32 size, [Out] Int32[] buffer)
            {
                unsafe
                {
                    fixed (Int32* buffer_ptr = buffer)
                    {
                        Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glInstrumentsBufferSGIX")]
            public static 
            void InstrumentsBuffer(Int32 size, [Out] out Int32 buffer)
            {
                unsafe
                {
                    fixed (Int32* buffer_ptr = &buffer)
                    {
                        Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
                        buffer = *buffer_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glInstrumentsBufferSGIX")]
            public static 
            unsafe void InstrumentsBuffer(Int32 size, [Out] Int32* buffer)
            {
                Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer);
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glPollInstrumentsSGIX")]
            public static 
            Int32 PollInstruments([Out] Int32[] marker_p)
            {
                unsafe
                {
                    fixed (Int32* marker_p_ptr = marker_p)
                    {
                        return Delegates.glPollInstrumentsSGIX((Int32*)marker_p_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glPollInstrumentsSGIX")]
            public static 
            Int32 PollInstruments([Out] out Int32 marker_p)
            {
                unsafe
                {
                    fixed (Int32* marker_p_ptr = &marker_p)
                    {
                        Int32 retval = Delegates.glPollInstrumentsSGIX((Int32*)marker_p_ptr);
                        marker_p = *marker_p_ptr;
                        return retval;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glPollInstrumentsSGIX")]
            public static 
            unsafe Int32 PollInstruments([Out] Int32* marker_p)
            {
                return Delegates.glPollInstrumentsSGIX((Int32*)marker_p);
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glReadInstrumentsSGIX")]
            public static 
            void ReadInstruments(Int32 marker)
            {
                Delegates.glReadInstrumentsSGIX((Int32)marker);
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glStartInstrumentsSGIX")]
            public static 
            void StartInstruments()
            {
                Delegates.glStartInstrumentsSGIX();
            }

            [AutoGenerated(Category = "SgixInstruments", Version = "1.0", EntryPoint = "glStopInstrumentsSGIX")]
            public static 
            void StopInstruments(Int32 marker)
            {
                Delegates.glStopInstrumentsSGIX((Int32)marker);
            }

            [AutoGenerated(Category = "SgixFramezoom", Version = "1.0", EntryPoint = "glFrameZoomSGIX")]
            public static 
            void FrameZoom(Int32 factor)
            {
                Delegates.glFrameZoomSGIX((Int32)factor);
            }

            [AutoGenerated(Category = "SgixTagSampleBuffer", Version = "1.0", EntryPoint = "glTagSampleBufferSGIX")]
            public static 
            void TagSampleBuffer()
            {
                Delegates.glTagSampleBufferSGIX();
            }

            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformationMap3dSGIX")]
            public static 
            void DeformationMap3(OpenTK.Graphics.SgixPolynomialFfd target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, Double[] points)
            {
                unsafe
                {
                    fixed (Double* points_ptr = points)
                    {
                        Delegates.glDeformationMap3dSGIX((OpenTK.Graphics.SgixPolynomialFfd)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformationMap3dSGIX")]
            public static 
            void DeformationMap3(OpenTK.Graphics.SgixPolynomialFfd target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, ref Double points)
            {
                unsafe
                {
                    fixed (Double* points_ptr = &points)
                    {
                        Delegates.glDeformationMap3dSGIX((OpenTK.Graphics.SgixPolynomialFfd)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformationMap3dSGIX")]
            public static 
            unsafe void DeformationMap3(OpenTK.Graphics.SgixPolynomialFfd target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, Double* points)
            {
                Delegates.glDeformationMap3dSGIX((OpenTK.Graphics.SgixPolynomialFfd)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points);
            }

            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformationMap3fSGIX")]
            public static 
            void DeformationMap3(OpenTK.Graphics.SgixPolynomialFfd target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, Single[] points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glDeformationMap3fSGIX((OpenTK.Graphics.SgixPolynomialFfd)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformationMap3fSGIX")]
            public static 
            void DeformationMap3(OpenTK.Graphics.SgixPolynomialFfd target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, ref Single points)
            {
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glDeformationMap3fSGIX((OpenTK.Graphics.SgixPolynomialFfd)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformationMap3fSGIX")]
            public static 
            unsafe void DeformationMap3(OpenTK.Graphics.SgixPolynomialFfd target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, Single* points)
            {
                Delegates.glDeformationMap3fSGIX((OpenTK.Graphics.SgixPolynomialFfd)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformSGIX")]
            public static 
            void Deform(UInt32 mask)
            {
                Delegates.glDeformSGIX((UInt32)mask);
            }

            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glDeformSGIX")]
            public static 
            void Deform(Int32 mask)
            {
                Delegates.glDeformSGIX((UInt32)mask);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glLoadIdentityDeformationMapSGIX")]
            public static 
            void LoadIdentityDeformationMap(UInt32 mask)
            {
                Delegates.glLoadIdentityDeformationMapSGIX((UInt32)mask);
            }

            [AutoGenerated(Category = "SgixPolynomialFfd", Version = "1.0", EntryPoint = "glLoadIdentityDeformationMapSGIX")]
            public static 
            void LoadIdentityDeformationMap(Int32 mask)
            {
                Delegates.glLoadIdentityDeformationMapSGIX((UInt32)mask);
            }

            [AutoGenerated(Category = "SgixReferencePlane", Version = "1.0", EntryPoint = "glReferencePlaneSGIX")]
            public static 
            void ReferencePlane(Double[] equation)
            {
                unsafe
                {
                    fixed (Double* equation_ptr = equation)
                    {
                        Delegates.glReferencePlaneSGIX((Double*)equation_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixReferencePlane", Version = "1.0", EntryPoint = "glReferencePlaneSGIX")]
            public static 
            void ReferencePlane(ref Double equation)
            {
                unsafe
                {
                    fixed (Double* equation_ptr = &equation)
                    {
                        Delegates.glReferencePlaneSGIX((Double*)equation_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixReferencePlane", Version = "1.0", EntryPoint = "glReferencePlaneSGIX")]
            public static 
            unsafe void ReferencePlane(Double* equation)
            {
                Delegates.glReferencePlaneSGIX((Double*)equation);
            }

            [AutoGenerated(Category = "SgixFlushRaster", Version = "1.0", EntryPoint = "glFlushRasterSGIX")]
            public static 
            void FlushRaster()
            {
                Delegates.glFlushRasterSGIX();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterfvSGIX")]
            public static 
            void GetListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterfvSGIX")]
            public static 
            void GetListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterfvSGIX")]
            public static 
            void GetListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterfvSGIX")]
            public static 
            void GetListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterfvSGIX")]
            public static 
            unsafe void GetListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, [Out] Single* @params)
            {
                Delegates.glGetListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterfvSGIX")]
            public static 
            unsafe void GetListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, [Out] Single* @params)
            {
                Delegates.glGetListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterivSGIX")]
            public static 
            void GetListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterivSGIX")]
            public static 
            void GetListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterivSGIX")]
            public static 
            void GetListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterivSGIX")]
            public static 
            void GetListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterivSGIX")]
            public static 
            unsafe void GetListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, [Out] Int32* @params)
            {
                Delegates.glGetListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glGetListParameterivSGIX")]
            public static 
            unsafe void GetListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, [Out] Int32* @params)
            {
                Delegates.glGetListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfSGIX")]
            public static 
            void ListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, Single param)
            {
                Delegates.glListParameterfSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single)param);
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfSGIX")]
            public static 
            void ListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, Single param)
            {
                Delegates.glListParameterfSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfvSGIX")]
            public static 
            void ListParameterv(UInt32 list, OpenTK.Graphics.ListParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfvSGIX")]
            public static 
            void ListParameterv(Int32 list, OpenTK.Graphics.ListParameterName pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfvSGIX")]
            public static 
            void ListParameterv(UInt32 list, OpenTK.Graphics.ListParameterName pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfvSGIX")]
            public static 
            void ListParameterv(Int32 list, OpenTK.Graphics.ListParameterName pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfvSGIX")]
            public static 
            unsafe void ListParameterv(UInt32 list, OpenTK.Graphics.ListParameterName pname, Single* @params)
            {
                Delegates.glListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterfvSGIX")]
            public static 
            unsafe void ListParameterv(Int32 list, OpenTK.Graphics.ListParameterName pname, Single* @params)
            {
                Delegates.glListParameterfvSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameteriSGIX")]
            public static 
            void ListParameter(UInt32 list, OpenTK.Graphics.ListParameterName pname, Int32 param)
            {
                Delegates.glListParameteriSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32)param);
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameteriSGIX")]
            public static 
            void ListParameter(Int32 list, OpenTK.Graphics.ListParameterName pname, Int32 param)
            {
                Delegates.glListParameteriSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterivSGIX")]
            public static 
            void ListParameterv(UInt32 list, OpenTK.Graphics.ListParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterivSGIX")]
            public static 
            void ListParameterv(Int32 list, OpenTK.Graphics.ListParameterName pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterivSGIX")]
            public static 
            void ListParameterv(UInt32 list, OpenTK.Graphics.ListParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterivSGIX")]
            public static 
            void ListParameterv(Int32 list, OpenTK.Graphics.ListParameterName pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterivSGIX")]
            public static 
            unsafe void ListParameterv(UInt32 list, OpenTK.Graphics.ListParameterName pname, Int32* @params)
            {
                Delegates.glListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixListPriority", Version = "1.0", EntryPoint = "glListParameterivSGIX")]
            public static 
            unsafe void ListParameterv(Int32 list, OpenTK.Graphics.ListParameterName pname, Int32* @params)
            {
                Delegates.glListParameterivSGIX((UInt32)list, (OpenTK.Graphics.ListParameterName)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentColorMaterialSGIX")]
            public static 
            void FragmentColorMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter mode)
            {
                Delegates.glFragmentColorMaterialSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)mode);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightfSGIX")]
            public static 
            void FragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, Single param)
            {
                Delegates.glFragmentLightfSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Single)param);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightfvSGIX")]
            public static 
            void FragmentLightv(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightfvSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightfvSGIX")]
            public static 
            void FragmentLightv(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightfvSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightfvSGIX")]
            public static 
            unsafe void FragmentLightv(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, Single* @params)
            {
                Delegates.glFragmentLightfvSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightiSGIX")]
            public static 
            void FragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, Int32 param)
            {
                Delegates.glFragmentLightiSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Int32)param);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightivSGIX")]
            public static 
            void FragmentLightv(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightivSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightivSGIX")]
            public static 
            void FragmentLightv(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightivSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightivSGIX")]
            public static 
            unsafe void FragmentLightv(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, Int32* @params)
            {
                Delegates.glFragmentLightivSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModelfSGIX")]
            public static 
            void FragmentLightModel(OpenTK.Graphics.SgixFragmentLighting pname, Single param)
            {
                Delegates.glFragmentLightModelfSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Single)param);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModelfvSGIX")]
            public static 
            void FragmentLightModelv(OpenTK.Graphics.SgixFragmentLighting pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightModelfvSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModelfvSGIX")]
            public static 
            void FragmentLightModelv(OpenTK.Graphics.SgixFragmentLighting pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightModelfvSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModelfvSGIX")]
            public static 
            unsafe void FragmentLightModelv(OpenTK.Graphics.SgixFragmentLighting pname, Single* @params)
            {
                Delegates.glFragmentLightModelfvSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModeliSGIX")]
            public static 
            void FragmentLightModel(OpenTK.Graphics.SgixFragmentLighting pname, Int32 param)
            {
                Delegates.glFragmentLightModeliSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Int32)param);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModelivSGIX")]
            public static 
            void FragmentLightModelv(OpenTK.Graphics.SgixFragmentLighting pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightModelivSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModelivSGIX")]
            public static 
            void FragmentLightModelv(OpenTK.Graphics.SgixFragmentLighting pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightModelivSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentLightModelivSGIX")]
            public static 
            unsafe void FragmentLightModelv(OpenTK.Graphics.SgixFragmentLighting pname, Int32* @params)
            {
                Delegates.glFragmentLightModelivSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialfSGIX")]
            public static 
            void FragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Single param)
            {
                Delegates.glFragmentMaterialfSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single)param);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialfvSGIX")]
            public static 
            void FragmentMaterialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glFragmentMaterialfvSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialfvSGIX")]
            public static 
            void FragmentMaterialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glFragmentMaterialfvSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialfvSGIX")]
            public static 
            unsafe void FragmentMaterialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Single* @params)
            {
                Delegates.glFragmentMaterialfvSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialiSGIX")]
            public static 
            void FragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Int32 param)
            {
                Delegates.glFragmentMaterialiSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32)param);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialivSGIX")]
            public static 
            void FragmentMaterialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glFragmentMaterialivSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialivSGIX")]
            public static 
            void FragmentMaterialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glFragmentMaterialivSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glFragmentMaterialivSGIX")]
            public static 
            unsafe void FragmentMaterialv(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, Int32* @params)
            {
                Delegates.glFragmentMaterialivSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentLightfvSGIX")]
            public static 
            void GetFragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentLightfvSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentLightfvSGIX")]
            public static 
            void GetFragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentLightfvSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentLightfvSGIX")]
            public static 
            unsafe void GetFragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, [Out] Single* @params)
            {
                Delegates.glGetFragmentLightfvSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentLightivSGIX")]
            public static 
            void GetFragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentLightivSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentLightivSGIX")]
            public static 
            void GetFragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentLightivSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentLightivSGIX")]
            public static 
            unsafe void GetFragmentLight(OpenTK.Graphics.SgixFragmentLighting light, OpenTK.Graphics.SgixFragmentLighting pname, [Out] Int32* @params)
            {
                Delegates.glGetFragmentLightivSGIX((OpenTK.Graphics.SgixFragmentLighting)light, (OpenTK.Graphics.SgixFragmentLighting)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentMaterialfvSGIX")]
            public static 
            void GetFragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentMaterialfvSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentMaterialfvSGIX")]
            public static 
            void GetFragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentMaterialfvSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentMaterialfvSGIX")]
            public static 
            unsafe void GetFragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Single* @params)
            {
                Delegates.glGetFragmentMaterialfvSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentMaterialivSGIX")]
            public static 
            void GetFragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentMaterialivSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentMaterialivSGIX")]
            public static 
            void GetFragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentMaterialivSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glGetFragmentMaterialivSGIX")]
            public static 
            unsafe void GetFragmentMaterial(OpenTK.Graphics.MaterialFace face, OpenTK.Graphics.MaterialParameter pname, [Out] Int32* @params)
            {
                Delegates.glGetFragmentMaterialivSGIX((OpenTK.Graphics.MaterialFace)face, (OpenTK.Graphics.MaterialParameter)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "SgixFragmentLighting", Version = "1.0", EntryPoint = "glLightEnviSGIX")]
            public static 
            void LightEnv(OpenTK.Graphics.SgixFragmentLighting pname, Int32 param)
            {
                Delegates.glLightEnviSGIX((OpenTK.Graphics.SgixFragmentLighting)pname, (Int32)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glAsyncMarkerSGIX")]
            public static 
            void AsyncMarker(UInt32 marker)
            {
                Delegates.glAsyncMarkerSGIX((UInt32)marker);
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glAsyncMarkerSGIX")]
            public static 
            void AsyncMarker(Int32 marker)
            {
                Delegates.glAsyncMarkerSGIX((UInt32)marker);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glFinishAsyncSGIX")]
            public static 
            Int32 FinishAsync([Out] UInt32[] markerp)
            {
                unsafe
                {
                    fixed (UInt32* markerp_ptr = markerp)
                    {
                        return Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glFinishAsyncSGIX")]
            public static 
            Int32 FinishAsync([Out] Int32[] markerp)
            {
                unsafe
                {
                    fixed (Int32* markerp_ptr = markerp)
                    {
                        return Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glFinishAsyncSGIX")]
            public static 
            Int32 FinishAsync([Out] out UInt32 markerp)
            {
                unsafe
                {
                    fixed (UInt32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glFinishAsyncSGIX")]
            public static 
            Int32 FinishAsync([Out] out Int32 markerp)
            {
                unsafe
                {
                    fixed (Int32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glFinishAsyncSGIX")]
            public static 
            unsafe Int32 FinishAsync([Out] UInt32* markerp)
            {
                return Delegates.glFinishAsyncSGIX((UInt32*)markerp);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glFinishAsyncSGIX")]
            public static 
            unsafe Int32 FinishAsync([Out] Int32* markerp)
            {
                return Delegates.glFinishAsyncSGIX((UInt32*)markerp);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glPollAsyncSGIX")]
            public static 
            Int32 PollAsync([Out] UInt32[] markerp)
            {
                unsafe
                {
                    fixed (UInt32* markerp_ptr = markerp)
                    {
                        return Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glPollAsyncSGIX")]
            public static 
            Int32 PollAsync([Out] Int32[] markerp)
            {
                unsafe
                {
                    fixed (Int32* markerp_ptr = markerp)
                    {
                        return Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glPollAsyncSGIX")]
            public static 
            Int32 PollAsync([Out] out UInt32 markerp)
            {
                unsafe
                {
                    fixed (UInt32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glPollAsyncSGIX")]
            public static 
            Int32 PollAsync([Out] out Int32 markerp)
            {
                unsafe
                {
                    fixed (Int32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glPollAsyncSGIX")]
            public static 
            unsafe Int32 PollAsync([Out] UInt32* markerp)
            {
                return Delegates.glPollAsyncSGIX((UInt32*)markerp);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glPollAsyncSGIX")]
            public static 
            unsafe Int32 PollAsync([Out] Int32* markerp)
            {
                return Delegates.glPollAsyncSGIX((UInt32*)markerp);
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glGenAsyncMarkersSGIX")]
            public static 
            Int32 GenAsyncMarkers(Int32 range)
            {
                return Delegates.glGenAsyncMarkersSGIX((Int32)range);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glDeleteAsyncMarkersSGIX")]
            public static 
            void DeleteAsyncMarkers(UInt32 marker, Int32 range)
            {
                Delegates.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glDeleteAsyncMarkersSGIX")]
            public static 
            void DeleteAsyncMarkers(Int32 marker, Int32 range)
            {
                Delegates.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glIsAsyncMarkerSGIX")]
            public static 
            bool IsAsyncMarker(UInt32 marker)
            {
                return Delegates.glIsAsyncMarkerSGIX((UInt32)marker);
            }

            [AutoGenerated(Category = "SgixAsync", Version = "1.0", EntryPoint = "glIsAsyncMarkerSGIX")]
            public static 
            bool IsAsyncMarker(Int32 marker)
            {
                return Delegates.glIsAsyncMarkerSGIX((UInt32)marker);
            }

            [AutoGenerated(Category = "SgixIglooInterface", Version = "1.0", EntryPoint = "glIglooInterfaceSGIX")]
            public static 
            void IglooInterface(OpenTK.Graphics.All pname, IntPtr @params)
            {
                unsafe
                {
                    Delegates.glIglooInterfaceSGIX((OpenTK.Graphics.All)pname, (IntPtr)@params);
                }
            }

            [AutoGenerated(Category = "SgixIglooInterface", Version = "1.0", EntryPoint = "glIglooInterfaceSGIX")]
            public static 
            void IglooInterface(OpenTK.Graphics.All pname, [In, Out] object @params)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIglooInterfaceSGIX((OpenTK.Graphics.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }

        }

        public static partial class HP
        {
            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameteriHP")]
            public static 
            void ImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, Int32 param)
            {
                Delegates.glImageTransformParameteriHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Int32)param);
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameterfHP")]
            public static 
            void ImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, Single param)
            {
                Delegates.glImageTransformParameterfHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Single)param);
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameterivHP")]
            public static 
            void ImageTransformParameterv(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glImageTransformParameterivHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameterivHP")]
            public static 
            void ImageTransformParameterv(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, ref Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glImageTransformParameterivHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameterivHP")]
            public static 
            unsafe void ImageTransformParameterv(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, Int32* @params)
            {
                Delegates.glImageTransformParameterivHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameterfvHP")]
            public static 
            void ImageTransformParameterv(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glImageTransformParameterfvHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameterfvHP")]
            public static 
            void ImageTransformParameterv(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, ref Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glImageTransformParameterfvHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glImageTransformParameterfvHP")]
            public static 
            unsafe void ImageTransformParameterv(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, Single* @params)
            {
                Delegates.glImageTransformParameterfvHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glGetImageTransformParameterivHP")]
            public static 
            void GetImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetImageTransformParameterivHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glGetImageTransformParameterivHP")]
            public static 
            void GetImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetImageTransformParameterivHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glGetImageTransformParameterivHP")]
            public static 
            unsafe void GetImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, [Out] Int32* @params)
            {
                Delegates.glGetImageTransformParameterivHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glGetImageTransformParameterfvHP")]
            public static 
            void GetImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetImageTransformParameterfvHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glGetImageTransformParameterfvHP")]
            public static 
            void GetImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetImageTransformParameterfvHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "HpImageTransform", Version = "1.1", EntryPoint = "glGetImageTransformParameterfvHP")]
            public static 
            unsafe void GetImageTransformParameter(OpenTK.Graphics.HpImageTransform target, OpenTK.Graphics.HpImageTransform pname, [Out] Single* @params)
            {
                Delegates.glGetImageTransformParameterfvHP((OpenTK.Graphics.HpImageTransform)target, (OpenTK.Graphics.HpImageTransform)pname, (Single*)@params);
            }

        }

        public static partial class Pgi
        {
            [AutoGenerated(Category = "PgiMiscHints", Version = "1.1", EntryPoint = "glHintPGI")]
            public static 
            void Hint(OpenTK.Graphics.PgiMiscHints target, Int32 mode)
            {
                Delegates.glHintPGI((OpenTK.Graphics.PgiMiscHints)target, (Int32)mode);
            }

        }

        public static partial class Intel
        {
            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glVertexPointervINTEL")]
            public static 
            void VertexPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexPointervINTEL((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glVertexPointervINTEL")]
            public static 
            void VertexPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointervINTEL((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glNormalPointervINTEL")]
            public static 
            void NormalPointer(OpenTK.Graphics.NormalPointerType type, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glNormalPointervINTEL((OpenTK.Graphics.NormalPointerType)type, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glNormalPointervINTEL")]
            public static 
            void NormalPointer(OpenTK.Graphics.NormalPointerType type, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointervINTEL((OpenTK.Graphics.NormalPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glColorPointervINTEL")]
            public static 
            void ColorPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glColorPointervINTEL((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glColorPointervINTEL")]
            public static 
            void ColorPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointervINTEL((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glTexCoordPointervINTEL")]
            public static 
            void TexCoordPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glTexCoordPointervINTEL((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "IntelParallelArrays", Version = "1.1", EntryPoint = "glTexCoordPointervINTEL")]
            public static 
            void TexCoordPointer(Int32 size, OpenTK.Graphics.VertexPointerType type, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointervINTEL((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

        }

        public static partial class Sunx
        {
            [AutoGenerated(Category = "SunxConstantData", Version = "1.1", EntryPoint = "glFinishTextureSUNX")]
            public static 
            void FinishTexture()
            {
                Delegates.glFinishTextureSUNX();
            }

        }

        public static partial class Sun
        {
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactorbSUN")]
            public static 
            void GlobalAlphaFactor(SByte factor)
            {
                Delegates.glGlobalAlphaFactorbSUN((SByte)factor);
            }

            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactorsSUN")]
            public static 
            void GlobalAlphaFactors(Int16 factor)
            {
                Delegates.glGlobalAlphaFactorsSUN((Int16)factor);
            }

            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactoriSUN")]
            public static 
            void GlobalAlphaFactor(Int32 factor)
            {
                Delegates.glGlobalAlphaFactoriSUN((Int32)factor);
            }

            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactorfSUN")]
            public static 
            void GlobalAlphaFactor(Single factor)
            {
                Delegates.glGlobalAlphaFactorfSUN((Single)factor);
            }

            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactordSUN")]
            public static 
            void GlobalAlphaFactor(Double factor)
            {
                Delegates.glGlobalAlphaFactordSUN((Double)factor);
            }

            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactorubSUN")]
            public static 
            void GlobalAlphaFactor(Byte factor)
            {
                Delegates.glGlobalAlphaFactorubSUN((Byte)factor);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactorusSUN")]
            public static 
            void GlobalAlphaFactor(UInt16 factor)
            {
                Delegates.glGlobalAlphaFactorusSUN((UInt16)factor);
            }

            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactorusSUN")]
            public static 
            void GlobalAlphaFactor(Int16 factor)
            {
                Delegates.glGlobalAlphaFactorusSUN((UInt16)factor);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunGlobalAlpha", Version = "1.1", EntryPoint = "glGlobalAlphaFactoruiSUN")]
            public static 
            void GlobalAlphaFactor(UInt32 factor)
            {
                Delegates.glGlobalAlphaFactoruiSUN((UInt32)factor);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuiSUN")]
            public static 
            void ReplacementCode(UInt32 code)
            {
                Delegates.glReplacementCodeuiSUN((UInt32)code);
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuiSUN")]
            public static 
            void ReplacementCode(Int32 code)
            {
                Delegates.glReplacementCodeuiSUN((UInt32)code);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusSUN")]
            public static 
            void ReplacementCode(UInt16 code)
            {
                Delegates.glReplacementCodeusSUN((UInt16)code);
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusSUN")]
            public static 
            void ReplacementCode(Int16 code)
            {
                Delegates.glReplacementCodeusSUN((UInt16)code);
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeubSUN")]
            public static 
            void ReplacementCode(Byte code)
            {
                Delegates.glReplacementCodeubSUN((Byte)code);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuivSUN")]
            public static 
            void ReplacementCodev(UInt32[] code)
            {
                unsafe
                {
                    fixed (UInt32* code_ptr = code)
                    {
                        Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuivSUN")]
            public static 
            void ReplacementCodev(Int32[] code)
            {
                unsafe
                {
                    fixed (Int32* code_ptr = code)
                    {
                        Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuivSUN")]
            public static 
            void ReplacementCodev(ref UInt32 code)
            {
                unsafe
                {
                    fixed (UInt32* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuivSUN")]
            public static 
            void ReplacementCodev(ref Int32 code)
            {
                unsafe
                {
                    fixed (Int32* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuivSUN")]
            public static 
            unsafe void ReplacementCodev(UInt32* code)
            {
                Delegates.glReplacementCodeuivSUN((UInt32*)code);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeuivSUN")]
            public static 
            unsafe void ReplacementCodev(Int32* code)
            {
                Delegates.glReplacementCodeuivSUN((UInt32*)code);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusvSUN")]
            public static 
            void ReplacementCodev(UInt16[] code)
            {
                unsafe
                {
                    fixed (UInt16* code_ptr = code)
                    {
                        Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusvSUN")]
            public static 
            void ReplacementCodev(Int16[] code)
            {
                unsafe
                {
                    fixed (Int16* code_ptr = code)
                    {
                        Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusvSUN")]
            public static 
            void ReplacementCodev(ref UInt16 code)
            {
                unsafe
                {
                    fixed (UInt16* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusvSUN")]
            public static 
            void ReplacementCodev(ref Int16 code)
            {
                unsafe
                {
                    fixed (Int16* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusvSUN")]
            public static 
            unsafe void ReplacementCodev(UInt16* code)
            {
                Delegates.glReplacementCodeusvSUN((UInt16*)code);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeusvSUN")]
            public static 
            unsafe void ReplacementCodev(Int16* code)
            {
                Delegates.glReplacementCodeusvSUN((UInt16*)code);
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeubvSUN")]
            public static 
            void ReplacementCodev(Byte[] code)
            {
                unsafe
                {
                    fixed (Byte* code_ptr = code)
                    {
                        Delegates.glReplacementCodeubvSUN((Byte*)code_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeubvSUN")]
            public static 
            void ReplacementCodev(ref Byte code)
            {
                unsafe
                {
                    fixed (Byte* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeubvSUN((Byte*)code_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodeubvSUN")]
            public static 
            unsafe void ReplacementCodev(Byte* code)
            {
                Delegates.glReplacementCodeubvSUN((Byte*)code);
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodePointerSUN")]
            public static 
            void ReplacementCodePointer(OpenTK.Graphics.SunTriangleList type, Int32 stride, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glReplacementCodePointerSUN((OpenTK.Graphics.SunTriangleList)type, (Int32)stride, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "SunTriangleList", Version = "1.1", EntryPoint = "glReplacementCodePointerSUN")]
            public static 
            void ReplacementCodePointer(OpenTK.Graphics.SunTriangleList type, Int32 stride, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReplacementCodePointerSUN((OpenTK.Graphics.SunTriangleList)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex2fSUN")]
            public static 
            void Color4ubVertex2(Byte r, Byte g, Byte b, Byte a, Single x, Single y)
            {
                Delegates.glColor4ubVertex2fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex2fvSUN")]
            public static 
            void Color4ubVertex2(Byte[] c, Single[] v)
            {
                unsafe
                {
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex2fvSUN")]
            public static 
            void Color4ubVertex2(ref Byte c, ref Single v)
            {
                unsafe
                {
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex2fvSUN")]
            public static 
            unsafe void Color4ubVertex2(Byte* c, Single* v)
            {
                Delegates.glColor4ubVertex2fvSUN((Byte*)c, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex3fSUN")]
            public static 
            void Color4ubVertex3(Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                Delegates.glColor4ubVertex3fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex3fvSUN")]
            public static 
            void Color4ubVertex3(Byte[] c, Single[] v)
            {
                unsafe
                {
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex3fvSUN")]
            public static 
            void Color4ubVertex3(ref Byte c, ref Single v)
            {
                unsafe
                {
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4ubVertex3fvSUN")]
            public static 
            unsafe void Color4ubVertex3(Byte* c, Single* v)
            {
                Delegates.glColor4ubVertex3fvSUN((Byte*)c, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor3fVertex3fSUN")]
            public static 
            void Color3fVertex3(Single r, Single g, Single b, Single x, Single y, Single z)
            {
                Delegates.glColor3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor3fVertex3fvSUN")]
            public static 
            void Color3fVertex3(Single[] c, Single[] v)
            {
                unsafe
                {
                    fixed (Single* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor3fVertex3fvSUN")]
            public static 
            void Color3fVertex3(ref Single c, ref Single v)
            {
                unsafe
                {
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor3fVertex3fvSUN")]
            public static 
            unsafe void Color3fVertex3(Single* c, Single* v)
            {
                Delegates.glColor3fVertex3fvSUN((Single*)c, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glNormal3fVertex3fSUN")]
            public static 
            void Normal3fVertex3(Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glNormal3fVertex3fSUN((Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glNormal3fVertex3fvSUN")]
            public static 
            void Normal3fVertex3(Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glNormal3fVertex3fvSUN")]
            public static 
            void Normal3fVertex3(ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glNormal3fVertex3fvSUN")]
            public static 
            unsafe void Normal3fVertex3(Single* n, Single* v)
            {
                Delegates.glNormal3fVertex3fvSUN((Single*)n, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4fNormal3fVertex3fSUN")]
            public static 
            void Color4fNormal3fVertex3(Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glColor4fNormal3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4fNormal3fVertex3fvSUN")]
            public static 
            void Color4fNormal3fVertex3(Single[] c, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4fNormal3fVertex3fvSUN")]
            public static 
            void Color4fNormal3fVertex3(ref Single c, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glColor4fNormal3fVertex3fvSUN")]
            public static 
            unsafe void Color4fNormal3fVertex3(Single* c, Single* n, Single* v)
            {
                Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fVertex3fSUN")]
            public static 
            void TexCoord2fVertex3(Single s, Single t, Single x, Single y, Single z)
            {
                Delegates.glTexCoord2fVertex3fSUN((Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fVertex3fvSUN")]
            public static 
            void TexCoord2fVertex3(Single[] tc, Single[] v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fVertex3fvSUN")]
            public static 
            void TexCoord2fVertex3(ref Single tc, ref Single v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fVertex3fvSUN")]
            public static 
            unsafe void TexCoord2fVertex3(Single* tc, Single* v)
            {
                Delegates.glTexCoord2fVertex3fvSUN((Single*)tc, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fVertex4fSUN")]
            public static 
            void TexCoord4fVertex4(Single s, Single t, Single p, Single q, Single x, Single y, Single z, Single w)
            {
                Delegates.glTexCoord4fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fVertex4fvSUN")]
            public static 
            void TexCoord4fVertex4(Single[] tc, Single[] v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fVertex4fvSUN")]
            public static 
            void TexCoord4fVertex4(ref Single tc, ref Single v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fVertex4fvSUN")]
            public static 
            unsafe void TexCoord4fVertex4(Single* tc, Single* v)
            {
                Delegates.glTexCoord4fVertex4fvSUN((Single*)tc, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4ubVertex3fSUN")]
            public static 
            void TexCoord2fColor4ubVertex3(Single s, Single t, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                Delegates.glTexCoord2fColor4ubVertex3fSUN((Single)s, (Single)t, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN")]
            public static 
            void TexCoord2fColor4ubVertex3(Single[] tc, Byte[] c, Single[] v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN")]
            public static 
            void TexCoord2fColor4ubVertex3(ref Single tc, ref Byte c, ref Single v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN")]
            public static 
            unsafe void TexCoord2fColor4ubVertex3(Single* tc, Byte* c, Single* v)
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor3fVertex3fSUN")]
            public static 
            void TexCoord2fColor3fVertex3(Single s, Single t, Single r, Single g, Single b, Single x, Single y, Single z)
            {
                Delegates.glTexCoord2fColor3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor3fVertex3fvSUN")]
            public static 
            void TexCoord2fColor3fVertex3(Single[] tc, Single[] c, Single[] v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor3fVertex3fvSUN")]
            public static 
            void TexCoord2fColor3fVertex3(ref Single tc, ref Single c, ref Single v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor3fVertex3fvSUN")]
            public static 
            unsafe void TexCoord2fColor3fVertex3(Single* tc, Single* c, Single* v)
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fNormal3fVertex3fSUN")]
            public static 
            void TexCoord2fNormal3fVertex3(Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glTexCoord2fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            void TexCoord2fNormal3fVertex3(Single[] tc, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            void TexCoord2fNormal3fVertex3(ref Single tc, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            unsafe void TexCoord2fNormal3fVertex3(Single* tc, Single* n, Single* v)
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fSUN")]
            public static 
            void TexCoord2fColor4fNormal3fVertex3(Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            void TexCoord2fColor4fNormal3fVertex3(Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            void TexCoord2fColor4fNormal3fVertex3(ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3(Single* tc, Single* c, Single* n, Single* v)
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fSUN")]
            public static 
            void TexCoord4fColor4fNormal3fVertex4(Single s, Single t, Single p, Single q, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z, Single w)
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN")]
            public static 
            void TexCoord4fColor4fNormal3fVertex4(Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN")]
            public static 
            void TexCoord4fColor4fNormal3fVertex4(ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN")]
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4(Single* tc, Single* c, Single* n, Single* v)
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fSUN")]
            public static 
            void ReplacementCodeuiVertex3(UInt32 rc, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fSUN")]
            public static 
            void ReplacementCodeuiVertex3(Int32 rc, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            public static 
            void ReplacementCodeuiVertex3v(UInt32[] rc, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            public static 
            void ReplacementCodeuiVertex3v(Int32[] rc, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            public static 
            void ReplacementCodeuiVertex3v(ref UInt32 rc, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            public static 
            void ReplacementCodeuiVertex3v(ref Int32 rc, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiVertex3v(UInt32* rc, Single* v)
            {
                Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiVertex3v(Int32* rc, Single* v)
            {
                Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fSUN")]
            public static 
            void ReplacementCodeuiColor4ubVertex3(UInt32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fSUN")]
            public static 
            void ReplacementCodeuiColor4ubVertex3(Int32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4ubVertex3v(UInt32[] rc, Byte[] c, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4ubVertex3v(Int32[] rc, Byte[] c, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4ubVertex3v(ref UInt32 rc, ref Byte c, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4ubVertex3v(ref Int32 rc, ref Byte c, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3v(UInt32* rc, Byte* c, Single* v)
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3v(Int32* rc, Byte* c, Single* v)
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiColor3fVertex3(UInt32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiColor3fVertex3(Int32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor3fVertex3v(UInt32[] rc, Single[] c, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor3fVertex3v(Int32[] rc, Single[] c, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor3fVertex3v(ref UInt32 rc, ref Single c, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor3fVertex3v(ref Int32 rc, ref Single c, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3v(UInt32* rc, Single* c, Single* v)
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3v(Int32* rc, Single* c, Single* v)
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiNormal3fVertex3(UInt32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiNormal3fVertex3(Int32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiNormal3fVertex3v(UInt32[] rc, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiNormal3fVertex3v(Int32[] rc, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiNormal3fVertex3v(ref UInt32 rc, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiNormal3fVertex3v(ref Int32 rc, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3v(UInt32* rc, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3v(Int32* rc, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3(UInt32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3(Int32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3v(UInt32[] rc, Single[] c, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3v(Int32[] rc, Single[] c, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3v(ref UInt32 rc, ref Single c, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3v(ref Int32 rc, ref Single c, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3v(UInt32* rc, Single* c, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3v(Int32* rc, Single* c, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fVertex3(UInt32 rc, Single s, Single t, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fVertex3(Int32 rc, Single s, Single t, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fVertex3v(UInt32[] rc, Single[] tc, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fVertex3v(Int32[] rc, Single[] tc, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fVertex3v(ref UInt32 rc, ref Single tc, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fVertex3v(ref Int32 rc, ref Single tc, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3v(UInt32* rc, Single* tc, Single* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3v(Int32* rc, Single* tc, Single* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3(UInt32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3(Int32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3v(UInt32[] rc, Single[] tc, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3v(Int32[] rc, Single[] tc, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3v(ref UInt32 rc, ref Single tc, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3v(ref Int32 rc, ref Single tc, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3v(UInt32* rc, Single* tc, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3v(Int32* rc, Single* tc, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(UInt32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(Int32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3v(UInt32[] rc, Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = rc)
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3v(Int32[] rc, Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = rc)
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3v(ref UInt32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3v(ref Int32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3v(UInt32* rc, Single* tc, Single* c, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "SunVertex", Version = "1.1", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3v(Int32* rc, Single* tc, Single* c, Single* n, Single* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
            }

            [AutoGenerated(Category = "SunMeshArray", Version = "1.1", EntryPoint = "glDrawMeshArraysSUN")]
            public static 
            void DrawMeshArrays(OpenTK.Graphics.BeginMode mode, Int32 first, Int32 count, Int32 width)
            {
                Delegates.glDrawMeshArraysSUN((OpenTK.Graphics.BeginMode)mode, (Int32)first, (Int32)count, (Int32)width);
            }

        }

        public static partial class Ingr
        {
            [AutoGenerated(Category = "IngrBlendFuncSeparate", Version = "1.0", EntryPoint = "glBlendFuncSeparateINGR")]
            public static 
            void BlendFuncSeparate(OpenTK.Graphics.All sfactorRGB, OpenTK.Graphics.All dfactorRGB, OpenTK.Graphics.All sfactorAlpha, OpenTK.Graphics.All dfactorAlpha)
            {
                Delegates.glBlendFuncSeparateINGR((OpenTK.Graphics.All)sfactorRGB, (OpenTK.Graphics.All)dfactorRGB, (OpenTK.Graphics.All)sfactorAlpha, (OpenTK.Graphics.All)dfactorAlpha);
            }

        }

        public static partial class Mesa
        {
            [AutoGenerated(Category = "MesaResizeBuffers", Version = "1.0", EntryPoint = "glResizeBuffersMESA")]
            public static 
            void ResizeBuffers()
            {
                Delegates.glResizeBuffersMESA();
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dMESA")]
            public static 
            void WindowPos2(Double x, Double y)
            {
                Delegates.glWindowPos2dMESA((Double)x, (Double)y);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dvMESA")]
            public static 
            void WindowPos2(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos2dvMESA((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dvMESA")]
            public static 
            void WindowPos2(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dvMESA((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2dvMESA")]
            public static 
            unsafe void WindowPos2(Double* v)
            {
                Delegates.glWindowPos2dvMESA((Double*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fMESA")]
            public static 
            void WindowPos2(Single x, Single y)
            {
                Delegates.glWindowPos2fMESA((Single)x, (Single)y);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fvMESA")]
            public static 
            void WindowPos2(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos2fvMESA((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fvMESA")]
            public static 
            void WindowPos2(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fvMESA((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2fvMESA")]
            public static 
            unsafe void WindowPos2(Single* v)
            {
                Delegates.glWindowPos2fvMESA((Single*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2iMESA")]
            public static 
            void WindowPos2(Int32 x, Int32 y)
            {
                Delegates.glWindowPos2iMESA((Int32)x, (Int32)y);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2ivMESA")]
            public static 
            void WindowPos2(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos2ivMESA((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2ivMESA")]
            public static 
            void WindowPos2(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos2ivMESA((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2ivMESA")]
            public static 
            unsafe void WindowPos2(Int32* v)
            {
                Delegates.glWindowPos2ivMESA((Int32*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2sMESA")]
            public static 
            void WindowPos2(Int16 x, Int16 y)
            {
                Delegates.glWindowPos2sMESA((Int16)x, (Int16)y);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2svMESA")]
            public static 
            void WindowPos2(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos2svMESA((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2svMESA")]
            public static 
            void WindowPos2(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos2svMESA((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos2svMESA")]
            public static 
            unsafe void WindowPos2(Int16* v)
            {
                Delegates.glWindowPos2svMESA((Int16*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dMESA")]
            public static 
            void WindowPos3(Double x, Double y, Double z)
            {
                Delegates.glWindowPos3dMESA((Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dvMESA")]
            public static 
            void WindowPos3(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos3dvMESA((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dvMESA")]
            public static 
            void WindowPos3(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dvMESA((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3dvMESA")]
            public static 
            unsafe void WindowPos3(Double* v)
            {
                Delegates.glWindowPos3dvMESA((Double*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fMESA")]
            public static 
            void WindowPos3(Single x, Single y, Single z)
            {
                Delegates.glWindowPos3fMESA((Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fvMESA")]
            public static 
            void WindowPos3(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos3fvMESA((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fvMESA")]
            public static 
            void WindowPos3(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fvMESA((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3fvMESA")]
            public static 
            unsafe void WindowPos3(Single* v)
            {
                Delegates.glWindowPos3fvMESA((Single*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3iMESA")]
            public static 
            void WindowPos3(Int32 x, Int32 y, Int32 z)
            {
                Delegates.glWindowPos3iMESA((Int32)x, (Int32)y, (Int32)z);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3ivMESA")]
            public static 
            void WindowPos3(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos3ivMESA((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3ivMESA")]
            public static 
            void WindowPos3(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos3ivMESA((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3ivMESA")]
            public static 
            unsafe void WindowPos3(Int32* v)
            {
                Delegates.glWindowPos3ivMESA((Int32*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3sMESA")]
            public static 
            void WindowPos3(Int16 x, Int16 y, Int16 z)
            {
                Delegates.glWindowPos3sMESA((Int16)x, (Int16)y, (Int16)z);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3svMESA")]
            public static 
            void WindowPos3(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos3svMESA((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3svMESA")]
            public static 
            void WindowPos3(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos3svMESA((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos3svMESA")]
            public static 
            unsafe void WindowPos3(Int16* v)
            {
                Delegates.glWindowPos3svMESA((Int16*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4dMESA")]
            public static 
            void WindowPos4(Double x, Double y, Double z, Double w)
            {
                Delegates.glWindowPos4dMESA((Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4dvMESA")]
            public static 
            void WindowPos4(Double[] v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos4dvMESA((Double*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4dvMESA")]
            public static 
            void WindowPos4(ref Double v)
            {
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos4dvMESA((Double*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4dvMESA")]
            public static 
            unsafe void WindowPos4(Double* v)
            {
                Delegates.glWindowPos4dvMESA((Double*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4fMESA")]
            public static 
            void WindowPos4(Single x, Single y, Single z, Single w)
            {
                Delegates.glWindowPos4fMESA((Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4fvMESA")]
            public static 
            void WindowPos4(Single[] v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos4fvMESA((Single*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4fvMESA")]
            public static 
            void WindowPos4(ref Single v)
            {
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos4fvMESA((Single*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4fvMESA")]
            public static 
            unsafe void WindowPos4(Single* v)
            {
                Delegates.glWindowPos4fvMESA((Single*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4iMESA")]
            public static 
            void WindowPos4(Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glWindowPos4iMESA((Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4ivMESA")]
            public static 
            void WindowPos4(Int32[] v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos4ivMESA((Int32*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4ivMESA")]
            public static 
            void WindowPos4(ref Int32 v)
            {
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos4ivMESA((Int32*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4ivMESA")]
            public static 
            unsafe void WindowPos4(Int32* v)
            {
                Delegates.glWindowPos4ivMESA((Int32*)v);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4sMESA")]
            public static 
            void WindowPos4(Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glWindowPos4sMESA((Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4svMESA")]
            public static 
            void WindowPos4(Int16[] v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos4svMESA((Int16*)v_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4svMESA")]
            public static 
            void WindowPos4(ref Int16 v)
            {
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos4svMESA((Int16*)v_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "MesaWindowPos", Version = "1.0", EntryPoint = "glWindowPos4svMESA")]
            public static 
            unsafe void WindowPos4(Int16* v)
            {
                Delegates.glWindowPos4svMESA((Int16*)v);
            }

        }

        public static partial class Ibm
        {
            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawArraysIBM")]
            public static 
            void MultiModeDrawArrays(OpenTK.Graphics.BeginMode[] mode, Int32[] first, Int32[] count, Int32 primcount, Int32 modestride)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.BeginMode* mode_ptr = mode)
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM((OpenTK.Graphics.BeginMode*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
                    }
                }
            }

            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawArraysIBM")]
            public static 
            void MultiModeDrawArrays(ref OpenTK.Graphics.BeginMode mode, ref Int32 first, ref Int32 count, Int32 primcount, Int32 modestride)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.BeginMode* mode_ptr = &mode)
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM((OpenTK.Graphics.BeginMode*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawArraysIBM")]
            public static 
            unsafe void MultiModeDrawArrays(OpenTK.Graphics.BeginMode* mode, Int32* first, Int32* count, Int32 primcount, Int32 modestride)
            {
                Delegates.glMultiModeDrawArraysIBM((OpenTK.Graphics.BeginMode*)mode, (Int32*)first, (Int32*)count, (Int32)primcount, (Int32)modestride);
            }

            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawElementsIBM")]
            public static 
            void MultiModeDrawElements(OpenTK.Graphics.BeginMode[] mode, Int32[] count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 modestride)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.BeginMode* mode_ptr = mode)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawElementsIBM((OpenTK.Graphics.BeginMode*)mode_ptr, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
                    }
                }
            }

            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawElementsIBM")]
            public static 
            void MultiModeDrawElements(OpenTK.Graphics.BeginMode[] mode, Int32[] count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount, Int32 modestride)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.BeginMode* mode_ptr = mode)
                    fixed (Int32* count_ptr = count)
                    {
                        System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((OpenTK.Graphics.BeginMode*)mode_ptr, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawElementsIBM")]
            public static 
            void MultiModeDrawElements(ref OpenTK.Graphics.BeginMode mode, ref Int32 count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 modestride)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.BeginMode* mode_ptr = &mode)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawElementsIBM((OpenTK.Graphics.BeginMode*)mode_ptr, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
                    }
                }
            }

            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawElementsIBM")]
            public static 
            void MultiModeDrawElements(ref OpenTK.Graphics.BeginMode mode, ref Int32 count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount, Int32 modestride)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.BeginMode* mode_ptr = &mode)
                    fixed (Int32* count_ptr = &count)
                    {
                        System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((OpenTK.Graphics.BeginMode*)mode_ptr, (Int32*)count_ptr, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawElementsIBM")]
            public static 
            unsafe void MultiModeDrawElements(OpenTK.Graphics.BeginMode* mode, Int32* count, OpenTK.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 modestride)
            {
                Delegates.glMultiModeDrawElementsIBM((OpenTK.Graphics.BeginMode*)mode, (Int32*)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "IbmMultimodeDrawArrays", Version = "1.1", EntryPoint = "glMultiModeDrawElementsIBM")]
            public static 
            unsafe void MultiModeDrawElements(OpenTK.Graphics.BeginMode* mode, Int32* count, OpenTK.Graphics.DrawElementsType type, [In, Out] object indices, Int32 primcount, Int32 modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiModeDrawElementsIBM((OpenTK.Graphics.BeginMode*)mode, (Int32*)count, (OpenTK.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glColorPointerListIBM")]
            public static 
            void ColorPointerList(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                unsafe
                {
                    Delegates.glColorPointerListIBM((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glColorPointerListIBM")]
            public static 
            void ColorPointerList(Int32 size, OpenTK.Graphics.ColorPointerType type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerListIBM((Int32)size, (OpenTK.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glSecondaryColorPointerListIBM")]
            public static 
            void SecondaryColorPointerList(Int32 size, OpenTK.Graphics.IbmVertexArrayLists type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                unsafe
                {
                    Delegates.glSecondaryColorPointerListIBM((Int32)size, (OpenTK.Graphics.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glSecondaryColorPointerListIBM")]
            public static 
            void SecondaryColorPointerList(Int32 size, OpenTK.Graphics.IbmVertexArrayLists type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerListIBM((Int32)size, (OpenTK.Graphics.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glEdgeFlagPointerListIBM")]
            public static 
            void EdgeFlagPointerList(Int32 stride, bool[] pointer, Int32 ptrstride)
            {
                unsafe
                {
                    fixed (bool* pointer_ptr = pointer)
                    {
                        Delegates.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer_ptr, (Int32)ptrstride);
                    }
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glEdgeFlagPointerListIBM")]
            public static 
            void EdgeFlagPointerList(Int32 stride, ref bool pointer, Int32 ptrstride)
            {
                unsafe
                {
                    fixed (bool* pointer_ptr = &pointer)
                    {
                        Delegates.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer_ptr, (Int32)ptrstride);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glEdgeFlagPointerListIBM")]
            public static 
            unsafe void EdgeFlagPointerList(Int32 stride, bool* pointer, Int32 ptrstride)
            {
                Delegates.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer, (Int32)ptrstride);
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glFogCoordPointerListIBM")]
            public static 
            void FogCoordPointerList(OpenTK.Graphics.IbmVertexArrayLists type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                unsafe
                {
                    Delegates.glFogCoordPointerListIBM((OpenTK.Graphics.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glFogCoordPointerListIBM")]
            public static 
            void FogCoordPointerList(OpenTK.Graphics.IbmVertexArrayLists type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerListIBM((OpenTK.Graphics.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glIndexPointerListIBM")]
            public static 
            void IndexPointerList(OpenTK.Graphics.IndexPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                unsafe
                {
                    Delegates.glIndexPointerListIBM((OpenTK.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glIndexPointerListIBM")]
            public static 
            void IndexPointerList(OpenTK.Graphics.IndexPointerType type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerListIBM((OpenTK.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glNormalPointerListIBM")]
            public static 
            void NormalPointerList(OpenTK.Graphics.NormalPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                unsafe
                {
                    Delegates.glNormalPointerListIBM((OpenTK.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glNormalPointerListIBM")]
            public static 
            void NormalPointerList(OpenTK.Graphics.NormalPointerType type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerListIBM((OpenTK.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glTexCoordPointerListIBM")]
            public static 
            void TexCoordPointerList(Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                unsafe
                {
                    Delegates.glTexCoordPointerListIBM((Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glTexCoordPointerListIBM")]
            public static 
            void TexCoordPointerList(Int32 size, OpenTK.Graphics.TexCoordPointerType type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerListIBM((Int32)size, (OpenTK.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glVertexPointerListIBM")]
            public static 
            void VertexPointerList(Int32 size, OpenTK.Graphics.VertexPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                unsafe
                {
                    Delegates.glVertexPointerListIBM((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
            }

            [AutoGenerated(Category = "IbmVertexArrayLists", Version = "1.1", EntryPoint = "glVertexPointerListIBM")]
            public static 
            void VertexPointerList(Int32 size, OpenTK.Graphics.VertexPointerType type, Int32 stride, [In, Out] object pointer, Int32 ptrstride)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerListIBM((Int32)size, (OpenTK.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

        }

        public static partial class GL_3dfx
        {
            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "3DfxTbuffer", Version = "1.2", EntryPoint = "glTbufferMask3DFX")]
            public static 
            void TbufferMask(UInt32 mask)
            {
                Delegates.glTbufferMask3DFX((UInt32)mask);
            }

            [AutoGenerated(Category = "3DfxTbuffer", Version = "1.2", EntryPoint = "glTbufferMask3DFX")]
            public static 
            void TbufferMask(Int32 mask)
            {
                Delegates.glTbufferMask3DFX((UInt32)mask);
            }

        }

        public static partial class Ati
        {
            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glTexBumpParameterivATI")]
            public static 
            void TexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, Int32[] param)
            {
                unsafe
                {
                    fixed (Int32* param_ptr = param)
                    {
                        Delegates.glTexBumpParameterivATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glTexBumpParameterivATI")]
            public static 
            void TexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, ref Int32 param)
            {
                unsafe
                {
                    fixed (Int32* param_ptr = &param)
                    {
                        Delegates.glTexBumpParameterivATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glTexBumpParameterivATI")]
            public static 
            unsafe void TexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, Int32* param)
            {
                Delegates.glTexBumpParameterivATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Int32*)param);
            }

            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glTexBumpParameterfvATI")]
            public static 
            void TexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, Single[] param)
            {
                unsafe
                {
                    fixed (Single* param_ptr = param)
                    {
                        Delegates.glTexBumpParameterfvATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glTexBumpParameterfvATI")]
            public static 
            void TexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, ref Single param)
            {
                unsafe
                {
                    fixed (Single* param_ptr = &param)
                    {
                        Delegates.glTexBumpParameterfvATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glTexBumpParameterfvATI")]
            public static 
            unsafe void TexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, Single* param)
            {
                Delegates.glTexBumpParameterfvATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Single*)param);
            }

            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glGetTexBumpParameterivATI")]
            public static 
            void GetTexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, [Out] Int32[] param)
            {
                unsafe
                {
                    fixed (Int32* param_ptr = param)
                    {
                        Delegates.glGetTexBumpParameterivATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glGetTexBumpParameterivATI")]
            public static 
            void GetTexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, [Out] out Int32 param)
            {
                unsafe
                {
                    fixed (Int32* param_ptr = &param)
                    {
                        Delegates.glGetTexBumpParameterivATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                        param = *param_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glGetTexBumpParameterivATI")]
            public static 
            unsafe void GetTexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, [Out] Int32* param)
            {
                Delegates.glGetTexBumpParameterivATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Int32*)param);
            }

            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glGetTexBumpParameterfvATI")]
            public static 
            void GetTexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, [Out] Single[] param)
            {
                unsafe
                {
                    fixed (Single* param_ptr = param)
                    {
                        Delegates.glGetTexBumpParameterfvATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glGetTexBumpParameterfvATI")]
            public static 
            void GetTexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, [Out] out Single param)
            {
                unsafe
                {
                    fixed (Single* param_ptr = &param)
                    {
                        Delegates.glGetTexBumpParameterfvATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                        param = *param_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiEnvmapBumpmap", Version = "1.2", EntryPoint = "glGetTexBumpParameterfvATI")]
            public static 
            unsafe void GetTexBumpParameter(OpenTK.Graphics.AtiEnvmapBumpmap pname, [Out] Single* param)
            {
                Delegates.glGetTexBumpParameterfvATI((OpenTK.Graphics.AtiEnvmapBumpmap)pname, (Single*)param);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glGenFragmentShadersATI")]
            public static 
            Int32 GenFragmentShaders(UInt32 range)
            {
                return Delegates.glGenFragmentShadersATI((UInt32)range);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glGenFragmentShadersATI")]
            public static 
            Int32 GenFragmentShaders(Int32 range)
            {
                return Delegates.glGenFragmentShadersATI((UInt32)range);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glBindFragmentShaderATI")]
            public static 
            void BindFragmentShader(UInt32 id)
            {
                Delegates.glBindFragmentShaderATI((UInt32)id);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glBindFragmentShaderATI")]
            public static 
            void BindFragmentShader(Int32 id)
            {
                Delegates.glBindFragmentShaderATI((UInt32)id);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glDeleteFragmentShaderATI")]
            public static 
            void DeleteFragmentShader(UInt32 id)
            {
                Delegates.glDeleteFragmentShaderATI((UInt32)id);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glDeleteFragmentShaderATI")]
            public static 
            void DeleteFragmentShader(Int32 id)
            {
                Delegates.glDeleteFragmentShaderATI((UInt32)id);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glBeginFragmentShaderATI")]
            public static 
            void BeginFragmentShader()
            {
                Delegates.glBeginFragmentShaderATI();
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glEndFragmentShaderATI")]
            public static 
            void EndFragmentShader()
            {
                Delegates.glEndFragmentShaderATI();
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glPassTexCoordATI")]
            public static 
            void PassTexCoor(UInt32 dst, UInt32 coord, OpenTK.Graphics.AtiFragmentShader swizzle)
            {
                Delegates.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (OpenTK.Graphics.AtiFragmentShader)swizzle);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glPassTexCoordATI")]
            public static 
            void PassTexCoor(Int32 dst, Int32 coord, OpenTK.Graphics.AtiFragmentShader swizzle)
            {
                Delegates.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (OpenTK.Graphics.AtiFragmentShader)swizzle);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSampleMapATI")]
            public static 
            void SampleMap(UInt32 dst, UInt32 interp, OpenTK.Graphics.AtiFragmentShader swizzle)
            {
                Delegates.glSampleMapATI((UInt32)dst, (UInt32)interp, (OpenTK.Graphics.AtiFragmentShader)swizzle);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSampleMapATI")]
            public static 
            void SampleMap(Int32 dst, Int32 interp, OpenTK.Graphics.AtiFragmentShader swizzle)
            {
                Delegates.glSampleMapATI((UInt32)dst, (UInt32)interp, (OpenTK.Graphics.AtiFragmentShader)swizzle);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glColorFragmentOp1ATI")]
            public static 
            void ColorFragmentOp1(OpenTK.Graphics.AtiFragmentShader op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
            {
                Delegates.glColorFragmentOp1ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glColorFragmentOp1ATI")]
            public static 
            void ColorFragmentOp1(OpenTK.Graphics.AtiFragmentShader op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
            {
                Delegates.glColorFragmentOp1ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glColorFragmentOp2ATI")]
            public static 
            void ColorFragmentOp2(OpenTK.Graphics.AtiFragmentShader op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
            {
                Delegates.glColorFragmentOp2ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glColorFragmentOp2ATI")]
            public static 
            void ColorFragmentOp2(OpenTK.Graphics.AtiFragmentShader op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
            {
                Delegates.glColorFragmentOp2ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glColorFragmentOp3ATI")]
            public static 
            void ColorFragmentOp3(OpenTK.Graphics.AtiFragmentShader op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
            {
                Delegates.glColorFragmentOp3ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glColorFragmentOp3ATI")]
            public static 
            void ColorFragmentOp3(OpenTK.Graphics.AtiFragmentShader op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
            {
                Delegates.glColorFragmentOp3ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glAlphaFragmentOp1ATI")]
            public static 
            void AlphaFragmentOp1(OpenTK.Graphics.AtiFragmentShader op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
            {
                Delegates.glAlphaFragmentOp1ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glAlphaFragmentOp1ATI")]
            public static 
            void AlphaFragmentOp1(OpenTK.Graphics.AtiFragmentShader op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
            {
                Delegates.glAlphaFragmentOp1ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glAlphaFragmentOp2ATI")]
            public static 
            void AlphaFragmentOp2(OpenTK.Graphics.AtiFragmentShader op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
            {
                Delegates.glAlphaFragmentOp2ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glAlphaFragmentOp2ATI")]
            public static 
            void AlphaFragmentOp2(OpenTK.Graphics.AtiFragmentShader op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
            {
                Delegates.glAlphaFragmentOp2ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glAlphaFragmentOp3ATI")]
            public static 
            void AlphaFragmentOp3(OpenTK.Graphics.AtiFragmentShader op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
            {
                Delegates.glAlphaFragmentOp3ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glAlphaFragmentOp3ATI")]
            public static 
            void AlphaFragmentOp3(OpenTK.Graphics.AtiFragmentShader op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
            {
                Delegates.glAlphaFragmentOp3ATI((OpenTK.Graphics.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static 
            void SetFragmentShaderConstant(UInt32 dst, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static 
            void SetFragmentShaderConstant(Int32 dst, Single[] value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static 
            void SetFragmentShaderConstant(UInt32 dst, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static 
            void SetFragmentShaderConstant(Int32 dst, ref Single value)
            {
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static 
            unsafe void SetFragmentShaderConstant(UInt32 dst, Single* value)
            {
                Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiFragmentShader", Version = "1.2", EntryPoint = "glSetFragmentShaderConstantATI")]
            public static 
            unsafe void SetFragmentShaderConstant(Int32 dst, Single* value)
            {
                Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
            }

            [AutoGenerated(Category = "AtiPnTriangles", Version = "1.2", EntryPoint = "glPNTrianglesiATI")]
            public static 
            void PNTriangles(OpenTK.Graphics.AtiPnTriangles pname, Int32 param)
            {
                Delegates.glPNTrianglesiATI((OpenTK.Graphics.AtiPnTriangles)pname, (Int32)param);
            }

            [AutoGenerated(Category = "AtiPnTriangles", Version = "1.2", EntryPoint = "glPNTrianglesfATI")]
            public static 
            void PNTriangles(OpenTK.Graphics.AtiPnTriangles pname, Single param)
            {
                Delegates.glPNTrianglesfATI((OpenTK.Graphics.AtiPnTriangles)pname, (Single)param);
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glNewObjectBufferATI")]
            public static 
            Int32 NewObjectBuffer(Int32 size, IntPtr pointer, OpenTK.Graphics.AtiVertexArrayObject usage)
            {
                unsafe
                {
                    return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer, (OpenTK.Graphics.AtiVertexArrayObject)usage);
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glNewObjectBufferATI")]
            public static 
            Int32 NewObjectBuffer(Int32 size, [In, Out] object pointer, OpenTK.Graphics.AtiVertexArrayObject usage)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.AtiVertexArrayObject)usage);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glIsObjectBufferATI")]
            public static 
            bool IsObjectBuffer(UInt32 buffer)
            {
                return Delegates.glIsObjectBufferATI((UInt32)buffer);
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glIsObjectBufferATI")]
            public static 
            bool IsObjectBuffer(Int32 buffer)
            {
                return Delegates.glIsObjectBufferATI((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glUpdateObjectBufferATI")]
            public static 
            void UpdateObjectBuffer(UInt32 buffer, UInt32 offset, Int32 size, IntPtr pointer, OpenTK.Graphics.AtiVertexArrayObject preserve)
            {
                unsafe
                {
                    Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (OpenTK.Graphics.AtiVertexArrayObject)preserve);
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glUpdateObjectBufferATI")]
            public static 
            void UpdateObjectBuffer(Int32 buffer, Int32 offset, Int32 size, IntPtr pointer, OpenTK.Graphics.AtiVertexArrayObject preserve)
            {
                unsafe
                {
                    Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (OpenTK.Graphics.AtiVertexArrayObject)preserve);
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glUpdateObjectBufferATI")]
            public static 
            void UpdateObjectBuffer(UInt32 buffer, UInt32 offset, Int32 size, [In, Out] object pointer, OpenTK.Graphics.AtiVertexArrayObject preserve)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glUpdateObjectBufferATI")]
            public static 
            void UpdateObjectBuffer(Int32 buffer, Int32 offset, Int32 size, [In, Out] object pointer, OpenTK.Graphics.AtiVertexArrayObject preserve)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferfvATI")]
            public static 
            void GetObjectBuffer(UInt32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectBufferfvATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferfvATI")]
            public static 
            void GetObjectBuffer(Int32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectBufferfvATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferfvATI")]
            public static 
            void GetObjectBuffer(UInt32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferfvATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferfvATI")]
            public static 
            void GetObjectBuffer(Int32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferfvATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferfvATI")]
            public static 
            unsafe void GetObjectBuffer(UInt32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single* @params)
            {
                Delegates.glGetObjectBufferfvATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferfvATI")]
            public static 
            unsafe void GetObjectBuffer(Int32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single* @params)
            {
                Delegates.glGetObjectBufferfvATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferivATI")]
            public static 
            void GetObjectBuffer(UInt32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectBufferivATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferivATI")]
            public static 
            void GetObjectBuffer(Int32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectBufferivATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferivATI")]
            public static 
            void GetObjectBuffer(UInt32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferivATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferivATI")]
            public static 
            void GetObjectBuffer(Int32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferivATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferivATI")]
            public static 
            unsafe void GetObjectBuffer(UInt32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32* @params)
            {
                Delegates.glGetObjectBufferivATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetObjectBufferivATI")]
            public static 
            unsafe void GetObjectBuffer(Int32 buffer, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32* @params)
            {
                Delegates.glGetObjectBufferivATI((UInt32)buffer, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glFreeObjectBufferATI")]
            public static 
            void FreeObjectBuffer(UInt32 buffer)
            {
                Delegates.glFreeObjectBufferATI((UInt32)buffer);
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glFreeObjectBufferATI")]
            public static 
            void FreeObjectBuffer(Int32 buffer)
            {
                Delegates.glFreeObjectBufferATI((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glArrayObjectATI")]
            public static 
            void ArrayObject(OpenTK.Graphics.EnableCap array, Int32 size, OpenTK.Graphics.AtiVertexArrayObject type, Int32 stride, UInt32 buffer, UInt32 offset)
            {
                Delegates.glArrayObjectATI((OpenTK.Graphics.EnableCap)array, (Int32)size, (OpenTK.Graphics.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glArrayObjectATI")]
            public static 
            void ArrayObject(OpenTK.Graphics.EnableCap array, Int32 size, OpenTK.Graphics.AtiVertexArrayObject type, Int32 stride, Int32 buffer, Int32 offset)
            {
                Delegates.glArrayObjectATI((OpenTK.Graphics.EnableCap)array, (Int32)size, (OpenTK.Graphics.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetArrayObjectfvATI")]
            public static 
            void GetArrayObject(OpenTK.Graphics.EnableCap array, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetArrayObjectfvATI((OpenTK.Graphics.EnableCap)array, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetArrayObjectfvATI")]
            public static 
            void GetArrayObject(OpenTK.Graphics.EnableCap array, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetArrayObjectfvATI((OpenTK.Graphics.EnableCap)array, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetArrayObjectfvATI")]
            public static 
            unsafe void GetArrayObject(OpenTK.Graphics.EnableCap array, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single* @params)
            {
                Delegates.glGetArrayObjectfvATI((OpenTK.Graphics.EnableCap)array, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params);
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetArrayObjectivATI")]
            public static 
            void GetArrayObject(OpenTK.Graphics.EnableCap array, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetArrayObjectivATI((OpenTK.Graphics.EnableCap)array, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetArrayObjectivATI")]
            public static 
            void GetArrayObject(OpenTK.Graphics.EnableCap array, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetArrayObjectivATI((OpenTK.Graphics.EnableCap)array, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetArrayObjectivATI")]
            public static 
            unsafe void GetArrayObject(OpenTK.Graphics.EnableCap array, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32* @params)
            {
                Delegates.glGetArrayObjectivATI((OpenTK.Graphics.EnableCap)array, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glVariantArrayObjectATI")]
            public static 
            void VariantArrayObject(UInt32 id, OpenTK.Graphics.AtiVertexArrayObject type, Int32 stride, UInt32 buffer, UInt32 offset)
            {
                Delegates.glVariantArrayObjectATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glVariantArrayObjectATI")]
            public static 
            void VariantArrayObject(Int32 id, OpenTK.Graphics.AtiVertexArrayObject type, Int32 stride, Int32 buffer, Int32 offset)
            {
                Delegates.glVariantArrayObjectATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectfvATI")]
            public static 
            void GetVariantArrayObject(UInt32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectfvATI")]
            public static 
            void GetVariantArrayObject(Int32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectfvATI")]
            public static 
            void GetVariantArrayObject(UInt32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectfvATI")]
            public static 
            void GetVariantArrayObject(Int32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectfvATI")]
            public static 
            unsafe void GetVariantArrayObject(UInt32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single* @params)
            {
                Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectfvATI")]
            public static 
            unsafe void GetVariantArrayObject(Int32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Single* @params)
            {
                Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectivATI")]
            public static 
            void GetVariantArrayObject(UInt32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVariantArrayObjectivATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectivATI")]
            public static 
            void GetVariantArrayObject(Int32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVariantArrayObjectivATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectivATI")]
            public static 
            void GetVariantArrayObject(UInt32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectivATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectivATI")]
            public static 
            void GetVariantArrayObject(Int32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectivATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectivATI")]
            public static 
            unsafe void GetVariantArrayObject(UInt32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32* @params)
            {
                Delegates.glGetVariantArrayObjectivATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexArrayObject", Version = "1.2", EntryPoint = "glGetVariantArrayObjectivATI")]
            public static 
            unsafe void GetVariantArrayObject(Int32 id, OpenTK.Graphics.AtiVertexArrayObject pname, [Out] Int32* @params)
            {
                Delegates.glGetVariantArrayObjectivATI((UInt32)id, (OpenTK.Graphics.AtiVertexArrayObject)pname, (Int32*)@params);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1sATI")]
            public static 
            void VertexStream1(OpenTK.Graphics.AtiVertexStreams stream, Int16 x)
            {
                Delegates.glVertexStream1sATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16)x);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1svATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Int16[] coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1svATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, ref Int16 coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1svATI")]
            public static 
            unsafe void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Int16* coords)
            {
                Delegates.glVertexStream1svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1iATI")]
            public static 
            void VertexStream1(OpenTK.Graphics.AtiVertexStreams stream, Int32 x)
            {
                Delegates.glVertexStream1iATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32)x);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1ivATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Int32[] coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1ivATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, ref Int32 coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1ivATI")]
            public static 
            unsafe void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Int32* coords)
            {
                Delegates.glVertexStream1ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1fATI")]
            public static 
            void VertexStream1(OpenTK.Graphics.AtiVertexStreams stream, Single x)
            {
                Delegates.glVertexStream1fATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single)x);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1fvATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Single[] coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1fvATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, ref Single coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1fvATI")]
            public static 
            unsafe void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Single* coords)
            {
                Delegates.glVertexStream1fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1dATI")]
            public static 
            void VertexStream1(OpenTK.Graphics.AtiVertexStreams stream, Double x)
            {
                Delegates.glVertexStream1dATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double)x);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1dvATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Double[] coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1dvATI")]
            public static 
            void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, ref Double coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream1dvATI")]
            public static 
            unsafe void VertexStream1v(OpenTK.Graphics.AtiVertexStreams stream, Double* coords)
            {
                Delegates.glVertexStream1dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2sATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Int16 x, Int16 y)
            {
                Delegates.glVertexStream2sATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16)x, (Int16)y);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2svATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Int16[] coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2svATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, ref Int16 coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2svATI")]
            public static 
            unsafe void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Int16* coords)
            {
                Delegates.glVertexStream2svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2iATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Int32 x, Int32 y)
            {
                Delegates.glVertexStream2iATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32)x, (Int32)y);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2ivATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Int32[] coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2ivATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, ref Int32 coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2ivATI")]
            public static 
            unsafe void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Int32* coords)
            {
                Delegates.glVertexStream2ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2fATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Single x, Single y)
            {
                Delegates.glVertexStream2fATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single)x, (Single)y);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2fvATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Single[] coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2fvATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, ref Single coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2fvATI")]
            public static 
            unsafe void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Single* coords)
            {
                Delegates.glVertexStream2fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2dATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Double x, Double y)
            {
                Delegates.glVertexStream2dATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double)x, (Double)y);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2dvATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Double[] coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2dvATI")]
            public static 
            void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, ref Double coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream2dvATI")]
            public static 
            unsafe void VertexStream2(OpenTK.Graphics.AtiVertexStreams stream, Double* coords)
            {
                Delegates.glVertexStream2dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3sATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Int16 x, Int16 y, Int16 z)
            {
                Delegates.glVertexStream3sATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16)x, (Int16)y, (Int16)z);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3svATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Int16[] coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3svATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Int16 coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3svATI")]
            public static 
            unsafe void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Int16* coords)
            {
                Delegates.glVertexStream3svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3iATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Int32 x, Int32 y, Int32 z)
            {
                Delegates.glVertexStream3iATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32)x, (Int32)y, (Int32)z);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3ivATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Int32[] coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3ivATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Int32 coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3ivATI")]
            public static 
            unsafe void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Int32* coords)
            {
                Delegates.glVertexStream3ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3fATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Single x, Single y, Single z)
            {
                Delegates.glVertexStream3fATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single)x, (Single)y, (Single)z);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3fvATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Single[] coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3fvATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Single coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3fvATI")]
            public static 
            unsafe void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Single* coords)
            {
                Delegates.glVertexStream3fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3dATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Double x, Double y, Double z)
            {
                Delegates.glVertexStream3dATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double)x, (Double)y, (Double)z);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3dvATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Double[] coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3dvATI")]
            public static 
            void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Double coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream3dvATI")]
            public static 
            unsafe void VertexStream3(OpenTK.Graphics.AtiVertexStreams stream, Double* coords)
            {
                Delegates.glVertexStream3dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4sATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                Delegates.glVertexStream4sATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4svATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Int16[] coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4svATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, ref Int16 coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4svATI")]
            public static 
            unsafe void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Int16* coords)
            {
                Delegates.glVertexStream4svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4iATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                Delegates.glVertexStream4iATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4ivATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Int32[] coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4ivATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, ref Int32 coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4ivATI")]
            public static 
            unsafe void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Int32* coords)
            {
                Delegates.glVertexStream4ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4fATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Single x, Single y, Single z, Single w)
            {
                Delegates.glVertexStream4fATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single)x, (Single)y, (Single)z, (Single)w);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4fvATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Single[] coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4fvATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, ref Single coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4fvATI")]
            public static 
            unsafe void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Single* coords)
            {
                Delegates.glVertexStream4fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4dATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Double x, Double y, Double z, Double w)
            {
                Delegates.glVertexStream4dATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double)x, (Double)y, (Double)z, (Double)w);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4dvATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Double[] coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4dvATI")]
            public static 
            void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, ref Double coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexStream4dvATI")]
            public static 
            unsafe void VertexStream4(OpenTK.Graphics.AtiVertexStreams stream, Double* coords)
            {
                Delegates.glVertexStream4dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, SByte nx, SByte ny, SByte nz)
            {
                Delegates.glNormalStream3bATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte)nx, (SByte)ny, (SByte)nz);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Byte nx, Byte ny, Byte nz)
            {
                Delegates.glNormalStream3bATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte)nx, (SByte)ny, (SByte)nz);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, SByte[] coords)
            {
                unsafe
                {
                    fixed (SByte* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3bvATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Byte[] coords)
            {
                unsafe
                {
                    fixed (Byte* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3bvATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, ref SByte coords)
            {
                unsafe
                {
                    fixed (SByte* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3bvATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Byte coords)
            {
                unsafe
                {
                    fixed (Byte* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3bvATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bvATI")]
            public static 
            unsafe void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, SByte* coords)
            {
                Delegates.glNormalStream3bvATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte*)coords);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3bvATI")]
            public static 
            unsafe void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Byte* coords)
            {
                Delegates.glNormalStream3bvATI((OpenTK.Graphics.AtiVertexStreams)stream, (SByte*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3sATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Int16 nx, Int16 ny, Int16 nz)
            {
                Delegates.glNormalStream3sATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16)nx, (Int16)ny, (Int16)nz);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3svATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Int16[] coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3svATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Int16 coords)
            {
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3svATI")]
            public static 
            unsafe void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Int16* coords)
            {
                Delegates.glNormalStream3svATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int16*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3iATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Int32 nx, Int32 ny, Int32 nz)
            {
                Delegates.glNormalStream3iATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32)nx, (Int32)ny, (Int32)nz);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3ivATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Int32[] coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3ivATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Int32 coords)
            {
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3ivATI")]
            public static 
            unsafe void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Int32* coords)
            {
                Delegates.glNormalStream3ivATI((OpenTK.Graphics.AtiVertexStreams)stream, (Int32*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3fATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Single nx, Single ny, Single nz)
            {
                Delegates.glNormalStream3fATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single)nx, (Single)ny, (Single)nz);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3fvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Single[] coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3fvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Single coords)
            {
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3fvATI")]
            public static 
            unsafe void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Single* coords)
            {
                Delegates.glNormalStream3fvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Single*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3dATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Double nx, Double ny, Double nz)
            {
                Delegates.glNormalStream3dATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double)nx, (Double)ny, (Double)nz);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3dvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Double[] coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3dvATI")]
            public static 
            void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, ref Double coords)
            {
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glNormalStream3dvATI")]
            public static 
            unsafe void NormalStream3(OpenTK.Graphics.AtiVertexStreams stream, Double* coords)
            {
                Delegates.glNormalStream3dvATI((OpenTK.Graphics.AtiVertexStreams)stream, (Double*)coords);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glClientActiveVertexStreamATI")]
            public static 
            void ClientActiveVertexStream(OpenTK.Graphics.AtiVertexStreams stream)
            {
                Delegates.glClientActiveVertexStreamATI((OpenTK.Graphics.AtiVertexStreams)stream);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexBlendEnviATI")]
            public static 
            void VertexBlendEnv(OpenTK.Graphics.AtiVertexStreams pname, Int32 param)
            {
                Delegates.glVertexBlendEnviATI((OpenTK.Graphics.AtiVertexStreams)pname, (Int32)param);
            }

            [AutoGenerated(Category = "AtiVertexStreams", Version = "1.2", EntryPoint = "glVertexBlendEnvfATI")]
            public static 
            void VertexBlendEnv(OpenTK.Graphics.AtiVertexStreams pname, Single param)
            {
                Delegates.glVertexBlendEnvfATI((OpenTK.Graphics.AtiVertexStreams)pname, (Single)param);
            }

            [AutoGenerated(Category = "AtiElementArray", Version = "1.2", EntryPoint = "glElementPointerATI")]
            public static 
            void ElementPointer(OpenTK.Graphics.AtiElementArray type, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glElementPointerATI((OpenTK.Graphics.AtiElementArray)type, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "AtiElementArray", Version = "1.2", EntryPoint = "glElementPointerATI")]
            public static 
            void ElementPointer(OpenTK.Graphics.AtiElementArray type, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerATI((OpenTK.Graphics.AtiElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "AtiElementArray", Version = "1.2", EntryPoint = "glDrawElementArrayATI")]
            public static 
            void DrawElementArray(OpenTK.Graphics.BeginMode mode, Int32 count)
            {
                Delegates.glDrawElementArrayATI((OpenTK.Graphics.BeginMode)mode, (Int32)count);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiElementArray", Version = "1.2", EntryPoint = "glDrawRangeElementArrayATI")]
            public static 
            void DrawRangeElementArray(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count)
            {
                Delegates.glDrawRangeElementArrayATI((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count);
            }

            [AutoGenerated(Category = "AtiElementArray", Version = "1.2", EntryPoint = "glDrawRangeElementArrayATI")]
            public static 
            void DrawRangeElementArray(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count)
            {
                Delegates.glDrawRangeElementArrayATI((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count);
            }

            [AutoGenerated(Category = "AtiDrawBuffers", Version = "1.2", EntryPoint = "glDrawBuffersATI")]
            public static 
            void DrawBuffers(Int32 n, OpenTK.Graphics.AtiDrawBuffers[] bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.AtiDrawBuffers* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersATI((Int32)n, (OpenTK.Graphics.AtiDrawBuffers*)bufs_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiDrawBuffers", Version = "1.2", EntryPoint = "glDrawBuffersATI")]
            public static 
            void DrawBuffers(Int32 n, ref OpenTK.Graphics.AtiDrawBuffers bufs)
            {
                unsafe
                {
                    fixed (OpenTK.Graphics.AtiDrawBuffers* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersATI((Int32)n, (OpenTK.Graphics.AtiDrawBuffers*)bufs_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiDrawBuffers", Version = "1.2", EntryPoint = "glDrawBuffersATI")]
            public static 
            unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.AtiDrawBuffers* bufs)
            {
                Delegates.glDrawBuffersATI((Int32)n, (OpenTK.Graphics.AtiDrawBuffers*)bufs);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiMapObjectBuffer", Version = "1.2", EntryPoint = "glMapObjectBufferATI")]
            public static 
            unsafe IntPtr MapObjectBuffer(UInt32 buffer)
            {
                return Delegates.glMapObjectBufferATI((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiMapObjectBuffer", Version = "1.2", EntryPoint = "glMapObjectBufferATI")]
            public static 
            unsafe IntPtr MapObjectBuffer(Int32 buffer)
            {
                return Delegates.glMapObjectBufferATI((UInt32)buffer);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiMapObjectBuffer", Version = "1.2", EntryPoint = "glUnmapObjectBufferATI")]
            public static 
            void UnmapObjectBuffer(UInt32 buffer)
            {
                Delegates.glUnmapObjectBufferATI((UInt32)buffer);
            }

            [AutoGenerated(Category = "AtiMapObjectBuffer", Version = "1.2", EntryPoint = "glUnmapObjectBufferATI")]
            public static 
            void UnmapObjectBuffer(Int32 buffer)
            {
                Delegates.glUnmapObjectBufferATI((UInt32)buffer);
            }

            [AutoGenerated(Category = "AtiSeparateStencil", Version = "1.2", EntryPoint = "glStencilOpSeparateATI")]
            public static 
            void StencilOpSeparate(OpenTK.Graphics.AtiSeparateStencil face, OpenTK.Graphics.StencilOp sfail, OpenTK.Graphics.StencilOp dpfail, OpenTK.Graphics.StencilOp dppass)
            {
                Delegates.glStencilOpSeparateATI((OpenTK.Graphics.AtiSeparateStencil)face, (OpenTK.Graphics.StencilOp)sfail, (OpenTK.Graphics.StencilOp)dpfail, (OpenTK.Graphics.StencilOp)dppass);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiSeparateStencil", Version = "1.2", EntryPoint = "glStencilFuncSeparateATI")]
            public static 
            void StencilFuncSeparate(OpenTK.Graphics.StencilFunction frontfunc, OpenTK.Graphics.StencilFunction backfunc, Int32 @ref, UInt32 mask)
            {
                Delegates.glStencilFuncSeparateATI((OpenTK.Graphics.StencilFunction)frontfunc, (OpenTK.Graphics.StencilFunction)backfunc, (Int32)@ref, (UInt32)mask);
            }

            [AutoGenerated(Category = "AtiSeparateStencil", Version = "1.2", EntryPoint = "glStencilFuncSeparateATI")]
            public static 
            void StencilFuncSeparate(OpenTK.Graphics.StencilFunction frontfunc, OpenTK.Graphics.StencilFunction backfunc, Int32 @ref, Int32 mask)
            {
                Delegates.glStencilFuncSeparateATI((OpenTK.Graphics.StencilFunction)frontfunc, (OpenTK.Graphics.StencilFunction)backfunc, (Int32)@ref, (UInt32)mask);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glVertexAttribArrayObjectATI")]
            public static 
            void VertexAttribArrayObject(UInt32 index, Int32 size, OpenTK.Graphics.AtiVertexAttribArrayObject type, bool normalized, Int32 stride, UInt32 buffer, UInt32 offset)
            {
                Delegates.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (OpenTK.Graphics.AtiVertexAttribArrayObject)type, (bool)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
            }

            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glVertexAttribArrayObjectATI")]
            public static 
            void VertexAttribArrayObject(Int32 index, Int32 size, OpenTK.Graphics.AtiVertexAttribArrayObject type, bool normalized, Int32 stride, Int32 buffer, Int32 offset)
            {
                Delegates.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (OpenTK.Graphics.AtiVertexAttribArrayObject)type, (bool)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
            public static 
            void GetVertexAttribArrayObject(UInt32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
            public static 
            void GetVertexAttribArrayObject(Int32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Single[] @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
            public static 
            void GetVertexAttribArrayObject(UInt32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
            public static 
            void GetVertexAttribArrayObject(Int32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] out Single @params)
            {
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
            public static 
            unsafe void GetVertexAttribArrayObject(UInt32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Single* @params)
            {
                Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
            public static 
            unsafe void GetVertexAttribArrayObject(Int32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Single* @params)
            {
                Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Single*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectivATI")]
            public static 
            void GetVertexAttribArrayObject(UInt32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectivATI")]
            public static 
            void GetVertexAttribArrayObject(Int32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Int32[] @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectivATI")]
            public static 
            void GetVertexAttribArrayObject(UInt32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectivATI")]
            public static 
            void GetVertexAttribArrayObject(Int32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] out Int32 @params)
            {
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectivATI")]
            public static 
            unsafe void GetVertexAttribArrayObject(UInt32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Int32*)@params);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AtiVertexAttribArrayObject", Version = "1.2", EntryPoint = "glGetVertexAttribArrayObjectivATI")]
            public static 
            unsafe void GetVertexAttribArrayObject(Int32 index, OpenTK.Graphics.AtiVertexAttribArrayObject pname, [Out] Int32* @params)
            {
                Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (OpenTK.Graphics.AtiVertexAttribArrayObject)pname, (Int32*)@params);
            }

        }

        public static partial class Apple
        {
            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glElementPointerAPPLE")]
            public static 
            void ElementPointer(OpenTK.Graphics.AppleElementArray type, IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glElementPointerAPPLE((OpenTK.Graphics.AppleElementArray)type, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glElementPointerAPPLE")]
            public static 
            void ElementPointer(OpenTK.Graphics.AppleElementArray type, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerAPPLE((OpenTK.Graphics.AppleElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glDrawElementArrayAPPLE")]
            public static 
            void DrawElementArray(OpenTK.Graphics.BeginMode mode, Int32 first, Int32 count)
            {
                Delegates.glDrawElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (Int32)first, (Int32)count);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glDrawRangeElementArrayAPPLE")]
            public static 
            void DrawRangeElementArray(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 first, Int32 count)
            {
                Delegates.glDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
            }

            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glDrawRangeElementArrayAPPLE")]
            public static 
            void DrawRangeElementArray(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 first, Int32 count)
            {
                Delegates.glDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
            }

            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawElementArrayAPPLE")]
            public static 
            void MultiDrawElementArray(OpenTK.Graphics.BeginMode mode, Int32[] first, Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawElementArrayAPPLE")]
            public static 
            void MultiDrawElementArray(OpenTK.Graphics.BeginMode mode, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawElementArrayAPPLE")]
            public static 
            unsafe void MultiDrawElementArray(OpenTK.Graphics.BeginMode mode, Int32* first, Int32* count, Int32 primcount)
            {
                Delegates.glMultiDrawElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
            public static 
            void MultiDrawRangeElementArray(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32[] first, Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
            public static 
            void MultiDrawRangeElementArray(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32[] first, Int32[] count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
            public static 
            void MultiDrawRangeElementArray(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
            public static 
            void MultiDrawRangeElementArray(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
            public static 
            unsafe void MultiDrawRangeElementArray(OpenTK.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32* first, Int32* count, Int32 primcount)
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleElementArray", Version = "1.2", EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
            public static 
            unsafe void MultiDrawRangeElementArray(OpenTK.Graphics.BeginMode mode, Int32 start, Int32 end, Int32* first, Int32* count, Int32 primcount)
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE((OpenTK.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glGenFencesAPPLE")]
            public static 
            void GenFences(Int32 n, [Out] UInt32[] fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glGenFencesAPPLE")]
            public static 
            void GenFences(Int32 n, [Out] Int32[] fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glGenFencesAPPLE")]
            public static 
            void GenFences(Int32 n, [Out] out UInt32 fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glGenFencesAPPLE")]
            public static 
            void GenFences(Int32 n, [Out] out Int32 fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glGenFencesAPPLE")]
            public static 
            unsafe void GenFences(Int32 n, [Out] UInt32* fences)
            {
                Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glGenFencesAPPLE")]
            public static 
            unsafe void GenFences(Int32 n, [Out] Int32* fences)
            {
                Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glDeleteFencesAPPLE")]
            public static 
            void DeleteFences(Int32 n, UInt32[] fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glDeleteFencesAPPLE")]
            public static 
            void DeleteFences(Int32 n, Int32[] fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glDeleteFencesAPPLE")]
            public static 
            void DeleteFences(Int32 n, ref UInt32 fences)
            {
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glDeleteFencesAPPLE")]
            public static 
            void DeleteFences(Int32 n, ref Int32 fences)
            {
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glDeleteFencesAPPLE")]
            public static 
            unsafe void DeleteFences(Int32 n, UInt32* fences)
            {
                Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glDeleteFencesAPPLE")]
            public static 
            unsafe void DeleteFences(Int32 n, Int32* fences)
            {
                Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glSetFenceAPPLE")]
            public static 
            void SetFence(UInt32 fence)
            {
                Delegates.glSetFenceAPPLE((UInt32)fence);
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glSetFenceAPPLE")]
            public static 
            void SetFence(Int32 fence)
            {
                Delegates.glSetFenceAPPLE((UInt32)fence);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glIsFenceAPPLE")]
            public static 
            bool IsFence(UInt32 fence)
            {
                return Delegates.glIsFenceAPPLE((UInt32)fence);
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glIsFenceAPPLE")]
            public static 
            bool IsFence(Int32 fence)
            {
                return Delegates.glIsFenceAPPLE((UInt32)fence);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glTestFenceAPPLE")]
            public static 
            bool TestFence(UInt32 fence)
            {
                return Delegates.glTestFenceAPPLE((UInt32)fence);
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glTestFenceAPPLE")]
            public static 
            bool TestFence(Int32 fence)
            {
                return Delegates.glTestFenceAPPLE((UInt32)fence);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glFinishFenceAPPLE")]
            public static 
            void FinishFence(UInt32 fence)
            {
                Delegates.glFinishFenceAPPLE((UInt32)fence);
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glFinishFenceAPPLE")]
            public static 
            void FinishFence(Int32 fence)
            {
                Delegates.glFinishFenceAPPLE((UInt32)fence);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glTestObjectAPPLE")]
            public static 
            bool TestObject(OpenTK.Graphics.AppleFence @object, UInt32 name)
            {
                return Delegates.glTestObjectAPPLE((OpenTK.Graphics.AppleFence)@object, (UInt32)name);
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glTestObjectAPPLE")]
            public static 
            bool TestObject(OpenTK.Graphics.AppleFence @object, Int32 name)
            {
                return Delegates.glTestObjectAPPLE((OpenTK.Graphics.AppleFence)@object, (UInt32)name);
            }

            [AutoGenerated(Category = "AppleFence", Version = "1.2", EntryPoint = "glFinishObjectAPPLE")]
            public static 
            void FinishObject(OpenTK.Graphics.AppleFence @object, Int32 name)
            {
                Delegates.glFinishObjectAPPLE((OpenTK.Graphics.AppleFence)@object, (Int32)name);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glBindVertexArrayAPPLE")]
            public static 
            void BindVertexArray(UInt32 array)
            {
                Delegates.glBindVertexArrayAPPLE((UInt32)array);
            }

            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glBindVertexArrayAPPLE")]
            public static 
            void BindVertexArray(Int32 array)
            {
                Delegates.glBindVertexArrayAPPLE((UInt32)array);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glDeleteVertexArraysAPPLE")]
            public static 
            void DeleteVertexArrays(Int32 n, UInt32[] arrays)
            {
                unsafe
                {
                    fixed (UInt32* arrays_ptr = arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glDeleteVertexArraysAPPLE")]
            public static 
            void DeleteVertexArrays(Int32 n, Int32[] arrays)
            {
                unsafe
                {
                    fixed (Int32* arrays_ptr = arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glDeleteVertexArraysAPPLE")]
            public static 
            void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
            {
                unsafe
                {
                    fixed (UInt32* arrays_ptr = &arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glDeleteVertexArraysAPPLE")]
            public static 
            void DeleteVertexArrays(Int32 n, ref Int32 arrays)
            {
                unsafe
                {
                    fixed (Int32* arrays_ptr = &arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glDeleteVertexArraysAPPLE")]
            public static 
            unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
            {
                Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glDeleteVertexArraysAPPLE")]
            public static 
            unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
            {
                Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glGenVertexArraysAPPLE")]
            public static 
            void GenVertexArrays(Int32 n, [Out] UInt32[] arrays)
            {
                unsafe
                {
                    fixed (UInt32* arrays_ptr = arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glGenVertexArraysAPPLE")]
            public static 
            void GenVertexArrays(Int32 n, [Out] Int32[] arrays)
            {
                unsafe
                {
                    fixed (Int32* arrays_ptr = arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glGenVertexArraysAPPLE")]
            public static 
            void GenVertexArrays(Int32 n, [Out] out UInt32 arrays)
            {
                unsafe
                {
                    fixed (UInt32* arrays_ptr = &arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                        arrays = *arrays_ptr;
                    }
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glGenVertexArraysAPPLE")]
            public static 
            void GenVertexArrays(Int32 n, [Out] out Int32 arrays)
            {
                unsafe
                {
                    fixed (Int32* arrays_ptr = &arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                        arrays = *arrays_ptr;
                    }
                }
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glGenVertexArraysAPPLE")]
            public static 
            unsafe void GenVertexArrays(Int32 n, [Out] UInt32* arrays)
            {
                Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glGenVertexArraysAPPLE")]
            public static 
            unsafe void GenVertexArrays(Int32 n, [Out] Int32* arrays)
            {
                Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
            }

            [System.CLSCompliant(false)]
            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glIsVertexArrayAPPLE")]
            public static 
            bool IsVertexArray(UInt32 array)
            {
                return Delegates.glIsVertexArrayAPPLE((UInt32)array);
            }

            [AutoGenerated(Category = "AppleVertexArrayObject", Version = "1.2", EntryPoint = "glIsVertexArrayAPPLE")]
            public static 
            bool IsVertexArray(Int32 array)
            {
                return Delegates.glIsVertexArrayAPPLE((UInt32)array);
            }

            [AutoGenerated(Category = "AppleVertexArrayRange", Version = "1.2", EntryPoint = "glVertexArrayRangeAPPLE")]
            public static 
            void VertexArrayRange(Int32 length, [Out] IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayRange", Version = "1.2", EntryPoint = "glVertexArrayRangeAPPLE")]
            public static 
            void VertexArrayRange(Int32 length, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayRange", Version = "1.2", EntryPoint = "glFlushVertexArrayRangeAPPLE")]
            public static 
            void FlushVertexArrayRange(Int32 length, [Out] IntPtr pointer)
            {
                unsafe
                {
                    Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayRange", Version = "1.2", EntryPoint = "glFlushVertexArrayRangeAPPLE")]
            public static 
            void FlushVertexArrayRange(Int32 length, [In, Out] object pointer)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "AppleVertexArrayRange", Version = "1.2", EntryPoint = "glVertexArrayParameteriAPPLE")]
            public static 
            void VertexArrayParameter(OpenTK.Graphics.AppleVertexArrayRange pname, Int32 param)
            {
                Delegates.glVertexArrayParameteriAPPLE((OpenTK.Graphics.AppleVertexArrayRange)pname, (Int32)param);
            }

            [AutoGenerated(Category = "AppleFlushBufferRange", Version = "1.5", EntryPoint = "glBufferParameteriAPPLE")]
            public static 
            void BufferParameter(OpenTK.Graphics.AppleFlushBufferRange target, OpenTK.Graphics.AppleFlushBufferRange pname, Int32 param)
            {
                Delegates.glBufferParameteriAPPLE((OpenTK.Graphics.AppleFlushBufferRange)target, (OpenTK.Graphics.AppleFlushBufferRange)pname, (Int32)param);
            }

            [AutoGenerated(Category = "AppleFlushBufferRange", Version = "1.5", EntryPoint = "glFlushMappedBufferRangeAPPLE")]
            public static 
            void FlushMappedBufferRange(OpenTK.Graphics.AppleFlushBufferRange target, IntPtr offset, IntPtr size)
            {
                Delegates.glFlushMappedBufferRangeAPPLE((OpenTK.Graphics.AppleFlushBufferRange)target, (IntPtr)offset, (IntPtr)size);
            }

        }

        public static partial class Gremedy
        {
            [AutoGenerated(Category = "GremedyStringMarker", Version = "1.0", EntryPoint = "glStringMarkerGREMEDY")]
            public static 
            void StringMarker(Int32 len, IntPtr @string)
            {
                unsafe
                {
                    Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string);
                }
            }

            [AutoGenerated(Category = "GremedyStringMarker", Version = "1.0", EntryPoint = "glStringMarkerGREMEDY")]
            public static 
            void StringMarker(Int32 len, [In, Out] object @string)
            {
                unsafe
                {
                    System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }

            [AutoGenerated(Category = "GremedyFrameTerminator", Version = "1.0", EntryPoint = "glFrameTerminatorGREMEDY")]
            public static 
            void FrameTerminator()
            {
                Delegates.glFrameTerminatorGREMEDY();
            }

        }

    }
}
