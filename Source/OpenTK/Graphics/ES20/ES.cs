#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

namespace OpenTK.Graphics.ES20
{
        using System;
        using System.Runtime.InteropServices;
        #pragma warning disable 3019
        #pragma warning disable 1591
        #pragma warning disable 1572
        #pragma warning disable 1573

    static partial class ES
        {

                
        /// <summary>
        /// Select active texture unit
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is GL_TEXTURE0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glActiveTexture")]
                public static 
                void ActiveTexture([In, Out] OpenTK.Graphics.ES20.All texture)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glActiveTexture((OpenTK.Graphics.ES20.All)texture);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glAttachShader")]
                public static 
                void AttachShader([In, Out] Int32 program, [In, Out] Int32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glAttachShader((UInt32)program, (UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Attaches a shader object to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to which a shader object will be attached.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object that is to be attached.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glAttachShader")]
                public static 
                void AttachShader([In, Out] UInt32 program, [In, Out] UInt32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glAttachShader((UInt32)program, (UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindAttribLocation")]
                public static 
                void BindAttribLocation([In, Out] Int32 program, [In, Out] Int32 index, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Associates a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object in which the association is to be made.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindAttribLocation")]
                public static 
                void BindAttribLocation([In, Out] UInt32 program, [In, Out] UInt32 index, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindBuffer")]
                public static 
                void BindBuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 buffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindBuffer((OpenTK.Graphics.ES20.All)target, (UInt32)buffer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="buffer">
        /// <para>
        /// Specifies the name of a buffer object.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindBuffer")]
                public static 
                void BindBuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] UInt32 buffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindBuffer((OpenTK.Graphics.ES20.All)target, (UInt32)buffer);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindFramebuffer")]
                public static 
                void BindFramebuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 framebuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindFramebuffer((OpenTK.Graphics.ES20.All)target, (UInt32)framebuffer);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindFramebuffer")]
                public static 
                void BindFramebuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] UInt32 framebuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindFramebuffer((OpenTK.Graphics.ES20.All)target, (UInt32)framebuffer);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindRenderbuffer")]
                public static 
                void BindRenderbuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 renderbuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindRenderbuffer((OpenTK.Graphics.ES20.All)target, (UInt32)renderbuffer);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindRenderbuffer")]
                public static 
                void BindRenderbuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] UInt32 renderbuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindRenderbuffer((OpenTK.Graphics.ES20.All)target, (UInt32)renderbuffer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindTexture")]
                public static 
                void BindTexture([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 texture)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindTexture((OpenTK.Graphics.ES20.All)target, (UInt32)texture);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="texture">
        /// <para>
        /// Specifies the name of a texture.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBindTexture")]
                public static 
                void BindTexture([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] UInt32 texture)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBindTexture((OpenTK.Graphics.ES20.All)target, (UInt32)texture);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set the blend color
        /// </summary>
        /// <param name="red">
        /// <para>
        /// specify the components of GL_BLEND_COLOR
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBlendColor")]
                public static 
                void BlendColor([In, Out] Single red, [In, Out] Single green, [In, Out] Single blue, [In, Out] Single alpha)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// specifies how source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBlendEquation")]
                public static 
                void BlendEquation([In, Out] OpenTK.Graphics.ES20.All mode)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBlendEquation((OpenTK.Graphics.ES20.All)mode);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB">
        /// <para>
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>
        /// <param name="modeAlpha">
        /// <para>
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBlendEquationSeparate")]
                public static 
                void BlendEquationSeparate([In, Out] OpenTK.Graphics.ES20.All modeRGB, [In, Out] OpenTK.Graphics.ES20.All modeAlpha)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBlendEquationSeparate((OpenTK.Graphics.ES20.All)modeRGB, (OpenTK.Graphics.ES20.All)modeAlpha);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dfactor">
        /// <para>
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBlendFunc")]
                public static 
                void BlendFunc([In, Out] OpenTK.Graphics.ES20.All sfactor, [In, Out] OpenTK.Graphics.ES20.All dfactor)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBlendFunc((OpenTK.Graphics.ES20.All)sfactor, (OpenTK.Graphics.ES20.All)dfactor);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="srcRGB">
        /// <para>
        /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstRGB">
        /// <para>
        /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.
        /// </para>
        /// </param>
        /// <param name="srcAlpha">
        /// <para>
        /// Specified how the alpha source blending factor is computed. The same symbolic constants are accepted as for srcRGB. The initial value is GL_ONE.
        /// </para>
        /// </param>
        /// <param name="dstAlpha">
        /// <para>
        /// Specified how the alpha destination blending factor is computed. The same symbolic constants are accepted as for dstRGB. The initial value is GL_ZERO.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBlendFuncSeparate")]
                public static 
                void BlendFuncSeparate([In, Out] OpenTK.Graphics.ES20.All srcRGB, [In, Out] OpenTK.Graphics.ES20.All dstRGB, [In, Out] OpenTK.Graphics.ES20.All srcAlpha, [In, Out] OpenTK.Graphics.ES20.All dstAlpha)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBlendFuncSeparate((OpenTK.Graphics.ES20.All)srcRGB, (OpenTK.Graphics.ES20.All)dstRGB, (OpenTK.Graphics.ES20.All)srcAlpha, (OpenTK.Graphics.ES20.All)dstAlpha);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferData")]
                public static 
                void BufferData<T2>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr size, [In, Out] T2[,] data, [In, Out] OpenTK.Graphics.ES20.All usage)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferData((OpenTK.Graphics.ES20.All)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES20.All)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferData")]
                public static 
                void BufferData<T2>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr size, [In, Out] T2[,,] data, [In, Out] OpenTK.Graphics.ES20.All usage)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferData((OpenTK.Graphics.ES20.All)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES20.All)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferData")]
                public static 
                void BufferData<T2>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr size, [In, Out] T2[] data, [In, Out] OpenTK.Graphics.ES20.All usage)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferData((OpenTK.Graphics.ES20.All)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES20.All)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferData")]
                public static 
                void BufferData([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr size, [In, Out] IntPtr data, [In, Out] OpenTK.Graphics.ES20.All usage)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBufferData((OpenTK.Graphics.ES20.All)target, (IntPtr)size, (IntPtr)data, (OpenTK.Graphics.ES20.All)usage);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Creates and initializes a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
        /// </para>
        /// </param>
        /// <param name="usage">
        /// <para>
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferData")]
                public static 
                void BufferData<T2>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr size, [In, Out] ref T2 data, [In, Out] OpenTK.Graphics.ES20.All usage)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferData((OpenTK.Graphics.ES20.All)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (OpenTK.Graphics.ES20.All)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferSubData")]
                public static 
                void BufferSubData<T3>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr offset, [In, Out] IntPtr size, [In, Out] T3[,] data)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubData((OpenTK.Graphics.ES20.All)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferSubData")]
                public static 
                void BufferSubData<T3>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr offset, [In, Out] IntPtr size, [In, Out] T3[,,] data)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubData((OpenTK.Graphics.ES20.All)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferSubData")]
                public static 
                void BufferSubData<T3>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr offset, [In, Out] IntPtr size, [In, Out] T3[] data)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubData((OpenTK.Graphics.ES20.All)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferSubData")]
                public static 
                void BufferSubData([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr offset, [In, Out] IntPtr size, [In, Out] IntPtr data)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glBufferSubData((OpenTK.Graphics.ES20.All)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Updates a subset of a buffer object's data store
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="offset">
        /// <para>
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the size in bytes of the data store region being replaced.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glBufferSubData")]
                public static 
                void BufferSubData<T3>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] IntPtr offset, [In, Out] IntPtr size, [In, Out] ref T3 data)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubData((OpenTK.Graphics.ES20.All)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCheckFramebufferStatus")]
                public static 
                OpenTK.Graphics.ES20.All CheckFramebufferStatus([In, Out] OpenTK.Graphics.ES20.All target)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glCheckFramebufferStatus((OpenTK.Graphics.ES20.All)target);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Bitwise OR of masks that indicate the buffers to be cleared. The four masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_ACCUM_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glClear")]
                public static 
                void Clear([In, Out] Int32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glClear((UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Bitwise OR of masks that indicate the buffers to be cleared. The four masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_ACCUM_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glClear")]
                public static 
                void Clear([In, Out] UInt32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glClear((UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glClearColor")]
                public static 
                void ClearColor([In, Out] Single red, [In, Out] Single green, [In, Out] Single blue, [In, Out] Single alpha)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="depth">
        /// <para>
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glClearDepthf")]
                public static 
                void ClearDepth([In, Out] Single depth)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glClearDepthf((Single)depth);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s">
        /// <para>
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glClearStencil")]
                public static 
                void ClearStencil([In, Out] Int32 s)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glClearStencil((Int32)s);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red">
        /// <para>
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glColorMask")]
                public static 
                void ColorMask([In, Out] bool red, [In, Out] bool green, [In, Out] bool blue, [In, Out] bool alpha)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glColorMask((bool)red, (bool)green, (bool)blue, (bool)alpha);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompileShader")]
                public static 
                void CompileShader([In, Out] Int32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glCompileShader((UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Compiles a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be compiled.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompileShader")]
                public static 
                void CompileShader([In, Out] UInt32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glCompileShader((UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexImage2D")]
                public static 
                void CompressedTexImage2D<T7>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] Int32 imageSize, [In, Out] T7[,] data)
                    where T7 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexImage2D")]
                public static 
                void CompressedTexImage2D<T7>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] Int32 imageSize, [In, Out] T7[,,] data)
                    where T7 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexImage2D")]
                public static 
                void CompressedTexImage2D<T7>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] Int32 imageSize, [In, Out] T7[] data)
                    where T7 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexImage2D")]
                public static 
                void CompressedTexImage2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] Int32 imageSize, [In, Out] IntPtr data)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glCompressedTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be Must be 2 sup n + 2 ( border ) for some integer . All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexImage2D")]
                public static 
                void CompressedTexImage2D<T7>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] Int32 imageSize, [In, Out] ref T7 data)
                    where T7 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexSubImage2D")]
                public static 
                void CompressedTexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] Int32 imageSize, [In, Out] T8[,] data)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexSubImage2D")]
                public static 
                void CompressedTexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] Int32 imageSize, [In, Out] T8[,,] data)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexSubImage2D")]
                public static 
                void CompressedTexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] Int32 imageSize, [In, Out] T8[] data)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexSubImage2D")]
                public static 
                void CompressedTexSubImage2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] Int32 imageSize, [In, Out] IntPtr data)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the compressed image data stored at address data.
        /// </para>
        /// </param>
        /// <param name="imageSize">
        /// <para>
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the compressed image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCompressedTexSubImage2D")]
                public static 
                void CompressedTexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] Int32 imageSize, [In, Out] ref T8 data)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalformat">
        /// <para>
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer .
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image. Must be 0 or 2 sup m + 2 ( border ) for some integer .
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCopyTexImage2D")]
                public static 
                void CopyTexImage2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glCopyTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCopyTexSubImage2D")]
                public static 
                void CopyTexSubImage2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glCopyTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Creates a program object
        /// </summary>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCreateProgram")]
                public static 
                Int32 CreateProgram()
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glCreateProgram();
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Creates a shader object
        /// </summary>
        /// <param name="shaderType">
        /// <para>
        /// Specifies the type of shader to be created. Must be either GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCreateShader")]
                public static 
                Int32 CreateShader([In, Out] OpenTK.Graphics.ES20.All type)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glCreateShader((OpenTK.Graphics.ES20.All)type);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify whether front- or back-facing facets can be culled
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glCullFace")]
                public static 
                void CullFace([In, Out] OpenTK.Graphics.ES20.All mode)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glCullFace((OpenTK.Graphics.ES20.All)mode);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteBuffers")]
                public static 
                void DeleteBuffers([In, Out] Int32 n, [In, Out] ref Int32 buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* buffers_ptr = &buffers)
                        {
                            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteBuffers")]
                public static 
                unsafe void DeleteBuffers([In, Out] Int32 n, [In, Out] UInt32* buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteBuffers")]
                public static 
                unsafe void DeleteBuffers([In, Out] Int32 n, [In, Out] Int32* buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteBuffers")]
                public static 
                void DeleteBuffers([In, Out] Int32 n, [In, Out] UInt32[] buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* buffers_ptr = buffers)
                        {
                            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteBuffers")]
                public static 
                void DeleteBuffers([In, Out] Int32 n, [In, Out] Int32[] buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* buffers_ptr = buffers)
                        {
                            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer objects to be deleted.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array of buffer objects to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteBuffers")]
                public static 
                void DeleteBuffers([In, Out] Int32 n, [In, Out] ref UInt32 buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* buffers_ptr = &buffers)
                        {
                            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteFramebuffers")]
                public static 
                void DeleteFramebuffers([In, Out] Int32 n, [In, Out] ref Int32 framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* framebuffers_ptr = &framebuffers)
                        {
                            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteFramebuffers")]
                public static 
                unsafe void DeleteFramebuffers([In, Out] Int32 n, [In, Out] UInt32* framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteFramebuffers")]
                public static 
                unsafe void DeleteFramebuffers([In, Out] Int32 n, [In, Out] Int32* framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteFramebuffers")]
                public static 
                void DeleteFramebuffers([In, Out] Int32 n, [In, Out] UInt32[] framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* framebuffers_ptr = framebuffers)
                        {
                            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteFramebuffers")]
                public static 
                void DeleteFramebuffers([In, Out] Int32 n, [In, Out] Int32[] framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* framebuffers_ptr = framebuffers)
                        {
                            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteFramebuffers")]
                public static 
                void DeleteFramebuffers([In, Out] Int32 n, [In, Out] ref UInt32 framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* framebuffers_ptr = &framebuffers)
                        {
                            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteProgram")]
                public static 
                void DeleteProgram([In, Out] Int32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Deletes a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteProgram")]
                public static 
                void DeleteProgram([In, Out] UInt32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteRenderbuffers")]
                public static 
                void DeleteRenderbuffers([In, Out] Int32 n, [In, Out] ref Int32 renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* renderbuffers_ptr = &renderbuffers)
                        {
                            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteRenderbuffers")]
                public static 
                unsafe void DeleteRenderbuffers([In, Out] Int32 n, [In, Out] UInt32* renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteRenderbuffers")]
                public static 
                unsafe void DeleteRenderbuffers([In, Out] Int32 n, [In, Out] Int32* renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteRenderbuffers")]
                public static 
                void DeleteRenderbuffers([In, Out] Int32 n, [In, Out] UInt32[] renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* renderbuffers_ptr = renderbuffers)
                        {
                            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteRenderbuffers")]
                public static 
                void DeleteRenderbuffers([In, Out] Int32 n, [In, Out] Int32[] renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* renderbuffers_ptr = renderbuffers)
                        {
                            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteRenderbuffers")]
                public static 
                void DeleteRenderbuffers([In, Out] Int32 n, [In, Out] ref UInt32 renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                        {
                            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteShader")]
                public static 
                void DeleteShader([In, Out] Int32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteShader((UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Deletes a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteShader")]
                public static 
                void DeleteShader([In, Out] UInt32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteShader((UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteTextures")]
                public static 
                void DeleteTextures([In, Out] Int32 n, [In, Out] ref Int32 textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* textures_ptr = &textures)
                        {
                            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteTextures")]
                public static 
                unsafe void DeleteTextures([In, Out] Int32 n, [In, Out] UInt32* textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteTextures")]
                public static 
                unsafe void DeleteTextures([In, Out] Int32 n, [In, Out] Int32* textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteTextures")]
                public static 
                void DeleteTextures([In, Out] Int32 n, [In, Out] UInt32[] textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* textures_ptr = textures)
                        {
                            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteTextures")]
                public static 
                void DeleteTextures([In, Out] Int32 n, [In, Out] Int32[] textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* textures_ptr = textures)
                        {
                            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Delete named textures
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of textures to be deleted.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array of textures to be deleted.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDeleteTextures")]
                public static 
                void DeleteTextures([In, Out] Int32 n, [In, Out] ref UInt32 textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* textures_ptr = &textures)
                        {
                            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the depth comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_LESS.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDepthFunc")]
                public static 
                void DepthFunc([In, Out] OpenTK.Graphics.ES20.All func)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDepthFunc((OpenTK.Graphics.ES20.All)func);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag">
        /// <para>
        /// Specifies whether the depth buffer is enabled for writing. If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDepthMask")]
                public static 
                void DepthMask([In, Out] bool flag)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDepthMask((bool)flag);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="nearVal">
        /// <para>
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="farVal">
        /// <para>
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDepthRangef")]
                public static 
                void DepthRange([In, Out] Single zNear, [In, Out] Single zFar)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDepthRangef((Single)zNear, (Single)zFar);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDetachShader")]
                public static 
                void DetachShader([In, Out] Int32 program, [In, Out] Int32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDetachShader((UInt32)program, (UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Detaches a shader object from a program object to which it is attached
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object from which to detach the shader object.
        /// </para>
        /// </param>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be detached.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDetachShader")]
                public static 
                void DetachShader([In, Out] UInt32 program, [In, Out] UInt32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDetachShader((UInt32)program, (UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDisable")]
                public static 
                void Disable([In, Out] OpenTK.Graphics.ES20.All cap)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDisable((OpenTK.Graphics.ES20.All)cap);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDisableVertexAttribArray")]
                public static 
                void DisableVertexAttribArray([In, Out] Int32 index)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDisableVertexAttribArray((UInt32)index);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDisableVertexAttribArray")]
                public static 
                void DisableVertexAttribArray([In, Out] UInt32 index)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDisableVertexAttribArray((UInt32)index);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="first">
        /// <para>
        /// Specifies the starting index in the enabled arrays.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of indices to be rendered.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDrawArrays")]
                public static 
                void DrawArrays([In, Out] OpenTK.Graphics.ES20.All mode, [In, Out] Int32 first, [In, Out] Int32 count)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDrawArrays((OpenTK.Graphics.ES20.All)mode, (Int32)first, (Int32)count);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDrawElements")]
                public static 
                void DrawElements<T3>([In, Out] OpenTK.Graphics.ES20.All mode, [In, Out] Int32 count, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T3[,] indices)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElements((OpenTK.Graphics.ES20.All)mode, (Int32)count, (OpenTK.Graphics.ES20.All)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDrawElements")]
                public static 
                void DrawElements<T3>([In, Out] OpenTK.Graphics.ES20.All mode, [In, Out] Int32 count, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T3[,,] indices)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElements((OpenTK.Graphics.ES20.All)mode, (Int32)count, (OpenTK.Graphics.ES20.All)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDrawElements")]
                public static 
                void DrawElements<T3>([In, Out] OpenTK.Graphics.ES20.All mode, [In, Out] Int32 count, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T3[] indices)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElements((OpenTK.Graphics.ES20.All)mode, (Int32)count, (OpenTK.Graphics.ES20.All)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDrawElements")]
                public static 
                void DrawElements([In, Out] OpenTK.Graphics.ES20.All mode, [In, Out] Int32 count, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] IntPtr indices)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glDrawElements((OpenTK.Graphics.ES20.All)mode, (Int32)count, (OpenTK.Graphics.ES20.All)type, (IntPtr)indices);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements to be rendered.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.
        /// </para>
        /// </param>
        /// <param name="indices">
        /// <para>
        /// Specifies a pointer to the location where the indices are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glDrawElements")]
                public static 
                void DrawElements<T3>([In, Out] OpenTK.Graphics.ES20.All mode, [In, Out] Int32 count, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] ref T3 indices)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElements((OpenTK.Graphics.ES20.All)mode, (Int32)count, (OpenTK.Graphics.ES20.All)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glEnable")]
                public static 
                void Enable([In, Out] OpenTK.Graphics.ES20.All cap)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glEnable((OpenTK.Graphics.ES20.All)cap);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glEnableVertexAttribArray")]
                public static 
                void EnableVertexAttribArray([In, Out] Int32 index)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glEnableVertexAttribArray((UInt32)index);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glEnableVertexAttribArray")]
                public static 
                void EnableVertexAttribArray([In, Out] UInt32 index)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glEnableVertexAttribArray((UInt32)index);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Block until all GL execution is complete
        /// </summary>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glFinish")]
                public static 
                void Finish()
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glFinish();
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Force execution of GL commands in finite time
        /// </summary>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glFlush")]
                public static 
                void Flush()
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glFlush();
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glFramebufferRenderbuffer")]
                public static 
                void FramebufferRenderbuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All attachment, [In, Out] OpenTK.Graphics.ES20.All renderbuffertarget, [In, Out] Int32 renderbuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)attachment, (OpenTK.Graphics.ES20.All)renderbuffertarget, (UInt32)renderbuffer);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glFramebufferRenderbuffer")]
                public static 
                void FramebufferRenderbuffer([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All attachment, [In, Out] OpenTK.Graphics.ES20.All renderbuffertarget, [In, Out] UInt32 renderbuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glFramebufferRenderbuffer((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)attachment, (OpenTK.Graphics.ES20.All)renderbuffertarget, (UInt32)renderbuffer);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glFramebufferTexture2D")]
                public static 
                void FramebufferTexture2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All attachment, [In, Out] OpenTK.Graphics.ES20.All textarget, [In, Out] Int32 texture, [In, Out] Int32 level)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glFramebufferTexture2D((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)attachment, (OpenTK.Graphics.ES20.All)textarget, (UInt32)texture, (Int32)level);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glFramebufferTexture2D")]
                public static 
                void FramebufferTexture2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All attachment, [In, Out] OpenTK.Graphics.ES20.All textarget, [In, Out] UInt32 texture, [In, Out] Int32 level)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glFramebufferTexture2D((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)attachment, (OpenTK.Graphics.ES20.All)textarget, (UInt32)texture, (Int32)level);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode">
        /// <para>
        /// Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The initial value is GL_CCW.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glFrontFace")]
                public static 
                void FrontFace([In, Out] OpenTK.Graphics.ES20.All mode)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glFrontFace((OpenTK.Graphics.ES20.All)mode);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenBuffers")]
                public static 
                void GenBuffers([In, Out] Int32 n, [In, Out] ref Int32 buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* buffers_ptr = &buffers)
                        {
                            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenBuffers")]
                public static 
                unsafe void GenBuffers([In, Out] Int32 n, [In, Out] UInt32* buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenBuffers")]
                public static 
                unsafe void GenBuffers([In, Out] Int32 n, [In, Out] Int32* buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenBuffers")]
                public static 
                void GenBuffers([In, Out] Int32 n, [In, Out] UInt32[] buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* buffers_ptr = buffers)
                        {
                            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenBuffers")]
                public static 
                void GenBuffers([In, Out] Int32 n, [In, Out] Int32[] buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* buffers_ptr = buffers)
                        {
                            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate buffer object names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of buffer object names to be generated.
        /// </para>
        /// </param>
        /// <param name="buffers">
        /// <para>
        /// Specifies an array in which the generated buffer object names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenBuffers")]
                public static 
                void GenBuffers([In, Out] Int32 n, [In, Out] ref UInt32 buffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* buffers_ptr = &buffers)
                        {
                            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenerateMipmap")]
                public static 
                void GenerateMipmap([In, Out] OpenTK.Graphics.ES20.All target)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenerateMipmap((OpenTK.Graphics.ES20.All)target);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenFramebuffers")]
                public static 
                void GenFramebuffers([In, Out] Int32 n, [In, Out] ref Int32 framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* framebuffers_ptr = &framebuffers)
                        {
                            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenFramebuffers")]
                public static 
                unsafe void GenFramebuffers([In, Out] Int32 n, [In, Out] UInt32* framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenFramebuffers")]
                public static 
                unsafe void GenFramebuffers([In, Out] Int32 n, [In, Out] Int32* framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenFramebuffers")]
                public static 
                void GenFramebuffers([In, Out] Int32 n, [In, Out] UInt32[] framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* framebuffers_ptr = framebuffers)
                        {
                            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenFramebuffers")]
                public static 
                void GenFramebuffers([In, Out] Int32 n, [In, Out] Int32[] framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* framebuffers_ptr = framebuffers)
                        {
                            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenFramebuffers")]
                public static 
                void GenFramebuffers([In, Out] Int32 n, [In, Out] ref UInt32 framebuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* framebuffers_ptr = &framebuffers)
                        {
                            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenRenderbuffers")]
                public static 
                void GenRenderbuffers([In, Out] Int32 n, [In, Out] ref Int32 renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* renderbuffers_ptr = &renderbuffers)
                        {
                            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenRenderbuffers")]
                public static 
                unsafe void GenRenderbuffers([In, Out] Int32 n, [In, Out] UInt32* renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenRenderbuffers")]
                public static 
                unsafe void GenRenderbuffers([In, Out] Int32 n, [In, Out] Int32* renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenRenderbuffers")]
                public static 
                void GenRenderbuffers([In, Out] Int32 n, [In, Out] UInt32[] renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* renderbuffers_ptr = renderbuffers)
                        {
                            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenRenderbuffers")]
                public static 
                void GenRenderbuffers([In, Out] Int32 n, [In, Out] Int32[] renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* renderbuffers_ptr = renderbuffers)
                        {
                            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenRenderbuffers")]
                public static 
                void GenRenderbuffers([In, Out] Int32 n, [In, Out] ref UInt32 renderbuffers)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                        {
                            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenTextures")]
                public static 
                void GenTextures([In, Out] Int32 n, [In, Out] ref Int32 textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* textures_ptr = &textures)
                        {
                            Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenTextures")]
                public static 
                unsafe void GenTextures([In, Out] Int32 n, [In, Out] UInt32* textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenTextures")]
                public static 
                unsafe void GenTextures([In, Out] Int32 n, [In, Out] Int32* textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenTextures")]
                public static 
                void GenTextures([In, Out] Int32 n, [In, Out] UInt32[] textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* textures_ptr = textures)
                        {
                            Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenTextures")]
                public static 
                void GenTextures([In, Out] Int32 n, [In, Out] Int32[] textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* textures_ptr = textures)
                        {
                            Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Generate texture names
        /// </summary>
        /// <param name="n">
        /// <para>
        /// Specifies the number of texture names to be generated.
        /// </para>
        /// </param>
        /// <param name="textures">
        /// <para>
        /// Specifies an array in which the generated texture names are stored.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGenTextures")]
                public static 
                void GenTextures([In, Out] Int32 n, [In, Out] ref UInt32 textures)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* textures_ptr = &textures)
                        {
                            Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveAttrib")]
                public static 
                void GetActiveAttrib([In, Out] Int32 program, [In, Out] Int32 index, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] ref Int32 size, [In, Out] ref OpenTK.Graphics.ES20.All type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        fixed (Int32* size_ptr = &size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = &type)
                        {
                            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveAttrib")]
                public static 
                unsafe void GetActiveAttrib([In, Out] UInt32 program, [In, Out] UInt32 index, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] Int32* size, [In, Out] OpenTK.Graphics.ES20.All* type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES20.All*)type, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveAttrib")]
                public static 
                unsafe void GetActiveAttrib([In, Out] Int32 program, [In, Out] Int32 index, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] Int32* size, [In, Out] OpenTK.Graphics.ES20.All* type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES20.All*)type, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveAttrib")]
                public static 
                void GetActiveAttrib([In, Out] UInt32 program, [In, Out] UInt32 index, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] Int32[] size, [In, Out] OpenTK.Graphics.ES20.All[] type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        fixed (Int32* size_ptr = size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = type)
                        {
                            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveAttrib")]
                public static 
                void GetActiveAttrib([In, Out] Int32 program, [In, Out] Int32 index, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] Int32[] size, [In, Out] OpenTK.Graphics.ES20.All[] type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        fixed (Int32* size_ptr = size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = type)
                        {
                            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active attribute variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the attribute variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the attribute variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveAttrib")]
                public static 
                void GetActiveAttrib([In, Out] UInt32 program, [In, Out] UInt32 index, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] ref Int32 size, [In, Out] ref OpenTK.Graphics.ES20.All type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        fixed (Int32* size_ptr = &size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = &type)
                        {
                            Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveUniform")]
                public static 
                void GetActiveUniform([In, Out] Int32 program, [In, Out] Int32 index, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] ref Int32 size, [In, Out] ref OpenTK.Graphics.ES20.All type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        fixed (Int32* size_ptr = &size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = &type)
                        {
                            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveUniform")]
                public static 
                unsafe void GetActiveUniform([In, Out] UInt32 program, [In, Out] UInt32 index, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] Int32* size, [In, Out] OpenTK.Graphics.ES20.All* type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES20.All*)type, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveUniform")]
                public static 
                unsafe void GetActiveUniform([In, Out] Int32 program, [In, Out] Int32 index, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] Int32* size, [In, Out] OpenTK.Graphics.ES20.All* type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (OpenTK.Graphics.ES20.All*)type, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveUniform")]
                public static 
                void GetActiveUniform([In, Out] UInt32 program, [In, Out] UInt32 index, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] Int32[] size, [In, Out] OpenTK.Graphics.ES20.All[] type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        fixed (Int32* size_ptr = size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = type)
                        {
                            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveUniform")]
                public static 
                void GetActiveUniform([In, Out] Int32 program, [In, Out] Int32 index, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] Int32[] size, [In, Out] OpenTK.Graphics.ES20.All[] type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        fixed (Int32* size_ptr = size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = type)
                        {
                            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns information about an active uniform variable for the specified program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Returns the size of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Returns the data type of the uniform variable.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetActiveUniform")]
                public static 
                void GetActiveUniform([In, Out] UInt32 program, [In, Out] UInt32 index, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] ref Int32 size, [In, Out] ref OpenTK.Graphics.ES20.All type, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        fixed (Int32* size_ptr = &size)
                        fixed (OpenTK.Graphics.ES20.All* type_ptr = &type)
                        {
                            Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (OpenTK.Graphics.ES20.All*)type_ptr, (String)name);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttachedShaders")]
                public static 
                void GetAttachedShaders([In, Out] Int32 program, [In, Out] Int32 maxcount, [In, Out] ref Int32 count, [In, Out] ref Int32 shaders)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* count_ptr = &count)
                        fixed (Int32* shaders_ptr = &shaders)
                        {
                            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttachedShaders")]
                public static 
                unsafe void GetAttachedShaders([In, Out] UInt32 program, [In, Out] Int32 maxcount, [In, Out] Int32* count, [In, Out] UInt32* shaders)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count, (UInt32*)shaders);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttachedShaders")]
                public static 
                unsafe void GetAttachedShaders([In, Out] Int32 program, [In, Out] Int32 maxcount, [In, Out] Int32* count, [In, Out] Int32* shaders)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count, (UInt32*)shaders);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttachedShaders")]
                public static 
                void GetAttachedShaders([In, Out] UInt32 program, [In, Out] Int32 maxcount, [In, Out] Int32[] count, [In, Out] UInt32[] shaders)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* count_ptr = count)
                        fixed (UInt32* shaders_ptr = shaders)
                        {
                            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttachedShaders")]
                public static 
                void GetAttachedShaders([In, Out] Int32 program, [In, Out] Int32 maxcount, [In, Out] Int32[] count, [In, Out] Int32[] shaders)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* count_ptr = count)
                        fixed (Int32* shaders_ptr = shaders)
                        {
                            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="maxCount">
        /// <para>
        /// Specifies the size of the array for storing the returned object names.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Returns the number of names actually returned in objects.
        /// </para>
        /// </param>
        /// <param name="shaders">
        /// <para>
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttachedShaders")]
                public static 
                void GetAttachedShaders([In, Out] UInt32 program, [In, Out] Int32 maxcount, [In, Out] ref Int32 count, [In, Out] ref UInt32 shaders)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* count_ptr = &count)
                        fixed (UInt32* shaders_ptr = &shaders)
                        {
                            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttribLocation")]
                public static 
                int GetAttribLocation([In, Out] Int32 program, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glGetAttribLocation((UInt32)program, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the location of an attribute variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetAttribLocation")]
                public static 
                int GetAttribLocation([In, Out] UInt32 program, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glGetAttribLocation((UInt32)program, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetBooleanv")]
                public static 
                unsafe void GetBoolean([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] bool* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetBooleanv((OpenTK.Graphics.ES20.All)pname, (bool*)@params);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetBooleanv")]
                public static 
                void GetBoolean([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref bool @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (bool* @params_ptr = &@params)
                        {
                            Delegates.glGetBooleanv((OpenTK.Graphics.ES20.All)pname, (bool*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetBooleanv")]
                public static 
                void GetBoolean([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] bool[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (bool* @params_ptr = @params)
                        {
                            Delegates.glGetBooleanv((OpenTK.Graphics.ES20.All)pname, (bool*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetBufferParameteriv")]
                public static 
                unsafe void GetBufferParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetBufferParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetBufferParameteriv")]
                public static 
                void GetBufferParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetBufferParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target buffer object. The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER.
        /// </para>
        /// </param>
        /// <param name="value">
        /// <para>
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the requested parameter.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetBufferParameteriv")]
                public static 
                void GetBufferParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetBufferParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return error information
        /// </summary>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetError")]
                public static 
                OpenTK.Graphics.ES20.All GetError()
                {
                    return Delegates.glGetError();
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetFloatv")]
                public static 
                unsafe void GetFloat([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetFloatv((OpenTK.Graphics.ES20.All)pname, (Single*)@params);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetFloatv")]
                public static 
                void GetFloat([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Single @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = &@params)
                        {
                            Delegates.glGetFloatv((OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetFloatv")]
                public static 
                void GetFloat([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = @params)
                        {
                            Delegates.glGetFloatv((OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
                public static 
                unsafe void GetFramebufferAttachmentParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All attachment, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)attachment, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
                public static 
                void GetFramebufferAttachmentParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All attachment, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)attachment, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
                public static 
                void GetFramebufferAttachmentParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All attachment, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetFramebufferAttachmentParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)attachment, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetIntegerv")]
                public static 
                unsafe void GetInteger([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetIntegerv((OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetIntegerv")]
                public static 
                void GetInteger([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetIntegerv((OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetIntegerv")]
                public static 
                void GetInteger([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetIntegerv((OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramInfoLog")]
                public static 
                void GetProgramInfoLog([In, Out] UInt32 program, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramInfoLog")]
                public static 
                void GetProgramInfoLog([In, Out] Int32 program, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramInfoLog")]
                public static 
                void GetProgramInfoLog([In, Out] UInt32 program, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramInfoLog")]
                public static 
                unsafe void GetProgramInfoLog([In, Out] Int32 program, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length, (String)infolog);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramInfoLog")]
                public static 
                unsafe void GetProgramInfoLog([In, Out] UInt32 program, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length, (String)infolog);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramInfoLog")]
                public static 
                void GetProgramInfoLog([In, Out] Int32 program, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramiv")]
                public static 
                void GetProgram([In, Out] UInt32 program, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramiv")]
                public static 
                void GetProgram([In, Out] Int32 program, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramiv")]
                public static 
                void GetProgram([In, Out] UInt32 program, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramiv")]
                public static 
                unsafe void GetProgram([In, Out] Int32 program, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramiv")]
                public static 
                unsafe void GetProgram([In, Out] UInt32 program, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS, GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetProgramiv")]
                public static 
                void GetProgram([In, Out] Int32 program, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetProgramiv((UInt32)program, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetRenderbufferParameteriv")]
                public static 
                unsafe void GetRenderbufferParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetRenderbufferParameteriv")]
                public static 
                void GetRenderbufferParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetRenderbufferParameteriv")]
                public static 
                void GetRenderbufferParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetRenderbufferParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderInfoLog")]
                public static 
                void GetShaderInfoLog([In, Out] UInt32 shader, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderInfoLog")]
                public static 
                void GetShaderInfoLog([In, Out] Int32 shader, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderInfoLog")]
                public static 
                void GetShaderInfoLog([In, Out] UInt32 shader, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderInfoLog")]
                public static 
                unsafe void GetShaderInfoLog([In, Out] Int32 shader, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length, (String)infolog);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderInfoLog")]
                public static 
                unsafe void GetShaderInfoLog([In, Out] UInt32 shader, [In, Out] Int32 bufsize, [In, Out] Int32* length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length, (String)infolog);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the information log for a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object whose information log is to be queried.
        /// </para>
        /// </param>
        /// <param name="maxLength">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="infoLog">
        /// <para>
        /// Specifies an array of characters that is used to return the information log.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderInfoLog")]
                public static 
                void GetShaderInfoLog([In, Out] Int32 shader, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [In, Out] String infolog)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (String)infolog);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderiv")]
                public static 
                void GetShader([In, Out] UInt32 shader, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderiv")]
                public static 
                void GetShader([In, Out] Int32 shader, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderiv")]
                public static 
                void GetShader([In, Out] UInt32 shader, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderiv")]
                public static 
                unsafe void GetShader([In, Out] Int32 shader, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderiv")]
                public static 
                unsafe void GetShader([In, Out] UInt32 shader, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns a parameter from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the object parameter. Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested object parameter.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderiv")]
                public static 
                void GetShader([In, Out] Int32 shader, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetShaderiv((UInt32)shader, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderPrecisionFormat")]
                public static 
                unsafe void GetShaderPrecisionFormat([In, Out] OpenTK.Graphics.ES20.All shadertype, [In, Out] OpenTK.Graphics.ES20.All precisiontype, [In, Out] Int32* range, [In, Out] Int32* precision)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetShaderPrecisionFormat((OpenTK.Graphics.ES20.All)shadertype, (OpenTK.Graphics.ES20.All)precisiontype, (Int32*)range, (Int32*)precision);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderPrecisionFormat")]
                public static 
                void GetShaderPrecisionFormat([In, Out] OpenTK.Graphics.ES20.All shadertype, [In, Out] OpenTK.Graphics.ES20.All precisiontype, [In, Out] ref Int32 range, [In, Out] ref Int32 precision)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* range_ptr = &range)
                        fixed (Int32* precision_ptr = &precision)
                        {
                            Delegates.glGetShaderPrecisionFormat((OpenTK.Graphics.ES20.All)shadertype, (OpenTK.Graphics.ES20.All)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderPrecisionFormat")]
                public static 
                void GetShaderPrecisionFormat([In, Out] OpenTK.Graphics.ES20.All shadertype, [In, Out] OpenTK.Graphics.ES20.All precisiontype, [In, Out] Int32[] range, [In, Out] Int32[] precision)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* range_ptr = range)
                        fixed (Int32* precision_ptr = precision)
                        {
                            Delegates.glGetShaderPrecisionFormat((OpenTK.Graphics.ES20.All)shadertype, (OpenTK.Graphics.ES20.All)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderSource")]
                public static 
                void GetShaderSource([In, Out] Int32 shader, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [Out] System.Text.StringBuilder source)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (System.Text.StringBuilder)source);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderSource")]
                public static 
                unsafe void GetShaderSource([In, Out] UInt32 shader, [In, Out] Int32 bufsize, [In, Out] Int32* length, [Out] System.Text.StringBuilder source)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length, (System.Text.StringBuilder)source);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderSource")]
                public static 
                unsafe void GetShaderSource([In, Out] Int32 shader, [In, Out] Int32 bufsize, [In, Out] Int32* length, [Out] System.Text.StringBuilder source)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length, (System.Text.StringBuilder)source);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderSource")]
                public static 
                void GetShaderSource([In, Out] UInt32 shader, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [Out] System.Text.StringBuilder source)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (System.Text.StringBuilder)source);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderSource")]
                public static 
                void GetShaderSource([In, Out] Int32 shader, [In, Out] Int32 bufsize, [In, Out] Int32[] length, [Out] System.Text.StringBuilder source)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (System.Text.StringBuilder)source);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the source code string from a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the shader object to be queried.
        /// </para>
        /// </param>
        /// <param name="bufSize">
        /// <para>
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </para>
        /// </param>
        /// <param name="source">
        /// <para>
        /// Specifies an array of characters that is used to return the source code string.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetShaderSource")]
                public static 
                void GetShaderSource([In, Out] UInt32 shader, [In, Out] Int32 bufsize, [In, Out] ref Int32 length, [Out] System.Text.StringBuilder source)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, (System.Text.StringBuilder)source);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name">
        /// <para>
        /// Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetString")]
                public static 
                unsafe string GetString([In, Out] OpenTK.Graphics.ES20.All name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(Delegates.glGetString((OpenTK.Graphics.ES20.All)name));
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetTexParameterfv")]
                public static 
                unsafe void GetTexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetTexParameterfv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Single*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetTexParameterfv")]
                public static 
                void GetTexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Single @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = &@params)
                        {
                            Delegates.glGetTexParameterfv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetTexParameterfv")]
                public static 
                void GetTexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = @params)
                        {
                            Delegates.glGetTexParameterfv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetTexParameteriv")]
                public static 
                unsafe void GetTexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetTexParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetTexParameteriv")]
                public static 
                void GetTexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetTexParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return texture parameter values
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the symbolic name of the target texture. GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a texture parameter. GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, and GL_GENERATE_MIPMAP are accepted.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the texture parameters.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetTexParameteriv")]
                public static 
                void GetTexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetTexParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformfv")]
                public static 
                void GetUniform([In, Out] Int32 program, [In, Out] Int32 location, [In, Out] ref Single @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = &@params)
                        {
                            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformfv")]
                public static 
                unsafe void GetUniform([In, Out] UInt32 program, [In, Out] Int32 location, [In, Out] Single* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformfv")]
                public static 
                unsafe void GetUniform([In, Out] Int32 program, [In, Out] Int32 location, [In, Out] Single* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformfv")]
                public static 
                void GetUniform([In, Out] UInt32 program, [In, Out] Int32 location, [In, Out] Single[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = @params)
                        {
                            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformfv")]
                public static 
                void GetUniform([In, Out] Int32 program, [In, Out] Int32 location, [In, Out] Single[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = @params)
                        {
                            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformfv")]
                public static 
                void GetUniform([In, Out] UInt32 program, [In, Out] Int32 location, [In, Out] ref Single @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = &@params)
                        {
                            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformiv")]
                public static 
                void GetUniform([In, Out] Int32 program, [In, Out] Int32 location, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformiv")]
                public static 
                unsafe void GetUniform([In, Out] UInt32 program, [In, Out] Int32 location, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformiv")]
                public static 
                unsafe void GetUniform([In, Out] Int32 program, [In, Out] Int32 location, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformiv")]
                public static 
                void GetUniform([In, Out] UInt32 program, [In, Out] Int32 location, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformiv")]
                public static 
                void GetUniform([In, Out] Int32 program, [In, Out] Int32 location, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the value of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be queried.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the value of the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformiv")]
                public static 
                void GetUniform([In, Out] UInt32 program, [In, Out] Int32 location, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformLocation")]
                public static 
                int GetUniformLocation([In, Out] Int32 program, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glGetUniformLocation((UInt32)program, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Returns the location of a uniform variable
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the program object to be queried.
        /// </para>
        /// </param>
        /// <param name="name">
        /// <para>
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetUniformLocation")]
                public static 
                int GetUniformLocation([In, Out] UInt32 program, [In, Out] String name)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glGetUniformLocation((UInt32)program, (String)name);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribfv")]
                public static 
                void GetVertexAttrib([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Single @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = &@params)
                        {
                            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribfv")]
                public static 
                unsafe void GetVertexAttrib([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Single*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribfv")]
                public static 
                unsafe void GetVertexAttrib([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Single*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribfv")]
                public static 
                void GetVertexAttrib([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = @params)
                        {
                            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribfv")]
                public static 
                void GetVertexAttrib([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = @params)
                        {
                            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribfv")]
                public static 
                void GetVertexAttrib([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Single @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = &@params)
                        {
                            Delegates.glGetVertexAttribfv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribiv")]
                public static 
                void GetVertexAttrib([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribiv")]
                public static 
                unsafe void GetVertexAttrib([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribiv")]
                public static 
                unsafe void GetVertexAttrib([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribiv")]
                public static 
                void GetVertexAttrib([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribiv")]
                public static 
                void GetVertexAttrib([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.
        /// </para>
        /// </param>
        /// <param name="params">
        /// <para>
        /// Returns the requested data.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribiv")]
                public static 
                void GetVertexAttrib([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref Int32 @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = &@params)
                        {
                            Delegates.glGetVertexAttribiv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] T2[,] pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] T2[] pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] T2[,] pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] T2[,,] pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] T2[,,] pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] IntPtr pointer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] IntPtr pointer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref T2 pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] UInt32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] T2[] pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Returns the pointer value.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glGetVertexAttribPointerv")]
                public static 
                void GetVertexAttribPointer<T2>([In, Out] Int32 index, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] ref T2 pointer)
                    where T2 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointerv((UInt32)index, (OpenTK.Graphics.ES20.All)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies a symbolic constant indicating the behavior to be controlled. GL_FOG_HINT, GL_GENERATE_MIPMAP_HINT, GL_LINE_SMOOTH_HINT, GL_PERSPECTIVE_CORRECTION_HINT, GL_POINT_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
        /// </para>
        /// </param>
        /// <param name="mode">
        /// <para>
        /// Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glHint")]
                public static 
                void Hint([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All mode)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glHint((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)mode);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsBuffer")]
                public static 
                bool IsBuffer([In, Out] Int32 buffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsBuffer((UInt32)buffer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer">
        /// <para>
        /// Specifies a value that may be the name of a buffer object.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsBuffer")]
                public static 
                bool IsBuffer([In, Out] UInt32 buffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsBuffer((UInt32)buffer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap">
        /// <para>
        /// Specifies a symbolic constant indicating a GL capability.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsEnabled")]
                public static 
                bool IsEnabled([In, Out] OpenTK.Graphics.ES20.All cap)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsEnabled((OpenTK.Graphics.ES20.All)cap);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsFramebuffer")]
                public static 
                bool IsFramebuffer([In, Out] Int32 framebuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsFramebuffer((UInt32)framebuffer);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsFramebuffer")]
                public static 
                bool IsFramebuffer([In, Out] UInt32 framebuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsFramebuffer((UInt32)framebuffer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsProgram")]
                public static 
                bool IsProgram([In, Out] Int32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determines if a name corresponds to a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies a potential program object.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsProgram")]
                public static 
                bool IsProgram([In, Out] UInt32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsRenderbuffer")]
                public static 
                bool IsRenderbuffer([In, Out] Int32 renderbuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsRenderbuffer")]
                public static 
                bool IsRenderbuffer([In, Out] UInt32 renderbuffer)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsShader")]
                public static 
                bool IsShader([In, Out] Int32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsShader((UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determines if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies a potential shader object.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsShader")]
                public static 
                bool IsShader([In, Out] UInt32 shader)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsShader((UInt32)shader);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsTexture")]
                public static 
                bool IsTexture([In, Out] Int32 texture)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsTexture((UInt32)texture);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture">
        /// <para>
        /// Specifies a value that may be the name of a texture.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glIsTexture")]
                public static 
                bool IsTexture([In, Out] UInt32 texture)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    return Delegates.glIsTexture((UInt32)texture);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width">
        /// <para>
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glLineWidth")]
                public static 
                void LineWidth([In, Out] Single width)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glLineWidth((Single)width);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glLinkProgram")]
                public static 
                void LinkProgram([In, Out] Int32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glLinkProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Links a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be linked.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glLinkProgram")]
                public static 
                void LinkProgram([In, Out] UInt32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glLinkProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value that pname is set to.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glPixelStorei")]
                public static 
                void PixelStore([In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32 param)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glPixelStorei((OpenTK.Graphics.ES20.All)pname, (Int32)param);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor">
        /// <para>
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="units">
        /// <para>
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glPolygonOffset")]
                public static 
                void PolygonOffset([In, Out] Single factor, [In, Out] Single units)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glPolygonOffset((Single)factor, (Single)units);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glReadPixels")]
                public static 
                void ReadPixels<T6>([In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T6[,] pixels)
                    where T6 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glReadPixels")]
                public static 
                void ReadPixels<T6>([In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T6[,,] pixels)
                    where T6 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glReadPixels")]
                public static 
                void ReadPixels<T6>([In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T6[] pixels)
                    where T6 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glReadPixels")]
                public static 
                void ReadPixels([In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] IntPtr pixels)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Returns the pixel data.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glReadPixels")]
                public static 
                void ReadPixels<T6>([In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] ref T6 pixels)
                    where T6 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glReleaseShaderCompiler")]
                public static 
                void ReleaseShaderCompiler()
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glReleaseShaderCompiler();
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glRenderbufferStorage")]
                public static 
                void RenderbufferStorage([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glRenderbufferStorage((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value">
        /// <para>
        /// Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </para>
        /// </param>
        /// <param name="invert">
        /// <para>
        /// Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glSampleCoverage")]
                public static 
                void SampleCoverage([In, Out] Single value, [In, Out] bool invert)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glSampleCoverage((Single)value, (bool)invert);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define the scissor box
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glScissor")]
                public static 
                void Scissor([In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref Int32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary([In, Out] Int32 n, [In, Out] UInt32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] IntPtr binary, [In, Out] Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary, (Int32)length);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary([In, Out] Int32 n, [In, Out] Int32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] IntPtr binary, [In, Out] Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary, (Int32)length);
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref UInt32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref Int32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref UInt32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref Int32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] ref T3 binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] ref T3 binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                unsafe void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32* shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] ref T3 binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary([In, Out] Int32 n, [In, Out] UInt32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] IntPtr binary, [In, Out] Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = shaders)
                        {
                            Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary, (Int32)length);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary([In, Out] Int32 n, [In, Out] Int32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] IntPtr binary, [In, Out] Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = shaders)
                        {
                            Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary, (Int32)length);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] ref T3 binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref UInt32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] ref T3 binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref Int32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] ref T3 binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] ref UInt32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = &shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary([In, Out] Int32 n, [In, Out] ref Int32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] IntPtr binary, [In, Out] Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = &shaders)
                        {
                            Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary, (Int32)length);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] UInt32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary<T3>([In, Out] Int32 n, [In, Out] Int32[] shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] T3[,,] binary, [In, Out] Int32 length)
                    where T3 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* shaders_ptr = shaders)
                        {
                            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                            try
                            {
                                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                            }
                            finally
                            {
                                binary_ptr.Free();
                            }
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderBinary")]
                public static 
                void ShaderBinary([In, Out] Int32 n, [In, Out] ref UInt32 shaders, [In, Out] OpenTK.Graphics.ES20.All binaryformat, [In, Out] IntPtr binary, [In, Out] Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (UInt32* shaders_ptr = &shaders)
                        {
                            Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (OpenTK.Graphics.ES20.All)binaryformat, (IntPtr)binary, (Int32)length);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderSource")]
                public static 
                void ShaderSource([In, Out] Int32 shader, [In, Out] Int32 count, [In, Out] String[] @string, [In, Out] ref Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderSource")]
                public static 
                unsafe void ShaderSource([In, Out] UInt32 shader, [In, Out] Int32 count, [In, Out] String[] @string, [In, Out] Int32* length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderSource")]
                public static 
                unsafe void ShaderSource([In, Out] Int32 shader, [In, Out] Int32 count, [In, Out] String[] @string, [In, Out] Int32* length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderSource")]
                public static 
                void ShaderSource([In, Out] UInt32 shader, [In, Out] Int32 count, [In, Out] String[] @string, [In, Out] Int32[] length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderSource")]
                public static 
                void ShaderSource([In, Out] Int32 shader, [In, Out] Int32 count, [In, Out] String[] @string, [In, Out] Int32[] length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = length)
                        {
                            Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Replaces the source code in a shader object
        /// </summary>
        /// <param name="shader">
        /// <para>
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </para>
        /// </param>
        /// <param name="count">
        /// <para>
        /// Specifies the number of elements in the string and length arrays.
        /// </para>
        /// </param>
        /// <param name="string">
        /// <para>
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </para>
        /// </param>
        /// <param name="length">
        /// <para>
        /// Specifies an array of string lengths.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glShaderSource")]
                public static 
                void ShaderSource([In, Out] UInt32 shader, [In, Out] Int32 count, [In, Out] String[] @string, [In, Out] ref Int32 length)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* length_ptr = &length)
                        {
                            Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilFunc")]
                public static 
                void StencilFunc([In, Out] OpenTK.Graphics.ES20.All func, [In, Out] Int32 @ref, [In, Out] Int32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilFunc((OpenTK.Graphics.ES20.All)func, (Int32)@ref, (UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilFunc")]
                public static 
                void StencilFunc([In, Out] OpenTK.Graphics.ES20.All func, [In, Out] Int32 @ref, [In, Out] UInt32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilFunc((OpenTK.Graphics.ES20.All)func, (Int32)@ref, (UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilFuncSeparate")]
                public static 
                void StencilFuncSeparate([In, Out] OpenTK.Graphics.ES20.All face, [In, Out] OpenTK.Graphics.ES20.All func, [In, Out] Int32 @ref, [In, Out] Int32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilFuncSeparate((OpenTK.Graphics.ES20.All)face, (OpenTK.Graphics.ES20.All)func, (Int32)@ref, (UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="func">
        /// <para>
        /// Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.
        /// </para>
        /// </param>
        /// <param name="ref">
        /// <para>
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilFuncSeparate")]
                public static 
                void StencilFuncSeparate([In, Out] OpenTK.Graphics.ES20.All face, [In, Out] OpenTK.Graphics.ES20.All func, [In, Out] Int32 @ref, [In, Out] UInt32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilFuncSeparate((OpenTK.Graphics.ES20.All)face, (OpenTK.Graphics.ES20.All)func, (Int32)@ref, (UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilMask")]
                public static 
                void StencilMask([In, Out] Int32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilMask((UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilMask")]
                public static 
                void StencilMask([In, Out] UInt32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilMask((UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilMaskSeparate")]
                public static 
                void StencilMaskSeparate([In, Out] OpenTK.Graphics.ES20.All face, [In, Out] Int32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilMaskSeparate((OpenTK.Graphics.ES20.All)face, (UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="mask">
        /// <para>
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilMaskSeparate")]
                public static 
                void StencilMaskSeparate([In, Out] OpenTK.Graphics.ES20.All face, [In, Out] UInt32 mask)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilMaskSeparate((OpenTK.Graphics.ES20.All)face, (UInt32)mask);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilOp")]
                public static 
                void StencilOp([In, Out] OpenTK.Graphics.ES20.All fail, [In, Out] OpenTK.Graphics.ES20.All zfail, [In, Out] OpenTK.Graphics.ES20.All zpass)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilOp((OpenTK.Graphics.ES20.All)fail, (OpenTK.Graphics.ES20.All)zfail, (OpenTK.Graphics.ES20.All)zpass);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face">
        /// <para>
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.
        /// </para>
        /// </param>
        /// <param name="sfail">
        /// <para>
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dpfail">
        /// <para>
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>
        /// <param name="dppass">
        /// <para>
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glStencilOpSeparate")]
                public static 
                void StencilOpSeparate([In, Out] OpenTK.Graphics.ES20.All face, [In, Out] OpenTK.Graphics.ES20.All fail, [In, Out] OpenTK.Graphics.ES20.All zfail, [In, Out] OpenTK.Graphics.ES20.All zpass)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glStencilOpSeparate((OpenTK.Graphics.ES20.All)face, (OpenTK.Graphics.ES20.All)fail, (OpenTK.Graphics.ES20.All)zfail, (OpenTK.Graphics.ES20.All)zpass);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexImage2D")]
                public static 
                void TexImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T8[,] pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexImage2D")]
                public static 
                void TexImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T8[,,] pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexImage2D")]
                public static 
                void TexImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T8[] pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexImage2D")]
                public static 
                void TexImage2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] IntPtr pixels)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="internalFormat">
        /// <para>
        /// Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup n + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels wide.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture image including the border if any. If the GL version does not support non-power-of-two sizes, this value must be 2 sup m + 2 ( border ) for some integer . All implementations support texture images that are at least 64 texels high.
        /// </para>
        /// </param>
        /// <param name="border">
        /// <para>
        /// Specifies the width of the border. Must be either 0 or 1.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexImage2D")]
                public static 
                void TexImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] OpenTK.Graphics.ES20.All internalformat, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] Int32 border, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] ref T8 pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (OpenTK.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)border, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value of pname.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexParameterf")]
                public static 
                void TexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single param)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glTexParameterf((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Single)param);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value of pname.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexParameterfv")]
                public static 
                unsafe void TexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glTexParameterfv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Single*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value of pname.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexParameterfv")]
                public static 
                void TexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Single[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* @params_ptr = @params)
                        {
                            Delegates.glTexParameterfv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Single*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value of pname.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexParameteri")]
                public static 
                void TexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32 param)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glTexParameteri((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32)param);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value of pname.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexParameteriv")]
                public static 
                unsafe void TexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32* @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glTexParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set texture parameters
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.
        /// </para>
        /// </param>
        /// <param name="pname">
        /// <para>
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.
        /// </para>
        /// </param>
        /// <param name="param">
        /// <para>
        /// Specifies the value of pname.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexParameteriv")]
                public static 
                void TexParameter([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] OpenTK.Graphics.ES20.All pname, [In, Out] Int32[] @params)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* @params_ptr = @params)
                        {
                            Delegates.glTexParameteriv((OpenTK.Graphics.ES20.All)target, (OpenTK.Graphics.ES20.All)pname, (Int32*)@params_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexSubImage2D")]
                public static 
                void TexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T8[,] pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexSubImage2D")]
                public static 
                void TexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T8[,,] pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexSubImage2D")]
                public static 
                void TexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] T8[] pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexSubImage2D")]
                public static 
                void TexSubImage2D([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] IntPtr pixels)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target">
        /// <para>
        /// Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.
        /// </para>
        /// </param>
        /// <param name="level">
        /// <para>
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </para>
        /// </param>
        /// <param name="xoffset">
        /// <para>
        /// Specifies a texel offset in the x direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="yoffset">
        /// <para>
        /// Specifies a texel offset in the y direction within the texture array.
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specifies the width of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="height">
        /// <para>
        /// Specifies the height of the texture subimage.
        /// </para>
        /// </param>
        /// <param name="format">
        /// <para>
        /// Specifies the format of the pixel data. The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
        /// </para>
        /// </param>
        /// <param name="data">
        /// <para>
        /// Specifies a pointer to the image data in memory.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glTexSubImage2D")]
                public static 
                void TexSubImage2D<T8>([In, Out] OpenTK.Graphics.ES20.All target, [In, Out] Int32 level, [In, Out] Int32 xoffset, [In, Out] Int32 yoffset, [In, Out] Int32 width, [In, Out] Int32 height, [In, Out] OpenTK.Graphics.ES20.All format, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] ref T8 pixels)
                    where T8 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2D((OpenTK.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (OpenTK.Graphics.ES20.All)format, (OpenTK.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1f")]
                public static 
                void Uniform1([In, Out] Int32 location, [In, Out] Single x)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform1f((Int32)location, (Single)x);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1fv")]
                public static 
                unsafe void Uniform1([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1fv")]
                public static 
                void Uniform1([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] ref Single v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = &v)
                        {
                            Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1fv")]
                public static 
                void Uniform1([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = v)
                        {
                            Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1i")]
                public static 
                void Uniform1([In, Out] Int32 location, [In, Out] Int32 x)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform1i((Int32)location, (Int32)x);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1iv")]
                public static 
                unsafe void Uniform1([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1iv")]
                public static 
                void Uniform1([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] ref Int32 v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* v_ptr = &v)
                        {
                            Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform1iv")]
                public static 
                void Uniform1([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* v_ptr = v)
                        {
                            Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform2f")]
                public static 
                void Uniform2([In, Out] Int32 location, [In, Out] Single x, [In, Out] Single y)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform2f((Int32)location, (Single)x, (Single)y);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform2fv")]
                public static 
                unsafe void Uniform2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform2fv")]
                public static 
                void Uniform2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] ref Single v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = &v)
                        {
                            Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform2fv")]
                public static 
                void Uniform2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = v)
                        {
                            Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform2i")]
                public static 
                void Uniform2([In, Out] Int32 location, [In, Out] Int32 x, [In, Out] Int32 y)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform2i((Int32)location, (Int32)x, (Int32)y);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform2iv")]
                public static 
                unsafe void Uniform2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform2iv")]
                public static 
                void Uniform2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* v_ptr = v)
                        {
                            Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3f")]
                public static 
                void Uniform3([In, Out] Int32 location, [In, Out] Single x, [In, Out] Single y, [In, Out] Single z)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform3f((Int32)location, (Single)x, (Single)y, (Single)z);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3fv")]
                public static 
                unsafe void Uniform3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3fv")]
                public static 
                void Uniform3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] ref Single v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = &v)
                        {
                            Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3fv")]
                public static 
                void Uniform3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = v)
                        {
                            Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3i")]
                public static 
                void Uniform3([In, Out] Int32 location, [In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 z)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform3i((Int32)location, (Int32)x, (Int32)y, (Int32)z);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3iv")]
                public static 
                unsafe void Uniform3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3iv")]
                public static 
                void Uniform3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] ref Int32 v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* v_ptr = &v)
                        {
                            Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform3iv")]
                public static 
                void Uniform3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* v_ptr = v)
                        {
                            Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4f")]
                public static 
                void Uniform4([In, Out] Int32 location, [In, Out] Single x, [In, Out] Single y, [In, Out] Single z, [In, Out] Single w)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform4f((Int32)location, (Single)x, (Single)y, (Single)z, (Single)w);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4fv")]
                public static 
                unsafe void Uniform4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4fv")]
                public static 
                void Uniform4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] ref Single v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = &v)
                        {
                            Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4fv")]
                public static 
                void Uniform4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Single[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* v_ptr = v)
                        {
                            Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4i")]
                public static 
                void Uniform4([In, Out] Int32 location, [In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 z, [In, Out] Int32 w)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform4i((Int32)location, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4iv")]
                public static 
                unsafe void Uniform4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32* v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)v);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4iv")]
                public static 
                void Uniform4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] ref Int32 v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* v_ptr = &v)
                        {
                            Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location">
        /// <para>
        /// Specifies the location of the uniform variable to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified uniform variable.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniform4iv")]
                public static 
                void Uniform4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] Int32[] v)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Int32* v_ptr = v)
                        {
                            Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix2fv")]
                public static 
                unsafe void UniformMatrix2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] Single* value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix2fv")]
                public static 
                void UniformMatrix2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] ref Single value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* value_ptr = &value)
                        {
                            Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix2fv")]
                public static 
                void UniformMatrix2([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] Single[] value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* value_ptr = value)
                        {
                            Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix3fv")]
                public static 
                unsafe void UniformMatrix3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] Single* value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix3fv")]
                public static 
                void UniformMatrix3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] ref Single value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* value_ptr = &value)
                        {
                            Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix3fv")]
                public static 
                void UniformMatrix3([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] Single[] value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* value_ptr = value)
                        {
                            Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix4fv")]
                public static 
                unsafe void UniformMatrix4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] Single* value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix4fv")]
                public static 
                void UniformMatrix4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] ref Single value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* value_ptr = &value)
                        {
                            Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUniformMatrix4fv")]
                public static 
                void UniformMatrix4([In, Out] Int32 location, [In, Out] Int32 count, [In, Out] bool transpose, [In, Out] Single[] value)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* value_ptr = value)
                        {
                            Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUseProgram")]
                public static 
                void UseProgram([In, Out] Int32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUseProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Installs a program object as part of current rendering state
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glUseProgram")]
                public static 
                void UseProgram([In, Out] UInt32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glUseProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glValidateProgram")]
                public static 
                void ValidateProgram([In, Out] Int32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glValidateProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Validates a program object
        /// </summary>
        /// <param name="program">
        /// <para>
        /// Specifies the handle of the program object to be validated.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glValidateProgram")]
                public static 
                void ValidateProgram([In, Out] UInt32 program)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glValidateProgram((UInt32)program);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib1f")]
                public static 
                void VertexAttrib1([In, Out] Int32 indx, [In, Out] Single x)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib1f((UInt32)indx, (Single)x);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib1f")]
                public static 
                void VertexAttrib1([In, Out] UInt32 indx, [In, Out] Single x)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib1f((UInt32)indx, (Single)x);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib1fv")]
                public static 
                unsafe void VertexAttrib1([In, Out] UInt32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib1fv")]
                public static 
                unsafe void VertexAttrib1([In, Out] Int32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib1fv")]
                public static 
                void VertexAttrib1([In, Out] UInt32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib1fv")]
                public static 
                void VertexAttrib1([In, Out] Int32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2f")]
                public static 
                void VertexAttrib2([In, Out] Int32 indx, [In, Out] Single x, [In, Out] Single y)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib2f((UInt32)indx, (Single)x, (Single)y);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2f")]
                public static 
                void VertexAttrib2([In, Out] UInt32 indx, [In, Out] Single x, [In, Out] Single y)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib2f((UInt32)indx, (Single)x, (Single)y);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2fv")]
                public static 
                void VertexAttrib2([In, Out] Int32 indx, [In, Out] ref Single values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = &values)
                        {
                            Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2fv")]
                public static 
                unsafe void VertexAttrib2([In, Out] UInt32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2fv")]
                public static 
                unsafe void VertexAttrib2([In, Out] Int32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2fv")]
                public static 
                void VertexAttrib2([In, Out] UInt32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2fv")]
                public static 
                void VertexAttrib2([In, Out] Int32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib2fv")]
                public static 
                void VertexAttrib2([In, Out] UInt32 indx, [In, Out] ref Single values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = &values)
                        {
                            Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3f")]
                public static 
                void VertexAttrib3([In, Out] Int32 indx, [In, Out] Single x, [In, Out] Single y, [In, Out] Single z)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib3f((UInt32)indx, (Single)x, (Single)y, (Single)z);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3f")]
                public static 
                void VertexAttrib3([In, Out] UInt32 indx, [In, Out] Single x, [In, Out] Single y, [In, Out] Single z)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib3f((UInt32)indx, (Single)x, (Single)y, (Single)z);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3fv")]
                public static 
                void VertexAttrib3([In, Out] Int32 indx, [In, Out] ref Single values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = &values)
                        {
                            Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3fv")]
                public static 
                unsafe void VertexAttrib3([In, Out] UInt32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3fv")]
                public static 
                unsafe void VertexAttrib3([In, Out] Int32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3fv")]
                public static 
                void VertexAttrib3([In, Out] UInt32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3fv")]
                public static 
                void VertexAttrib3([In, Out] Int32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib3fv")]
                public static 
                void VertexAttrib3([In, Out] UInt32 indx, [In, Out] ref Single values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = &values)
                        {
                            Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4f")]
                public static 
                void VertexAttrib4([In, Out] Int32 indx, [In, Out] Single x, [In, Out] Single y, [In, Out] Single z, [In, Out] Single w)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib4f((UInt32)indx, (Single)x, (Single)y, (Single)z, (Single)w);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4f")]
                public static 
                void VertexAttrib4([In, Out] UInt32 indx, [In, Out] Single x, [In, Out] Single y, [In, Out] Single z, [In, Out] Single w)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib4f((UInt32)indx, (Single)x, (Single)y, (Single)z, (Single)w);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4fv")]
                public static 
                void VertexAttrib4([In, Out] Int32 indx, [In, Out] ref Single values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = &values)
                        {
                            Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4fv")]
                public static 
                unsafe void VertexAttrib4([In, Out] UInt32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4fv")]
                public static 
                unsafe void VertexAttrib4([In, Out] Int32 indx, [In, Out] Single* values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4fv")]
                public static 
                void VertexAttrib4([In, Out] UInt32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4fv")]
                public static 
                void VertexAttrib4([In, Out] Int32 indx, [In, Out] Single[] values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = values)
                        {
                            Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Specifies the value of a generic vertex attribute
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="v0">
        /// <para>
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttrib4fv")]
                public static 
                void VertexAttrib4([In, Out] UInt32 indx, [In, Out] ref Single values)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    unsafe
                    {
                        fixed (Single* values_ptr = &values)
                        {
                            Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                        }
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] UInt32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] T5[,] ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] Int32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] T5[] ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] Int32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] T5[,] ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] Int32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] T5[,,] ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] UInt32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] T5[,,] ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer([In, Out] Int32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] IntPtr ptr)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer([In, Out] UInt32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] IntPtr ptr)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr);
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] UInt32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] ref T5 ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

                [System.CLSCompliant(false)]
        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] UInt32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] T5[] ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index">
        /// <para>
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </para>
        /// </param>
        /// <param name="size">
        /// <para>
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </para>
        /// </param>
        /// <param name="type">
        /// <para>
        /// Specifies the data type of each component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.
        /// </para>
        /// </param>
        /// <param name="normalized">
        /// <para>
        /// Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed.
        /// </para>
        /// </param>
        /// <param name="stride">
        /// <para>
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </para>
        /// </param>
        /// <param name="pointer">
        /// <para>
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glVertexAttribPointer")]
                public static 
                void VertexAttribPointer<T5>([In, Out] Int32 indx, [In, Out] Int32 size, [In, Out] OpenTK.Graphics.ES20.All type, [In, Out] bool normalized, [In, Out] Int32 stride, [In, Out] ref T5 ptr)
                    where T5 : struct
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (OpenTK.Graphics.ES20.All)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        ptr_ptr.Free();
                    }
                    #if DEBUG
                    }
                    #endif
                }

                
        /// <summary>
        /// Set the viewport
        /// </summary>
        /// <param name="x">
        /// <para>
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </para>
        /// </param>
        /// <param name="width">
        /// <para>
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </para>
        /// </param>

        [AutoGenerated(Category = "2.0", Version = "", EntryPoint = "glViewport")]
                public static 
                void Viewport([In, Out] Int32 x, [In, Out] Int32 y, [In, Out] Int32 width, [In, Out] Int32 height)
                {
                    #if DEBUG
                    using (new ErrorHelper(GraphicsContext.CurrentContext))
                    {
                    #endif
                    Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
                    #if DEBUG
                    }
                    #endif
                }

        }
}
