namespace OpenTK.Graphics.OpenGL
{
    #pragma warning disable 1591

    public enum DrawElementsType
    {
        UnsignedShort = ((int)0X1403),
        UnsignedInt = ((int)0X1405),
        UnsignedByte = ((int)0X1401),
    }

    public enum AttribMask
    {
        PixelModeBit = ((int)0X00000020),
        ListBit = ((int)0X00020000),
        AccumBufferBit = ((int)0X00000200),
        LightingBit = ((int)0X00000040),
        ViewportBit = ((int)0X00000800),
        MultisampleBit = ((int)0X20000000),
        TransformBit = ((int)0X00001000),
        PolygonBit = ((int)0X00000008),
        StencilBufferBit = ((int)0X00000400),
        ColorBufferBit = ((int)0X00004000),
        AllAttribBits = unchecked((int)0Xffffffff),
        CurrentBit = ((int)0X00000001),
        EnableBit = ((int)0X00002000),
        HintBit = ((int)0X00008000),
        LineBit = ((int)0X00000004),
        FogBit = ((int)0X00000080),
        DepthBufferBit = ((int)0X00000100),
        TextureBit = ((int)0X00040000),
        ScissorBit = ((int)0X00080000),
        PolygonStippleBit = ((int)0X00000010),
        PointBit = ((int)0X00000002),
        EvalBit = ((int)0X00010000),
    }

    public enum ClearBufferMask
    {
        DepthBufferBit = ((int)0X00000100),
        AccumBufferBit = ((int)0X00000200),
        StencilBufferBit = ((int)0X00000400),
        ColorBufferBit = ((int)0X00004000),
    }

    public enum ClientAttribMask
    {
        ClientPixelStoreBit = ((int)0X00000001),
        ClientVertexArrayBit = ((int)0X00000002),
        ClientAllAttribBits = unchecked((int)0Xffffffff),
    }

    public enum Boolean
    {
        True = ((int)1),
        False = ((int)0),
    }

    public enum BeginMode
    {
        LineStrip = ((int)0X0003),
        TriangleFan = ((int)0X0006),
        LineLoop = ((int)0X0002),
        Polygon = ((int)0X0009),
        Triangles = ((int)0X0004),
        Points = ((int)0X0000),
        Quads = ((int)0X0007),
        Lines = ((int)0X0001),
        TriangleStrip = ((int)0X0005),
        QuadStrip = ((int)0X0008),
    }

    public enum AccumOp
    {
        Return = ((int)0X0102),
        Add = ((int)0X0104),
        Mult = ((int)0X0103),
        Load = ((int)0X0101),
        Accum = ((int)0X0100),
    }

    public enum AlphaFunction
    {
        Gequal = ((int)0X0206),
        Always = ((int)0X0207),
        Equal = ((int)0X0202),
        Lequal = ((int)0X0203),
        Never = ((int)0X0200),
        Less = ((int)0X0201),
        Greater = ((int)0X0204),
        Notequal = ((int)0X0205),
    }

    public enum BlendingFactorDest
    {
        OneMinusConstantAlphaExt = ((int)0X8004),
        OneMinusSrcColor = ((int)0X0301),
        SrcColor = ((int)0X0300),
        SrcAlpha = ((int)0X0302),
        OneMinusSrcAlpha = ((int)0X0303),
        ConstantColorExt = ((int)0X8001),
        One = ((int)1),
        ConstantAlphaExt = ((int)0X8003),
        DstAlpha = ((int)0X0304),
        OneMinusDstAlpha = ((int)0X0305),
        Zero = ((int)0),
        OneMinusConstantColorExt = ((int)0X8002),
    }

    public enum BlendingFactorSrc
    {
        OneMinusConstantAlphaExt = ((int)0X8004),
        OneMinusDstAlpha = ((int)0X0305),
        ConstantColorExt = ((int)0X8001),
        SrcAlpha = ((int)0X0302),
        OneMinusDstColor = ((int)0X0307),
        Zero = ((int)0),
        OneMinusSrcAlpha = ((int)0X0303),
        SrcAlphaSaturate = ((int)0X0308),
        ConstantAlphaExt = ((int)0X8003),
        DstColor = ((int)0X0306),
        DstAlpha = ((int)0X0304),
        One = ((int)1),
        OneMinusConstantColorExt = ((int)0X8002),
    }

    public enum BlendEquationModeExt
    {
        AlphaMaxSgix = ((int)0X8321),
        MinExt = ((int)0X8007),
        MaxExt = ((int)0X8008),
        FuncSubtractExt = ((int)0X800a),
        FuncAddExt = ((int)0X8006),
        FuncReverseSubtractExt = ((int)0X800b),
        AlphaMinSgix = ((int)0X8320),
        LogicOp = ((int)0X0bf1),
    }

    public enum ColorMaterialFace
    {
        FrontAndBack = ((int)0X0408),
        Back = ((int)0X0405),
        Front = ((int)0X0404),
    }

    public enum ColorMaterialParameter
    {
        Diffuse = ((int)0X1201),
        AmbientAndDiffuse = ((int)0X1602),
        Emission = ((int)0X1600),
        Specular = ((int)0X1202),
        Ambient = ((int)0X1200),
    }

    public enum ColorPointerType
    {
        UnsignedInt = ((int)0X1405),
        Float = ((int)0X1406),
        Byte = ((int)0X1400),
        Int = ((int)0X1404),
        UnsignedShort = ((int)0X1403),
        Double = ((int)0X140a),
        UnsignedByte = ((int)0X1401),
        Short = ((int)0X1402),
    }

    public enum ColorTableParameterPNameSgi
    {
        ColorTableScaleSgi = ((int)0X80D6),
        ColorTableBiasSgi = ((int)0X80D7),
    }

    public enum ColorTableTargetSgi
    {
        PostConvolutionColorTableSgi = ((int)0X80D1),
        ProxyColorTableSgi = ((int)0X80D3),
        ProxyPostColorMatrixColorTableSgi = ((int)0X80D5),
        ColorTableSgi = ((int)0X80D0),
        ProxyPostConvolutionColorTableSgi = ((int)0X80D4),
        ProxyTextureColorTableSgi = ((int)0X80bd),
        TextureColorTableSgi = ((int)0X80bc),
        PostColorMatrixColorTableSgi = ((int)0X80D2),
    }

    public enum ConvolutionBorderModeExt
    {
        ReduceExt = ((int)0X8016),
    }

    public enum ConvolutionParameterExt
    {
        ConvolutionBorderModeExt = ((int)0X8013),
        ConvolutionFilterBiasExt = ((int)0X8015),
        ConvolutionFilterScaleExt = ((int)0X8014),
    }

    public enum ConvolutionTargetExt
    {
        Convolution1DExt = ((int)0X8010),
        Convolution2DExt = ((int)0X8011),
    }

    public enum CullFaceMode
    {
        FrontAndBack = ((int)0X0408),
        Back = ((int)0X0405),
        Front = ((int)0X0404),
    }

    public enum DepthFunction
    {
        Gequal = ((int)0X0206),
        Always = ((int)0X0207),
        Equal = ((int)0X0202),
        Lequal = ((int)0X0203),
        Never = ((int)0X0200),
        Less = ((int)0X0201),
        Greater = ((int)0X0204),
        Notequal = ((int)0X0205),
    }

    public enum DrawBufferMode
    {
        Aux3 = ((int)0X040c),
        FrontAndBack = ((int)0X0408),
        None = ((int)0),
        Aux2 = ((int)0X040b),
        FrontRight = ((int)0X0401),
        Aux0 = ((int)0X0409),
        FrontLeft = ((int)0X0400),
        Right = ((int)0X0407),
        Left = ((int)0X0406),
        Back = ((int)0X0405),
        Front = ((int)0X0404),
        BackRight = ((int)0X0403),
        Aux1 = ((int)0X040a),
        BackLeft = ((int)0X0402),
    }

    public enum EnableCap
    {
        SampleAlphaToMaskSgis = ((int)0X809e),
        ClipPlane0 = ((int)0X3000),
        PostConvolutionColorTableSgi = ((int)0X80D1),
        Map1Index = ((int)0X0D91),
        PixelTexGenSgix = ((int)0X8139),
        PostColorMatrixColorTableSgi = ((int)0X80D2),
        Normalize = ((int)0X0ba1),
        AutoNormal = ((int)0X0D80),
        Map2Vertex3 = ((int)0X0Db7),
        LineStipple = ((int)0X0b24),
        Map2Normal = ((int)0X0Db2),
        Light6 = ((int)0X4006),
        PolygonOffsetFill = ((int)0X8037),
        SampleCoverage = ((int)0X80a0),
        Map1Vertex4 = ((int)0X0D98),
        TextureColorTableSgi = ((int)0X80bc),
        ReferencePlaneSgix = ((int)0X817D),
        Texture2D = ((int)0X0De1),
        FragmentLight3Sgix = ((int)0X840f),
        PolygonSmooth = ((int)0X0b41),
        FragmentColorMaterialSgix = ((int)0X8401),
        SecondaryColorArray = ((int)0X845e),
        ScissorTest = ((int)0X0c11),
        FragmentLight2Sgix = ((int)0X840e),
        PolygonOffsetPoint = ((int)0X2a01),
        RescaleNormal = ((int)0X803a),
        SpriteSgix = ((int)0X8148),
        Map2Vertex4 = ((int)0X0Db8),
        ColorMaterial = ((int)0X0b57),
        Light2 = ((int)0X4002),
        PixelTextureSgis = ((int)0X8353),
        SharedTexturePaletteExt = ((int)0X81fb),
        HistogramExt = ((int)0X8024),
        AsyncTexImageSgix = ((int)0X835c),
        FragmentLight5Sgix = ((int)0X8411),
        Light7 = ((int)0X4007),
        Map1Color4 = ((int)0X0D90),
        CullFace = ((int)0X0b44),
        DepthTest = ((int)0X0b71),
        SampleMaskSgis = ((int)0X80a0),
        MinmaxExt = ((int)0X802e),
        SampleAlphaToOneSgis = ((int)0X809f),
        Texture1D = ((int)0X0De0),
        LineSmooth = ((int)0X0b20),
        Lighting = ((int)0X0b50),
        VertexArray = ((int)0X8074),
        Map1TextureCoord2 = ((int)0X0D94),
        Map1TextureCoord3 = ((int)0X0D95),
        Map1TextureCoord1 = ((int)0X0D93),
        Map1TextureCoord4 = ((int)0X0D96),
        SampleAlphaToOne = ((int)0X809f),
        ColorTableSgi = ((int)0X80D0),
        Light3 = ((int)0X4003),
        ClipPlane3 = ((int)0X3003),
        InterlaceSgix = ((int)0X8094),
        FragmentLight0Sgix = ((int)0X840c),
        NormalArray = ((int)0X8075),
        FramezoomSgix = ((int)0X818b),
        Light4 = ((int)0X4004),
        AsyncDrawPixelsSgix = ((int)0X835D),
        ColorArray = ((int)0X8076),
        Convolution2DExt = ((int)0X8011),
        Map2Index = ((int)0X0Db1),
        IrInstrument1Sgix = ((int)0X817f),
        TextureCoordArray = ((int)0X8078),
        PolygonStipple = ((int)0X0b42),
        PointSmooth = ((int)0X0b10),
        Separable2DExt = ((int)0X8012),
        AsyncHistogramSgix = ((int)0X832c),
        TextureCubeMap = ((int)0X8513),
        Texture4DSgis = ((int)0X8134),
        Map2TextureCoord2 = ((int)0X0Db4),
        Map2TextureCoord3 = ((int)0X0Db5),
        AlphaTest = ((int)0X0bc0),
        Map2TextureCoord1 = ((int)0X0Db3),
        AsyncReadPixelsSgix = ((int)0X835e),
        RescaleNormalExt = ((int)0X803a),
        Map2TextureCoord4 = ((int)0X0Db6),
        Light0 = ((int)0X4000),
        ClipPlane2 = ((int)0X3002),
        Map1Normal = ((int)0X0D92),
        TextureGenT = ((int)0X0c61),
        EdgeFlagArray = ((int)0X8079),
        Multisample = ((int)0X809d),
        Light5 = ((int)0X4005),
        ClipPlane5 = ((int)0X3005),
        TextureGenS = ((int)0X0c60),
        FragmentLight7Sgix = ((int)0X8413),
        VertexProgramTwoSide = ((int)0X8643),
        PointSprite = ((int)0X8861),
        IndexLogicOp = ((int)0X0bf1),
        FragmentLight4Sgix = ((int)0X8410),
        SampleAlphaToCoverage = ((int)0X809e),
        ColorLogicOp = ((int)0X0bf2),
        FragmentLight6Sgix = ((int)0X8412),
        ColorSum = ((int)0X8458),
        Convolution1DExt = ((int)0X8010),
        StencilTest = ((int)0X0b90),
        Light1 = ((int)0X4001),
        ClipPlane1 = ((int)0X3001),
        Map2Color4 = ((int)0X0Db0),
        VertexProgramPointSize = ((int)0X8642),
        Texture3DExt = ((int)0X806f),
        ClipPlane4 = ((int)0X3004),
        FragmentLight1Sgix = ((int)0X840D),
        FragmentLightingSgix = ((int)0X8400),
        IndexArray = ((int)0X8077),
        Map1Vertex3 = ((int)0X0D97),
        FogCoordArray = ((int)0X8457),
        FogOffsetSgix = ((int)0X8198),
        TextureGenR = ((int)0X0c62),
        PolygonOffsetLine = ((int)0X2a02),
        Fog = ((int)0X0b60),
        Blend = ((int)0X0be2),
        CalligraphicFragmentSgix = ((int)0X8183),
        Dither = ((int)0X0bd0),
        TextureGenQ = ((int)0X0c63),
    }

    public enum ErrorCode
    {
        StackOverflow = ((int)0X0503),
        TextureTooLargeExt = ((int)0X8065),
        StackUnderflow = ((int)0X0504),
        InvalidFramebufferOperationExt = ((int)0X0506),
        InvalidOperation = ((int)0X0502),
        OutOfMemory = ((int)0X0505),
        InvalidEnum = ((int)0X0500),
        NoError = ((int)0),
        TableTooLargeExt = ((int)0X8031),
        InvalidValue = ((int)0X0501),
    }

    public enum FeedbackType
    {
        Gl3DColorTexture = ((int)0X0603),
        Gl4DColorTexture = ((int)0X0604),
        Gl3DColor = ((int)0X0602),
        Gl2D = ((int)0X0600),
        Gl3D = ((int)0X0601),
    }

    public enum FeedBackToken
    {
        DrawPixelToken = ((int)0X0705),
        PassThroughToken = ((int)0X0700),
        PointToken = ((int)0X0701),
        LineToken = ((int)0X0702),
        BitmapToken = ((int)0X0704),
        CopyPixelToken = ((int)0X0706),
        LineResetToken = ((int)0X0707),
        PolygonToken = ((int)0X0703),
    }

    public enum FfdMaskSgix
    {
        GeometryDeformationBitSgix = ((int)0X00000002),
        TextureDeformationBitSgix = ((int)0X00000001),
    }

    public enum FfdTargetSgix
    {
        TextureDeformationSgix = ((int)0X8195),
        GeometryDeformationSgix = ((int)0X8194),
    }

    public enum FogMode
    {
        Exp = ((int)0X0800),
        Exp2 = ((int)0X0801),
        Linear = ((int)0X2601),
        FragmentDepth = ((int)0X8452),
        FogFuncSgis = ((int)0X812a),
        FogCoord = ((int)0X8451),
    }

    public enum FogParameter
    {
        FogStart = ((int)0X0b63),
        FogEnd = ((int)0X0b64),
        FogCoordSrc = ((int)0X8450),
        FogDensity = ((int)0X0b62),
        FogMode = ((int)0X0b65),
        FogIndex = ((int)0X0b61),
        FogOffsetValueSgix = ((int)0X8199),
        FogColor = ((int)0X0b66),
    }

    public enum FragmentLightModelParameterSgix
    {
        FragmentLightModelNormalInterpolationSgix = ((int)0X840b),
        FragmentLightModelLocalViewerSgix = ((int)0X8408),
        FragmentLightModelTwoSideSgix = ((int)0X8409),
        FragmentLightModelAmbientSgix = ((int)0X840a),
    }

    public enum FrontFaceDirection
    {
        Cw = ((int)0X0900),
        Ccw = ((int)0X0901),
    }

    public enum GetColorTableParameterPNameSgi
    {
        ColorTableRedSizeSgi = ((int)0X80Da),
        ColorTableLuminanceSizeSgi = ((int)0X80De),
        ColorTableBiasSgi = ((int)0X80D7),
        ColorTableGreenSizeSgi = ((int)0X80Db),
        ColorTableIntensitySizeSgi = ((int)0X80Df),
        ColorTableWidthSgi = ((int)0X80D9),
        ColorTableFormatSgi = ((int)0X80D8),
        ColorTableAlphaSizeSgi = ((int)0X80Dd),
        ColorTableScaleSgi = ((int)0X80D6),
        ColorTableBlueSizeSgi = ((int)0X80Dc),
    }

    public enum GetConvolutionParameter
    {
        ConvolutionHeightExt = ((int)0X8019),
        ConvolutionFormatExt = ((int)0X8017),
        ConvolutionBorderModeExt = ((int)0X8013),
        ConvolutionFilterBiasExt = ((int)0X8015),
        MaxConvolutionHeightExt = ((int)0X801b),
        ConvolutionWidthExt = ((int)0X8018),
        ConvolutionFilterScaleExt = ((int)0X8014),
        MaxConvolutionWidthExt = ((int)0X801a),
    }

    public enum GetHistogramParameterPNameExt
    {
        HistogramBlueSizeExt = ((int)0X802a),
        HistogramAlphaSizeExt = ((int)0X802b),
        HistogramLuminanceSizeExt = ((int)0X802c),
        HistogramRedSizeExt = ((int)0X8028),
        HistogramWidthExt = ((int)0X8026),
        HistogramSinkExt = ((int)0X802D),
        HistogramFormatExt = ((int)0X8027),
        HistogramGreenSizeExt = ((int)0X8029),
    }

    public enum GetMapQuery
    {
        Domain = ((int)0X0a02),
        Coeff = ((int)0X0a00),
        Order = ((int)0X0a01),
    }

    public enum GetMinmaxParameterPNameExt
    {
        MinmaxSinkExt = ((int)0X8030),
        MinmaxFormatExt = ((int)0X802f),
    }

    public enum GetPixelMap
    {
        PixelMapIToB = ((int)0X0c74),
        PixelMapGToG = ((int)0X0c77),
        PixelMapSToS = ((int)0X0c71),
        PixelMapAToA = ((int)0X0c79),
        PixelMapIToI = ((int)0X0c70),
        PixelMapBToB = ((int)0X0c78),
        PixelMapIToA = ((int)0X0c75),
        PixelMapIToR = ((int)0X0c72),
        PixelMapIToG = ((int)0X0c73),
        PixelMapRToR = ((int)0X0c76),
    }

    public enum GetPointervPName
    {
        IndexArrayPointer = ((int)0X8091),
        SelectionBufferPointer = ((int)0X0df3),
        EdgeFlagArrayPointer = ((int)0X8093),
        VertexArrayPointer = ((int)0X808e),
        NormalArrayPointer = ((int)0X808f),
        InstrumentBufferPointerSgix = ((int)0X8180),
        TextureCoordArrayPointer = ((int)0X8092),
        SecondaryColorArrayPointer = ((int)0X845d),
        FogCoordArrayPointer = ((int)0X8456),
        FeedbackBufferPointer = ((int)0X0df0),
        ColorArrayPointer = ((int)0X8090),
    }

    public enum GetPName
    {
        FogColor = ((int)0X0b66),
        StencilBackFunc = ((int)0X8800),
        PixelTileGridDepthSgix = ((int)0X8144),
        VertexPreclipHintSgix = ((int)0X83ef),
        PostConvolutionGreenScaleExt = ((int)0X801D),
        PixelMapIToBSize = ((int)0X0cb4),
        ColorArray = ((int)0X8076),
        GreenScale = ((int)0X0d18),
        DepthBias = ((int)0X0d1f),
        AlphaScale = ((int)0X0d1c),
        AccumBlueBits = ((int)0X0d5a),
        IndexLogicOp = ((int)0X0bf1),
        Doublebuffer = ((int)0X0c32),
        DrawBuffer15 = ((int)0X8834),
        Convolution1DExt = ((int)0X8010),
        Light1 = ((int)0X4001),
        UnpackSkipImagesExt = ((int)0X806D),
        FogIndex = ((int)0X0b61),
        CurrentRasterPositionValid = ((int)0X0b08),
        FogOffsetSgix = ((int)0X8198),
        AsyncDrawPixelsSgix = ((int)0X835D),
        StencilBits = ((int)0X0d57),
        FragmentColorMaterialParameterSgix = ((int)0X8403),
        PixelMapIToRSize = ((int)0X0cb2),
        BlendSrc = ((int)0X0be1),
        TextureCoordArraySize = ((int)0X8088),
        Map2Color4 = ((int)0X0db0),
        Map2GridSegments = ((int)0X0dd3),
        PolygonOffsetBiasExt = ((int)0X8039),
        CurrentRasterColor = ((int)0X0b04),
        TextureCoordArrayCountExt = ((int)0X808b),
        ColorMatrixSgi = ((int)0X80b1),
        PolygonOffsetPoint = ((int)0X2a01),
        ReferencePlaneSgix = ((int)0X817D),
        DrawBuffer0 = ((int)0X8825),
        ColorTableSgi = ((int)0X80D0),
        MaxColorMatrixStackDepthSgi = ((int)0X80b3),
        PostTextureFilterBiasRangeSgix = ((int)0X817b),
        FragmentLightModelLocalViewerSgix = ((int)0X8408),
        TextureCoordArrayStride = ((int)0X808a),
        DeformationsMaskSgix = ((int)0X8196),
        CurrentRasterIndex = ((int)0X0b05),
        InstrumentMeasurementsSgix = ((int)0X8181),
        LineSmooth = ((int)0X0b20),
        ZoomX = ((int)0X0d16),
        ZoomY = ((int)0X0d17),
        ColorArrayStride = ((int)0X8083),
        StencilBackRef = ((int)0X8ca3),
        MaxClipPlanes = ((int)0X0d32),
        LogicOp = ((int)0X0bf1),
        PixelUnpackBufferBinding = ((int)0X88ef),
        LineWidth = ((int)0X0b21),
        NameStackDepth = ((int)0X0d70),
        PixelMapAToASize = ((int)0X0cb9),
        SampleCoverageValue = ((int)0X80aa),
        MatrixMode = ((int)0X0ba0),
        FogEnd = ((int)0X0b64),
        SamplePatternSgis = ((int)0X80ac),
        ProjectionStackDepth = ((int)0X0ba4),
        IndexArray = ((int)0X8077),
        DepthWritemask = ((int)0X0b72),
        AuxBuffers = ((int)0X0c00),
        MaxCombinedTextureImageUnits = ((int)0X8b4d),
        PointSprite = ((int)0X8861),
        CurrentTextureCoords = ((int)0X0b03),
        RedScale = ((int)0X0d14),
        ClipPlane2 = ((int)0X3002),
        UnpackSkipVolumesSgis = ((int)0X8132),
        TextureBindingCubeMap = ((int)0X8514),
        MaxCubeMapTextureSize = ((int)0X851c),
        Map2Vertex3 = ((int)0X0db7),
        PerspectiveCorrectionHint = ((int)0X0c50),
        PackSkipVolumesSgis = ((int)0X8130),
        DepthFunc = ((int)0X0b74),
        MaxPixelMapTable = ((int)0X0d34),
        PixelMapIToGSize = ((int)0X0cb3),
        BlueBias = ((int)0X0d1b),
        SelectionBufferSize = ((int)0X0df4),
        ClientAttribStackDepth = ((int)0X0bb1),
        UnpackAlignment = ((int)0X0cf5),
        MaxLights = ((int)0X0d31),
        FragmentLight0Sgix = ((int)0X840c),
        MaxElementsIndices = ((int)0X80e9),
        RedBits = ((int)0X0d52),
        UnpackImageDepthSgis = ((int)0X8133),
        PointSizeMax = ((int)0X8127),
        FogStart = ((int)0X0b63),
        BlendDstAlpha = ((int)0X80ca),
        PixelTileGridHeightSgix = ((int)0X8143),
        GenerateMipmapHintSgis = ((int)0X8192),
        IndexArrayBufferBinding = ((int)0X8899),
        SpriteAxisSgix = ((int)0X814a),
        PointFadeThresholdSizeSgis = ((int)0X8128),
        RenderMode = ((int)0X0c40),
        Light3 = ((int)0X4003),
        AsyncReadPixelsSgix = ((int)0X835e),
        AccumAlphaBits = ((int)0X0d5b),
        TransposeColorMatrix = ((int)0X84e6),
        IrInstrument1Sgix = ((int)0X817f),
        MaxDrawBuffers = ((int)0X8824),
        VertexArrayStride = ((int)0X807c),
        ClipPlane5 = ((int)0X3005),
        StencilTest = ((int)0X0b90),
        FragmentLightingSgix = ((int)0X8400),
        Map1Index = ((int)0X0d91),
        MaxFragmentLightsSgix = ((int)0X8404),
        IndexShift = ((int)0X0d12),
        IndexArrayStride = ((int)0X8086),
        Separable2DExt = ((int)0X8012),
        UnpackSubsampleRateSgix = ((int)0X85a1),
        EdgeFlag = ((int)0X0b43),
        Lighting = ((int)0X0b50),
        DetailTexture2DBindingSgis = ((int)0X8096),
        Texture1D = ((int)0X0de0),
        PostColorMatrixGreenBiasSgi = ((int)0X80b9),
        VertexArrayCountExt = ((int)0X807D),
        ReadBuffer = ((int)0X0c02),
        FramebufferBindingExt = ((int)0X8ca6),
        PointDistanceAttenuation = ((int)0X8129),
        PackSkipImagesExt = ((int)0X806b),
        LineSmoothHint = ((int)0X0c52),
        CurrentFogCoord = ((int)0X8453),
        CullFace = ((int)0X0b44),
        PostConvolutionRedScaleExt = ((int)0X801c),
        PixelMapRToRSize = ((int)0X0cb6),
        Light4 = ((int)0X4004),
        DrawBuffer13 = ((int)0X8832),
        ColorMaterialParameter = ((int)0X0b56),
        VertexArrayBufferBinding = ((int)0X8896),
        EdgeFlagArrayStride = ((int)0X808c),
        MaxActiveLightsSgix = ((int)0X8405),
        PostTextureFilterScaleRangeSgix = ((int)0X817c),
        SmoothPointSizeGranularity = ((int)0X0b13),
        FragmentColorMaterialFaceSgix = ((int)0X8402),
        StencilRef = ((int)0X0b97),
        Max3DTextureSize = ((int)0X8073),
        DrawBuffer7 = ((int)0X882c),
        BlendSrcAlpha = ((int)0X80cb),
        PixelTextureSgis = ((int)0X8353),
        EdgeFlagArray = ((int)0X8079),
        PostConvolutionColorTableSgi = ((int)0X80D1),
        SampleAlphaToOneSgis = ((int)0X809f),
        FeedbackBufferType = ((int)0X0df2),
        TextureCoordArray = ((int)0X8078),
        PointSmooth = ((int)0X0b10),
        ColorArrayCountExt = ((int)0X8084),
        ListIndex = ((int)0X0b33),
        MaxFogFuncPointsSgis = ((int)0X812c),
        TextureCompressionHint = ((int)0X84ef),
        PostConvolutionRedBiasExt = ((int)0X8020),
        CurrentRasterSecondaryColor = ((int)0X845f),
        UnpackResampleSgix = ((int)0X842D),
        VertexPreclipSgix = ((int)0X83ee),
        TextureGenT = ((int)0X0c61),
        ReferencePlaneEquationSgix = ((int)0X817e),
        StencilFunc = ((int)0X0b92),
        PolygonOffsetFill = ((int)0X8037),
        PixelMapIToASize = ((int)0X0cb5),
        UnpackSwapBytes = ((int)0X0cf0),
        TextureGenS = ((int)0X0c60),
        MaxTextureLodBias = ((int)0X84fd),
        CurrentSecondaryColor = ((int)0X8459),
        VertexArraySize = ((int)0X807a),
        MaxTextureStackDepth = ((int)0X0d39),
        AlphaBias = ((int)0X0d1d),
        NormalArray = ((int)0X8075),
        LightModelLocalViewer = ((int)0X0b51),
        LineStipple = ((int)0X0b24),
        PointSizeMaxSgis = ((int)0X8127),
        FogMode = ((int)0X0b65),
        Map1GridDomain = ((int)0X0dd0),
        BlendDstRgb = ((int)0X80c8),
        UnpackSkipRows = ((int)0X0cf3),
        ClipPlane3 = ((int)0X3003),
        FragmentLightModelNormalInterpolationSgix = ((int)0X840b),
        ScissorBox = ((int)0X0c10),
        DrawBuffer1 = ((int)0X8826),
        MaxVaryingFloats = ((int)0X8b4b),
        IndexMode = ((int)0X0c30),
        AccumClearValue = ((int)0X0b80),
        Map2Index = ((int)0X0db1),
        PackRowLength = ((int)0X0d02),
        AsyncTexImageSgix = ((int)0X835c),
        ListMode = ((int)0X0b30),
        StencilClearValue = ((int)0X0b91),
        BlendDst = ((int)0X0be0),
        BlueScale = ((int)0X0d1a),
        MaxAsyncTexImageSgix = ((int)0X835f),
        BlendEquationExt = ((int)0X8009),
        IndexArrayType = ((int)0X8085),
        SampleBuffers = ((int)0X80a8),
        SampleBuffersSgis = ((int)0X80a8),
        GenerateMipmapHint = ((int)0X8192),
        LineWidthGranularity = ((int)0X0b23),
        DepthRange = ((int)0X0b70),
        StencilBackPassDepthPass = ((int)0X8803),
        MapColor = ((int)0X0d10),
        MaxTextureImageUnits = ((int)0X8872),
        ColorSum = ((int)0X8458),
        Map1TextureCoord2 = ((int)0X0d94),
        Map1TextureCoord3 = ((int)0X0d95),
        MapStencil = ((int)0X0d11),
        Map1TextureCoord1 = ((int)0X0d93),
        TextureGenQ = ((int)0X0c63),
        Map1TextureCoord4 = ((int)0X0d96),
        BlendEquationRgb = ((int)0X8009),
        Convolution2DExt = ((int)0X8011),
        PointFadeThresholdSize = ((int)0X8128),
        MaxAsyncReadPixelsSgix = ((int)0X8361),
        PixelTileWidthSgix = ((int)0X8140),
        PolygonSmooth = ((int)0X0b41),
        IndexOffset = ((int)0X0d13),
        Light6 = ((int)0X4006),
        VertexArray = ((int)0X8074),
        PixelTexGenSgix = ((int)0X8139),
        LightEnvModeSgix = ((int)0X8407),
        GreenBits = ((int)0X0d53),
        ColorClearValue = ((int)0X0c22),
        PackImageDepthSgis = ((int)0X8131),
        NormalArrayCountExt = ((int)0X8080),
        SampleMaskValueSgis = ((int)0X80aa),
        NormalArrayBufferBinding = ((int)0X8897),
        ConvolutionHintSgix = ((int)0X8316),
        TextureCubeMap = ((int)0X8513),
        AlphaTest = ((int)0X0bc0),
        AccumRedBits = ((int)0X0d58),
        PolygonSmoothHint = ((int)0X0c53),
        IndexArrayCountExt = ((int)0X8087),
        Stereo = ((int)0X0c33),
        SecondaryColorArrayType = ((int)0X845b),
        MaxVertexUniformComponents = ((int)0X8b4a),
        TextureCoordArrayType = ((int)0X8089),
        LineStipplePattern = ((int)0X0b25),
        UnpackImageHeightExt = ((int)0X806e),
        FragmentLightModelTwoSideSgix = ((int)0X8409),
        CurrentRasterTextureCoords = ((int)0X0b06),
        MaxVertexTextureImageUnits = ((int)0X8b4c),
        TextureStackDepth = ((int)0X0ba5),
        DrawBuffer8 = ((int)0X882d),
        TextureMatrix = ((int)0X0ba8),
        Texture4DSgis = ((int)0X8134),
        AlphaTestFunc = ((int)0X0bc1),
        ColorArrayType = ((int)0X8082),
        FragmentColorMaterialSgix = ((int)0X8401),
        PostColorMatrixBlueScaleSgi = ((int)0X80b6),
        StencilBackPassDepthFail = ((int)0X8802),
        Samples = ((int)0X80a9),
        AlphaTestRef = ((int)0X0bc2),
        FrontFace = ((int)0X0b46),
        DrawBuffer11 = ((int)0X8830),
        MaxClientAttribStackDepth = ((int)0X0d3b),
        PixelMapSToSSize = ((int)0X0cb1),
        Dither = ((int)0X0bd0),
        Map1Vertex4 = ((int)0X0d98),
        ModelviewStackDepth = ((int)0X0ba3),
        ClipPlane1 = ((int)0X3001),
        ElementArrayBufferBinding = ((int)0X8895),
        EdgeFlagArrayCountExt = ((int)0X808D),
        FogOffsetValueSgix = ((int)0X8199),
        PolygonMode = ((int)0X0b40),
        Multisample = ((int)0X809d),
        Light5 = ((int)0X4005),
        PostConvolutionAlphaScaleExt = ((int)0X801f),
        PackSkipRows = ((int)0X0d03),
        SpriteSgix = ((int)0X8148),
        PostColorMatrixColorTableSgi = ((int)0X80D2),
        TextureBinding2D = ((int)0X8069),
        SampleAlphaToOne = ((int)0X809f),
        TextureGenR = ((int)0X0c62),
        FeedbackBufferSize = ((int)0X0df1),
        DrawBuffer6 = ((int)0X882b),
        PostColorMatrixRedScaleSgi = ((int)0X80b4),
        PixelPackBufferBinding = ((int)0X88ed),
        AttribStackDepth = ((int)0X0bb0),
        PixelTileBestAlignmentSgix = ((int)0X813e),
        ClientActiveTexture = ((int)0X84e1),
        StencilPassDepthFail = ((int)0X0b95),
        Viewport = ((int)0X0ba2),
        ModelviewMatrix = ((int)0X0ba6),
        DepthBits = ((int)0X0d56),
        MaxTextureUnits = ((int)0X84e2),
        PackSkipPixels = ((int)0X0d04),
        DrawBuffer3 = ((int)0X8828),
        PackSubsampleRateSgix = ((int)0X85a0),
        ArrayBufferBinding = ((int)0X8894),
        CurrentProgram = ((int)0X8b8d),
        UnpackSkipPixels = ((int)0X0cf4),
        SampleCoverage = ((int)0X80a0),
        InterlaceSgix = ((int)0X8094),
        Light0 = ((int)0X4000),
        NumCompressedTextureFormats = ((int)0X86a2),
        ColorMaterialFace = ((int)0X0b55),
        SpriteTranslationSgix = ((int)0X814b),
        SmoothPointSizeRange = ((int)0X0b12),
        LineWidthRange = ((int)0X0b22),
        StencilBackFail = ((int)0X8801),
        ClipPlane4 = ((int)0X3004),
        SharedTexturePaletteExt = ((int)0X81fb),
        MaxVertexAttribs = ((int)0X8869),
        ActiveTexture = ((int)0X84e0),
        PixelTileCacheIncrementSgix = ((int)0X813f),
        Light2 = ((int)0X4002),
        PostColorMatrixAlphaScaleSgi = ((int)0X80b7),
        RedBias = ((int)0X0d15),
        DrawBuffer9 = ((int)0X882e),
        RescaleNormalExt = ((int)0X803a),
        PostConvolutionBlueBiasExt = ((int)0X8022),
        MaxProjectionStackDepth = ((int)0X0d38),
        TextureBinding1D = ((int)0X8068),
        WeightArrayBufferBinding = ((int)0X889e),
        MaxAsyncHistogramSgix = ((int)0X832D),
        SampleCoverageInvert = ((int)0X80ab),
        Texture4DBindingSgis = ((int)0X814f),
        Normalize = ((int)0X0ba1),
        AliasedPointSizeRange = ((int)0X846d),
        PostColorMatrixBlueBiasSgi = ((int)0X80ba),
        PostConvolutionGreenBiasExt = ((int)0X8021),
        MaxViewportDims = ((int)0X0d3a),
        ShadeModel = ((int)0X0b54),
        PointSizeRange = ((int)0X0b12),
        TransposeProjectionMatrix = ((int)0X84e4),
        ColorMaterial = ((int)0X0b57),
        Fog = ((int)0X0b60),
        IndexWritemask = ((int)0X0c21),
        MaxTextureSize = ((int)0X0d33),
        MinmaxExt = ((int)0X802e),
        MaxFragmentUniformComponents = ((int)0X8b49),
        StencilPassDepthPass = ((int)0X0b96),
        IndexBits = ((int)0X0d51),
        PackImageHeightExt = ((int)0X806c),
        SampleAlphaToMaskSgis = ((int)0X809e),
        PostColorMatrixAlphaBiasSgi = ((int)0X80bb),
        PixelTileCacheSizeSgix = ((int)0X8145),
        PixelMapIToISize = ((int)0X0cb0),
        PackLsbFirst = ((int)0X0d01),
        EdgeFlagArrayBufferBinding = ((int)0X889b),
        PackSwapBytes = ((int)0X0d00),
        VertexArrayType = ((int)0X807b),
        FragmentLightModelAmbientSgix = ((int)0X840a),
        FogFuncPointsSgis = ((int)0X812b),
        DepthTest = ((int)0X0b71),
        MaxListNesting = ((int)0X0b31),
        IndexClearValue = ((int)0X0c20),
        MaxModelviewStackDepth = ((int)0X0d36),
        StencilBackValueMask = ((int)0X8ca4),
        MaxClipmapDepthSgix = ((int)0X8177),
        ColorWritemask = ((int)0X0c23),
        StencilFail = ((int)0X0b94),
        CullFaceMode = ((int)0X0b45),
        Max3DTextureSizeExt = ((int)0X8073),
        FogCoordArrayStride = ((int)0X8455),
        SpriteModeSgix = ((int)0X8149),
        ListBase = ((int)0X0b32),
        LightModelTwoSide = ((int)0X0b52),
        PointSizeGranularity = ((int)0X0b13),
        CurrentRasterPosition = ((int)0X0b07),
        CalligraphicFragmentSgix = ((int)0X8183),
        AlphaBits = ((int)0X0d55),
        PackAlignment = ((int)0X0d05),
        PostConvolutionBlueScaleExt = ((int)0X801e),
        PixelMapBToBSize = ((int)0X0cb8),
        BlendColorExt = ((int)0X8005),
        FogCoordArrayType = ((int)0X8454),
        MaxClipmapVirtualDepthSgix = ((int)0X8178),
        TransposeModelviewMatrix = ((int)0X84e3),
        ProjectionMatrix = ((int)0X0ba7),
        SmoothLineWidthRange = ((int)0X0b22),
        ScissorTest = ((int)0X0c11),
        SampleMaskSgis = ((int)0X80a0),
        VertexAttribArrayBufferBinding = ((int)0X889f),
        MaxAttribStackDepth = ((int)0X0d35),
        PolygonStipple = ((int)0X0b42),
        DrawBuffer5 = ((int)0X882a),
        Map2Vertex4 = ((int)0X0db8),
        DistanceAttenuationSgis = ((int)0X8129),
        MaxTextureCoords = ((int)0X8871),
        SampleAlphaToCoverage = ((int)0X809e),
        MaxColorAttachmentsExt = ((int)0X8cdf),
        LightModelColorControl = ((int)0X81f8),
        Texture3DBindingExt = ((int)0X806a),
        MaxRenderbufferSizeExt = ((int)0X84e8),
        FogHint = ((int)0X0c54),
        DrawBuffer4 = ((int)0X8829),
        DepthScale = ((int)0X0d1e),
        SecondaryColorArraySize = ((int)0X845a),
        Texture3DExt = ((int)0X806f),
        Map1Normal = ((int)0X0d92),
        CurrentIndex = ((int)0X0b01),
        SampleMaskInvertSgis = ((int)0X80ab),
        MultisampleSgis = ((int)0X809D),
        AsyncMarkerSgix = ((int)0X8329),
        MaxElementsVertices = ((int)0X80e8),
        Map1GridSegments = ((int)0X0dd1),
        BlendEquationAlpha = ((int)0X883d),
        PixelTexGenModeSgix = ((int)0X832b),
        GreenBias = ((int)0X0d19),
        NormalArrayStride = ((int)0X807f),
        TransposeTextureMatrix = ((int)0X84e5),
        Light7 = ((int)0X4007),
        UnpackCmykHintExt = ((int)0X800f),
        MaxFramezoomFactorSgix = ((int)0X818D),
        SecondaryColorArrayBufferBinding = ((int)0X889c),
        FogCoordArrayBufferBinding = ((int)0X889d),
        SamplesSgis = ((int)0X80a9),
        FramezoomSgix = ((int)0X818b),
        RenderbufferBindingExt = ((int)0X8ca7),
        Map2GridDomain = ((int)0X0dd2),
        RgbaMode = ((int)0X0c31),
        CurrentColor = ((int)0X0b00),
        NormalArrayType = ((int)0X807e),
        AsyncHistogramSgix = ((int)0X832c),
        PointSizeMinSgis = ((int)0X8126),
        DrawBuffer12 = ((int)0X8831),
        PackCmykHintExt = ((int)0X800e),
        Map1Color4 = ((int)0X0d90),
        Map2TextureCoord2 = ((int)0X0db4),
        Map2TextureCoord3 = ((int)0X0db5),
        Map2TextureCoord1 = ((int)0X0db3),
        PostColorMatrixGreenScaleSgi = ((int)0X80b5),
        Map2TextureCoord4 = ((int)0X0db6),
        TextureBinding3D = ((int)0X806a),
        TextureColorTableSgi = ((int)0X80bc),
        DrawBuffer14 = ((int)0X8833),
        FragmentShaderDerivativeHint = ((int)0X8b8b),
        StencilWritemask = ((int)0X0b98),
        LogicOpMode = ((int)0X0bf0),
        Blend = ((int)0X0be2),
        AutoNormal = ((int)0X0d80),
        ColorArrayBufferBinding = ((int)0X8898),
        FramezoomFactorSgix = ((int)0X818c),
        Texture2D = ((int)0X0de1),
        UnpackLsbFirst = ((int)0X0cf1),
        AliasedLineWidthRange = ((int)0X846e),
        ColorArraySize = ((int)0X8081),
        ColorLogicOp = ((int)0X0bf2),
        SubpixelBits = ((int)0X0d50),
        Max4DTextureSizeSgis = ((int)0X8138),
        HistogramExt = ((int)0X8024),
        PixelTileHeightSgix = ((int)0X8141),
        PixelTileGridWidthSgix = ((int)0X8142),
        TextureCoordArrayBufferBinding = ((int)0X889a),
        PolygonOffsetUnits = ((int)0X2a00),
        LineStippleRepeat = ((int)0X0b26),
        PointSizeMin = ((int)0X8126),
        UnpackRowLength = ((int)0X0cf2),
        MaxNameStackDepth = ((int)0X0d37),
        StencilBackWritemask = ((int)0X8ca5),
        MaxEvalOrder = ((int)0X0d30),
        BlueBits = ((int)0X0d54),
        Map1Vertex3 = ((int)0X0d97),
        PolygonOffsetFactor = ((int)0X8038),
        PointSmoothHint = ((int)0X0c51),
        PackResampleSgix = ((int)0X842c),
        CompressedTextureFormats = ((int)0X86a3),
        BlendSrcRgb = ((int)0X80c9),
        ColorMatrixStackDepthSgi = ((int)0X80b2),
        ClipPlane0 = ((int)0X3000),
        AccumGreenBits = ((int)0X0d59),
        PostColorMatrixRedBiasSgi = ((int)0X80b8),
        DrawBuffer10 = ((int)0X882f),
        DepthClearValue = ((int)0X0b73),
        PolygonOffsetLine = ((int)0X2a02),
        SmoothLineWidthGranularity = ((int)0X0b23),
        CurrentRasterDistance = ((int)0X0b09),
        PixelMapGToGSize = ((int)0X0cb7),
        DrawBuffer2 = ((int)0X8827),
        LightModelAmbient = ((int)0X0b53),
        PointSize = ((int)0X0b11),
        StencilValueMask = ((int)0X0b93),
        CurrentNormal = ((int)0X0b02),
        Map2Normal = ((int)0X0db2),
        PostConvolutionAlphaBiasExt = ((int)0X8023),
        FogDensity = ((int)0X0b62),
        DrawBuffer = ((int)0X0c01),
        SecondaryColorArrayStride = ((int)0X845c),
        MaxAsyncDrawPixelsSgix = ((int)0X8360),
    }

    public enum GetTextureParameter
    {
        TextureCompressed = ((int)0X86a1),
        TextureIntensitySize = ((int)0X8061),
        TextureInternalFormat = ((int)0X1003),
        TextureLodBiasSSgix = ((int)0X818e),
        TextureMagFilter = ((int)0X2800),
        TextureBaseLevel = ((int)0X813c),
        TextureMaxClampSSgix = ((int)0X8369),
        DetailTextureFuncPointsSgis = ((int)0X809c),
        TextureMinLod = ((int)0X813a),
        GenerateMipmap = ((int)0X8191),
        PostTextureFilterBiasSgix = ((int)0X8179),
        TextureBaseLevelSgis = ((int)0X813c),
        TextureWidth = ((int)0X1000),
        TextureLodBiasTSgix = ((int)0X818f),
        TextureClipmapCenterSgix = ((int)0X8171),
        QuadTextureSelectSgis = ((int)0X8125),
        TextureMaxLevel = ((int)0X813d),
        TextureWrapS = ((int)0X2802),
        TextureComponents = ((int)0X1003),
        SharpenTextureFuncPointsSgis = ((int)0X80b0),
        TextureWrapR = ((int)0X8072),
        TextureHeight = ((int)0X1001),
        TextureCompareMode = ((int)0X884c),
        TextureMaxClampTSgix = ((int)0X836a),
        TextureClipmapLodOffsetSgix = ((int)0X8175),
        TextureLequalRSgix = ((int)0X819c),
        TextureMaxClampRSgix = ((int)0X836b),
        DualTextureSelectSgis = ((int)0X8124),
        TextureFilter4SizeSgis = ((int)0X8147),
        PostTextureFilterScaleSgix = ((int)0X817a),
        TextureWrapRExt = ((int)0X8072),
        Texture4DsizeSgis = ((int)0X8136),
        TextureClipmapVirtualDepthSgix = ((int)0X8174),
        TextureMaxLod = ((int)0X813b),
        TextureMaxLodSgis = ((int)0X813b),
        TextureDepth = ((int)0X8071),
        TextureBlueSize = ((int)0X805e),
        TexturePriority = ((int)0X8066),
        TextureBorderColor = ((int)0X1004),
        TextureCompareSgix = ((int)0X819a),
        ShadowAmbientSgix = ((int)0X80bf),
        TextureAlphaSize = ((int)0X805f),
        TextureWrapT = ((int)0X2803),
        TextureWrapQSgis = ((int)0X8137),
        DetailTextureModeSgis = ((int)0X809b),
        TextureClipmapOffsetSgix = ((int)0X8173),
        TextureGreenSize = ((int)0X805d),
        TextureMinLodSgis = ((int)0X813a),
        TextureGequalRSgix = ((int)0X819D),
        TextureClipmapDepthSgix = ((int)0X8176),
        GenerateMipmapSgis = ((int)0X8191),
        TextureMinFilter = ((int)0X2801),
        TextureClipmapFrameSgix = ((int)0X8172),
        TextureRedSize = ((int)0X805c),
        TextureLuminanceSize = ((int)0X8060),
        DetailTextureLevelSgis = ((int)0X809a),
        TextureBorder = ((int)0X1005),
        TextureResident = ((int)0X8067),
        TextureDepthSize = ((int)0X884a),
        DepthTextureMode = ((int)0X884b),
        TextureCompareFunc = ((int)0X884d),
        TextureMaxLevelSgis = ((int)0X813D),
        TextureLodBiasRSgix = ((int)0X8190),
        TextureCompressedImageSize = ((int)0X86a0),
        TextureCompareOperatorSgix = ((int)0X819b),
        TextureDepthExt = ((int)0X8071),
    }

    public enum HintMode
    {
        Nicest = ((int)0X1102),
        DontCare = ((int)0X1100),
        Fastest = ((int)0X1101),
    }

    public enum HintTarget
    {
        ConvolutionHintSgix = ((int)0X8316),
        TextureMultiBufferHintSgix = ((int)0X812e),
        PackCmykHintExt = ((int)0X800e),
        PerspectiveCorrectionHint = ((int)0X0c50),
        PointSmoothHint = ((int)0X0c51),
        VertexPreclipHintSgix = ((int)0X83ef),
        TextureCompressionHint = ((int)0X84ef),
        FogHint = ((int)0X0c54),
        PolygonSmoothHint = ((int)0X0c53),
        LineSmoothHint = ((int)0X0c52),
        UnpackCmykHintExt = ((int)0X800f),
        GenerateMipmapHint = ((int)0X8192),
        GenerateMipmapHintSgis = ((int)0X8192),
    }

    public enum HistogramTargetExt
    {
        ProxyHistogramExt = ((int)0X8025),
        HistogramExt = ((int)0X8024),
    }

    public enum IndexPointerType
    {
        Double = ((int)0X140a),
        Short = ((int)0X1402),
        Float = ((int)0X1406),
        Int = ((int)0X1404),
    }

    public enum LightEnvModeSgix
    {
        Modulate = ((int)0X2100),
        Add = ((int)0X0104),
        Replace = ((int)0X1e01),
    }

    public enum LightEnvParameterSgix
    {
        LightEnvModeSgix = ((int)0X8407),
    }

    public enum LightModelColorControl
    {
        SingleColor = ((int)0X81f9),
        SeparateSpecularColor = ((int)0X81fa),
    }

    public enum LightModelParameter
    {
        LightModelColorControl = ((int)0X81f8),
        LightModelTwoSide = ((int)0X0b52),
        LightModelAmbient = ((int)0X0b53),
        LightModelLocalViewer = ((int)0X0b51),
    }

    public enum LightParameter
    {
        Position = ((int)0X1203),
        SpotExponent = ((int)0X1205),
        Diffuse = ((int)0X1201),
        ConstantAttenuation = ((int)0X1207),
        Ambient = ((int)0X1200),
        Specular = ((int)0X1202),
        LinearAttenuation = ((int)0X1208),
        SpotDirection = ((int)0X1204),
        SpotCutoff = ((int)0X1206),
        QuadraticAttenuation = ((int)0X1209),
    }

    public enum ListMode
    {
        CompileAndExecute = ((int)0X1301),
        Compile = ((int)0X1300),
    }

    public enum DataType
    {
        UnsignedInt = ((int)0X1405),
        DoubleExt = ((int)0X140a),
        Float = ((int)0X1406),
        Byte = ((int)0X1400),
        Int = ((int)0X1404),
        Gl4Bytes = ((int)0X1409),
        UnsignedShort = ((int)0X1403),
        Double = ((int)0X140a),
        UnsignedByte = ((int)0X1401),
        Short = ((int)0X1402),
        Gl3Bytes = ((int)0X1408),
        Gl2Bytes = ((int)0X1407),
    }

    public enum ListNameType
    {
        UnsignedInt = ((int)0X1405),
        Float = ((int)0X1406),
        Byte = ((int)0X1400),
        Int = ((int)0X1404),
        Gl4Bytes = ((int)0X1409),
        UnsignedShort = ((int)0X1403),
        UnsignedByte = ((int)0X1401),
        Short = ((int)0X1402),
        Gl3Bytes = ((int)0X1408),
        Gl2Bytes = ((int)0X1407),
    }

    public enum ListParameterName
    {
        ListPrioritySgix = ((int)0X8182),
    }

    public enum LogicOp
    {
        AndInverted = ((int)0X1504),
        AndReverse = ((int)0X1502),
        Equiv = ((int)0X1509),
        Clear = ((int)0X1500),
        OrInverted = ((int)0X150d),
        Noop = ((int)0X1505),
        OrReverse = ((int)0X150b),
        Nand = ((int)0X150e),
        CopyInverted = ((int)0X150c),
        And = ((int)0X1501),
        Invert = ((int)0X150a),
        Set = ((int)0X150f),
        Copy = ((int)0X1503),
        Or = ((int)0X1507),
        Nor = ((int)0X1508),
        Xor = ((int)0X1506),
    }

    public enum MapTarget
    {
        Map2Index = ((int)0X0Db1),
        Map1Vertex3 = ((int)0X0D97),
        Map1TextureCoord2 = ((int)0X0D94),
        Map1Vertex4 = ((int)0X0D98),
        Map2Color4 = ((int)0X0Db0),
        Map1Normal = ((int)0X0D92),
        Map2Vertex3 = ((int)0X0Db7),
        TextureDeformationSgix = ((int)0X8195),
        Map2TextureCoord2 = ((int)0X0Db4),
        Map2TextureCoord3 = ((int)0X0Db5),
        Map2Vertex4 = ((int)0X0Db8),
        Map2TextureCoord1 = ((int)0X0Db3),
        Map1Index = ((int)0X0D91),
        Map2TextureCoord4 = ((int)0X0Db6),
        Map1TextureCoord3 = ((int)0X0D95),
        Map1TextureCoord1 = ((int)0X0D93),
        Map1TextureCoord4 = ((int)0X0D96),
        Map2Normal = ((int)0X0Db2),
        Map1Color4 = ((int)0X0D90),
        GeometryDeformationSgix = ((int)0X8194),
    }

    public enum MaterialFace
    {
        FrontAndBack = ((int)0X0408),
        Back = ((int)0X0405),
        Front = ((int)0X0404),
    }

    public enum MaterialParameter
    {
        AmbientAndDiffuse = ((int)0X1602),
        Shininess = ((int)0X1601),
        Emission = ((int)0X1600),
        Diffuse = ((int)0X1201),
        ColorIndexes = ((int)0X1603),
        Specular = ((int)0X1202),
        Ambient = ((int)0X1200),
    }

    public enum MatrixMode
    {
        Texture = ((int)0X1702),
        Color = ((int)0X1800),
        Projection = ((int)0X1701),
        Modelview = ((int)0X1700),
    }

    public enum MeshMode1
    {
        Line = ((int)0X1b01),
        Point = ((int)0X1b00),
    }

    public enum MeshMode2
    {
        Fill = ((int)0X1b02),
        Line = ((int)0X1b01),
        Point = ((int)0X1b00),
    }

    public enum MinmaxTargetExt
    {
        MinmaxExt = ((int)0X802e),
    }

    public enum NormalPointerType
    {
        Double = ((int)0X140a),
        Short = ((int)0X1402),
        Byte = ((int)0X1400),
        Float = ((int)0X1406),
        Int = ((int)0X1404),
    }

    public enum PixelCopyType
    {
        Depth = ((int)0X1801),
        Color = ((int)0X1800),
        Stencil = ((int)0X1802),
    }

    public enum PixelFormat
    {
        AbgrExt = ((int)0X8000),
        Alpha16IccSgix = ((int)0X8468),
        R5G6B5IccSgix = ((int)0X8466),
        Rgb = ((int)0X1907),
        Ycrcb422Sgix = ((int)0X81bb),
        CmykaExt = ((int)0X800D),
        Luminance16IccSgix = ((int)0X8469),
        Alpha = ((int)0X1906),
        Green = ((int)0X1904),
        Ycrcb444Sgix = ((int)0X81bc),
        Bgr = ((int)0X80e0),
        Luminance16Alpha8IccSgix = ((int)0X846b),
        ColorIndex = ((int)0X1900),
        StencilIndex = ((int)0X1901),
        Blue = ((int)0X1905),
        R5G6B5A8IccSgix = ((int)0X8467),
        Red = ((int)0X1903),
        LuminanceAlpha = ((int)0X190a),
        CmykExt = ((int)0X800c),
        Luminance = ((int)0X1909),
        DepthComponent = ((int)0X1902),
        Rgba = ((int)0X1908),
        Bgra = ((int)0X80e1),
    }

    public enum PixelMap
    {
        PixelMapIToB = ((int)0X0c74),
        PixelMapGToG = ((int)0X0c77),
        PixelMapSToS = ((int)0X0c71),
        PixelMapAToA = ((int)0X0c79),
        PixelMapIToI = ((int)0X0c70),
        PixelMapBToB = ((int)0X0c78),
        PixelMapIToA = ((int)0X0c75),
        PixelMapIToR = ((int)0X0c72),
        PixelMapIToG = ((int)0X0c73),
        PixelMapRToR = ((int)0X0c76),
    }

    public enum PixelStoreParameter
    {
        PackSkipImages = ((int)0X806b),
        UnpackImageHeight = ((int)0X806e),
        PackAlignment = ((int)0X0D05),
        UnpackImageHeightExt = ((int)0X806e),
        PackSwapBytes = ((int)0X0D00),
        UnpackLsbFirst = ((int)0X0cf1),
        PackSkipVolumesSgis = ((int)0X8130),
        PackSkipRows = ((int)0X0D03),
        PackLsbFirst = ((int)0X0D01),
        UnpackSkipPixels = ((int)0X0cf4),
        PackSkipImagesExt = ((int)0X806b),
        UnpackResampleSgix = ((int)0X842D),
        UnpackSwapBytes = ((int)0X0cf0),
        PixelTileWidthSgix = ((int)0X8140),
        PixelTileCacheSizeSgix = ((int)0X8145),
        PackImageHeightExt = ((int)0X806c),
        PackRowLength = ((int)0X0D02),
        UnpackSubsampleRateSgix = ((int)0X85a1),
        PackResampleSgix = ((int)0X842c),
        PixelTileGridWidthSgix = ((int)0X8142),
        PixelTileGridDepthSgix = ((int)0X8144),
        PixelTileHeightSgix = ((int)0X8141),
        UnpackSkipImages = ((int)0X806d),
        UnpackSkipVolumesSgis = ((int)0X8132),
        PackImageDepthSgis = ((int)0X8131),
        UnpackRowLength = ((int)0X0cf2),
        UnpackAlignment = ((int)0X0cf5),
        UnpackSkipRows = ((int)0X0cf3),
        UnpackSkipImagesExt = ((int)0X806D),
        UnpackImageDepthSgis = ((int)0X8133),
        PackSubsampleRateSgix = ((int)0X85a0),
        PackSkipPixels = ((int)0X0D04),
        PixelTileGridHeightSgix = ((int)0X8143),
        PackImageHeight = ((int)0X806c),
    }

    public enum PixelStoreResampleMode
    {
        ResampleReplicateSgix = ((int)0X842e),
        ResampleDecimateSgix = ((int)0X8430),
        ResampleZeroFillSgix = ((int)0X842f),
    }

    public enum PixelStoreSubsampleRate
    {
        PixelSubsample2424Sgix = ((int)0X85a3),
        PixelSubsample4242Sgix = ((int)0X85a4),
        PixelSubsample4444Sgix = ((int)0X85a2),
    }

    public enum PixelTexGenMode
    {
        PixelTexGenAlphaReplaceSgix = ((int)0X8187),
        None = ((int)0),
        PixelTexGenAlphaLsSgix = ((int)0X8189),
        Rgb = ((int)0X1907),
        PixelTexGenAlphaNoReplaceSgix = ((int)0X8188),
        PixelTexGenAlphaMsSgix = ((int)0X818a),
        Luminance = ((int)0X1909),
        Rgba = ((int)0X1908),
        LuminanceAlpha = ((int)0X190a),
    }

    public enum PixelTexGenParameterNameSgis
    {
        PixelFragmentAlphaSourceSgis = ((int)0X8355),
        PixelFragmentRgbSourceSgis = ((int)0X8354),
    }

    public enum PixelTransferParameter
    {
        PostConvolutionRedScaleExt = ((int)0X801c),
        PostConvolutionAlphaScaleExt = ((int)0X801f),
        IndexOffset = ((int)0X0D13),
        RedBias = ((int)0X0D15),
        PostConvolutionGreenBiasExt = ((int)0X8021),
        AlphaScale = ((int)0X0D1c),
        IndexShift = ((int)0X0D12),
        GreenScale = ((int)0X0D18),
        GreenBias = ((int)0X0D19),
        BlueBias = ((int)0X0D1b),
        MapStencil = ((int)0X0D11),
        DepthBias = ((int)0X0D1f),
        PostColorMatrixGreenBiasSgi = ((int)0X80b9),
        PostColorMatrixAlphaBiasSgi = ((int)0X80bb),
        PostConvolutionGreenScaleExt = ((int)0X801D),
        PostColorMatrixRedBiasSgi = ((int)0X80b8),
        PostConvolutionBlueScaleExt = ((int)0X801e),
        PostColorMatrixBlueScaleSgi = ((int)0X80b6),
        DepthScale = ((int)0X0D1e),
        BlueScale = ((int)0X0D1a),
        PostConvolutionBlueBiasExt = ((int)0X8022),
        MapColor = ((int)0X0D10),
        PostColorMatrixRedScaleSgi = ((int)0X80b4),
        PostColorMatrixBlueBiasSgi = ((int)0X80ba),
        RedScale = ((int)0X0D14),
        PostColorMatrixGreenScaleSgi = ((int)0X80b5),
        PostConvolutionRedBiasExt = ((int)0X8020),
        PostConvolutionAlphaBiasExt = ((int)0X8023),
        PostColorMatrixAlphaScaleSgi = ((int)0X80b7),
        AlphaBias = ((int)0X0D1D),
    }

    public enum PixelType
    {
        Byte = ((int)0X1400),
        UnsignedShort5551 = ((int)0X8034),
        Float = ((int)0X1406),
        UnsignedInt1010102Ext = ((int)0X8036),
        UnsignedShort5551Ext = ((int)0X8034),
        HalfFloat = ((int)0X140b),
        UnsignedByte233Reversed = ((int)0X8362),
        UnsignedByte332Ext = ((int)0X8032),
        UnsignedShort = ((int)0X1403),
        UnsignedShort565Reversed = ((int)0X8364),
        Bitmap = ((int)0X1a00),
        UnsignedShort4444 = ((int)0X8033),
        Short = ((int)0X1402),
        UnsignedInt8888Ext = ((int)0X8035),
        UnsignedByte = ((int)0X1401),
        Int = ((int)0X1404),
        UnsignedInt1010102 = ((int)0X8036),
        UnsignedShort565 = ((int)0X8363),
        UnsignedShort1555Reversed = ((int)0X8366),
        UnsignedShort4444Reversed = ((int)0X8365),
        UnsignedInt2101010Reversed = ((int)0X8368),
        UnsignedByte332 = ((int)0X8032),
        UnsignedInt = ((int)0X1405),
        UnsignedInt8888Reversed = ((int)0X8367),
        UnsignedInt8888 = ((int)0X8035),
        UnsignedShort4444Ext = ((int)0X8033),
    }

    public enum PointParameterNameSgis
    {
        DistanceAttenuationSgis = ((int)0X8129),
        PointSizeMinSgis = ((int)0X8126),
        PointFadeThresholdSizeSgis = ((int)0X8128),
        PointSizeMaxSgis = ((int)0X8127),
    }

    public enum PolygonMode
    {
        Fill = ((int)0X1b02),
        Line = ((int)0X1b01),
        Point = ((int)0X1b00),
    }

    public enum ReadBufferMode
    {
        Aux3 = ((int)0X040c),
        Aux1 = ((int)0X040a),
        Aux2 = ((int)0X040b),
        FrontRight = ((int)0X0401),
        Aux0 = ((int)0X0409),
        FrontLeft = ((int)0X0400),
        Right = ((int)0X0407),
        Left = ((int)0X0406),
        Back = ((int)0X0405),
        Front = ((int)0X0404),
        BackRight = ((int)0X0403),
        BackLeft = ((int)0X0402),
    }

    public enum RenderingMode
    {
        Select = ((int)0X1c02),
        Feedback = ((int)0X1c01),
        Render = ((int)0X1c00),
    }

    public enum SamplePatternSgis
    {
        Gl4Pass1Sgis = ((int)0X80a5),
        Gl2Pass1Sgis = ((int)0X80a3),
        Gl4Pass2Sgis = ((int)0X80a6),
        Gl4Pass3Sgis = ((int)0X80a7),
        Gl1PassSgis = ((int)0X80a1),
        Gl2Pass0Sgis = ((int)0X80a2),
        Gl4Pass0Sgis = ((int)0X80a4),
    }

    public enum SeparableTargetExt
    {
        Separable2DExt = ((int)0X8012),
    }

    public enum ShadingModel
    {
        Smooth = ((int)0X1d01),
        Flat = ((int)0X1d00),
    }

    public enum StencilFunction
    {
        Gequal = ((int)0X0206),
        Always = ((int)0X0207),
        Equal = ((int)0X0202),
        Lequal = ((int)0X0203),
        Never = ((int)0X0200),
        Less = ((int)0X0201),
        Greater = ((int)0X0204),
        Notequal = ((int)0X0205),
    }

    public enum StencilOp
    {
        DecrWrap = ((int)0X8508),
        IncrWrap = ((int)0X8507),
        Keep = ((int)0X1e00),
        Incr = ((int)0X1e02),
        Replace = ((int)0X1e01),
        Decr = ((int)0X1e03),
        Zero = ((int)0),
        Invert = ((int)0X150a),
    }

    public enum StringName
    {
        Version = ((int)0X1f02),
        Renderer = ((int)0X1f01),
        Extensions = ((int)0X1f03),
        ShadingLanguageVersion = ((int)0X8b8c),
        Vendor = ((int)0X1f00),
    }

    public enum TexCoordPointerType
    {
        Double = ((int)0X140a),
        Short = ((int)0X1402),
        Float = ((int)0X1406),
        Int = ((int)0X1404),
    }

    public enum TextureCoordName
    {
        Q = ((int)0X2003),
        R = ((int)0X2002),
        S = ((int)0X2000),
        T = ((int)0X2001),
    }

    public enum TextureEnvMode
    {
        Modulate = ((int)0X2100),
        TextureEnvBiasSgix = ((int)0X80be),
        Blend = ((int)0X0be2),
        Add = ((int)0X0104),
        Decal = ((int)0X2101),
        ReplaceExt = ((int)0X8062),
        Combine = ((int)0X8570),
    }

    public enum TextureEnvParameter
    {
        Src2Rgb = ((int)0X8582),
        Operand2Alpha = ((int)0X859a),
        Source0Rgb = ((int)0X8580),
        Src2Alpha = ((int)0X858a),
        AlphaScale = ((int)0X0D1c),
        RgbScale = ((int)0X8573),
        CombineRgb = ((int)0X8571),
        CombineAlpha = ((int)0X8572),
        TextureLodBias = ((int)0X8501),
        Operand0Alpha = ((int)0X8598),
        Src1Alpha = ((int)0X8589),
        Operand0Rgb = ((int)0X8590),
        Src1Rgb = ((int)0X8581),
        Operand2Rgb = ((int)0X8592),
        Operand1Alpha = ((int)0X8599),
        CoordReplace = ((int)0X8862),
        TextureEnvColor = ((int)0X2201),
        Operand1Rgb = ((int)0X8591),
        Src0Alpha = ((int)0X8588),
        TextureEnvMode = ((int)0X2200),
    }

    public enum TextureEnvTarget
    {
        TextureFilterControl = ((int)0X8500),
        TextureEnv = ((int)0X2300),
        PointSprite = ((int)0X8861),
    }

    public enum TextureFilterFuncSgis
    {
        Filter4Sgis = ((int)0X8146),
    }

    public enum TextureGenMode
    {
        NormalMap = ((int)0X8511),
        ObjectDistanceToPointSgis = ((int)0X81f1),
        EyeLinear = ((int)0X2400),
        ObjectDistanceToLineSgis = ((int)0X81f3),
        SphereMap = ((int)0X2402),
        ObjectLinear = ((int)0X2401),
        ReflectionMap = ((int)0X8512),
        EyeDistanceToPointSgis = ((int)0X81f0),
        EyeDistanceToLineSgis = ((int)0X81f2),
    }

    public enum TextureGenParameter
    {
        EyePointSgis = ((int)0X81f4),
        ObjectLineSgis = ((int)0X81f7),
        ObjectPointSgis = ((int)0X81f5),
        TextureGenMode = ((int)0X2500),
        EyeLineSgis = ((int)0X81f6),
        EyePlane = ((int)0X2502),
        ObjectPlane = ((int)0X2501),
    }

    public enum TextureMagFilter
    {
        Filter4Sgis = ((int)0X8146),
        Linear = ((int)0X2601),
        PixelTexGenQRoundSgix = ((int)0X8185),
        LinearSharpenSgis = ((int)0X80ad),
        LinearDetailSgis = ((int)0X8097),
        PixelTexGenQFloorSgix = ((int)0X8186),
        LinearDetailAlphaSgis = ((int)0X8098),
        LinearSharpenAlphaSgis = ((int)0X80ae),
        LinearDetailColorSgis = ((int)0X8099),
        Nearest = ((int)0X2600),
        LinearSharpenColorSgis = ((int)0X80af),
        PixelTexGenQCeilingSgix = ((int)0X8184),
    }

    public enum TextureMinFilter
    {
        NearestClipmapNearestSgix = ((int)0X844D),
        PixelTexGenQRoundSgix = ((int)0X8185),
        PixelTexGenQCeilingSgix = ((int)0X8184),
        Filter4Sgis = ((int)0X8146),
        NearestMipmapNearest = ((int)0X2700),
        NearestMipmapLinear = ((int)0X2702),
        PixelTexGenQFloorSgix = ((int)0X8186),
        Linear = ((int)0X2601),
        Nearest = ((int)0X2600),
        LinearClipmapLinearSgix = ((int)0X8170),
        LinearMipmapNearest = ((int)0X2701),
        NearestClipmapLinearSgix = ((int)0X844e),
        LinearMipmapLinear = ((int)0X2703),
        LinearClipmapNearestSgix = ((int)0X844f),
    }

    public enum TextureParameterName
    {
        ClampToBorder = ((int)0X812d),
        TextureMagFilter = ((int)0X2800),
        GenerateMipmap = ((int)0X8191),
        TextureLodBiasSSgix = ((int)0X818e),
        PostTextureFilterScaleSgix = ((int)0X817a),
        TextureMinLod = ((int)0X813a),
        TexturePriority = ((int)0X8066),
        TextureCompareFunc = ((int)0X884d),
        TextureClipmapCenterSgix = ((int)0X8171),
        QuadTextureSelectSgis = ((int)0X8125),
        TextureClipmapVirtualDepthSgix = ((int)0X8174),
        ClampToEdge = ((int)0X812f),
        TextureWrapS = ((int)0X2802),
        DepthTextureMode = ((int)0X884b),
        TextureWrapR = ((int)0X8072),
        TextureMaxClampTSgix = ((int)0X836a),
        TextureClipmapLodOffsetSgix = ((int)0X8175),
        TextureMaxClampRSgix = ((int)0X836b),
        DualTextureSelectSgis = ((int)0X8124),
        TextureWrapRExt = ((int)0X8072),
        TextureCompareSgix = ((int)0X819a),
        TextureMaxLod = ((int)0X813b),
        TextureDepth = ((int)0X8071),
        TextureLodBiasRSgix = ((int)0X8190),
        PostTextureFilterBiasSgix = ((int)0X8179),
        TextureBorderColor = ((int)0X1004),
        TextureBaseLevel = ((int)0X813c),
        ShadowAmbientSgix = ((int)0X80bf),
        DetailTextureLevelSgis = ((int)0X809a),
        TextureWrapT = ((int)0X2803),
        TextureCompareFailValue = ((int)0X80bf),
        TextureWrapQSgis = ((int)0X8137),
        DetailTextureModeSgis = ((int)0X809b),
        TextureClipmapOffsetSgix = ((int)0X8173),
        TextureCompareOperatorSgix = ((int)0X819b),
        TextureLodBiasTSgix = ((int)0X818f),
        TextureClipmapDepthSgix = ((int)0X8176),
        GenerateMipmapSgis = ((int)0X8191),
        TextureMinFilter = ((int)0X2801),
        TextureClipmapFrameSgix = ((int)0X8172),
        TextureCompareMode = ((int)0X884c),
        TextureMaxClampSSgix = ((int)0X8369),
        TextureMaxLevel = ((int)0X813D),
    }

    public enum TextureTarget
    {
        TextureMaxLevelSgis = ((int)0X813D),
        TextureCubeMapPositiveX = ((int)0X8515),
        TextureBaseLevelSgis = ((int)0X813c),
        Texture2D = ((int)0X0De1),
        Texture1D = ((int)0X0De0),
        ProxyTexture4DSgis = ((int)0X8135),
        ProxyTexture3DExt = ((int)0X8070),
        TextureRectangleArb = ((int)0X84f5),
        TextureCubeMapPositiveZ = ((int)0X8519),
        TextureBindingCubeMap = ((int)0X8514),
        ProxyTextureCubeMap = ((int)0X851b),
        TextureCubeMap = ((int)0X8513),
        Texture3D = ((int)0X806f),
        TextureMaxLodSgis = ((int)0X813b),
        TextureMinLodSgis = ((int)0X813a),
        TextureCubeMapPositiveY = ((int)0X8517),
        Texture3DExt = ((int)0X806f),
        TextureRectangleNv = ((int)0X84f5),
        TextureCubeMapNegativeX = ((int)0X8516),
        Texture4DSgis = ((int)0X8134),
        TextureCubeMapNegativeY = ((int)0X8518),
        ProxyTexture1D = ((int)0X8063),
        ProxyTexture2D = ((int)0X8064),
        ProxyTexture3D = ((int)0X8070),
        TextureCubeMapNegativeZ = ((int)0X851a),
        DetailTexture2DSgis = ((int)0X8095),
    }

    public enum TextureWrapMode
    {
        ClampToEdge = ((int)0X812f),
        ClampToBorder = ((int)0X812d),
        Clamp = ((int)0X2900),
        MirroredRepeat = ((int)0X8370),
        Repeat = ((int)0X2901),
    }

    public enum PixelInternalFormat
    {
        CompressedAlpha = ((int)0X84e9),
        One = ((int)1),
        DualIntensity12Sgis = ((int)0X811a),
        Luminance8Alpha8 = ((int)0X8045),
        Srgb8Alpha8 = ((int)0X8c43),
        Srgb8 = ((int)0X8c41),
        CompressedRgba = ((int)0X84ee),
        Luminance12 = ((int)0X8041),
        SrgbAlpha = ((int)0X8c42),
        QuadAlpha8Sgis = ((int)0X811f),
        Intensity16IccSgix = ((int)0X846a),
        Alpha16 = ((int)0X803e),
        Three = ((int)3),
        LuminanceIccSgix = ((int)0X8463),
        Intensity12 = ((int)0X804c),
        DepthComponent24Sgix = ((int)0X81a6),
        Rgb10A2 = ((int)0X8059),
        Alpha16IccSgix = ((int)0X8468),
        DualIntensity8Sgis = ((int)0X8119),
        Intensity4 = ((int)0X804a),
        DualAlpha12Sgis = ((int)0X8112),
        Rgb2Ext = ((int)0X804e),
        Intensity8 = ((int)0X804b),
        Luminance4Alpha4 = ((int)0X8043),
        CompressedSrgbS3tcDxt1Ext = ((int)0X8c4c),
        IntensityIccSgix = ((int)0X8464),
        Alpha = ((int)0X1906),
        Intensity = ((int)0X8049),
        LuminanceAlphaIccSgix = ((int)0X8465),
        QuadAlpha4Sgis = ((int)0X811e),
        Srgb = ((int)0X8c40),
        QuadLuminance8Sgis = ((int)0X8121),
        Luminance6Alpha2 = ((int)0X8044),
        DualLuminance8Sgis = ((int)0X8115),
        Intensity16 = ((int)0X804d),
        RgbIccSgix = ((int)0X8460),
        CompressedLuminance = ((int)0X84ea),
        CompressedSrgbAlpha = ((int)0X8c49),
        Alpha4 = ((int)0X803b),
        DualLuminance16Sgis = ((int)0X8117),
        LuminanceAlpha = ((int)0X190a),
        CompressedSrgbAlphaS3tcDxt3Ext = ((int)0X8c4e),
        QuadIntensity8Sgis = ((int)0X8123),
        DualAlpha8Sgis = ((int)0X8111),
        DepthComponent32 = ((int)0X81a7),
        Alpha12 = ((int)0X803d),
        CompressedSrgb = ((int)0X8c48),
        Luminance12Alpha4 = ((int)0X8046),
        CompressedIntensity = ((int)0X84ec),
        DualIntensity16Sgis = ((int)0X811b),
        DepthComponent16Sgix = ((int)0X81a5),
        DualLuminance12Sgis = ((int)0X8116),
        SluminanceAlpha = ((int)0X8c44),
        Sluminance8 = ((int)0X8c47),
        DepthComponent16 = ((int)0X81a5),
        Alpha8 = ((int)0X803c),
        RgbaIccSgix = ((int)0X8461),
        Rgb5A1 = ((int)0X8057),
        Sluminance = ((int)0X8c46),
        R3G3B2 = ((int)0X2a10),
        R5G6B5A8IccSgix = ((int)0X8467),
        Luminance16 = ((int)0X8042),
        Rgb4 = ((int)0X804f),
        DepthComponent = ((int)0X1902),
        DualLuminanceAlpha4Sgis = ((int)0X811c),
        QuadLuminance4Sgis = ((int)0X8120),
        CompressedSrgbAlphaS3tcDxt5Ext = ((int)0X8c4f),
        Luminance16IccSgix = ((int)0X8469),
        Luminance4 = ((int)0X803f),
        DualIntensity4Sgis = ((int)0X8118),
        Luminance12Alpha12 = ((int)0X8047),
        DualAlpha4Sgis = ((int)0X8110),
        Luminance = ((int)0X1909),
        Rgba = ((int)0X1908),
        Rgb16 = ((int)0X8054),
        Rgb10 = ((int)0X8052),
        Two = ((int)2),
        Four = ((int)4),
        Rgba16 = ((int)0X805b),
        DualLuminanceAlpha8Sgis = ((int)0X811D),
        CompressedLuminanceAlpha = ((int)0X84eb),
        R5G6B5IccSgix = ((int)0X8466),
        DepthComponent32Sgix = ((int)0X81a7),
        Rgb12 = ((int)0X8053),
        AlphaIccSgix = ((int)0X8462),
        CompressedSluminance = ((int)0X8c4a),
        DepthComponent24 = ((int)0X81a6),
        Rgb = ((int)0X1907),
        Luminance16Alpha16 = ((int)0X8048),
        Rgb8 = ((int)0X8051),
        Rgba4 = ((int)0X8056),
        Luminance16Alpha8IccSgix = ((int)0X846b),
        Rgba2 = ((int)0X8055),
        Rgb5 = ((int)0X8050),
        CompressedSrgbAlphaS3tcDxt1Ext = ((int)0X8c4d),
        CompressedSluminanceAlpha = ((int)0X8c4b),
        Rgba8 = ((int)0X8058),
        CompressedRgb = ((int)0X84ed),
        Sluminance8Alpha8 = ((int)0X8c45),
        QuadIntensity4Sgis = ((int)0X8122),
        Luminance8 = ((int)0X8040),
        DualLuminance4Sgis = ((int)0X8114),
        Rgba12 = ((int)0X805a),
        DualAlpha16Sgis = ((int)0X8113),
    }

    public enum InterleavedArrayFormat
    {
        C3fV3f = ((int)0X2a24),
        C4ubV3f = ((int)0X2a23),
        T2fV3f = ((int)0X2a27),
        T2fC3fV3f = ((int)0X2a2a),
        T2fC4fN3fV3f = ((int)0X2a2c),
        T4fC4fN3fV4f = ((int)0X2a2d),
        V2f = ((int)0X2a20),
        C4ubV2f = ((int)0X2a22),
        T2fN3fV3f = ((int)0X2a2b),
        N3fV3f = ((int)0X2a25),
        T4fV4f = ((int)0X2a28),
        V3f = ((int)0X2a21),
        C4fN3fV3f = ((int)0X2a26),
        T2fC4ubV3f = ((int)0X2a29),
    }

    public enum VertexPointerType
    {
        Double = ((int)0X140a),
        Short = ((int)0X1402),
        Float = ((int)0X1406),
        Int = ((int)0X1404),
    }

    public enum ClipPlaneName
    {
        ClipPlane0 = ((int)0X3000),
        ClipPlane1 = ((int)0X3001),
        ClipPlane4 = ((int)0X3004),
        ClipPlane2 = ((int)0X3002),
        ClipPlane5 = ((int)0X3005),
        ClipPlane3 = ((int)0X3003),
    }

    public enum LightName
    {
        FragmentLight7Sgix = ((int)0X8413),
        FragmentLight5Sgix = ((int)0X8411),
        Light1 = ((int)0X4001),
        FragmentLight4Sgix = ((int)0X8410),
        Light4 = ((int)0X4004),
        Light3 = ((int)0X4003),
        FragmentLight3Sgix = ((int)0X840f),
        FragmentLight0Sgix = ((int)0X840c),
        Light6 = ((int)0X4006),
        FragmentLight2Sgix = ((int)0X840e),
        Light5 = ((int)0X4005),
        Light0 = ((int)0X4000),
        FragmentLight1Sgix = ((int)0X840D),
        Light7 = ((int)0X4007),
        Light2 = ((int)0X4002),
        FragmentLight6Sgix = ((int)0X8412),
    }

    public enum ExtAbgr
    {
        AbgrExt = ((int)0X8000),
    }

    public enum ExtBlendColor
    {
        OneMinusConstantAlphaExt = ((int)0X8004),
        ConstantColor = ((int)0X8001),
        ConstantColorExt = ((int)0X8001),
        OneMinusConstantAlpha = ((int)0X8004),
        OneMinusConstantColor = ((int)0X8002),
        ConstantAlphaExt = ((int)0X8003),
        ConstantAlpha = ((int)0X8003),
        BlendColor = ((int)0X8005),
        BlendColorExt = ((int)0X8005),
        OneMinusConstantColorExt = ((int)0X8002),
    }

    public enum ExtBlendMinmax
    {
        BlendEquation = ((int)0X8009),
        Max = ((int)0X8008),
        FuncAdd = ((int)0X8006),
        MinExt = ((int)0X8007),
        MaxExt = ((int)0X8008),
        FuncAddExt = ((int)0X8006),
        Min = ((int)0X8007),
        BlendEquationExt = ((int)0X8009),
    }

    public enum ExtBlendSubtract
    {
        FuncSubtract = ((int)0X800a),
        FuncReverseSubtract = ((int)0X800b),
        FuncReverseSubtractExt = ((int)0X800b),
        FuncSubtractExt = ((int)0X800a),
    }

    public enum ExtCmyka
    {
        CmykExt = ((int)0X800c),
        UnpackCmykHintExt = ((int)0X800f),
        PackCmykHintExt = ((int)0X800e),
        CmykaExt = ((int)0X800d),
    }

    public enum ExtConvolution
    {
        ConvolutionWidth = ((int)0X8018),
        PostConvolutionGreenScale = ((int)0X801d),
        ConvolutionFilterBiasExt = ((int)0X8015),
        PostConvolutionAlphaScaleExt = ((int)0X801f),
        ConvolutionFormatExt = ((int)0X8017),
        ConvolutionFormat = ((int)0X8017),
        PostConvolutionGreenBias = ((int)0X8021),
        ConvolutionFilterBias = ((int)0X8015),
        ConvolutionBorderModeExt = ((int)0X8013),
        Convolution2D = ((int)0X8011),
        MaxConvolutionHeight = ((int)0X801b),
        MaxConvolutionWidth = ((int)0X801a),
        PostConvolutionAlphaScale = ((int)0X801f),
        PostConvolutionBlueScaleExt = ((int)0X801e),
        Separable2DExt = ((int)0X8012),
        Convolution1D = ((int)0X8010),
        ConvolutionHeight = ((int)0X8019),
        PostConvolutionAlphaBiasExt = ((int)0X8023),
        ConvolutionFilterScaleExt = ((int)0X8014),
        PostConvolutionRedBiasExt = ((int)0X8020),
        PostConvolutionRedScale = ((int)0X801c),
        PostConvolutionAlphaBias = ((int)0X8023),
        PostConvolutionRedScaleExt = ((int)0X801c),
        ConvolutionBorderMode = ((int)0X8013),
        ReduceExt = ((int)0X8016),
        PostConvolutionBlueBias = ((int)0X8022),
        Convolution1DExt = ((int)0X8010),
        ConvolutionHeightExt = ((int)0X8019),
        Separable2D = ((int)0X8012),
        ConvolutionFilterScale = ((int)0X8014),
        PostConvolutionGreenScaleExt = ((int)0X801d),
        PostConvolutionBlueBiasExt = ((int)0X8022),
        PostConvolutionRedBias = ((int)0X8020),
        Convolution2DExt = ((int)0X8011),
        Reduce = ((int)0X8016),
        PostConvolutionBlueScale = ((int)0X801e),
        PostConvolutionGreenBiasExt = ((int)0X8021),
        MaxConvolutionHeightExt = ((int)0X801b),
        MaxConvolutionWidthExt = ((int)0X801a),
        ConvolutionWidthExt = ((int)0X8018),
    }

    public enum ExtHistogram
    {
        MinmaxFormatExt = ((int)0X802f),
        HistogramGreenSizeExt = ((int)0X8029),
        HistogramRedSize = ((int)0X8028),
        HistogramAlphaSize = ((int)0X802b),
        Minmax = ((int)0X802e),
        ProxyHistogramExt = ((int)0X8025),
        HistogramExt = ((int)0X8024),
        TableTooLargeExt = ((int)0X8031),
        HistogramLuminanceSize = ((int)0X802c),
        HistogramSinkExt = ((int)0X802d),
        HistogramSink = ((int)0X802d),
        HistogramLuminanceSizeExt = ((int)0X802c),
        HistogramWidth = ((int)0X8026),
        ProxyHistogram = ((int)0X8025),
        MinmaxFormat = ((int)0X802f),
        TableTooLarge = ((int)0X8031),
        HistogramBlueSizeExt = ((int)0X802a),
        MinmaxSinkExt = ((int)0X8030),
        HistogramBlueSize = ((int)0X802a),
        HistogramGreenSize = ((int)0X8029),
        Histogram = ((int)0X8024),
        MinmaxExt = ((int)0X802e),
        HistogramFormat = ((int)0X8027),
        MinmaxSink = ((int)0X8030),
        HistogramFormatExt = ((int)0X8027),
        HistogramRedSizeExt = ((int)0X8028),
        HistogramWidthExt = ((int)0X8026),
        HistogramAlphaSizeExt = ((int)0X802b),
    }

    public enum ExtPackedPixels
    {
        UnsignedShort4444RevExt = ((int)0X8365),
        UnsignedShort1555Rev = ((int)0X8366),
        UnsignedInt2101010RevExt = ((int)0X8368),
        UnsignedInt8888RevExt = ((int)0X8367),
        UnsignedInt1010102Ext = ((int)0X8036),
        UnsignedShort5551Ext = ((int)0X8034),
        UnsignedShort565RevExt = ((int)0X8364),
        UnsignedInt1010102 = ((int)0X8036),
        UnsignedByte332Ext = ((int)0X8032),
        UnsignedByte233RevExt = ((int)0X8362),
        UnsignedInt2101010Rev = ((int)0X8368),
        UnsignedShort4444Rev = ((int)0X8365),
        UnsignedShort4444 = ((int)0X8033),
        UnsignedShort5551 = ((int)0X8034),
        UnsignedInt8888Rev = ((int)0X8367),
        UnsignedInt8888Ext = ((int)0X8035),
        UnsignedShort565Rev = ((int)0X8364),
        UnsignedShort565 = ((int)0X8363),
        UnsignedShort565Ext = ((int)0X8363),
        UnsignedByte332 = ((int)0X8032),
        UnsignedByte233Rev = ((int)0X8362),
        UnsignedShort1555RevExt = ((int)0X8366),
        UnsignedInt8888 = ((int)0X8035),
        UnsignedShort4444Ext = ((int)0X8033),
    }

    public enum ExtPolygonOffset
    {
        PolygonOffsetFactorExt = ((int)0X8038),
        PolygonOffsetExt = ((int)0X8037),
        PolygonOffsetBiasExt = ((int)0X8039),
    }

    public enum ExtRescaleNormal
    {
        RescaleNormal = ((int)0X803a),
        RescaleNormalExt = ((int)0X803a),
    }

    public enum ExtTexture
    {
        Rgba12Ext = ((int)0X805a),
        ProxyTexture2DExt = ((int)0X8064),
        Alpha4Ext = ((int)0X803b),
        Luminance4Alpha4Ext = ((int)0X8043),
        Intensity4Ext = ((int)0X804a),
        Luminance8Alpha8Ext = ((int)0X8045),
        TextureIntensitySizeExt = ((int)0X8061),
        Rgba2Ext = ((int)0X8055),
        Rgba16Ext = ((int)0X805b),
        Rgb4Ext = ((int)0X804f),
        Rgba8Ext = ((int)0X8058),
        TextureAlphaSizeExt = ((int)0X805f),
        Luminance16Alpha16Ext = ((int)0X8048),
        Rgb5Ext = ((int)0X8050),
        Luminance12Alpha12Ext = ((int)0X8047),
        Rgb16Ext = ((int)0X8054),
        Rgb10Ext = ((int)0X8052),
        Rgb12Ext = ((int)0X8053),
        Luminance4Ext = ((int)0X803f),
        Rgb5A1Ext = ((int)0X8057),
        Luminance8Ext = ((int)0X8040),
        TextureBlueSizeExt = ((int)0X805e),
        Rgb10A2Ext = ((int)0X8059),
        Luminance12Alpha4Ext = ((int)0X8046),
        Luminance16Ext = ((int)0X8042),
        TextureGreenSizeExt = ((int)0X805d),
        Rgba4Ext = ((int)0X8056),
        IntensityExt = ((int)0X8049),
        Luminance12Ext = ((int)0X8041),
        Intensity12Ext = ((int)0X804c),
        TextureLuminanceSizeExt = ((int)0X8060),
        Alpha12Ext = ((int)0X803d),
        TextureTooLargeExt = ((int)0X8065),
        Luminance6Alpha2Ext = ((int)0X8044),
        Rgb8Ext = ((int)0X8051),
        Intensity16Ext = ((int)0X804d),
        ReplaceExt = ((int)0X8062),
        Rgb2Ext = ((int)0X804e),
        TextureRedSizeExt = ((int)0X805c),
        ProxyTexture1DExt = ((int)0X8063),
        Intensity8Ext = ((int)0X804b),
        Alpha16Ext = ((int)0X803e),
        Alpha8Ext = ((int)0X803c),
    }

    public enum ExtTextureObject
    {
        TextureResidentExt = ((int)0X8067),
        Texture1DBindingExt = ((int)0X8068),
        Texture2DBindingExt = ((int)0X8069),
        TexturePriorityExt = ((int)0X8066),
        Texture3DBindingExt = ((int)0X806a),
    }

    public enum ExtTexture3D
    {
        UnpackSkipImagesExt = ((int)0X806d),
        TextureWrapR = ((int)0X8072),
        ProxyTexture3DExt = ((int)0X8070),
        PackImageHeight = ((int)0X806c),
        Max3DTextureSize = ((int)0X8073),
        Texture3DExt = ((int)0X806f),
        PackImageHeightExt = ((int)0X806c),
        TextureDepthExt = ((int)0X8071),
        PackSkipImages = ((int)0X806b),
        Texture3D = ((int)0X806f),
        UnpackSkipImages = ((int)0X806d),
        TextureWrapRExt = ((int)0X8072),
        UnpackImageHeight = ((int)0X806e),
        Max3DTextureSizeExt = ((int)0X8073),
        TextureDepth = ((int)0X8071),
        UnpackImageHeightExt = ((int)0X806e),
        ProxyTexture3D = ((int)0X8070),
        PackSkipImagesExt = ((int)0X806b),
    }

    public enum ExtVertexArray
    {
        IndexArrayExt = ((int)0X8077),
        VertexArrayPointerExt = ((int)0X808e),
        TextureCoordArrayStrideExt = ((int)0X808a),
        ColorArrayCountExt = ((int)0X8084),
        ColorArrayStrideExt = ((int)0X8083),
        TextureCoordArrayExt = ((int)0X8078),
        TextureCoordArraySizeExt = ((int)0X8088),
        IndexArrayCountExt = ((int)0X8087),
        TextureCoordArrayPointerExt = ((int)0X8092),
        VertexArraySizeExt = ((int)0X807a),
        EdgeFlagArrayStrideExt = ((int)0X808c),
        ColorArrayTypeExt = ((int)0X8082),
        NormalArrayStrideExt = ((int)0X807f),
        ColorArraySizeExt = ((int)0X8081),
        NormalArrayTypeExt = ((int)0X807e),
        EdgeFlagArrayPointerExt = ((int)0X8093),
        EdgeFlagArrayExt = ((int)0X8079),
        NormalArrayExt = ((int)0X8075),
        NormalArrayCountExt = ((int)0X8080),
        TextureCoordArrayTypeExt = ((int)0X8089),
        ColorArrayExt = ((int)0X8076),
        VertexArrayCountExt = ((int)0X807d),
        IndexArrayTypeExt = ((int)0X8085),
        NormalArrayPointerExt = ((int)0X808f),
        VertexArrayExt = ((int)0X8074),
        VertexArrayStrideExt = ((int)0X807c),
        EdgeFlagArrayCountExt = ((int)0X808d),
        VertexArrayTypeExt = ((int)0X807b),
        ColorArrayPointerExt = ((int)0X8090),
        IndexArrayPointerExt = ((int)0X8091),
        TextureCoordArrayCountExt = ((int)0X808b),
        IndexArrayStrideExt = ((int)0X8086),
    }

    public enum SgixInterlace
    {
        InterlaceSgix = ((int)0X8094),
    }

    public enum SgisDetailTexture
    {
        DetailTextureModeSgis = ((int)0X809b),
        LinearDetailSgis = ((int)0X8097),
        DetailTextureFuncPointsSgis = ((int)0X809c),
        LinearDetailAlphaSgis = ((int)0X8098),
        DetailTextureLevelSgis = ((int)0X809a),
        LinearDetailColorSgis = ((int)0X8099),
        DetailTexture2DSgis = ((int)0X8095),
        DetailTexture2DBindingSgis = ((int)0X8096),
    }

    public enum ArbMultisample
    {
        Samples = ((int)0X80a9),
        SampleCoverage = ((int)0X80a0),
        SampleCoverageValue = ((int)0X80aa),
        MultisampleBitArb = ((int)0X20000000),
        MultisampleArb = ((int)0X809d),
        SampleCoverageValueArb = ((int)0X80aa),
        SamplesArb = ((int)0X80a9),
        SampleCoverageInvertArb = ((int)0X80ab),
        SampleAlphaToOne = ((int)0X809f),
        SampleAlphaToOneArb = ((int)0X809f),
        SampleCoverageInvert = ((int)0X80ab),
        SampleAlphaToCoverage = ((int)0X809e),
        Multisample = ((int)0X809d),
        SampleCoverageArb = ((int)0X80a0),
        SampleAlphaToCoverageArb = ((int)0X809e),
        SampleBuffers = ((int)0X80a8),
        SampleBuffersArb = ((int)0X80a8),
    }

    public enum SgisMultisample
    {
        MultisampleSgis = ((int)0X809d),
        Gl4Pass3Sgis = ((int)0X80a7),
        SampleMaskSgis = ((int)0X80a0),
        Gl1PassSgis = ((int)0X80a1),
        SamplePatternSgis = ((int)0X80ac),
        SampleAlphaToMaskSgis = ((int)0X809e),
        SampleBuffersSgis = ((int)0X80a8),
        SampleAlphaToOneSgis = ((int)0X809f),
        SampleMaskValueSgis = ((int)0X80aa),
        Gl4Pass2Sgis = ((int)0X80a6),
        Gl4Pass0Sgis = ((int)0X80a4),
        SampleMaskInvertSgis = ((int)0X80ab),
        SamplesSgis = ((int)0X80a9),
        Gl2Pass0Sgis = ((int)0X80a2),
        Gl2Pass1Sgis = ((int)0X80a3),
        Gl4Pass1Sgis = ((int)0X80a5),
    }

    public enum SgisSharpenTexture
    {
        LinearSharpenSgis = ((int)0X80ad),
        SharpenTextureFuncPointsSgis = ((int)0X80b0),
        LinearSharpenColorSgis = ((int)0X80af),
        LinearSharpenAlphaSgis = ((int)0X80ae),
    }

    public enum SgiColorMatrix
    {
        PostColorMatrixBlueBiasSgi = ((int)0X80ba),
        ColorMatrix = ((int)0X80b1),
        PostColorMatrixAlphaScaleSgi = ((int)0X80b7),
        PostColorMatrixAlphaBiasSgi = ((int)0X80bb),
        PostColorMatrixGreenBias = ((int)0X80b9),
        PostColorMatrixAlphaBias = ((int)0X80bb),
        PostColorMatrixGreenScale = ((int)0X80b5),
        ColorMatrixStackDepth = ((int)0X80b2),
        PostColorMatrixGreenBiasSgi = ((int)0X80b9),
        PostColorMatrixRedBias = ((int)0X80b8),
        PostColorMatrixBlueScale = ((int)0X80b6),
        PostColorMatrixAlphaScale = ((int)0X80b7),
        PostColorMatrixBlueBias = ((int)0X80ba),
        MaxColorMatrixStackDepthSgi = ((int)0X80b3),
        PostColorMatrixBlueScaleSgi = ((int)0X80b6),
        PostColorMatrixGreenScaleSgi = ((int)0X80b5),
        ColorMatrixStackDepthSgi = ((int)0X80b2),
        PostColorMatrixRedScale = ((int)0X80b4),
        ColorMatrixSgi = ((int)0X80b1),
        PostColorMatrixRedScaleSgi = ((int)0X80b4),
        PostColorMatrixRedBiasSgi = ((int)0X80b8),
        MaxColorMatrixStackDepth = ((int)0X80b3),
    }

    public enum SgiTextureColorTable
    {
        ProxyTextureColorTableSgi = ((int)0X80bd),
        TextureColorTableSgi = ((int)0X80bc),
    }

    public enum SgixTextureAddEnv
    {
        TextureEnvBiasSgix = ((int)0X80be),
    }

    public enum SgixShadowAmbient
    {
        ShadowAmbientSgix = ((int)0X80bf),
    }

    public enum SgiColorTable
    {
        ColorTableAlphaSize = ((int)0X80dd),
        ColorTable = ((int)0X80d0),
        PostConvolutionColorTableSgi = ((int)0X80d1),
        ColorTableLuminanceSize = ((int)0X80de),
        ColorTableIntensitySizeSgi = ((int)0X80df),
        PostColorMatrixColorTable = ((int)0X80d2),
        ColorTableWidth = ((int)0X80d9),
        ColorTableGreenSize = ((int)0X80db),
        ColorTableScale = ((int)0X80d6),
        PostColorMatrixColorTableSgi = ((int)0X80d2),
        ColorTableSgi = ((int)0X80d0),
        ColorTableBias = ((int)0X80d7),
        ProxyPostColorMatrixColorTable = ((int)0X80d5),
        ColorTableGreenSizeSgi = ((int)0X80db),
        ProxyPostColorMatrixColorTableSgi = ((int)0X80d5),
        ProxyColorTableSgi = ((int)0X80d3),
        ColorTableFormatSgi = ((int)0X80d8),
        ColorTableScaleSgi = ((int)0X80d6),
        ColorTableBlueSizeSgi = ((int)0X80dc),
        ColorTableWidthSgi = ((int)0X80d9),
        ColorTableLuminanceSizeSgi = ((int)0X80de),
        ColorTableIntensitySize = ((int)0X80df),
        ProxyPostConvolutionColorTableSgi = ((int)0X80d4),
        ColorTableAlphaSizeSgi = ((int)0X80dd),
        PostConvolutionColorTable = ((int)0X80d1),
        ColorTableRedSizeSgi = ((int)0X80da),
        ProxyPostConvolutionColorTable = ((int)0X80d4),
        ColorTableRedSize = ((int)0X80da),
        ProxyColorTable = ((int)0X80d3),
        ColorTableBlueSize = ((int)0X80dc),
        ColorTableBiasSgi = ((int)0X80d7),
        ColorTableFormat = ((int)0X80d8),
    }

    public enum ExtBgra
    {
        BgrExt = ((int)0X80e0),
        BgraExt = ((int)0X80e1),
        Bgra = ((int)0X80e1),
        Bgr = ((int)0X80e0),
    }

    public enum Version12
    {
        MaxElementsIndices = ((int)0X80e9),
        MaxElementsVertices = ((int)0X80e8),
    }

    public enum SgisTextureSelect
    {
        DualLuminance8Sgis = ((int)0X8115),
        DualAlpha8Sgis = ((int)0X8111),
        QuadIntensity4Sgis = ((int)0X8122),
        DualLuminanceAlpha8Sgis = ((int)0X811d),
        DualAlpha12Sgis = ((int)0X8112),
        DualAlpha4Sgis = ((int)0X8110),
        QuadAlpha4Sgis = ((int)0X811e),
        DualAlpha16Sgis = ((int)0X8113),
        DualLuminance16Sgis = ((int)0X8117),
        QuadIntensity8Sgis = ((int)0X8123),
        DualLuminance4Sgis = ((int)0X8114),
        QuadTextureSelectSgis = ((int)0X8125),
        DualIntensity16Sgis = ((int)0X811b),
        QuadLuminance4Sgis = ((int)0X8120),
        DualTextureSelectSgis = ((int)0X8124),
        DualIntensity12Sgis = ((int)0X811a),
        QuadAlpha8Sgis = ((int)0X811f),
        DualIntensity8Sgis = ((int)0X8119),
        DualIntensity4Sgis = ((int)0X8118),
        DualLuminance12Sgis = ((int)0X8116),
        DualLuminanceAlpha4Sgis = ((int)0X811c),
        QuadLuminance8Sgis = ((int)0X8121),
    }

    public enum SgisPointParameters
    {
        PointSizeMaxExt = ((int)0X8127),
        PointSizeMinExt = ((int)0X8126),
        DistanceAttenuationExt = ((int)0X8129),
        PointSizeMinArb = ((int)0X8126),
        PointFadeThresholdSize = ((int)0X8128),
        PointSizeMaxArb = ((int)0X8127),
        PointDistanceAttenuationArb = ((int)0X8129),
        PointSizeMin = ((int)0X8126),
        PointFadeThresholdSizeExt = ((int)0X8128),
        PointFadeThresholdSizeSgis = ((int)0X8128),
        PointDistanceAttenuation = ((int)0X8129),
        PointSizeMax = ((int)0X8127),
        PointFadeThresholdSizeArb = ((int)0X8128),
        PointSizeMaxSgis = ((int)0X8127),
        DistanceAttenuationSgis = ((int)0X8129),
        PointSizeMinSgis = ((int)0X8126),
    }

    public enum SgisFogFunction
    {
        FogFuncPointsSgis = ((int)0X812b),
        MaxFogFuncPointsSgis = ((int)0X812c),
        FogFuncSgis = ((int)0X812a),
    }

    public enum SgisTextureBorderClamp
    {
        ClampToBorderSgis = ((int)0X812d),
        ClampToBorderArb = ((int)0X812d),
        ClampToBorder = ((int)0X812d),
    }

    public enum SgixTextureMultiBuffer
    {
        TextureMultiBufferHintSgix = ((int)0X812e),
    }

    public enum SgisTextureEdgeClamp
    {
        ClampToEdgeSgis = ((int)0X812f),
        ClampToEdge = ((int)0X812f),
    }

    public enum SgisTexture4D
    {
        PackImageDepthSgis = ((int)0X8131),
        Texture4DSgis = ((int)0X8134),
        ProxyTexture4DSgis = ((int)0X8135),
        TextureWrapQSgis = ((int)0X8137),
        PackSkipVolumesSgis = ((int)0X8130),
        Texture4DBindingSgis = ((int)0X814f),
        UnpackSkipVolumesSgis = ((int)0X8132),
        Texture4DsizeSgis = ((int)0X8136),
        Max4DTextureSizeSgis = ((int)0X8138),
        UnpackImageDepthSgis = ((int)0X8133),
    }

    public enum SgixPixelTexture
    {
        PixelTexGenModeSgix = ((int)0X832b),
        PixelTexGenSgix = ((int)0X8139),
    }

    public enum SgisTextureLod
    {
        TextureMinLod = ((int)0X813a),
        TextureBaseLevelSgis = ((int)0X813c),
        TextureMaxLevel = ((int)0X813d),
        TextureMaxLevelSgis = ((int)0X813d),
        TextureMinLodSgis = ((int)0X813a),
        TextureBaseLevel = ((int)0X813c),
        TextureMaxLod = ((int)0X813b),
        TextureMaxLodSgis = ((int)0X813b),
    }

    public enum SgixPixelTiles
    {
        PixelTileBestAlignmentSgix = ((int)0X813e),
        PixelTileGridDepthSgix = ((int)0X8144),
        PixelTileWidthSgix = ((int)0X8140),
        PixelTileCacheIncrementSgix = ((int)0X813f),
        PixelTileGridHeightSgix = ((int)0X8143),
        PixelTileHeightSgix = ((int)0X8141),
        PixelTileGridWidthSgix = ((int)0X8142),
        PixelTileCacheSizeSgix = ((int)0X8145),
    }

    public enum SgisTextureFilter4
    {
        Filter4Sgis = ((int)0X8146),
        TextureFilter4SizeSgis = ((int)0X8147),
    }

    public enum SgixSprite
    {
        SpriteAxisSgix = ((int)0X814a),
        SpriteTranslationSgix = ((int)0X814b),
        SpriteAxialSgix = ((int)0X814c),
        SpriteSgix = ((int)0X8148),
        SpriteEyeAlignedSgix = ((int)0X814e),
        SpriteModeSgix = ((int)0X8149),
        SpriteObjectAlignedSgix = ((int)0X814d),
    }

    public enum HpConvolutionBorderModes
    {
        ConstantBorderHp = ((int)0X8151),
        ConvolutionBorderColor = ((int)0X8154),
        ReplicateBorder = ((int)0X8153),
        ReplicateBorderHp = ((int)0X8153),
        IgnoreBorderHp = ((int)0X8150),
        ConvolutionBorderColorHp = ((int)0X8154),
        ConstantBorder = ((int)0X8151),
    }

    public enum SgixClipmap
    {
        NearestClipmapNearestSgix = ((int)0X844d),
        TextureClipmapLodOffsetSgix = ((int)0X8175),
        NearestClipmapLinearSgix = ((int)0X844e),
        MaxClipmapVirtualDepthSgix = ((int)0X8178),
        MaxClipmapDepthSgix = ((int)0X8177),
        TextureClipmapCenterSgix = ((int)0X8171),
        TextureClipmapOffsetSgix = ((int)0X8173),
        LinearClipmapLinearSgix = ((int)0X8170),
        TextureClipmapFrameSgix = ((int)0X8172),
        TextureClipmapVirtualDepthSgix = ((int)0X8174),
        TextureClipmapDepthSgix = ((int)0X8176),
        LinearClipmapNearestSgix = ((int)0X844f),
    }

    public enum SgixTextureScaleBias
    {
        PostTextureFilterBiasSgix = ((int)0X8179),
        PostTextureFilterScaleRangeSgix = ((int)0X817c),
        PostTextureFilterBiasRangeSgix = ((int)0X817b),
        PostTextureFilterScaleSgix = ((int)0X817a),
    }

    public enum SgixReferencePlane
    {
        ReferencePlaneSgix = ((int)0X817d),
        ReferencePlaneEquationSgix = ((int)0X817e),
    }

    public enum SgixIrInstrument1
    {
        IrInstrument1Sgix = ((int)0X817f),
    }

    public enum SgixInstruments
    {
        InstrumentMeasurementsSgix = ((int)0X8181),
        InstrumentBufferPointerSgix = ((int)0X8180),
    }

    public enum SgixListPriority
    {
        ListPrioritySgix = ((int)0X8182),
    }

    public enum SgixCalligraphicFragment
    {
        CalligraphicFragmentSgix = ((int)0X8183),
    }

    public enum SgixImpactPixelTexture
    {
        PixelTexGenQRoundSgix = ((int)0X8185),
        PixelTexGenAlphaLsSgix = ((int)0X8189),
        PixelTexGenAlphaReplaceSgix = ((int)0X8187),
        PixelTexGenQCeilingSgix = ((int)0X8184),
        PixelTexGenAlphaNoReplaceSgix = ((int)0X8188),
        PixelTexGenQFloorSgix = ((int)0X8186),
        PixelTexGenAlphaMsSgix = ((int)0X818a),
    }

    public enum SgixFramezoom
    {
        MaxFramezoomFactorSgix = ((int)0X818d),
        FramezoomSgix = ((int)0X818b),
        FramezoomFactorSgix = ((int)0X818c),
    }

    public enum SgixTextureLodBias
    {
        TextureLodBiasTSgix = ((int)0X818f),
        TextureLodBiasRSgix = ((int)0X8190),
        TextureLodBiasSSgix = ((int)0X818e),
    }

    public enum SgisGenerateMipmap
    {
        MaxDeformationOrderSgix = ((int)0X8197),
        GeometryDeformationSgix = ((int)0X8194),
        GenerateMipmapSgis = ((int)0X8191),
        TextureDeformationSgix = ((int)0X8195),
        GenerateMipmap = ((int)0X8191),
        DeformationsMaskSgix = ((int)0X8196),
        GenerateMipmapHint = ((int)0X8192),
        GenerateMipmapHintSgis = ((int)0X8192),
    }

    public enum SgixFogOffset
    {
        FogOffsetSgix = ((int)0X8198),
        FogOffsetValueSgix = ((int)0X8199),
    }

    public enum SgixShadow
    {
        TextureGequalRSgix = ((int)0X819d),
        TextureCompareSgix = ((int)0X819a),
        TextureLequalRSgix = ((int)0X819c),
        TextureCompareOperatorSgix = ((int)0X819b),
    }

    public enum SgixDepthTexture
    {
        DepthComponent16 = ((int)0X81a5),
        DepthComponent24 = ((int)0X81a6),
        DepthComponent32 = ((int)0X81a7),
        DepthComponent16Sgix = ((int)0X81a5),
        DepthComponent24Sgix = ((int)0X81a6),
        DepthComponent32Sgix = ((int)0X81a7),
    }

    public enum SgixYcrcb
    {
        Ycrcb444Sgix = ((int)0X81bc),
        Ycrcb422Sgix = ((int)0X81bb),
    }

    public enum SgisTextureColorMask
    {
        TextureColorWritemaskSgis = ((int)0X81ef),
    }

    public enum SgisPointLineTexgen
    {
        EyeLineSgis = ((int)0X81f6),
        EyePointSgis = ((int)0X81f4),
        ObjectLineSgis = ((int)0X81f7),
        ObjectDistanceToLineSgis = ((int)0X81f3),
        ObjectDistanceToPointSgis = ((int)0X81f1),
        ObjectPointSgis = ((int)0X81f5),
        EyeDistanceToPointSgis = ((int)0X81f0),
        EyeDistanceToLineSgis = ((int)0X81f2),
    }

    public enum ExtSeparateSpecularColor
    {
        LightModelColorControlExt = ((int)0X81f8),
        SingleColor = ((int)0X81f9),
        SingleColorExt = ((int)0X81f9),
        LightModelColorControl = ((int)0X81f8),
        SeparateSpecularColor = ((int)0X81fa),
        SeparateSpecularColorExt = ((int)0X81fa),
    }

    public enum ExtSharedTexturePalette
    {
        SharedTexturePaletteExt = ((int)0X81fb),
    }

    public enum SgixConvolutionAccuracy
    {
        ConvolutionHintSgix = ((int)0X8316),
    }

    public enum SgixBlendAlphaMinmax
    {
        AlphaMaxSgix = ((int)0X8321),
        AlphaMinSgix = ((int)0X8320),
        AsyncMarkerSgix = ((int)0X8329),
    }

    public enum SgixAsyncHistogram
    {
        AsyncHistogramSgix = ((int)0X832c),
        MaxAsyncHistogramSgix = ((int)0X832d),
    }

    public enum ExtPixelTransform
    {
        MaxPixelTransform2DStackDepthExt = ((int)0X8337),
        PixelMinFilterExt = ((int)0X8332),
        AverageExt = ((int)0X8335),
        CubicExt = ((int)0X8334),
        PixelTransform2DMatrixExt = ((int)0X8338),
        PixelCubicWeightExt = ((int)0X8333),
        PixelTransform2DExt = ((int)0X8330),
        PixelMagFilterExt = ((int)0X8331),
        PixelTransform2DStackDepthExt = ((int)0X8336),
    }

    public enum SgisPixelTexture
    {
        PixelFragmentAlphaSourceSgis = ((int)0X8355),
        PixelGroupColorSgis = ((int)0X8356),
        PixelFragmentRgbSourceSgis = ((int)0X8354),
        PixelTextureSgis = ((int)0X8353),
    }

    public enum SgixAsyncPixel
    {
        MaxAsyncReadPixelsSgix = ((int)0X8361),
        AsyncDrawPixelsSgix = ((int)0X835d),
        MaxAsyncDrawPixelsSgix = ((int)0X8360),
        MaxAsyncTexImageSgix = ((int)0X835f),
        AsyncReadPixelsSgix = ((int)0X835e),
        AsyncTexImageSgix = ((int)0X835c),
    }

    public enum SgixTextureCoordinateClamp
    {
        TextureMaxClampSSgix = ((int)0X8369),
        FogFactorToAlphaSgix = ((int)0X836f),
        TextureMaxClampRSgix = ((int)0X836b),
        TextureMaxClampTSgix = ((int)0X836a),
    }

    public enum SgixVertexPreclip
    {
        VertexPreclipSgix = ((int)0X83ee),
        VertexPreclipHintSgix = ((int)0X83ef),
    }

    public enum ExtTextureCompressionS3tc
    {
        CompressedRgbaS3tcDxt5Ext = ((int)0X83f3),
        CompressedRgbaS3tcDxt3Ext = ((int)0X83f2),
        CompressedRgbaS3tcDxt1Ext = ((int)0X83f1),
        CompressedRgbS3tcDxt1Ext = ((int)0X83f0),
    }

    public enum IntelParallelArrays
    {
        ParallelArraysIntel = ((int)0X83f4),
        NormalArrayParallelPointersIntel = ((int)0X83f6),
        VertexArrayParallelPointersIntel = ((int)0X83f5),
        ColorArrayParallelPointersIntel = ((int)0X83f7),
        TextureCoordArrayParallelPointersIntel = ((int)0X83f8),
    }

    public enum SgixFragmentLighting
    {
        FragmentLight2Sgix = ((int)0X840e),
        FragmentLight3Sgix = ((int)0X840f),
        FragmentLight6Sgix = ((int)0X8412),
        LightEnvModeSgix = ((int)0X8407),
        FragmentLightModelNormalInterpolationSgix = ((int)0X840b),
        FragmentLight4Sgix = ((int)0X8410),
        FragmentLight5Sgix = ((int)0X8411),
        CurrentRasterNormalSgix = ((int)0X8406),
        FragmentLightingSgix = ((int)0X8400),
        FragmentColorMaterialSgix = ((int)0X8401),
        FragmentLightModelAmbientSgix = ((int)0X840a),
        FragmentLight7Sgix = ((int)0X8413),
        FragmentColorMaterialFaceSgix = ((int)0X8402),
        MaxFragmentLightsSgix = ((int)0X8404),
        FragmentLight0Sgix = ((int)0X840c),
        FragmentColorMaterialParameterSgix = ((int)0X8403),
        MaxActiveLightsSgix = ((int)0X8405),
        FragmentLightModelTwoSideSgix = ((int)0X8409),
        FragmentLight1Sgix = ((int)0X840d),
        FragmentLightModelLocalViewerSgix = ((int)0X8408),
    }

    public enum SgixResample
    {
        ResampleReplicateSgix = ((int)0X842e),
        UnpackResampleSgix = ((int)0X842d),
        PackResampleSgix = ((int)0X842c),
        ResampleZeroFillSgix = ((int)0X842f),
        ResampleDecimateSgix = ((int)0X8430),
    }

    public enum SgixIccTexture
    {
        Luminance16IccSgix = ((int)0X8469),
        RgbaIccSgix = ((int)0X8461),
        RgbIccSgix = ((int)0X8460),
        LuminanceAlphaIccSgix = ((int)0X8465),
        R5G6B5A8IccSgix = ((int)0X8467),
        Luminance16Alpha8IccSgix = ((int)0X846b),
        R5G6B5IccSgix = ((int)0X8466),
        Intensity16IccSgix = ((int)0X846a),
        Alpha16IccSgix = ((int)0X8468),
        LuminanceIccSgix = ((int)0X8463),
        AlphaIccSgix = ((int)0X8462),
        IntensityIccSgix = ((int)0X8464),
    }

    public enum SgixSubsample
    {
        PixelSubsample2424Sgix = ((int)0X85a3),
        UnpackSubsampleRateSgix = ((int)0X85a1),
        PixelSubsample4242Sgix = ((int)0X85a4),
        PackSubsampleRateSgix = ((int)0X85a0),
        PixelSubsample4444Sgix = ((int)0X85a2),
    }

    public enum All
    {
        MinmaxFormatExt = ((int)0X802f),
        Dot2AddAti = ((int)0X896c),
        Rgb16fArb = ((int)0X881b),
        PointSpriteArb = ((int)0X8861),
        LineResetToken = ((int)0X0707),
        UnsignedByte233Reversed = ((int)0X8362),
        Texture2DStackBindingMesax = ((int)0X875e),
        DualTextureSelectSgis = ((int)0X8124),
        VertexProgramPointSize = ((int)0X8642),
        Gl422RevAverageExt = ((int)0X80cf),
        Source2AlphaExt = ((int)0X858a),
        BlueBias = ((int)0X0d1b),
        PackSwapBytes = ((int)0X0d00),
        MaxActiveLightsSgix = ((int)0X8405),
        WeightArrayStrideArb = ((int)0X86aa),
        ClampToBorderArb = ((int)0X812d),
        VertexAttribArray14Nv = ((int)0X865e),
        ImageMagFilterHp = ((int)0X815c),
        ProgramFormatAsciiArb = ((int)0X8875),
        BufferMapped = ((int)0X88bc),
        PixelPackBufferArb = ((int)0X88eb),
        DualLuminanceAlpha4Sgis = ((int)0X811c),
        TableTooLargeExt = ((int)0X8031),
        UnsignedIntSampler2DArrayExt = ((int)0X8dd7),
        Gl4Bytes = ((int)0X1409),
        SecondaryColorArraySize = ((int)0X845a),
        DotProductConstEyeReflectCubeMapNv = ((int)0X86f3),
        TextureCompareMode = ((int)0X884c),
        V2f = ((int)0X2a20),
        DstColor = ((int)0X0306),
        Matrix2 = ((int)0X88c2),
        TextureCubeMapNegativeXExt = ((int)0X8516),
        FramezoomSgix = ((int)0X818b),
        FramebufferIncompleteLayerTargetsExt = ((int)0X8da8),
        VertexArrayRangeValidNv = ((int)0X851f),
        TrianglesAdjacencyExt = ((int)0X000c),
        UnpackRowLength = ((int)0X0cf2),
        ColorMatrixStackDepth = ((int)0X80b2),
        ObjectActiveAttributesArb = ((int)0X8b89),
        BlendEquation = ((int)0X8009),
        LuminanceAlpha32iExt = ((int)0X8d87),
        Operand1Alpha = ((int)0X8599),
        TextureBufferExt = ((int)0X8c2a),
        ImageMinFilterHp = ((int)0X815d),
        Cw = ((int)0X0900),
        IntSamplerBufferExt = ((int)0X8dd0),
        TextureCoordArrayExt = ((int)0X8078),
        Notequal = ((int)0X0205),
        Three = ((int)3),
        Dot3RgbaArb = ((int)0X86af),
        LinearDetailColorSgis = ((int)0X8099),
        Sampler2D = ((int)0X8b5e),
        Matrix0Nv = ((int)0X8630),
        Decr = ((int)0X1e03),
        CompressedSluminanceAlpha = ((int)0X8c4b),
        OutputTextureCoord12Ext = ((int)0X87a9),
        YcbcrMesa = ((int)0X8757),
        MirrorClampToEdgeAti = ((int)0X8743),
        GreenBias = ((int)0X0d19),
        StencilTest = ((int)0X0b90),
        CurrentIndex = ((int)0X0b01),
        PackCmykHintExt = ((int)0X800e),
        VertexShaderLocalsExt = ((int)0X87d3),
        TextureLodBiasExt = ((int)0X8501),
        TextureLequalRSgix = ((int)0X819c),
        VertexWeightArrayStrideExt = ((int)0X850f),
        OcclusionTestResultHp = ((int)0X8166),
        VertexProgramPointSizeArb = ((int)0X8642),
        FuncReverseSubtractExt = ((int)0X800b),
        SecondaryColorArrayListStrideIbm = ((int)103087),
        ProgramBinding = ((int)0X8677),
        TextureLodBiasRSgix = ((int)0X8190),
        CompareRToTextureArb = ((int)0X884e),
        Repeat = ((int)0X2901),
        PixelTileWidthSgix = ((int)0X8140),
        ReadBuffer = ((int)0X0c02),
        PostColorMatrixBlueBias = ((int)0X80ba),
        FragmentLight7Sgix = ((int)0X8413),
        CoordReplaceNv = ((int)0X8862),
        ClipPlane2 = ((int)0X3002),
        PixelTexGenAlphaMsSgix = ((int)0X818a),
        TextureCoordArrayParallelPointersIntel = ((int)0X83f8),
        CullVertexIbm = ((int)103050),
        OffsetTextureRectangleScaleNv = ((int)0X864d),
        UnsignedShort565 = ((int)0X8363),
        CompressedSrgbS3tcDxt1Ext = ((int)0X8c4c),
        DotProductTexture3DNv = ((int)0X86ef),
        Dsdt8Nv = ((int)0X8709),
        FogCoordinateExt = ((int)0X8451),
        UnpackImageHeightExt = ((int)0X806e),
        EdgeFlagArrayStrideExt = ((int)0X808c),
        PolygonOffsetFactor = ((int)0X8038),
        VertexArrayBufferBindingArb = ((int)0X8896),
        DynamicDrawArb = ((int)0X88e8),
        SamplerCube = ((int)0X8b60),
        PnTrianglesNormalModeAti = ((int)0X87f3),
        ReadPixelDataRangePointerNv = ((int)0X887d),
        MaxProgramInstructions = ((int)0X88a1),
        StaticReadArb = ((int)0X88e5),
        MaxFragmentBindableUniformsExt = ((int)0X8de3),
        SampleMaskInvertExt = ((int)0X80ab),
        StreamDrawArb = ((int)0X88e0),
        ColorSumClampNv = ((int)0X854f),
        NumPassesAti = ((int)0X8970),
        TextureCompareFuncArb = ((int)0X884d),
        MatDiffuseBitPgi = ((int)0X00400000),
        VertexWeightingExt = ((int)0X8509),
        ProxyTexture1DStackMesax = ((int)0X875b),
        AllAttribBits = unchecked((int)0Xffffffff),
        PackImageHeightExt = ((int)0X806c),
        Gl1PassExt = ((int)0X80a1),
        Gl4Pass0Ext = ((int)0X80a4),
        TextureCubeMapNegativeYExt = ((int)0X8518),
        ProgramString = ((int)0X8628),
        StencilBackFail = ((int)0X8801),
        PrimaryColor = ((int)0X8577),
        Sampler1D = ((int)0X8b5d),
        ColorTableFormatSgi = ((int)0X80d8),
        Coeff = ((int)0X0a00),
        PostConvolutionAlphaScaleExt = ((int)0X801f),
        BlendDstRgb = ((int)0X80c8),
        VertexStream0Ati = ((int)0X876c),
        FloatVec4 = ((int)0X8b52),
        FloatVec3 = ((int)0X8b51),
        FloatVec2 = ((int)0X8b50),
        EmbossLightNv = ((int)0X855d),
        ImageTransform2DHp = ((int)0X8161),
        Texture4DSgis = ((int)0X8134),
        TexturePriorityExt = ((int)0X8066),
        Gl3DColorTexture = ((int)0X0603),
        TextureCubeMapPositiveY = ((int)0X8517),
        PnTrianglesNormalModeQuadraticAti = ((int)0X87f8),
        FogCoordinateArrayStrideExt = ((int)0X8455),
        UnpackSkipPixels = ((int)0X0cf4),
        OutputTextureCoord4Ext = ((int)0X87a1),
        ListBase = ((int)0X0b32),
        LocalConstantExt = ((int)0X87c3),
        CurrentPaletteMatrixArb = ((int)0X8843),
        MaxProgramMatrixStackDepthArb = ((int)0X862e),
        PostColorMatrixGreenBiasSgi = ((int)0X80b9),
        SpriteTranslationSgix = ((int)0X814b),
        TransformFeedbackBufferStartNv = ((int)0X8c84),
        NormalArrayCountExt = ((int)0X8080),
        CurrentRasterColor = ((int)0X0b04),
        HiloNv = ((int)0X86f4),
        Eval2DNv = ((int)0X86c0),
        Reg4Ati = ((int)0X8925),
        Gl4Pass0Sgis = ((int)0X80a4),
        InvariantValueExt = ((int)0X87ea),
        NormalArrayStrideExt = ((int)0X807f),
        MaxColorAttachmentsExt = ((int)0X8cdf),
        Clamp = ((int)0X2900),
        CurrentMatrixArb = ((int)0X8641),
        PixelUnpackBuffer = ((int)0X88ec),
        ScaleByTwoNv = ((int)0X853e),
        FloatMat3x2 = ((int)0X8b67),
        UnsignedShort88RevApple = ((int)0X85bb),
        MinmaxSink = ((int)0X8030),
        Intensity16iExt = ((int)0X8d8b),
        OpMulExt = ((int)0X8786),
        TransformFeedbackVaryingsNv = ((int)0X8c83),
        Rgba12Ext = ((int)0X805a),
        OrReverse = ((int)0X150b),
        SeparateSpecularColor = ((int)0X81fa),
        TextureHeight = ((int)0X1001),
        OrInverted = ((int)0X150d),
        ColorBufferBit = ((int)0X00004000),
        CompressedTextureFormatsArb = ((int)0X86a3),
        StreamDraw = ((int)0X88e0),
        SampleAlphaToOneExt = ((int)0X809f),
        TextureBindingCubeMapArb = ((int)0X8514),
        MaxTextureStackDepth = ((int)0X0d39),
        TexturePostSpecularHp = ((int)0X8168),
        MaxGeometryUniformComponentsExt = ((int)0X8ddf),
        DoubleExt = ((int)0X140a),
        Reg29Ati = ((int)0X893e),
        TextureRedTypeArb = ((int)0X8c10),
        MaxProgramLocalParameters = ((int)0X88b4),
        ColorIndex12Ext = ((int)0X80e6),
        RenderbufferExt = ((int)0X8d41),
        TextureMinLodSgis = ((int)0X813a),
        MaxVertexShaderInvariantsExt = ((int)0X87c7),
        ReplaceMiddleSun = ((int)0X0002),
        TransposeProjectionMatrixArb = ((int)0X84e4),
        NormalArrayBufferBinding = ((int)0X8897),
        TransposeTextureMatrix = ((int)0X84e5),
        FramebufferIncompleteFormatsExt = ((int)0X8cda),
        AsyncReadPixelsSgix = ((int)0X835e),
        TextureCompressedImageSize = ((int)0X86a0),
        PixelSubsample4444Sgix = ((int)0X85a2),
        PackSkipVolumesSgis = ((int)0X8130),
        TextureBinding2DArrayExt = ((int)0X8c1d),
        MaxElementsIndicesExt = ((int)0X80e9),
        DualAlpha12Sgis = ((int)0X8112),
        Gl3DColor = ((int)0X0602),
        Rgba4 = ((int)0X8056),
        TrackMatrixTransformNv = ((int)0X8649),
        PixelTileCacheSizeSgix = ((int)0X8145),
        Rgba2 = ((int)0X8055),
        PhongWin = ((int)0X80ea),
        MaxFogFuncPointsSgis = ((int)0X812c),
        PixelSubsample2424Sgix = ((int)0X85a3),
        Rgba8 = ((int)0X8058),
        CullVertexEyePositionExt = ((int)0X81ab),
        PixelTexGenAlphaLsSgix = ((int)0X8189),
        MaxTransformFeedbackSeparateAttribsNv = ((int)0X8c8b),
        UnsignedIntSamplerBufferExt = ((int)0X8dd8),
        ArrayStride = ((int)0X8624),
        Map2VertexAttrib114Nv = ((int)0X867b),
        FogCoordinateArrayPointerExt = ((int)0X8456),
        Red = ((int)0X1903),
        UnsignedInt2101010RevExt = ((int)0X8368),
        ReadFramebufferBindingExt = ((int)0X8ca6),
        TextureBlueTypeArb = ((int)0X8c12),
        Rgb32uiExt = ((int)0X8d71),
        UnsignedShort1555Rev = ((int)0X8366),
        StencilFail = ((int)0X0b94),
        ObjectActiveAttributeMaxLengthArb = ((int)0X8b8a),
        NumInstructionsPerPassAti = ((int)0X8971),
        FloatRgba16Nv = ((int)0X888a),
        ProxyTexture1D = ((int)0X8063),
        ProxyTexture2D = ((int)0X8064),
        ProxyTexture3D = ((int)0X8070),
        FloatRg16Nv = ((int)0X8886),
        TextureGenT = ((int)0X0c61),
        Equal = ((int)0X0202),
        MatSpecularBitPgi = ((int)0X04000000),
        PointSizeMinExt = ((int)0X8126),
        PointSpriteRModeNv = ((int)0X8863),
        TextureCoordArrayBufferBindingArb = ((int)0X889a),
        Renderer = ((int)0X1f01),
        MaxProgramExecInstructionsNv = ((int)0X88f4),
        Cnd0Ati = ((int)0X896b),
        VertexArrayRangeLengthApple = ((int)0X851e),
        TextureMaxClampSSgix = ((int)0X8369),
        ReferencePlaneSgix = ((int)0X817d),
        LocalConstantDatatypeExt = ((int)0X87ed),
        FragmentLight0Sgix = ((int)0X840c),
        MinmaxExt = ((int)0X802e),
        ProxyTextureCubeMapExt = ((int)0X851b),
        TextureWrapS = ((int)0X2802),
        DrawBuffer0 = ((int)0X8825),
        Spare0Nv = ((int)0X852e),
        DepthBias = ((int)0X0d1f),
        Dsdt8Mag8Intensity8Nv = ((int)0X870b),
        DualIntensity4Sgis = ((int)0X8118),
        TextureBinding1DArrayExt = ((int)0X8c1c),
        PassThroughToken = ((int)0X0700),
        NormalArrayTypeExt = ((int)0X807e),
        OutputVertexExt = ((int)0X879a),
        BufferAccessArb = ((int)0X88bb),
        ColorTableWidthSgi = ((int)0X80d9),
        ColorArrayListStrideIbm = ((int)103082),
        TextureAlphaSize = ((int)0X805f),
        Luminance32fArb = ((int)0X8818),
        MultisampleBit = ((int)0X20000000),
        ColorTableBiasSgi = ((int)0X80d7),
        IndexArrayBufferBinding = ((int)0X8899),
        LocalExt = ((int)0X87c4),
        StreamCopy = ((int)0X88e2),
        DrawFramebufferBindingExt = ((int)0X8caa),
        BumpEnvmapAti = ((int)0X877b),
        TextureIntensitySize = ((int)0X8061),
        Rgba4Ext = ((int)0X8056),
        SharedTexturePaletteExt = ((int)0X81fb),
        NativeGraphicsHandlePgi = ((int)0X1a202),
        BlueMaxClampIngr = ((int)0X8566),
        PostConvolutionGreenScaleExt = ((int)0X801d),
        Rgba2Ext = ((int)0X8055),
        MatrixIndexArrayTypeArb = ((int)0X8847),
        Ccw = ((int)0X0901),
        Combiner7Nv = ((int)0X8557),
        Combiner6Nv = ((int)0X8556),
        Combiner5Nv = ((int)0X8555),
        Combiner4Nv = ((int)0X8554),
        Combiner3Nv = ((int)0X8553),
        MatEmissionBitPgi = ((int)0X00800000),
        Combiner1Nv = ((int)0X8551),
        T2fIuiV3fExt = ((int)0X81b2),
        PassThroughNv = ((int)0X86e6),
        ActiveVaryingsNv = ((int)0X8c81),
        UnsignedIntSampler3DExt = ((int)0X8dd3),
        VertexProgramNv = ((int)0X8620),
        AddSignedArb = ((int)0X8574),
        PixelTileGridWidthSgix = ((int)0X8142),
        MaxTrackMatrixStackDepthNv = ((int)0X862e),
        ActiveTextureArb = ((int)0X84e0),
        PnTrianglesPointModeLinearAti = ((int)0X87f5),
        Luminance16Alpha8IccSgix = ((int)0X846b),
        SampleMaskValueSgis = ((int)0X80aa),
        TriangleListSun = ((int)0X81d7),
        CurrentMatrixStackDepthNv = ((int)0X8640),
        OneMinusConstantColor = ((int)0X8002),
        UnsignedInt8888Reversed = ((int)0X8367),
        MaxProgramNativeAluInstructionsArb = ((int)0X880e),
        FogCoordinateSourceExt = ((int)0X8450),
        MaxVertexTextureImageUnitsArb = ((int)0X8b4c),
        DrawBuffer3Arb = ((int)0X8828),
        PixelTileCacheIncrementSgix = ((int)0X813f),
        Modelview2Arb = ((int)0X8722),
        DepthStencilToBgraNv = ((int)0X886f),
        SelectionBufferSize = ((int)0X0df4),
        Previous = ((int)0X8578),
        UnsignedInt1010102 = ((int)0X8036),
        DepthWritemask = ((int)0X0b72),
        TextureLodBiasSSgix = ((int)0X818e),
        OutputTextureCoord29Ext = ((int)0X87ba),
        OutputTextureCoord18Ext = ((int)0X87af),
        Matrix29 = ((int)0X88dd),
        RedMinClampIngr = ((int)0X8560),
        Intensity4 = ((int)0X804a),
        ScaleByOneHalfNv = ((int)0X8540),
        VertexConsistentHintPgi = ((int)0X1a22b),
        PixelUnpackBufferBindingArb = ((int)0X88ef),
        PixelUnpackBufferArb = ((int)0X88ec),
        BufferSize = ((int)0X8764),
        FrontAndBack = ((int)0X0408),
        StencilBackPassDepthPassAti = ((int)0X8803),
        FogCoordArrayBufferBinding = ((int)0X889d),
        Matrix9 = ((int)0X88c9),
        ConstantExt = ((int)0X8576),
        TransposeProjectionMatrix = ((int)0X84e4),
        UnpackImageHeight = ((int)0X806e),
        VertexStream3Ati = ((int)0X876f),
        VertexStream2Ati = ((int)0X876e),
        VertexStream1Ati = ((int)0X876d),
        Sampler3DArb = ((int)0X8b5f),
        VertexStream7Ati = ((int)0X8773),
        VertexStream6Ati = ((int)0X8772),
        VertexStream5Ati = ((int)0X8771),
        VertexStream4Ati = ((int)0X8770),
        TextureGenS = ((int)0X0c60),
        MaxCubeMapTextureSizeArb = ((int)0X851c),
        BitmapToken = ((int)0X0704),
        UnpackImageDepthSgis = ((int)0X8133),
        PolygonSmooth = ((int)0X0b41),
        PixelMapIToB = ((int)0X0c74),
        OutputTextureCoord27Ext = ((int)0X87b8),
        OutputTextureCoord16Ext = ((int)0X87ad),
        TextureBorderColor = ((int)0X1004),
        MaxElementsVerticesExt = ((int)0X80e8),
        PixelCountNv = ((int)0X8866),
        AddSignedExt = ((int)0X8574),
        BgrIntegerExt = ((int)0X8d9a),
        Modelview9Arb = ((int)0X8729),
        SrgbExt = ((int)0X8c40),
        IndexBitPgi = ((int)0X00080000),
        TextureIndexSizeExt = ((int)0X80ed),
        Source1AlphaExt = ((int)0X8589),
        Subtract = ((int)0X84e7),
        ProxyPostImageTransformColorTableHp = ((int)0X8163),
        VertexArrayStorageHintApple = ((int)0X851f),
        QuadMeshSun = ((int)0X8614),
        Con4Ati = ((int)0X8945),
        FogCoord = ((int)0X8451),
        MaxClipmapVirtualDepthSgix = ((int)0X8178),
        Operand0Rgb = ((int)0X8590),
        ConvolutionFilterScale = ((int)0X8014),
        Left = ((int)0X0406),
        CompressedSrgbExt = ((int)0X8c48),
        DrawBuffer1 = ((int)0X8826),
        Intensity16fArb = ((int)0X881d),
        Ycrcb444Sgix = ((int)0X81bc),
        IntSampler2DExt = ((int)0X8dca),
        ClampToBorderSgis = ((int)0X812d),
        MaxOptimizedVertexShaderInvariantsExt = ((int)0X87cd),
        Texture3DExt = ((int)0X806f),
        FogBit = ((int)0X00000080),
        MaxProgramParameters = ((int)0X88a9),
        Gl4Pass1Ext = ((int)0X80a5),
        CurrentNormal = ((int)0X0b02),
        HiScaleNv = ((int)0X870e),
        PrimaryColorNv = ((int)0X852c),
        TextureSharedSizeExt = ((int)0X8c3f),
        Stereo = ((int)0X0c33),
        TextureMultiBufferHintSgix = ((int)0X812e),
        NegativeOneExt = ((int)0X87df),
        ScaleByFourNv = ((int)0X853f),
        Rgb8iExt = ((int)0X8d8f),
        PostColorMatrixAlphaScale = ((int)0X80b7),
        FragmentLightModelLocalViewerSgix = ((int)0X8408),
        DepthClampNv = ((int)0X864f),
        CurrentBit = ((int)0X00000001),
        GreenBitAti = ((int)0X00000002),
        Texture26 = ((int)0X84da),
        Texture27 = ((int)0X84db),
        Modelview19Arb = ((int)0X8733),
        Texture25 = ((int)0X84d9),
        Map1Vertex4 = ((int)0X0d98),
        Texture23 = ((int)0X84d7),
        Texture20 = ((int)0X84d4),
        Texture21 = ((int)0X84d5),
        TypeRgbaFloatAti = ((int)0X8820),
        Source1RgbArb = ((int)0X8581),
        Matrix24 = ((int)0X88d8),
        Map1TextureCoord2 = ((int)0X0d94),
        Map1TextureCoord3 = ((int)0X0d95),
        MinmaxSinkExt = ((int)0X8030),
        Map1TextureCoord4 = ((int)0X0d96),
        PointFadeThresholdSizeSgis = ((int)0X8128),
        DotProductAffineDepthReplaceNv = ((int)0X885d),
        EvalVertexAttrib13Nv = ((int)0X86d3),
        SampleCoverageInvert = ((int)0X80ab),
        FragmentLight1Sgix = ((int)0X840d),
        PointSpriteCoordOrigin = ((int)0X8ca0),
        MaxProgramAttribs = ((int)0X88ad),
        DependentArTexture2DNv = ((int)0X86e9),
        Texture30 = ((int)0X84de),
        Texture31 = ((int)0X84df),
        FeedbackBufferPointer = ((int)0X0df0),
        R11fG11fB10fExt = ((int)0X8c3a),
        ConstantAlpha = ((int)0X8003),
        MatrixIndexArrayArb = ((int)0X8844),
        Source2AlphaArb = ((int)0X858a),
        SampleAlphaToOneArb = ((int)0X809f),
        ShadeModel = ((int)0X0b54),
        NormalMapNv = ((int)0X8511),
        Texture8Arb = ((int)0X84c8),
        MaterialSideHintPgi = ((int)0X1a22c),
        DtScaleNv = ((int)0X8711),
        VertexAttribArray0Nv = ((int)0X8650),
        NormalMap = ((int)0X8511),
        YExt = ((int)0X87d6),
        R1uiC4ubV3fSun = ((int)0X85c5),
        FogSpecularTextureWin = ((int)0X80ec),
        ColorArrayStride = ((int)0X8083),
        FragmentColorMaterialFaceSgix = ((int)0X8402),
        MvpMatrixExt = ((int)0X87e3),
        TextureCubeMapNegativeZ = ((int)0X851a),
        IntVec4 = ((int)0X8b55),
        VertexPreclipSgix = ((int)0X83ee),
        NormalizedRangeExt = ((int)0X87e0),
        QuadIntensity8Sgis = ((int)0X8123),
        DepthStencilExt = ((int)0X84f9),
        VertexShaderOptimizedExt = ((int)0X87d4),
        Point = ((int)0X1b00),
        ProgramNativeAddressRegisters = ((int)0X88b2),
        ProgramPointSizeExt = ((int)0X8642),
        PixelTexGenQCeilingSgix = ((int)0X8184),
        Multisample3Dfx = ((int)0X86b2),
        CompareRToTexture = ((int)0X884e),
        WrapBorderSun = ((int)0X81d4),
        BlendSrcRgbExt = ((int)0X80c9),
        UnsignedInt248Ext = ((int)0X84fa),
        Texture16 = ((int)0X84d0),
        TextureClipmapFrameSgix = ((int)0X8172),
        Compile = ((int)0X1300),
        Texture15 = ((int)0X84cf),
        Texture12 = ((int)0X84cc),
        UnsignedShort565RevExt = ((int)0X8364),
        Texture10 = ((int)0X84ca),
        Texture11 = ((int)0X84cb),
        Texture2D = ((int)0X0de1),
        Operand2RgbArb = ((int)0X8592),
        MaxProgramTexelOffsetNv = ((int)0X8905),
        ReadOnlyArb = ((int)0X88b8),
        Texture18 = ((int)0X84d2),
        Texture19 = ((int)0X84d3),
        PixelTexGenAlphaNoReplaceSgix = ((int)0X8188),
        TextureMatrix = ((int)0X0ba8),
        NormalArrayBufferBindingArb = ((int)0X8897),
        GreenMaxClampIngr = ((int)0X8565),
        FogCoordinateArrayExt = ((int)0X8457),
        Matrix27 = ((int)0X88db),
        DudvAti = ((int)0X8779),
        SamplerCubeShadowExt = ((int)0X8dc5),
        TimeElapsedExt = ((int)0X88bf),
        Luminance16 = ((int)0X8042),
        MaxCombinedTextureImageUnitsArb = ((int)0X8b4d),
        CompressedSignedLuminanceLatc1Ext = ((int)0X8c71),
        TextureResidentExt = ((int)0X8067),
        FragmentProgram = ((int)0X8804),
        StencilBackPassDepthFailAti = ((int)0X8802),
        ColorAttachment4Ext = ((int)0X8ce4),
        FramebufferIncompleteLayerCountExt = ((int)0X8da9),
        NumCompressedTextureFormatsArb = ((int)0X86a2),
        DynamicDraw = ((int)0X88e8),
        ProgramErrorStringArb = ((int)0X8874),
        PixelTexGenSgix = ((int)0X8139),
        Texture3D = ((int)0X806f),
        SignedLuminance8Nv = ((int)0X8702),
        SluminanceAlpha = ((int)0X8c44),
        UnsignedByte233Rev = ((int)0X8362),
        DetailTexture2DBindingSgis = ((int)0X8096),
        PixelPackBufferBinding = ((int)0X88ed),
        DrawBuffer2 = ((int)0X8827),
        AllowDrawFrgHintPgi = ((int)0X1a210),
        DistanceAttenuationExt = ((int)0X8129),
        TangentArrayPointerExt = ((int)0X8442),
        Map2VertexAttrib104Nv = ((int)0X867a),
        Matrix20 = ((int)0X88d4),
        Luminance8Alpha8 = ((int)0X8045),
        PointSizeMinSgis = ((int)0X8126),
        IuiV2fExt = ((int)0X81ad),
        StaticRead = ((int)0X88e5),
        TextureMaxAnisotropyExt = ((int)0X84fe),
        PostConvolutionAlphaBiasExt = ((int)0X8023),
        TextureEnvColor = ((int)0X2201),
        PolygonOffsetUnits = ((int)0X2a00),
        FramebufferAttachmentTextureCubeMapFaceExt = ((int)0X8cd3),
        AllCompletedNv = ((int)0X84f2),
        ObjectLinear = ((int)0X2401),
        DrawBuffer2Arb = ((int)0X8827),
        Luminance8 = ((int)0X8040),
        Texture1DStackBindingMesax = ((int)0X875d),
        VertexShaderInstructionsExt = ((int)0X87cf),
        SignedRgba8Nv = ((int)0X86fc),
        HalfFloatArb = ((int)0X140b),
        TextureCompareFailValueArb = ((int)0X80bf),
        Texture10Arb = ((int)0X84ca),
        FogCoordArrayType = ((int)0X8454),
        DualLuminance16Sgis = ((int)0X8117),
        XExt = ((int)0X87d5),
        ArrayBufferBindingArb = ((int)0X8894),
        ZExt = ((int)0X87d7),
        True = ((int)1),
        Matrix21 = ((int)0X88d5),
        NormalMapArb = ((int)0X8511),
        Minmax = ((int)0X802e),
        ConstEyeNv = ((int)0X86e5),
        BlendEquationRgb = ((int)0X8009),
        StencilIndex = ((int)0X1901),
        WExt = ((int)0X87d8),
        Texture9Arb = ((int)0X84c9),
        TextureEnv = ((int)0X2300),
        ProgramLength = ((int)0X8627),
        PostConvolutionRedScaleExt = ((int)0X801c),
        Texture1D = ((int)0X0de0),
        Hilo8Nv = ((int)0X885e),
        RenderbufferGreenSizeExt = ((int)0X8d51),
        ElementArrayBuffer = ((int)0X8893),
        ProgramAluInstructionsArb = ((int)0X8805),
        Modelview3Arb = ((int)0X8723),
        CurrentRasterTextureCoords = ((int)0X0b06),
        OutputTextureCoord30Ext = ((int)0X87bb),
        AlphaMaxClampIngr = ((int)0X8567),
        HistogramAlphaSize = ((int)0X802b),
        WeightArrayArb = ((int)0X86ad),
        Light5 = ((int)0X4005),
        CompressedSignedRedRgtc1Ext = ((int)0X8dbc),
        AliasedPointSizeRange = ((int)0X846d),
        TextureCubeMapPositiveXExt = ((int)0X8515),
        Constant = ((int)0X8576),
        ActiveAttributeMaxLength = ((int)0X8b8a),
        Rgb16Ext = ((int)0X8054),
        Rgb10Ext = ((int)0X8052),
        HalfBitAti = ((int)0X00000008),
        Rgb12Ext = ((int)0X8053),
        TextureDepthTypeArb = ((int)0X8c16),
        SignedIdentityNv = ((int)0X853c),
        SecondaryInterpolatorAti = ((int)0X896d),
        MaxVertexAttribsArb = ((int)0X8869),
        BlendSrc = ((int)0X0be1),
        ProgramObjectArb = ((int)0X8b40),
        TextureApplicationModeExt = ((int)0X834f),
        RgbIccSgix = ((int)0X8460),
        DetailTextureModeSgis = ((int)0X809b),
        AlphaScale = ((int)0X0d1c),
        TextureCompressionHintArb = ((int)0X84ef),
        Src2Alpha = ((int)0X858a),
        IndexArrayStride = ((int)0X8086),
        TransformBit = ((int)0X00001000),
        SwizzleStrqDqAti = ((int)0X897b),
        Dot3Rgb = ((int)0X86ae),
        RgbaFloatModeArb = ((int)0X8820),
        ScalarExt = ((int)0X87be),
        FogCoordinateArrayTypeExt = ((int)0X8454),
        VertexAttribArrayBufferBinding = ((int)0X889f),
        FloatR32Nv = ((int)0X8885),
        FogDensity = ((int)0X0b62),
        UnpackSkipRows = ((int)0X0cf3),
        CurrentWeightArb = ((int)0X86a8),
        FloatMat2Arb = ((int)0X8b5a),
        ConstantAttenuation = ((int)0X1207),
        VertexArrayExt = ((int)0X8074),
        GenerateMipmapSgis = ((int)0X8191),
        R3G3B2 = ((int)0X2a10),
        Bitmap = ((int)0X1a00),
        Gl2Pass0Ext = ((int)0X80a2),
        AddAti = ((int)0X8963),
        ProgramAttribs = ((int)0X88ac),
        IndexArrayListIbm = ((int)103073),
        Texture7Arb = ((int)0X84c7),
        FragmentLight2Sgix = ((int)0X840e),
        Modelview12Arb = ((int)0X872c),
        MaxColorMatrixStackDepth = ((int)0X80b3),
        ArrayBufferBinding = ((int)0X8894),
        Texture30Arb = ((int)0X84de),
        Texture31Arb = ((int)0X84df),
        IntSampler1DExt = ((int)0X8dc9),
        ListIndex = ((int)0X0b33),
        UnsignedByte233RevExt = ((int)0X8362),
        DynamicAti = ((int)0X8761),
        DepthTextureModeArb = ((int)0X884b),
        VertexProgramTwoSide = ((int)0X8643),
        PointDistanceAttenuationArb = ((int)0X8129),
        StencilClearValue = ((int)0X0b91),
        Texture3DBindingExt = ((int)0X806a),
        LuminanceAlphaFloat32Ati = ((int)0X8819),
        VertexShaderBindingExt = ((int)0X8781),
        TableTooLarge = ((int)0X8031),
        Emission = ((int)0X1600),
        PostColorMatrixColorTable = ((int)0X80d2),
        TextureMagSizeNv = ((int)0X871f),
        Luminance12Alpha4 = ((int)0X8046),
        VertexArrayRangeApple = ((int)0X851d),
        Never = ((int)0X0200),
        Order = ((int)0X0a01),
        PixelMapSToS = ((int)0X0c71),
        Bgra = ((int)0X80e1),
        MatrixIndexArraySizeArb = ((int)0X8846),
        DrawBuffer3 = ((int)0X8828),
        ColorArrayStrideExt = ((int)0X8083),
        ColorAttachment9Ext = ((int)0X8ce9),
        FloatRgb16Nv = ((int)0X8888),
        StencilBackFailAti = ((int)0X8801),
        Matrix30 = ((int)0X88de),
        Select = ((int)0X1c02),
        MapStencil = ((int)0X0d11),
        VertexArraySize = ((int)0X807a),
        IndexShift = ((int)0X0d12),
        Texcoord4BitPgi = unchecked((int)0X80000000),
        SamplesPassedArb = ((int)0X8914),
        TextureMaxLodSgis = ((int)0X813b),
        PolygonOffsetExt = ((int)0X8037),
        MaxAsyncTexImageSgix = ((int)0X835f),
        PolygonOffsetFill = ((int)0X8037),
        ReclaimMemoryHintPgi = ((int)0X1a1fe),
        RgbaIntegerModeExt = ((int)0X8d9e),
        GeometryDeformationSgix = ((int)0X8194),
        Source3AlphaNv = ((int)0X858b),
        PixelMapRToR = ((int)0X0c76),
        VertexAttribArray5Nv = ((int)0X8655),
        CullFragmentNv = ((int)0X86e7),
        Render = ((int)0X1c00),
        Modelview8Arb = ((int)0X8728),
        ModulateAddAti = ((int)0X8744),
        MaxAsyncHistogramSgix = ((int)0X832d),
        Matrix31 = ((int)0X88df),
        TextureUnsignedRemapModeNv = ((int)0X888f),
        TextureMaxLod = ((int)0X813b),
        ProgramTexIndirectionsArb = ((int)0X8807),
        Source1AlphaArb = ((int)0X8589),
        VertexArrayRangePointerApple = ((int)0X8521),
        MirrorClampAti = ((int)0X8742),
        PixelMapIToR = ((int)0X0c72),
        NormalArrayType = ((int)0X807e),
        ColorTableWidth = ((int)0X80d9),
        MultisampleBitExt = ((int)0X20000000),
        DynamicCopy = ((int)0X88ea),
        Con8Ati = ((int)0X8949),
        ProxyPostConvolutionColorTable = ((int)0X80d4),
        ProgramFormat = ((int)0X8876),
        ProgramParameterNv = ((int)0X8644),
        FragmentColorMaterialSgix = ((int)0X8401),
        Modelview23Arb = ((int)0X8737),
        Matrix1Nv = ((int)0X8631),
        IntSamplerCubeExt = ((int)0X8dcc),
        AccumBlueBits = ((int)0X0d5a),
        BoolVec4Arb = ((int)0X8b59),
        MatColorIndexesBitPgi = ((int)0X01000000),
        Sampler2DShadow = ((int)0X8b62),
        Rgb10A2 = ((int)0X8059),
        StencilClearTagValueExt = ((int)0X88f3),
        FramebufferSrgbExt = ((int)0X8db9),
        BumpRotMatrixSizeAti = ((int)0X8776),
        Reg1Ati = ((int)0X8922),
        ColorAttachment15Ext = ((int)0X8cef),
        OffsetHiloTexture2DNv = ((int)0X8854),
        MaxTextureLodBiasExt = ((int)0X84fd),
        SelectionBufferPointer = ((int)0X0df3),
        LuminanceAlpha16fArb = ((int)0X881f),
        DeleteStatus = ((int)0X8b80),
        StencilIndex16Ext = ((int)0X8d49),
        Gl2Pass1Ext = ((int)0X80a3),
        MaxColorMatrixStackDepthSgi = ((int)0X80b3),
        EighthBitAti = ((int)0X00000020),
        BlendDstRgbExt = ((int)0X80c8),
        TextureClipmapOffsetSgix = ((int)0X8173),
        OpRecipSqrtExt = ((int)0X8795),
        DrawBuffer0Ati = ((int)0X8825),
        GeometryShaderExt = ((int)0X8dd9),
        TextureCubeMap = ((int)0X8513),
        CombinerMappingNv = ((int)0X8543),
        Map2Vertex4 = ((int)0X0db8),
        Rgb5Ext = ((int)0X8050),
        TextureCubeMapNegativeX = ((int)0X8516),
        VertexProgramTwoSideArb = ((int)0X8643),
        TextureClipmapCenterSgix = ((int)0X8171),
        OpNegateExt = ((int)0X8783),
        DsScaleNv = ((int)0X8710),
        Texture1DBindingExt = ((int)0X8068),
        LineSmooth = ((int)0X0b20),
        TextureBinding3D = ((int)0X806a),
        RenderbufferInternalFormatExt = ((int)0X8d44),
        HistogramWidthExt = ((int)0X8026),
        Texture6Arb = ((int)0X84c6),
        SignedLuminanceNv = ((int)0X8701),
        Con27Ati = ((int)0X895c),
        MovAti = ((int)0X8961),
        FragmentProgramNv = ((int)0X8870),
        TextureConstantDataSunx = ((int)0X81d6),
        DepthPassInstrumentSgix = ((int)0X8310),
        ShaderOperationNv = ((int)0X86df),
        DualLuminance12Sgis = ((int)0X8116),
        IncrWrapExt = ((int)0X8507),
        CombinerBiasNv = ((int)0X8549),
        Matrix19 = ((int)0X88d3),
        Modelview13Arb = ((int)0X872d),
        ProgramErrorStringNv = ((int)0X8874),
        PixelSubsample4242Sgix = ((int)0X85a4),
        VertexShaderInvariantsExt = ((int)0X87d1),
        DrawBuffer7 = ((int)0X882c),
        Vendor = ((int)0X1f00),
        CurrentQuery = ((int)0X8865),
        InstrumentBufferPointerSgix = ((int)0X8180),
        UnpackResampleOml = ((int)0X8985),
        ClientVertexArrayBit = ((int)0X00000002),
        FrontRight = ((int)0X0401),
        ProxyPostColorMatrixColorTableSgi = ((int)0X80d5),
        TextureWrapQSgis = ((int)0X8137),
        SecondaryColorArrayPointerExt = ((int)0X845d),
        MaxRectangleTextureSizeNv = ((int)0X84f8),
        TextureLodBiasTSgix = ((int)0X818f),
        PointFadeThresholdSizeArb = ((int)0X8128),
        QuarterBitAti = ((int)0X00000010),
        ElementArrayTypeApple = ((int)0X8769),
        CopyPixelToken = ((int)0X0706),
        GeometryProgramNv = ((int)0X8c26),
        TextureWidth = ((int)0X1000),
        TriangleFan = ((int)0X0006),
        OutputTextureCoord26Ext = ((int)0X87b7),
        VertexProgramBindingNv = ((int)0X864a),
        TextureCompareSgix = ((int)0X819a),
        SignedLuminanceAlphaNv = ((int)0X8703),
        VertexSourceAti = ((int)0X8774),
        Rgba16 = ((int)0X805b),
        Gl1PassSgis = ((int)0X80a1),
        NormalArrayListStrideIbm = ((int)103081),
        Zero = ((int)0),
        SecondaryColorArrayStrideExt = ((int)0X845c),
        Operand2AlphaExt = ((int)0X859a),
        OpExpBase2Ext = ((int)0X8791),
        ObjectDistanceToLineSgis = ((int)0X81f3),
        RenderbufferAlphaSizeExt = ((int)0X8d53),
        DrawBuffer4Arb = ((int)0X8829),
        RasterizerDiscardNv = ((int)0X8c89),
        TextureWrapR = ((int)0X8072),
        Light1 = ((int)0X4001),
        HiBiasNv = ((int)0X8714),
        TextureCoordArrayType = ((int)0X8089),
        Rgb9E5Ext = ((int)0X8c3d),
        EyeDistanceToLineSgis = ((int)0X81f2),
        DepthBufferFloatModeNv = ((int)0X8daf),
        SamplesArb = ((int)0X80a9),
        OutputFogExt = ((int)0X87bd),
        Polygon = ((int)0X0009),
        ProxyColorTableSgi = ((int)0X80d3),
        UnsignedShort4444RevExt = ((int)0X8365),
        Rgb32fArb = ((int)0X8815),
        VertexAttribArray3Nv = ((int)0X8653),
        FuncSubtract = ((int)0X800a),
        Intensity8Ext = ((int)0X804b),
        MirrorClampToBorderExt = ((int)0X8912),
        DepthComponent = ((int)0X1902),
        TextureRectangleNv = ((int)0X84f5),
        StencilTestTwoSideExt = ((int)0X8910),
        UnsignedShort565Rev = ((int)0X8364),
        PixelTileGridHeightSgix = ((int)0X8143),
        Operand3AlphaNv = ((int)0X859b),
        NormalArrayStride = ((int)0X807f),
        PostColorMatrixBlueBiasSgi = ((int)0X80ba),
        GlobalAlphaSun = ((int)0X81d9),
        ColorAttachment8Ext = ((int)0X8ce8),
        UnsignedInt248Nv = ((int)0X84fa),
        PostConvolutionGreenBias = ((int)0X8021),
        PerturbExt = ((int)0X85ae),
        T4fC4fN3fV4f = ((int)0X2a2d),
        Con14Ati = ((int)0X894f),
        QuadAlpha4Sgis = ((int)0X811e),
        Modelview29Arb = ((int)0X873d),
        Con11Ati = ((int)0X894c),
        Con10Ati = ((int)0X894b),
        Con13Ati = ((int)0X894e),
        Con12Ati = ((int)0X894d),
        VertexWeightArrayTypeExt = ((int)0X850e),
        DrawBuffer13Arb = ((int)0X8832),
        Con18Ati = ((int)0X8953),
        ColorTableGreenSize = ((int)0X80db),
        FogOffsetSgix = ((int)0X8198),
        InstrumentMeasurementsSgix = ((int)0X8181),
        Nand = ((int)0X150e),
        Matrix15 = ((int)0X88cf),
        ProgramErrorPositionNv = ((int)0X864b),
        T2fC4ubV3f = ((int)0X2a29),
        MaxProgramAttribComponentsNv = ((int)0X8908),
        TextureMaterialParameterExt = ((int)0X8352),
        ColorIndex8Ext = ((int)0X80e5),
        DepthComponent24Arb = ((int)0X81a6),
        Matrix4 = ((int)0X88c4),
        Texture27Arb = ((int)0X84db),
        PixelUnpackBufferExt = ((int)0X88ec),
        Texture22Arb = ((int)0X84d6),
        Texture23Arb = ((int)0X84d7),
        Convolution2D = ((int)0X8011),
        Map1Normal = ((int)0X0d92),
        Texture8 = ((int)0X84c8),
        MaxVertexShaderVariantsExt = ((int)0X87c6),
        MaxProgramNativeAddressRegisters = ((int)0X88b3),
        Keep = ((int)0X1e00),
        TextureBinding2D = ((int)0X8069),
        Matrix16 = ((int)0X88d0),
        FogCoordSrc = ((int)0X8450),
        GreenIntegerExt = ((int)0X8d95),
        DepthComponent24Sgix = ((int)0X81a6),
        DrawBuffer8Arb = ((int)0X882d),
        Gl4DColorTexture = ((int)0X0604),
        RasterPositionUnclippedIbm = ((int)0X19262),
        Alpha16uiExt = ((int)0X8d78),
        FloatRgb32Nv = ((int)0X8889),
        OffsetTexture2DScaleNv = ((int)0X86e2),
        PackSubsampleRateSgix = ((int)0X85a0),
        Modelview10Arb = ((int)0X872a),
        FragmentColorMaterialParameterSgix = ((int)0X8403),
        ShadowAmbientSgix = ((int)0X80bf),
        Texture9 = ((int)0X84c9),
        Modelview1StackDepthExt = ((int)0X8502),
        SpotExponent = ((int)0X1205),
        DrawBuffer12Arb = ((int)0X8831),
        AlphaMinSgix = ((int)0X8320),
        MultisampleExt = ((int)0X809d),
        IndexTestExt = ((int)0X81b5),
        Matrix17 = ((int)0X88d1),
        T2fIuiN3fV2fExt = ((int)0X81b3),
        BoolVec3 = ((int)0X8b58),
        PhongHintWin = ((int)0X80eb),
        Texcoord3BitPgi = ((int)0X40000000),
        MaxTrackMatricesNv = ((int)0X862f),
        Hilo16Nv = ((int)0X86f8),
        Float32UnsignedInt248RevNv = ((int)0X8dad),
        SampleMaskValueExt = ((int)0X80aa),
        LineWidthRange = ((int)0X0b22),
        MaxVertexArrayRangeElementNv = ((int)0X8520),
        MaxProgramParameterBufferSizeNv = ((int)0X8da1),
        TextureRedSizeExt = ((int)0X805c),
        CompressedSrgb = ((int)0X8c48),
        ColorArrayType = ((int)0X8082),
        R1uiC3fV3fSun = ((int)0X85c6),
        AllowDrawMemHintPgi = ((int)0X1a211),
        CubicExt = ((int)0X8334),
        ConvolutionFormat = ((int)0X8017),
        StencilRef = ((int)0X0b97),
        TextureCubeMapExt = ((int)0X8513),
        Matrix10 = ((int)0X88ca),
        Light3 = ((int)0X4003),
        RedMaxClampIngr = ((int)0X8564),
        TextureCoordArrayBufferBinding = ((int)0X889a),
        ImageCubicWeightHp = ((int)0X815e),
        Texture4DsizeSgis = ((int)0X8136),
        BufferMappedArb = ((int)0X88bc),
        Gl4XBitAti = ((int)0X00000002),
        QuadAlpha8Sgis = ((int)0X811f),
        PixelMapIToISize = ((int)0X0cb0),
        FloatMat4x3 = ((int)0X8b6a),
        Source3RgbNv = ((int)0X8583),
        FloatMat2x3 = ((int)0X8b65),
        Sampler2DRectShadowArb = ((int)0X8b64),
        OutputTextureCoord15Ext = ((int)0X87ac),
        TransposeTextureMatrixArb = ((int)0X84e5),
        Matrix1 = ((int)0X88c1),
        VertexAttribArray1Nv = ((int)0X8651),
        Convolution1D = ((int)0X8010),
        ClientAllAttribBits = unchecked((int)0Xffffffff),
        SwizzleStrqAti = ((int)0X897a),
        ConvolutionBorderMode = ((int)0X8013),
        IndexClearValue = ((int)0X0c20),
        PackAlignment = ((int)0X0d05),
        UnsignedIntSampler1DExt = ((int)0X8dd1),
        None = ((int)0),
        TextureWrapT = ((int)0X2803),
        NumInputInterpolatorComponentsAti = ((int)0X8973),
        FragmentProgramParameterBufferNv = ((int)0X8da4),
        FogFuncPointsSgis = ((int)0X812b),
        NearestMipmapLinear = ((int)0X2702),
        Con1Ati = ((int)0X8942),
        Vertex23BitPgi = ((int)0X00000004),
        UnsignedByte332 = ((int)0X8032),
        ExpandNegateNv = ((int)0X8539),
        Equiv = ((int)0X1509),
        Extensions = ((int)0X1f03),
        ObjectBufferSizeAti = ((int)0X8764),
        PrimitiveIdNv = ((int)0X8c7c),
        CombineAlphaExt = ((int)0X8572),
        FrontLeft = ((int)0X0400),
        UnsignedShort4444 = ((int)0X8033),
        TexturePriority = ((int)0X8066),
        CombinerMuxSumNv = ((int)0X8547),
        InterlaceReadIngr = ((int)0X8568),
        RgbScale = ((int)0X8573),
        MultisampleBitArb = ((int)0X20000000),
        CubicHp = ((int)0X815f),
        Nicest = ((int)0X1102),
        ObjectLinkStatusArb = ((int)0X8b82),
        OutputTextureCoord10Ext = ((int)0X87a7),
        Matrix14 = ((int)0X88ce),
        StencilIndex1Ext = ((int)0X8d46),
        MaxVertexShaderLocalsExt = ((int)0X87c9),
        StencilIndex4Ext = ((int)0X8d47),
        BufferMapPointer = ((int)0X88bd),
        LineBit = ((int)0X00000004),
        Sampler1DShadow = ((int)0X8b61),
        StreamReadArb = ((int)0X88e1),
        MaxProgramTemporaries = ((int)0X88a5),
        InvertedScreenWRend = ((int)0X8491),
        Matrix0 = ((int)0X88c0),
        CombineRgbArb = ((int)0X8571),
        FloatVec3Arb = ((int)0X8b51),
        MaxRationalEvalOrderNv = ((int)0X86d7),
        MaxConvolutionHeight = ((int)0X801b),
        LinearSharpenSgis = ((int)0X80ad),
        Gl4Pass3Ext = ((int)0X80a7),
        IntensityIccSgix = ((int)0X8464),
        OneMinusConstantAlphaExt = ((int)0X8004),
        TangentArrayExt = ((int)0X8439),
        TriangleMeshSun = ((int)0X8615),
        Gl3D = ((int)0X0601),
        Matrix25 = ((int)0X88d9),
        LuminanceIntegerExt = ((int)0X8d9c),
        MaxVertexShaderInstructionsExt = ((int)0X87c5),
        UnpackCmykHintExt = ((int)0X800f),
        Map2VertexAttrib134Nv = ((int)0X867d),
        UnsignedShort = ((int)0X1403),
        TextureBinding1D = ((int)0X8068),
        R1uiN3fV3fSun = ((int)0X85c7),
        FloatRgbNv = ((int)0X8882),
        DepthStencilToRgbaNv = ((int)0X886e),
        ObjectDistanceToPointSgis = ((int)0X81f1),
        IgnoreBorderHp = ((int)0X8150),
        Map2GridSegments = ((int)0X0dd3),
        SampleCoverageArb = ((int)0X80a0),
        TextureBaseLevelSgis = ((int)0X813c),
        LinkStatus = ((int)0X8b82),
        ObjectBufferUsageAti = ((int)0X8765),
        FogCoordinateArrayListIbm = ((int)103076),
        TransposeCurrentMatrixArb = ((int)0X88b7),
        Source0AlphaExt = ((int)0X8588),
        OffsetProjectiveTextureRectangleScaleNv = ((int)0X8853),
        QuadIntensity4Sgis = ((int)0X8122),
        SrgbAlphaExt = ((int)0X8c42),
        TextureCompressedArb = ((int)0X86a1),
        PixelGroupColorSgis = ((int)0X8356),
        WritePixelDataRangeLengthNv = ((int)0X887a),
        ArrayObjectBufferAti = ((int)0X8766),
        Rgba12 = ((int)0X805a),
        ActiveVaryingMaxLengthNv = ((int)0X8c82),
        ObjectSubtypeArb = ((int)0X8b4f),
        Reg5Ati = ((int)0X8926),
        Intensity = ((int)0X8049),
        Texture3 = ((int)0X84c3),
        VertexWeightArrayPointerExt = ((int)0X8510),
        ProgramNativeAttribs = ((int)0X88ae),
        Con15Ati = ((int)0X8950),
        OutputTextureCoord7Ext = ((int)0X87a4),
        CurrentColor = ((int)0X0b00),
        ProxyPostColorMatrixColorTable = ((int)0X80d5),
        Alpha12Ext = ((int)0X803d),
        ProxyTextureCubeMapArb = ((int)0X851b),
        OffsetProjectiveTexture2DNv = ((int)0X8850),
        TextureBindingCubeMapExt = ((int)0X8514),
        Modelview22Arb = ((int)0X8736),
        TextureDepthSize = ((int)0X884a),
        ViewportBit = ((int)0X00000800),
        One = ((int)1),
        VertexAttribArray7Nv = ((int)0X8657),
        PostColorMatrixRedScale = ((int)0X80b4),
        VertexAttribArray10Nv = ((int)0X865a),
        DualLuminanceAlpha8Sgis = ((int)0X811d),
        SharpenTextureFuncPointsSgis = ((int)0X80b0),
        Texture0 = ((int)0X84c0),
        ColorAttachment7Ext = ((int)0X8ce7),
        FloatMat4Arb = ((int)0X8b5c),
        FloatMat3Arb = ((int)0X8b5b),
        EyeLinear = ((int)0X2400),
        CompressedRgbArb = ((int)0X84ed),
        ColorTableBlueSizeSgi = ((int)0X80dc),
        CurrentMatrixStackDepthArb = ((int)0X8640),
        Texture2Arb = ((int)0X84c2),
        PointFadeThresholdSizeExt = ((int)0X8128),
        CompressedRgb = ((int)0X84ed),
        MaxProgramMatricesArb = ((int)0X862f),
        CompressedSrgbAlpha = ((int)0X8c49),
        Texture = ((int)0X1702),
        FloatMat2x4 = ((int)0X8b66),
        Operand2Rgb = ((int)0X8592),
        Reg24Ati = ((int)0X8939),
        Reg25Ati = ((int)0X893a),
        Reg26Ati = ((int)0X893b),
        Reg27Ati = ((int)0X893c),
        Reg20Ati = ((int)0X8935),
        Reg21Ati = ((int)0X8936),
        Reg22Ati = ((int)0X8937),
        Reg23Ati = ((int)0X8938),
        BinormalArrayTypeExt = ((int)0X8440),
        TextureMinLod = ((int)0X813a),
        ClampVertexColorArb = ((int)0X891a),
        UnpackAlignment = ((int)0X0cf5),
        TextureIntensitySizeExt = ((int)0X8061),
        ColorArrayBufferBindingArb = ((int)0X8898),
        UnsignedShort88Apple = ((int)0X85ba),
        MaxGeometryBindableUniformsExt = ((int)0X8de4),
        TextureBorderValuesNv = ((int)0X871a),
        WriteOnlyArb = ((int)0X88b9),
        QuadStrip = ((int)0X0008),
        DepthComponent32Sgix = ((int)0X81a7),
        DstAlpha = ((int)0X0304),
        AttenuationExt = ((int)0X834d),
        ListBit = ((int)0X00020000),
        VertexIdNv = ((int)0X8c7b),
        TextureCubeMapPositiveZArb = ((int)0X8519),
        PixelMapIToRSize = ((int)0X0cb2),
        Modelview30Arb = ((int)0X873e),
        CombinerScaleNv = ((int)0X8548),
        LinesAdjacencyExt = ((int)0X000a),
        RescaleNormalExt = ((int)0X803a),
        MaxPnTrianglesTesselationLevelAti = ((int)0X87f1),
        Source2RgbArb = ((int)0X8582),
        ImageRotateOriginYHp = ((int)0X815b),
        IuiN3fV3fExt = ((int)0X81b0),
        FuncAdd = ((int)0X8006),
        ClientPixelStoreBit = ((int)0X00000001),
        Always = ((int)0X0207),
        ConvolutionFilterBias = ((int)0X8015),
        PixelMapBToBSize = ((int)0X0cb8),
        PostTextureFilterBiasSgix = ((int)0X8179),
        SrcColor = ((int)0X0300),
        PostTextureFilterBiasRangeSgix = ((int)0X817b),
        IndexArrayTypeExt = ((int)0X8085),
        DepthTextureMode = ((int)0X884b),
        R1uiT2fC4fN3fV3fSun = ((int)0X85cb),
        DotProductReflectCubeMapNv = ((int)0X86f2),
        ReflectionMapExt = ((int)0X8512),
        TextureBufferFormatExt = ((int)0X8c2e),
        CalligraphicFragmentSgix = ((int)0X8183),
        MaxDeformationOrderSgix = ((int)0X8197),
        WriteOnly = ((int)0X88b9),
        StencilPassDepthFail = ((int)0X0b95),
        PolygonBit = ((int)0X00000008),
        VectorExt = ((int)0X87bf),
        CompileStatus = ((int)0X8b81),
        Texture17 = ((int)0X84d1),
        CmykExt = ((int)0X800c),
        Texture13 = ((int)0X84cd),
        PointSizeMinArb = ((int)0X8126),
        RedIntegerExt = ((int)0X8d94),
        DrawBuffer12Ati = ((int)0X8831),
        Map2VertexAttrib124Nv = ((int)0X867c),
        RgbFloat16Ati = ((int)0X881b),
        TextureCubeMapPositiveYArb = ((int)0X8517),
        Con7Ati = ((int)0X8948),
        Matrix3Nv = ((int)0X8633),
        OpMinExt = ((int)0X878b),
        Map1VertexAttrib104Nv = ((int)0X866a),
        ProjectionMatrix = ((int)0X0ba7),
        PixelTexGenQFloorSgix = ((int)0X8186),
        VertexPreclipHintSgix = ((int)0X83ef),
        Map1Color4 = ((int)0X0d90),
        Greater = ((int)0X0204),
        Sampler1DArrayExt = ((int)0X8dc0),
        UnsignedInt8888Ext = ((int)0X8035),
        VertexAttribArray12Nv = ((int)0X865c),
        StackUnderflow = ((int)0X0504),
        AllowDrawObjHintPgi = ((int)0X1a20e),
        ColorMaterialFace = ((int)0X0b55),
        PackSkipImagesExt = ((int)0X806b),
        MaxProgramCallDepthNv = ((int)0X88f5),
        TextureCoordArray = ((int)0X8078),
        DsdtMagVibNv = ((int)0X86f7),
        Nearest = ((int)0X2600),
        DualIntensity12Sgis = ((int)0X811a),
        Sampler2DArrayExt = ((int)0X8dc1),
        Operand2RgbExt = ((int)0X8592),
        CompBitAti = ((int)0X00000002),
        Alpha8Ext = ((int)0X803c),
        EvalVertexAttrib12Nv = ((int)0X86d2),
        Modelview1MatrixExt = ((int)0X8506),
        HistogramFormatExt = ((int)0X8027),
        CombinerInputNv = ((int)0X8542),
        ProxyTextureColorTableSgi = ((int)0X80bd),
        LinearClipmapLinearSgix = ((int)0X8170),
        Exp2 = ((int)0X0801),
        ProgramUnderNativeLimits = ((int)0X88b6),
        LinearAttenuation = ((int)0X1208),
        Modelview1Arb = ((int)0X850a),
        Histogram = ((int)0X8024),
        ShadingLanguageVersionArb = ((int)0X8b8c),
        DotProductTexture2DNv = ((int)0X86ee),
        TransformFeedbackBufferBindingNv = ((int)0X8c8f),
        Rgb10A2Ext = ((int)0X8059),
        MatAmbientAndDiffuseBitPgi = ((int)0X00200000),
        PointSizeMin = ((int)0X8126),
        SignedRgbUnsignedAlphaNv = ((int)0X870c),
        PrimitiveRestartNv = ((int)0X8558),
        OutputTextureCoord0Ext = ((int)0X879d),
        LuminanceAlpha16uiExt = ((int)0X8d7b),
        SignedHilo16Nv = ((int)0X86fa),
        Texture11Arb = ((int)0X84cb),
        ColorMatrix = ((int)0X80b1),
        CompressedAlphaArb = ((int)0X84e9),
        PostConvolutionColorTableSgi = ((int)0X80d1),
        TextureAlphaSizeExt = ((int)0X805f),
        Texture18Arb = ((int)0X84d2),
        CompressedSrgbAlphaS3tcDxt5Ext = ((int)0X8c4f),
        Sampler1DShadowArb = ((int)0X8b61),
        UnsignedIntSampler2DExt = ((int)0X8dd2),
        SampleAlphaToCoverageArb = ((int)0X809e),
        BiasBitAti = ((int)0X00000008),
        ColorIndex2Ext = ((int)0X80e3),
        AlwaysSoftHintPgi = ((int)0X1a20d),
        CurrentRasterSecondaryColor = ((int)0X845f),
        ColorMatrixStackDepthSgi = ((int)0X80b2),
        MapColor = ((int)0X0d10),
        ResampleAverageOml = ((int)0X8988),
        OutputTextureCoord6Ext = ((int)0X87a3),
        QueryResultAvailable = ((int)0X8867),
        StreamRead = ((int)0X88e1),
        WeightArrayPointerArb = ((int)0X86ac),
        BinormalArrayPointerExt = ((int)0X8443),
        TextureClipmapVirtualDepthSgix = ((int)0X8174),
        Source1RgbExt = ((int)0X8581),
        FloatClearColorValueNv = ((int)0X888d),
        VertexArrayRangeLengthNv = ((int)0X851e),
        OutputTextureCoord28Ext = ((int)0X87b9),
        VertexArrayStride = ((int)0X807c),
        CndAti = ((int)0X896a),
        SampleCoverageInvertArb = ((int)0X80ab),
        WritePixelDataRangePointerNv = ((int)0X887c),
        NormalMapExt = ((int)0X8511),
        CmykaExt = ((int)0X800d),
        MaxAsyncDrawPixelsSgix = ((int)0X8360),
        DepthBits = ((int)0X0d56),
        EmbossMapNv = ((int)0X855f),
        Reg8Ati = ((int)0X8929),
        TextureBlueSize = ((int)0X805e),
        ObjectActiveUniformsArb = ((int)0X8b86),
        FeedbackBufferType = ((int)0X0df2),
        MaxGeometryTextureImageUnitsExt = ((int)0X8c29),
        BiasByNegativeOneHalfNv = ((int)0X8541),
        T2fIuiV2fExt = ((int)0X81b1),
        Rgba32fArb = ((int)0X8814),
        PostConvolutionRedBiasExt = ((int)0X8020),
        OpIndexExt = ((int)0X8782),
        LinearDetailSgis = ((int)0X8097),
        SamplesSgis = ((int)0X80a9),
        MaxSpotExponentNv = ((int)0X8505),
        StencilValueMask = ((int)0X0b93),
        Fill = ((int)0X1b02),
        SliceAccumSun = ((int)0X85cc),
        Dot3Ati = ((int)0X8966),
        MaxProgramTotalOutputComponentsNv = ((int)0X8c28),
        TextureGenR = ((int)0X0c62),
        PixelMapSToSSize = ((int)0X0cb1),
        EdgeFlagArrayStride = ((int)0X808c),
        Rgb4S3tc = ((int)0X83a1),
        UniformBufferBindingExt = ((int)0X8def),
        ProgramResidentNv = ((int)0X8647),
        DynamicRead = ((int)0X88e9),
        FogEnd = ((int)0X0b64),
        IntVec2 = ((int)0X8b53),
        TextureCompressed = ((int)0X86a1),
        AccumRedBits = ((int)0X0d58),
        OutputColor1Ext = ((int)0X879c),
        VariantValueExt = ((int)0X87e4),
        PackInvertMesa = ((int)0X8758),
        PixelMinFilterExt = ((int)0X8332),
        Con5Ati = ((int)0X8946),
        CombineRgb = ((int)0X8571),
        Rgb5A1Ext = ((int)0X8057),
        VertexWeightArraySizeExt = ((int)0X850d),
        CurrentSecondaryColor = ((int)0X8459),
        ColorTableGreenSizeSgi = ((int)0X80db),
        LuminanceAlpha16iExt = ((int)0X8d8d),
        FragmentDepth = ((int)0X8452),
        MaxDrawBuffersArb = ((int)0X8824),
        ProxyTexture1DExt = ((int)0X8063),
        Texture2DBindingExt = ((int)0X8069),
        EvalVertexAttrib10Nv = ((int)0X86d0),
        PixelTileBestAlignmentSgix = ((int)0X813e),
        OutputTextureCoord5Ext = ((int)0X87a2),
        CompressedLuminance = ((int)0X84ea),
        PolygonStippleBit = ((int)0X00000010),
        TextureCoordArrayPointerExt = ((int)0X8092),
        Color = ((int)0X1800),
        DotProductTextureRectangleNv = ((int)0X864e),
        FogCoordinateArrayListStrideIbm = ((int)103086),
        Operand3RgbNv = ((int)0X8593),
        ScissorBit = ((int)0X00080000),
        ResampleDecimateSgix = ((int)0X8430),
        DepthComponent16Arb = ((int)0X81a5),
        Line = ((int)0X1b01),
        TransposeColorMatrix = ((int)0X84e6),
        MaxExt = ((int)0X8008),
        ProgramNativeParameters = ((int)0X88aa),
        FloatMat3 = ((int)0X8b5b),
        TextureCubeMapArb = ((int)0X8513),
        Convolution1DExt = ((int)0X8010),
        LogicOpMode = ((int)0X0bf0),
        Rgb2Ext = ((int)0X804e),
        MaxVertexShaderLocalConstantsExt = ((int)0X87c8),
        Max3DTextureSizeExt = ((int)0X8073),
        ShaderObjectArb = ((int)0X8b48),
        FloatR16Nv = ((int)0X8884),
        SmoothPointSizeGranularity = ((int)0X0b13),
        FragmentShader = ((int)0X8b30),
        CompileAndExecute = ((int)0X1301),
        VertexArrayPointer = ((int)0X808e),
        LuminanceAlpha8iExt = ((int)0X8d93),
        PostColorMatrixRedBiasSgi = ((int)0X80b8),
        DrawBuffer4 = ((int)0X8829),
        LightModelColorControl = ((int)0X81f8),
        Texture5Arb = ((int)0X84c5),
        MaxCombinedTextureImageUnits = ((int)0X8b4d),
        DependentRgbTexture3DNv = ((int)0X8859),
        ArrayElementLockFirstExt = ((int)0X81a8),
        CurrentQueryArb = ((int)0X8865),
        PnTrianglesPointModeCubicAti = ((int)0X87f6),
        Modelview20Arb = ((int)0X8734),
        PointSizeMax = ((int)0X8127),
        MaxDrawBuffersAti = ((int)0X8824),
        NormalArrayListIbm = ((int)103071),
        WeightArraySizeArb = ((int)0X86ab),
        MaxPaletteMatricesArb = ((int)0X8842),
        Rgba32iExt = ((int)0X8d82),
        FloatRgba32Nv = ((int)0X888b),
        OpMultiplyMatrixExt = ((int)0X8798),
        C4ubV2f = ((int)0X2a22),
        RenderMode = ((int)0X0c40),
        PointSmoothHint = ((int)0X0c51),
        Dot3RgbaExt = ((int)0X8741),
        ColorIndex1Ext = ((int)0X80e2),
        BlueBits = ((int)0X0d54),
        LightEnvModeSgix = ((int)0X8407),
        DualAlpha8Sgis = ((int)0X8111),
        MaxOptimizedVertexShaderLocalsExt = ((int)0X87ce),
        Spare0PlusSecondaryColorNv = ((int)0X8532),
        Dither = ((int)0X0bd0),
        DecrWrap = ((int)0X8508),
        ReplacementCodeArrayStrideSun = ((int)0X85c2),
        HistogramSink = ((int)0X802d),
        BlendDstAlphaExt = ((int)0X80ca),
        Map2VertexAttrib34Nv = ((int)0X8673),
        ProgramTargetNv = ((int)0X8646),
        Map1VertexAttrib04Nv = ((int)0X8660),
        Map1VertexAttrib34Nv = ((int)0X8663),
        Map1VertexAttrib24Nv = ((int)0X8662),
        Luminance4Ext = ((int)0X803f),
        MaxProgramNativeTexInstructionsArb = ((int)0X880f),
        Map1VertexAttrib74Nv = ((int)0X8667),
        FloatMat2 = ((int)0X8b5a),
        Map1VertexAttrib94Nv = ((int)0X8669),
        AccumBufferBit = ((int)0X00000200),
        Flat = ((int)0X1d00),
        Fastest = ((int)0X1101),
        BufferUsageArb = ((int)0X8765),
        CurrentVertexWeightExt = ((int)0X850b),
        Operand0RgbExt = ((int)0X8590),
        TextureBorder = ((int)0X1005),
        Srgb8 = ((int)0X8c41),
        ModelviewStackDepth = ((int)0X0ba3),
        TextureCubeMapPositiveXArb = ((int)0X8515),
        SampleCoverageValue = ((int)0X80aa),
        SubAti = ((int)0X8965),
        ColorMaterialParameter = ((int)0X0b56),
        VertexProgram = ((int)0X8620),
        OpFracExt = ((int)0X8789),
        PnTrianglesAti = ((int)0X87f0),
        Modelview25Arb = ((int)0X8739),
        MaxModelviewStackDepth = ((int)0X0d36),
        QueryCounterBits = ((int)0X8864),
        ReadPixelDataRangeLengthNv = ((int)0X887b),
        TransformFeedbackBufferNv = ((int)0X8c8e),
        ProxyTexture1DArrayExt = ((int)0X8c19),
        MatShininessBitPgi = ((int)0X02000000),
        TextureResident = ((int)0X8067),
        LuminanceFloat32Ati = ((int)0X8818),
        IntensityFloat16Ati = ((int)0X881d),
        HalfFloat = ((int)0X140b),
        DecrWrapExt = ((int)0X8508),
        OpDot3Ext = ((int)0X8784),
        ReplaceOldestSun = ((int)0X0003),
        Multisample = ((int)0X809d),
        ProxyHistogram = ((int)0X8025),
        ProgramNativeTemporaries = ((int)0X88a6),
        SamplePatternSgis = ((int)0X80ac),
        MaxProgramNativeInstructions = ((int)0X88a3),
        GeometryDeformationBitSgix = ((int)0X00000002),
        DualIntensity8Sgis = ((int)0X8119),
        Matrix23 = ((int)0X88d7),
        FragmentLightModelNormalInterpolationSgix = ((int)0X840b),
        TextureCubeMapNegativeY = ((int)0X8518),
        ClipPlane5 = ((int)0X3005),
        Rgb8uiExt = ((int)0X8d7d),
        TextureGreenSize = ((int)0X805d),
        FloatMat4 = ((int)0X8b5c),
        ProgramNativeTexInstructionsArb = ((int)0X8809),
        Reg17Ati = ((int)0X8932),
        SignedNegateNv = ((int)0X853d),
        SrcAlphaSaturate = ((int)0X0308),
        ColorAttachment5Ext = ((int)0X8ce5),
        OpMaxExt = ((int)0X878a),
        VertexAttribArray9Nv = ((int)0X8659),
        Con24Ati = ((int)0X8959),
        ProxyTexture3DExt = ((int)0X8070),
        Con21Ati = ((int)0X8956),
        Con20Ati = ((int)0X8955),
        MaxProjectionStackDepth = ((int)0X0d38),
        LineStipplePattern = ((int)0X0b25),
        Source2RgbExt = ((int)0X8582),
        MaxConvolutionWidthExt = ((int)0X801a),
        HistogramRedSizeExt = ((int)0X8028),
        MaxDrawBuffers = ((int)0X8824),
        Con29Ati = ((int)0X895e),
        ClipDistanceNv = ((int)0X8c7a),
        MultisampleFilterHintNv = ((int)0X8534),
        VertexArrayStrideExt = ((int)0X807c),
        DrawBuffer10Arb = ((int)0X882f),
        Decal = ((int)0X2101),
        EdgeFlagArrayCountExt = ((int)0X808d),
        ImageRotateOriginXHp = ((int)0X815a),
        MatrixIndexArrayPointerArb = ((int)0X8849),
        IndexTestRefExt = ((int)0X81b7),
        BgraExt = ((int)0X80e1),
        MaxProgramAluInstructionsArb = ((int)0X880b),
        DepthBoundsTestExt = ((int)0X8890),
        FogFuncSgis = ((int)0X812a),
        HintBit = ((int)0X00008000),
        CompressedIntensityArb = ((int)0X84ec),
        MaxProgramParameterBufferBindingsNv = ((int)0X8da0),
        ProxyTexture2DExt = ((int)0X8064),
        Src1Rgb = ((int)0X8581),
        PixelMagFilterExt = ((int)0X8331),
        IndexArrayType = ((int)0X8085),
        MatrixIndexArrayStrideArb = ((int)0X8848),
        SluminanceAlphaExt = ((int)0X8c44),
        ImageTranslateXHp = ((int)0X8157),
        BufferSerializedModifyApple = ((int)0X8a12),
        PolygonSmoothHint = ((int)0X0c53),
        HistogramGreenSize = ((int)0X8029),
        RenderbufferWidthExt = ((int)0X8d42),
        ResampleDecimateOml = ((int)0X8989),
        Modelview0MatrixExt = ((int)0X0ba6),
        DrawBuffer5 = ((int)0X882a),
        Map1VertexAttrib134Nv = ((int)0X866d),
        TextureGequalRSgix = ((int)0X819d),
        Modelview17Arb = ((int)0X8731),
        R1uiC4fN3fV3fSun = ((int)0X85c8),
        MinExt = ((int)0X8007),
        AddSigned = ((int)0X8574),
        AbgrExt = ((int)0X8000),
        MaxAttribStackDepth = ((int)0X0d35),
        FogCoordinateArrayBufferBindingArb = ((int)0X889d),
        DepthClearValue = ((int)0X0b73),
        RegisterCombinersNv = ((int)0X8522),
        MaxAsyncReadPixelsSgix = ((int)0X8361),
        SignedIntensity8Nv = ((int)0X8708),
        SluminanceExt = ((int)0X8c46),
        CurrentRasterPositionValid = ((int)0X0b08),
        DrawBuffer5Arb = ((int)0X882a),
        TextureShaderNv = ((int)0X86de),
        FragmentMaterialExt = ((int)0X8349),
        FeedbackBufferSize = ((int)0X0df1),
        TangentArrayTypeExt = ((int)0X843e),
        FragmentLight4Sgix = ((int)0X8410),
        PixelMapGToG = ((int)0X0c77),
        PixelMapIToG = ((int)0X0c73),
        Matrix11 = ((int)0X88cb),
        StencilBackPassDepthFail = ((int)0X8802),
        FragmentShaderArb = ((int)0X8b30),
        QueryResultArb = ((int)0X8866),
        PostConvolutionAlphaScale = ((int)0X801f),
        Modelview0Arb = ((int)0X1700),
        Operand2AlphaArb = ((int)0X859a),
        Vertex4BitPgi = ((int)0X00000008),
        ExpandNormalNv = ((int)0X8538),
        Operand0AlphaExt = ((int)0X8598),
        GenerateMipmapHintSgis = ((int)0X8192),
        Map2VertexAttrib04Nv = ((int)0X8670),
        PreviousArb = ((int)0X8578),
        Map2VertexAttrib24Nv = ((int)0X8672),
        ConstantColor = ((int)0X8001),
        Map2VertexAttrib44Nv = ((int)0X8674),
        Map2VertexAttrib74Nv = ((int)0X8677),
        Map2VertexAttrib64Nv = ((int)0X8676),
        Map2VertexAttrib94Nv = ((int)0X8679),
        Map2VertexAttrib84Nv = ((int)0X8678),
        OneMinusConstantAlpha = ((int)0X8004),
        Matrix12 = ((int)0X88cc),
        Matrix6 = ((int)0X88c6),
        ConstantColor1Nv = ((int)0X852b),
        DependentHiloTexture2DNv = ((int)0X8858),
        ColorAttachment14Ext = ((int)0X8cee),
        ConvolutionFormatExt = ((int)0X8017),
        ColorAttachment12Ext = ((int)0X8cec),
        ColorAttachment13Ext = ((int)0X8ced),
        ImplementationColorReadFormatOes = ((int)0X8b9b),
        ColorAttachment11Ext = ((int)0X8ceb),
        AlphaFloat16Ati = ((int)0X881c),
        Alpha8uiExt = ((int)0X8d7e),
        LineStripAdjacencyExt = ((int)0X000b),
        Fog = ((int)0X0b60),
        ClientActiveTextureArb = ((int)0X84e1),
        MaxVaryingFloats = ((int)0X8b4b),
        TextureCompareFailValue = ((int)0X80bf),
        TransformFeedbackBufferModeNv = ((int)0X8c7f),
        CoordReplaceArb = ((int)0X8862),
        Exp = ((int)0X0800),
        Reg6Ati = ((int)0X8927),
        EvalVertexAttrib14Nv = ((int)0X86d4),
        RgbScaleExt = ((int)0X8573),
        Matrix13 = ((int)0X88cd),
        OcclusionTestHp = ((int)0X8165),
        GenerateMipmapHint = ((int)0X8192),
        StaticCopyArb = ((int)0X88e6),
        DualLuminance4Sgis = ((int)0X8114),
        FloatRg32Nv = ((int)0X8887),
        IuiN3fV2fExt = ((int)0X81af),
        CullVertexExt = ((int)0X81aa),
        ScissorBox = ((int)0X0c10),
        MapTessellationNv = ((int)0X86c2),
        SamplesExt = ((int)0X80a9),
        OpClampExt = ((int)0X878e),
        Triangles = ((int)0X0004),
        Luminance16Ext = ((int)0X8042),
        PointSizeMaxExt = ((int)0X8127),
        OpMaddExt = ((int)0X8788),
        Rgb5 = ((int)0X8050),
        ObjectCompileStatusArb = ((int)0X8b81),
        StaticDrawArb = ((int)0X88e4),
        BufferMapPointerArb = ((int)0X88bd),
        TextureLightingModeHp = ((int)0X8167),
        TextureBaseLevel = ((int)0X813c),
        PrimitiveRestartIndexNv = ((int)0X8559),
        Reduce = ((int)0X8016),
        ShadingLanguageVersion = ((int)0X8b8c),
        IndexOffset = ((int)0X0d13),
        Modelview11Arb = ((int)0X872b),
        Reg7Ati = ((int)0X8928),
        LuminanceAlpha8uiExt = ((int)0X8d81),
        EyeRadialNv = ((int)0X855b),
        ColorTableScaleSgi = ((int)0X80d6),
        RescaleNormal = ((int)0X803a),
        Map2VertexAttrib154Nv = ((int)0X867f),
        DrawBuffer2Ati = ((int)0X8827),
        PreviousTextureInputNv = ((int)0X86e4),
        CurrentBinormalExt = ((int)0X843c),
        Modelview28Arb = ((int)0X873c),
        Rgb4 = ((int)0X804f),
        Reg3Ati = ((int)0X8924),
        TextureBlueSizeExt = ((int)0X805e),
        DotProductDiffuseCubeMapNv = ((int)0X86f1),
        CombinerComponentUsageNv = ((int)0X8544),
        PointSprite = ((int)0X8861),
        Map1GridDomain = ((int)0X0dd0),
        V3f = ((int)0X2a21),
        Alpha16 = ((int)0X803e),
        PostColorMatrixRedScaleSgi = ((int)0X80b4),
        DrawBuffer6 = ((int)0X882b),
        Gl2Bytes = ((int)0X1407),
        EvalTriangular2DNv = ((int)0X86c1),
        Smooth = ((int)0X1d01),
        BumpTexUnitsAti = ((int)0X8778),
        ArrayPointer = ((int)0X8645),
        ColorClearValue = ((int)0X0c22),
        Light7 = ((int)0X4007),
        Luminance6Alpha2 = ((int)0X8044),
        ElementArrayTypeAti = ((int)0X8769),
        PixelMapBToB = ((int)0X0c78),
        False = ((int)0),
        PrimaryColorArb = ((int)0X8577),
        EvalVertexAttrib11Nv = ((int)0X86d1),
        VertexStateProgramNv = ((int)0X8621),
        Shininess = ((int)0X1601),
        AuxBuffers = ((int)0X0c00),
        FloatMat4x2 = ((int)0X8b69),
        Rgb8Ext = ((int)0X8051),
        AlphaBias = ((int)0X0d1d),
        DrawBuffer6Arb = ((int)0X882b),
        FragmentLightingSgix = ((int)0X8400),
        Alpha32iExt = ((int)0X8d84),
        Depth24Stencil8Ext = ((int)0X88f0),
        Short = ((int)0X1402),
        BlueMinClampIngr = ((int)0X8562),
        Reg2Ati = ((int)0X8923),
        PreviousExt = ((int)0X8578),
        DrawPixelToken = ((int)0X0705),
        TriangleStrip = ((int)0X0005),
        ColorMatrixSgi = ((int)0X80b1),
        PixelMapAToA = ((int)0X0c79),
        Texture1 = ((int)0X84c1),
        ConvolutionHeightExt = ((int)0X8019),
        AlphaTest = ((int)0X0bc0),
        LightingBit = ((int)0X00000040),
        BgrExt = ((int)0X80e0),
        MaxProgramResultComponentsNv = ((int)0X8909),
        PixelMapIToA = ((int)0X0c75),
        ConvolutionBorderColorHp = ((int)0X8154),
        Dot3RgbArb = ((int)0X86ae),
        Rgba = ((int)0X1908),
        MaxFragmentProgramLocalParametersNv = ((int)0X8868),
        TextureAlphaTypeArb = ((int)0X8c13),
        MaxVertexVaryingComponentsExt = ((int)0X8dde),
        Map1VertexAttrib124Nv = ((int)0X866c),
        RgbIntegerExt = ((int)0X8d98),
        ClipPlane1 = ((int)0X3001),
        ImageTranslateYHp = ((int)0X8158),
        RedScale = ((int)0X0d14),
        ResampleReplicateOml = ((int)0X8986),
        TextureCoordArrayPointer = ((int)0X8092),
        Texture1Arb = ((int)0X84c1),
        ZoomX = ((int)0X0d16),
        ZoomY = ((int)0X0d17),
        Luminance12Alpha12 = ((int)0X8047),
        TextureCompareModeArb = ((int)0X884c),
        Combiner2Nv = ((int)0X8552),
        TextureMaterialFaceExt = ((int)0X8351),
        UnpackConstantDataSunx = ((int)0X81d5),
        PrimitivesGeneratedNv = ((int)0X8c87),
        MaxRectangleTextureSizeArb = ((int)0X84f8),
        CompressedRgbaS3tcDxt5Ext = ((int)0X83f3),
        FramebufferIncompleteDimensionsExt = ((int)0X8cd9),
        ObjectShaderSourceLengthArb = ((int)0X8b88),
        CompressedRgbaArb = ((int)0X84ee),
        DrawBuffer3Ati = ((int)0X8828),
        ReflectionMapNv = ((int)0X8512),
        UnsignedIntVec3Ext = ((int)0X8dc7),
        ProgramNativeTexIndirectionsArb = ((int)0X880a),
        Texture7 = ((int)0X84c7),
        ReflectionMap = ((int)0X8512),
        FragmentLight5Sgix = ((int)0X8411),
        Samples3Dfx = ((int)0X86b4),
        MaxTextureUnits = ((int)0X84e2),
        DrawBuffer8 = ((int)0X882d),
        AsyncTexImageSgix = ((int)0X835c),
        FragmentDepthExt = ((int)0X8452),
        NoError = ((int)0),
        TextureFloatComponentsNv = ((int)0X888c),
        PostColorMatrixRedBias = ((int)0X80b8),
        MagnitudeBiasNv = ((int)0X8718),
        IncrWrap = ((int)0X8507),
        BlueBitAti = ((int)0X00000004),
        OffsetTextureRectangleNv = ((int)0X864c),
        TextureComponents = ((int)0X1003),
        PointSizeMaxArb = ((int)0X8127),
        R1uiT2fV3fSun = ((int)0X85c9),
        EdgeFlagArrayExt = ((int)0X8079),
        NearestClipmapNearestSgix = ((int)0X844d),
        UnsignedShort565Ext = ((int)0X8363),
        PostConvolutionGreenScale = ((int)0X801d),
        ArraySize = ((int)0X8623),
        SecondaryColorArray = ((int)0X845e),
        Con31Ati = ((int)0X8960),
        Con30Ati = ((int)0X895f),
        CurrentAttribNv = ((int)0X8626),
        Modelview16Arb = ((int)0X8730),
        Clear = ((int)0X1500),
        Map1Vertex3 = ((int)0X0d97),
        TextureBindingBufferExt = ((int)0X8c2c),
        FogColor = ((int)0X0b66),
        MaxArrayTextureLayersExt = ((int)0X88ff),
        FramebufferAttachmentTexture3DZoffsetExt = ((int)0X8cd4),
        CompressedLuminanceAlphaArb = ((int)0X84eb),
        OffsetHiloTextureRectangleNv = ((int)0X8855),
        VertexShader = ((int)0X8b31),
        WeightArrayTypeArb = ((int)0X86a9),
        CompressedAlpha = ((int)0X84e9),
        DrawBuffer4Ati = ((int)0X8829),
        FogIndex = ((int)0X0b61),
        BackPrimaryColorNv = ((int)0X8c77),
        HistogramFormat = ((int)0X8027),
        FogDistanceModeNv = ((int)0X855a),
        MaxVertexUniformComponentsArb = ((int)0X8b4a),
        PackSkipRows = ((int)0X0d03),
        BlendSrcAlphaExt = ((int)0X80cb),
        Quads = ((int)0X0007),
        DrawFramebufferExt = ((int)0X8ca9),
        Luminance8Alpha8Ext = ((int)0X8045),
        StencilBackValueMask = ((int)0X8ca4),
        Source0Rgb = ((int)0X8580),
        ColorTableAlphaSize = ((int)0X80dd),
        SecondaryColorArrayBufferBindingArb = ((int)0X889c),
        TextureMaxClampRSgix = ((int)0X836b),
        OutputTextureCoord11Ext = ((int)0X87a8),
        VertexAttribArray13Nv = ((int)0X865d),
        LineStrip = ((int)0X0003),
        NormalArray = ((int)0X8075),
        Operand0AlphaArb = ((int)0X8598),
        PolygonStipple = ((int)0X0b42),
        PnTrianglesNormalModeLinearAti = ((int)0X87f7),
        ActiveStencilFaceExt = ((int)0X8911),
        SecondaryColorNv = ((int)0X852d),
        Rgba8Ext = ((int)0X8058),
        Alpha16fArb = ((int)0X881c),
        UnsignedInt = ((int)0X1405),
        StencilPassDepthPass = ((int)0X0b96),
        MaxCubeMapTextureSizeExt = ((int)0X851c),
        UnpackSkipVolumesSgis = ((int)0X8132),
        Map1VertexAttrib14Nv = ((int)0X8661),
        ConvolutionBorderColor = ((int)0X8154),
        Map1VertexAttrib54Nv = ((int)0X8665),
        Map1VertexAttrib44Nv = ((int)0X8664),
        IndexArrayListStrideIbm = ((int)103083),
        Map1VertexAttrib64Nv = ((int)0X8666),
        IndexArrayPointerExt = ((int)0X8091),
        Map1VertexAttrib84Nv = ((int)0X8668),
        PreserveAti = ((int)0X8762),
        Position = ((int)0X1203),
        ResampleReplicateSgix = ((int)0X842e),
        DrawBuffer9 = ((int)0X882e),
        MaxTextureImageUnitsNv = ((int)0X8872),
        DrawBuffer14Arb = ((int)0X8833),
        DrawBuffer15Ati = ((int)0X8834),
        Luminance16Alpha16Ext = ((int)0X8048),
        MaxTextureBufferSizeExt = ((int)0X8c2b),
        RgbaSignedComponentsExt = ((int)0X8c3c),
        SpotCutoff = ((int)0X1206),
        Filter4Sgis = ((int)0X8146),
        Dot3RgbExt = ((int)0X8740),
        ClipPlane3 = ((int)0X3003),
        MaxTextureCoords = ((int)0X8871),
        DrawBuffer13 = ((int)0X8832),
        Gl4Pass1Sgis = ((int)0X80a5),
        Less = ((int)0X0201),
        PointBit = ((int)0X00000002),
        RenderbufferStencilSizeExt = ((int)0X8d55),
        RgbaIntegerExt = ((int)0X8d99),
        SmoothPointSizeRange = ((int)0X0b12),
        Operand1RgbArb = ((int)0X8591),
        AccumGreenBits = ((int)0X0d59),
        GenerateMipmap = ((int)0X8191),
        InterpolateExt = ((int)0X8575),
        Luminance8iExt = ((int)0X8d92),
        Blend = ((int)0X0be2),
        Operand1AlphaArb = ((int)0X8599),
        CombineAlpha = ((int)0X8572),
        Luminance8Ext = ((int)0X8040),
        IndexWritemask = ((int)0X0c21),
        BlendColor = ((int)0X8005),
        SecondaryColorArrayBufferBinding = ((int)0X889c),
        Texture14 = ((int)0X84ce),
        PointSizeMaxSgis = ((int)0X8127),
        MaxBindableUniformSizeExt = ((int)0X8ded),
        MaxOptimizedVertexShaderVariantsExt = ((int)0X87cb),
        BoolVec2Arb = ((int)0X8b57),
        AlphaMaxSgix = ((int)0X8321),
        Texcoord1BitPgi = ((int)0X10000000),
        Map1TangentExt = ((int)0X8444),
        Reg16Ati = ((int)0X8931),
        DrawBuffer11 = ((int)0X8830),
        PixelMapGToGSize = ((int)0X0cb7),
        SecondaryColorArrayPointer = ((int)0X845d),
        StencilBackRef = ((int)0X8ca3),
        SecondaryColorArrayStride = ((int)0X845c),
        Reg19Ati = ((int)0X8934),
        UnsignedIntVec2Ext = ((int)0X8dc6),
        LogicOp = ((int)0X0bf1),
        Alpha32uiExt = ((int)0X8d72),
        UnsignedInvertNv = ((int)0X8537),
        MaxProgramGenericAttribsNv = ((int)0X8da5),
        ElementArrayBufferArb = ((int)0X8893),
        FragmentShaderDerivativeHint = ((int)0X8b8b),
        CurrentRasterDistance = ((int)0X0b09),
        SecondaryColorArraySizeExt = ((int)0X845a),
        Luminance32iExt = ((int)0X8d86),
        NormalBitPgi = ((int)0X08000000),
        IntVec4Arb = ((int)0X8b55),
        IdentityNv = ((int)0X862a),
        IndexArrayPointer = ((int)0X8091),
        Sampler3D = ((int)0X8b5f),
        AccumClearValue = ((int)0X0b80),
        Ycrcb422Sgix = ((int)0X81bb),
        Int = ((int)0X1404),
        TransformHintApple = ((int)0X85b1),
        Gl2Pass0Sgis = ((int)0X80a2),
        OutputTextureCoord23Ext = ((int)0X87b4),
        FramebufferBindingExt = ((int)0X8ca6),
        SignedIntensityNv = ((int)0X8707),
        IntSampler2DArrayExt = ((int)0X8dcf),
        EdgeflagBitPgi = ((int)0X00040000),
        SignedRgb8UnsignedAlpha8Nv = ((int)0X870d),
        ClampFragmentColorArb = ((int)0X891b),
        Luminance16iExt = ((int)0X8d8c),
        SampleAlphaToMaskSgis = ((int)0X809e),
        SpriteSgix = ((int)0X8148),
        Bool = ((int)0X8b56),
        Sampler2DShadowArb = ((int)0X8b62),
        Map2Index = ((int)0X0db1),
        TriangleStripAdjacencyExt = ((int)0X000d),
        QueryCounterBitsArb = ((int)0X8864),
        HistogramWidth = ((int)0X8026),
        TextureLightExt = ((int)0X8350),
        OutputTextureCoord14Ext = ((int)0X87ab),
        Texture5 = ((int)0X84c5),
        LinearClipmapNearestSgix = ((int)0X844f),
        CompressedRgba = ((int)0X84ee),
        MirrorClampToEdgeExt = ((int)0X8743),
        MaxElementsVertices = ((int)0X80e8),
        TransformFeedbackAttribsNv = ((int)0X8c7e),
        UnsignedShort1555Reversed = ((int)0X8366),
        FragmentLightModelAmbientSgix = ((int)0X840a),
        FixedOnlyArb = ((int)0X891d),
        ElementArrayAti = ((int)0X8768),
        C4fN3fV3f = ((int)0X2a26),
        ColorArray = ((int)0X8076),
        Sluminance8 = ((int)0X8c47),
        MadAti = ((int)0X8968),
        Intensity12 = ((int)0X804c),
        MirroredRepeat = ((int)0X8370),
        OutputTextureCoord1Ext = ((int)0X879e),
        FragmentLight6Sgix = ((int)0X8412),
        ObjectLineSgis = ((int)0X81f7),
        ReplacementCodeArraySun = ((int)0X85c0),
        MirroredRepeatArb = ((int)0X8370),
        VertexArrayRangeWithoutFlushNv = ((int)0X8533),
        Con2Ati = ((int)0X8943),
        AverageHp = ((int)0X8160),
        ImageRotateAngleHp = ((int)0X8159),
        TextureCompareFunc = ((int)0X884d),
        ElementArrayApple = ((int)0X8768),
        PackResampleOml = ((int)0X8984),
        DrawBuffer8Ati = ((int)0X882d),
        PolygonMode = ((int)0X0b40),
        PixelTexGenModeSgix = ((int)0X832b),
        CompressedRgbaFxt13Dfx = ((int)0X86b1),
        OutputTextureCoord13Ext = ((int)0X87aa),
        StencilWritemask = ((int)0X0b98),
        Samples = ((int)0X80a9),
        T2fC3fV3f = ((int)0X2a2a),
        LinearSharpenColorSgis = ((int)0X80af),
        Doublebuffer = ((int)0X0c32),
        InfoLogLength = ((int)0X8b84),
        BlendEquationRgbExt = ((int)0X8009),
        R1uiT2fN3fV3fSun = ((int)0X85ca),
        Luminance32uiExt = ((int)0X8d74),
        Feedback = ((int)0X1c01),
        Rgba8uiExt = ((int)0X8d7c),
        EvalVertexAttrib8Nv = ((int)0X86ce),
        ColorIndexes = ((int)0X1603),
        Gl4Pass2Ext = ((int)0X80a6),
        TextureLoSizeNv = ((int)0X871c),
        Texcoord2BitPgi = ((int)0X20000000),
        EvalVertexAttrib3Nv = ((int)0X86c9),
        EvalVertexAttrib0Nv = ((int)0X86c6),
        Combine = ((int)0X8570),
        QuadLuminance4Sgis = ((int)0X8120),
        ReplaceExt = ((int)0X8062),
        Load = ((int)0X0101),
        BlendDstAlpha = ((int)0X80ca),
        ColorSumArb = ((int)0X8458),
        SampleMaskInvertSgis = ((int)0X80ab),
        InvalidEnum = ((int)0X0500),
        ColorLogicOp = ((int)0X0bf2),
        BufferAccess = ((int)0X88bb),
        TextureGreenTypeArb = ((int)0X8c11),
        PostTextureFilterScaleSgix = ((int)0X817a),
        FogCoordArrayPointer = ((int)0X8456),
        Domain = ((int)0X0a02),
        VertexArrayBufferBinding = ((int)0X8896),
        PixelMapIToGSize = ((int)0X0cb3),
        MatAmbientBitPgi = ((int)0X00100000),
        Source0AlphaArb = ((int)0X8588),
        Add = ((int)0X0104),
        MaxProgramIfDepthNv = ((int)0X88f6),
        NativeGraphicsBeginHintPgi = ((int)0X1a203),
        Double = ((int)0X140a),
        PackSkipPixels = ((int)0X0d04),
        PrimaryColorExt = ((int)0X8577),
        BoolVec3Arb = ((int)0X8b58),
        Version = ((int)0X1f02),
        PostConvolutionBlueBias = ((int)0X8022),
        DetailTexture2DSgis = ((int)0X8095),
        FloatRgNv = ((int)0X8881),
        Matrix6Nv = ((int)0X8636),
        ColorTableBlueSize = ((int)0X80dc),
        CompareRefDepthToTextureExt = ((int)0X884e),
        SampleMaskSgis = ((int)0X80a0),
        ClampToEdgeSgis = ((int)0X812f),
        VertexProgramParameterBufferNv = ((int)0X8da2),
        VariableENv = ((int)0X8527),
        PackImageHeight = ((int)0X806c),
        VariableGNv = ((int)0X8529),
        ElementArrayPointerApple = ((int)0X876a),
        VariableANv = ((int)0X8523),
        VariableBNv = ((int)0X8524),
        ColorArrayParallelPointersIntel = ((int)0X83f7),
        DistanceAttenuationSgis = ((int)0X8129),
        Spare1Nv = ((int)0X852f),
        VertexArrayRangeNv = ((int)0X851d),
        TextureCoordArrayListIbm = ((int)103074),
        LineStippleRepeat = ((int)0X0b26),
        NegateBitAti = ((int)0X00000004),
        Or = ((int)0X1507),
        Convolution2DExt = ((int)0X8011),
        DtBiasNv = ((int)0X8717),
        ObjectTypeArb = ((int)0X8b4e),
        ProgramNativeAluInstructionsArb = ((int)0X8808),
        Modelview14Arb = ((int)0X872e),
        UnsignedShort5551 = ((int)0X8034),
        VertexShaderArb = ((int)0X8b31),
        RgbaMode = ((int)0X0c31),
        ColorArraySize = ((int)0X8081),
        FormatSubsample244244Oml = ((int)0X8983),
        ParallelArraysIntel = ((int)0X83f4),
        ModulateSubtractAti = ((int)0X8746),
        TextureCubeMapPositiveYExt = ((int)0X8517),
        Luminance6Alpha2Ext = ((int)0X8044),
        SignedRgb8Nv = ((int)0X86ff),
        ColorSum = ((int)0X8458),
        OpSubExt = ((int)0X8796),
        AllowDrawWinHintPgi = ((int)0X1a20f),
        RenderbufferSamplesExt = ((int)0X8cab),
        Operand1Rgb = ((int)0X8591),
        Reg14Ati = ((int)0X892f),
        Reg15Ati = ((int)0X8930),
        NumFragmentConstantsAti = ((int)0X896f),
        OpFloorExt = ((int)0X878f),
        Reg10Ati = ((int)0X892b),
        Reg11Ati = ((int)0X892c),
        Reg12Ati = ((int)0X892d),
        Reg13Ati = ((int)0X892e),
        ColorAttachment2Ext = ((int)0X8ce2),
        Modelview21Arb = ((int)0X8735),
        Reg18Ati = ((int)0X8933),
        ColorTableFormat = ((int)0X80d8),
        Separable2DExt = ((int)0X8012),
        TextureCoordArraySizeExt = ((int)0X8088),
        PostConvolutionColorTable = ((int)0X80d1),
        OutputTextureCoord2Ext = ((int)0X879f),
        BoolVec2 = ((int)0X8b57),
        FragmentNormalExt = ((int)0X834a),
        EdgeFlagArrayPointer = ((int)0X8093),
        HalfBiasNegateNv = ((int)0X853b),
        LightModelTwoSide = ((int)0X0b52),
        QueryResult = ((int)0X8866),
        UnsignedByte332Ext = ((int)0X8032),
        LineLoop = ((int)0X0002),
        DualAlpha4Sgis = ((int)0X8110),
        CullFace = ((int)0X0b44),
        DepthFunc = ((int)0X0b74),
        UnsignedShort1555RevExt = ((int)0X8366),
        ObjectInfoLogLengthArb = ((int)0X8b84),
        Texture2 = ((int)0X84c2),
        ForceBlueToOneNv = ((int)0X8860),
        Modelview0StackDepthExt = ((int)0X0ba3),
        Rgb16uiExt = ((int)0X8d77),
        TextureCoordArrayStrideExt = ((int)0X808a),
        BackRight = ((int)0X0403),
        IntSampler3DExt = ((int)0X8dcb),
        OffsetTextureBiasNv = ((int)0X86e3),
        MaxTextureImageUnitsArb = ((int)0X8872),
        ElementArrayBufferBinding = ((int)0X8895),
        OpCrossProductExt = ((int)0X8797),
        IrInstrument1Sgix = ((int)0X817f),
        StencilTagBitsExt = ((int)0X88f2),
        StrictScissorHintPgi = ((int)0X1a218),
        DetailTextureFuncPointsSgis = ((int)0X809c),
        Texture3Arb = ((int)0X84c3),
        LuminanceAlphaFloat16Ati = ((int)0X881f),
        SampleAlphaToMaskExt = ((int)0X809e),
        Aux3 = ((int)0X040c),
        OffsetTextureMatrixNv = ((int)0X86e1),
        MagnitudeScaleNv = ((int)0X8712),
        CurrentFogCoordinateExt = ((int)0X8453),
        MaxVertexAttribs = ((int)0X8869),
        LerpAti = ((int)0X8969),
        VertexArrayCountExt = ((int)0X807d),
        BlendSrcAlpha = ((int)0X80cb),
        Interpolate = ((int)0X8575),
        PostColorMatrixBlueScale = ((int)0X80b6),
        TextureMagFilter = ((int)0X2800),
        DrawBuffer13Ati = ((int)0X8832),
        SeparateAttribsNv = ((int)0X8c8d),
        GreenBits = ((int)0X0d53),
        HistogramExt = ((int)0X8024),
        FogCoordArrayStride = ((int)0X8455),
        ProxyTextureRectangleNv = ((int)0X84f7),
        DynamicReadArb = ((int)0X88e9),
        NormalArrayParallelPointersIntel = ((int)0X83f6),
        MinmaxFormat = ((int)0X802f),
        Aux2 = ((int)0X040b),
        FramebufferCompleteExt = ((int)0X8cd5),
        ColorAlphaPairingAti = ((int)0X8975),
        OneMinusSrcAlpha = ((int)0X0303),
        Combine4Nv = ((int)0X8503),
        Xor = ((int)0X1506),
        MapAttribUOrderNv = ((int)0X86c3),
        PackRowLength = ((int)0X0d02),
        VertexShaderLocalConstantsExt = ((int)0X87d2),
        PolygonOffsetPoint = ((int)0X2a01),
        UnsignedShort4444Rev = ((int)0X8365),
        MultisampleBit3Dfx = ((int)0X20000000),
        ProgramAddressRegisters = ((int)0X88b0),
        BufferUsage = ((int)0X8765),
        SwizzleStrAti = ((int)0X8976),
        ColorIndex16Ext = ((int)0X80e7),
        RenderbufferColorSamplesNv = ((int)0X8e10),
        LuminanceAlphaIntegerExt = ((int)0X8d9d),
        Alpha16IccSgix = ((int)0X8468),
        CombinerCdOutputNv = ((int)0X854b),
        Nor = ((int)0X1508),
        IndexMaterialParameterExt = ((int)0X81b9),
        WideLineHintPgi = ((int)0X1a222),
        Aux1 = ((int)0X040a),
        CompressedRedGreenRgtc2Ext = ((int)0X8dbd),
        SampleBuffersSgis = ((int)0X80a8),
        MaxProgramEnvParameters = ((int)0X88b5),
        PreferDoublebufferHintPgi = ((int)0X1a1f8),
        Matrix18 = ((int)0X88d2),
        VertexArrayTypeExt = ((int)0X807b),
        ConstantAlphaExt = ((int)0X8003),
        IntVec2Arb = ((int)0X8b53),
        OffsetTexture2DBiasNv = ((int)0X86e3),
        StencilFunc = ((int)0X0b92),
        Incr = ((int)0X1e02),
        VertexShaderVariantsExt = ((int)0X87d0),
        FullRangeExt = ((int)0X87e1),
        ShaderType = ((int)0X8b4f),
        CompressedRedRgtc1Ext = ((int)0X8dbb),
        TextureCoordArrayStride = ((int)0X808a),
        SampleAlphaToOne = ((int)0X809f),
        PostColorMatrixGreenScaleSgi = ((int)0X80b5),
        TextureIntensityTypeArb = ((int)0X8c15),
        Aux0 = ((int)0X0409),
        OneMinusSrcColor = ((int)0X0301),
        PixelMapRToRSize = ((int)0X0cb6),
        ColorTableSgi = ((int)0X80d0),
        MaxFramezoomFactorSgix = ((int)0X818d),
        NumGeneralCombinersNv = ((int)0X854e),
        GeometryOutputTypeExt = ((int)0X8ddc),
        Matrix22 = ((int)0X88d6),
        TextureDsSizeNv = ((int)0X871d),
        PixelMapIToBSize = ((int)0X0cb4),
        Luminance12 = ((int)0X8041),
        CombinerSumOutputNv = ((int)0X854c),
        Rgb5A1 = ((int)0X8057),
        StencilBackPassDepthPass = ((int)0X8803),
        LightModelLocalViewer = ((int)0X0b51),
        TextureMaxClampTSgix = ((int)0X836a),
        Matrix7Nv = ((int)0X8637),
        Rgba16fArb = ((int)0X881a),
        Alpha16Ext = ((int)0X803e),
        DsdtMagIntensityNv = ((int)0X86dc),
        PixelMapIToASize = ((int)0X0cb5),
        Modelview26Arb = ((int)0X873a),
        PixelTexGenQRoundSgix = ((int)0X8185),
        StencilAttachmentExt = ((int)0X8d20),
        ReplicateBorderHp = ((int)0X8153),
        TextureStackDepth = ((int)0X0ba5),
        WeightArrayBufferBindingArb = ((int)0X889e),
        OutputTextureCoord3Ext = ((int)0X87a0),
        ReflectionMapArb = ((int)0X8512),
        TextureClipmapDepthSgix = ((int)0X8176),
        SampleAlphaToCoverage = ((int)0X809e),
        Intensity12Ext = ((int)0X804c),
        SecondaryColorArrayListIbm = ((int)103077),
        ColorSumExt = ((int)0X8458),
        MaxLights = ((int)0X0d31),
        Depth = ((int)0X1801),
        SignedLuminance8Alpha8Nv = ((int)0X8704),
        Rgb16iExt = ((int)0X8d89),
        MaxConvolutionHeightExt = ((int)0X801b),
        ClipVolumeClippingHintExt = ((int)0X80f0),
        StaticDraw = ((int)0X88e4),
        TextureCubeMapNegativeZExt = ((int)0X851a),
        Luminance4Alpha4Ext = ((int)0X8043),
        TextureMaxLevelSgis = ((int)0X813d),
        PolygonOffsetLine = ((int)0X2a02),
        UnpackSwapBytes = ((int)0X0cf0),
        FragmentLightModelTwoSideSgix = ((int)0X8409),
        ProxyPostConvolutionColorTableSgi = ((int)0X80d4),
        PointSmooth = ((int)0X0b10),
        FogFactorToAlphaSgix = ((int)0X836f),
        CurrentRasterPosition = ((int)0X0b07),
        FramebufferIncompleteMissingAttachmentExt = ((int)0X8cd7),
        PixelTransform2DStackDepthExt = ((int)0X8336),
        TextureCompareOperatorSgix = ((int)0X819b),
        BgraIntegerExt = ((int)0X8d9b),
        Max4DTextureSizeSgis = ((int)0X8138),
        BinormalArrayExt = ((int)0X843a),
        TextureHiSizeNv = ((int)0X871b),
        Dot4Ati = ((int)0X8967),
        Lighting = ((int)0X0b50),
        SampleBuffers = ((int)0X80a8),
        CombineAlphaArb = ((int)0X8572),
        UpperLeft = ((int)0X8ca2),
        ListPrioritySgix = ((int)0X8182),
        NumLoopbackComponentsAti = ((int)0X8974),
        DepthPassInstrumentMaxSgix = ((int)0X8312),
        StencilBackFunc = ((int)0X8800),
        ReadOnly = ((int)0X88b8),
        TextureDtSizeNv = ((int)0X871e),
        ProxyHistogramExt = ((int)0X8025),
        SpriteModeSgix = ((int)0X8149),
        Alpha16iExt = ((int)0X8d8a),
        SpriteAxisSgix = ((int)0X814a),
        DrawBuffer12 = ((int)0X8831),
        VertexBlendArb = ((int)0X86a7),
        Modelview31Arb = ((int)0X873f),
        IndexArrayStrideExt = ((int)0X8086),
        Con6Ati = ((int)0X8947),
        Intensity32uiExt = ((int)0X8d73),
        DepthPassInstrumentCountersSgix = ((int)0X8311),
        Map2VertexAttrib144Nv = ((int)0X867e),
        OffsetHiloProjectiveTextureRectangleNv = ((int)0X8857),
        CurrentTextureCoords = ((int)0X0b03),
        StorageCachedApple = ((int)0X85be),
        OneMinusConstantColorExt = ((int)0X8002),
        Luminance16fArb = ((int)0X881e),
        TextureDepthSizeArb = ((int)0X884a),
        ProxyTexture2DStackMesax = ((int)0X875c),
        Ambient = ((int)0X1200),
        Luminance16Alpha16 = ((int)0X8048),
        DotProductPassThroughNv = ((int)0X885b),
        BlendEquationAlphaExt = ((int)0X883d),
        AmbientAndDiffuse = ((int)0X1602),
        ProgramAttribComponentsNv = ((int)0X8906),
        OpRecipExt = ((int)0X8794),
        UnsignedInt2101010Rev = ((int)0X8368),
        RestartSun = ((int)0X0001),
        EdgeFlagArrayListStrideIbm = ((int)103085),
        Rgba16Ext = ((int)0X805b),
        TextureTooLargeExt = ((int)0X8065),
        Map2Vertex3 = ((int)0X0db7),
        MaxTextureCoordsNv = ((int)0X8871),
        Mult = ((int)0X0103),
        ReduceExt = ((int)0X8016),
        DsdtMagNv = ((int)0X86f6),
        Rgba4S3tc = ((int)0X83a3),
        SampleBuffersArb = ((int)0X80a8),
        FramebufferAttachmentTextureLayerExt = ((int)0X8cd4),
        PostConvolutionRedScale = ((int)0X801c),
        Intensity32iExt = ((int)0X8d85),
        IntSampler2DRectExt = ((int)0X8dcd),
        FuncAddExt = ((int)0X8006),
        Du8dv8Ati = ((int)0X877a),
        Sluminance8Alpha8Ext = ((int)0X8c45),
        DsdtNv = ((int)0X86f5),
        ConvolutionHeight = ((int)0X8019),
        VariableFNv = ((int)0X8528),
        UnsignedShort5551Ext = ((int)0X8034),
        Gl3Bytes = ((int)0X1408),
        AlphaTestRef = ((int)0X0bc2),
        Texture4Arb = ((int)0X84c4),
        TransposeModelviewMatrixArb = ((int)0X84e3),
        ColorWritemask = ((int)0X0c23),
        DsBiasNv = ((int)0X8716),
        ColorArrayExt = ((int)0X8076),
        MaxVertexTextureImageUnits = ((int)0X8b4c),
        AndInverted = ((int)0X1504),
        OutputTextureCoord8Ext = ((int)0X87a5),
        ColorTableLuminanceSize = ((int)0X80de),
        MaxClipPlanes = ((int)0X0d32),
        AlphaMinClampIngr = ((int)0X8563),
        ProxyColorTable = ((int)0X80d3),
        Color4BitPgi = ((int)0X00020000),
        DualAlpha16Sgis = ((int)0X8113),
        TextureNormalExt = ((int)0X85af),
        ArrayElementLockCountExt = ((int)0X81a9),
        NameStackDepth = ((int)0X0d70),
        RenderbufferBlueSizeExt = ((int)0X8d52),
        MaxVertexStreamsAti = ((int)0X876b),
        HistogramSinkExt = ((int)0X802d),
        Matrix3 = ((int)0X88c3),
        Intensity8 = ((int)0X804b),
        MaxTextureMaxAnisotropyExt = ((int)0X84ff),
        FramebufferUnsupportedExt = ((int)0X8cdd),
        FramebufferIncompleteReadBufferExt = ((int)0X8cdc),
        HistogramRedSize = ((int)0X8028),
        Modelview27Arb = ((int)0X873b),
        StrictDepthfuncHintPgi = ((int)0X1a216),
        R5G6B5IccSgix = ((int)0X8466),
        TextureWrapRExt = ((int)0X8072),
        AlphaTestFunc = ((int)0X0bc1),
        ConstantArb = ((int)0X8576),
        PointToken = ((int)0X0701),
        CurrentRasterIndex = ((int)0X0b05),
        MaxTextureUnitsArb = ((int)0X84e2),
        ColorMaterial = ((int)0X0b57),
        OneMinusDstColor = ((int)0X0307),
        SignedHilo8Nv = ((int)0X885f),
        ColorArraySizeExt = ((int)0X8081),
        Source0RgbArb = ((int)0X8580),
        ArrayBufferArb = ((int)0X8892),
        CompressedSrgbAlphaS3tcDxt1Ext = ((int)0X8c4d),
        Light4 = ((int)0X4004),
        DotProductDepthReplaceNv = ((int)0X86ed),
        MatrixExt = ((int)0X87c0),
        CompressedRgbaS3tcDxt3Ext = ((int)0X83f2),
        FloatRgbaModeNv = ((int)0X888e),
        UnsignedIntVec4Ext = ((int)0X8dc8),
        And = ((int)0X1501),
        IndexMaterialExt = ((int)0X81b8),
        HistogramAlphaSizeExt = ((int)0X802b),
        Texture4DBindingSgis = ((int)0X814f),
        ProxyTextureRectangleArb = ((int)0X84f7),
        FloatRNv = ((int)0X8880),
        OpPowerExt = ((int)0X8793),
        TrackMatrixNv = ((int)0X8648),
        Separable2D = ((int)0X8012),
        AccumAlphaBits = ((int)0X0d5b),
        SampleBuffersExt = ((int)0X80a8),
        MaxMapTessellationNv = ((int)0X86d6),
        LineToken = ((int)0X0702),
        Combiner0Nv = ((int)0X8550),
        Max = ((int)0X8008),
        Operand2Alpha = ((int)0X859a),
        DepthTest = ((int)0X0b71),
        OpMovExt = ((int)0X8799),
        ProjectionStackDepth = ((int)0X0ba4),
        MaxClipmapDepthSgix = ((int)0X8177),
        TextureCubeMapNegativeZArb = ((int)0X851a),
        CombinerAbDotProductNv = ((int)0X8545),
        PixelFragmentAlphaSourceSgis = ((int)0X8355),
        GreenMinClampIngr = ((int)0X8561),
        ColorTableScale = ((int)0X80d6),
        TextureMaxLevel = ((int)0X813d),
        IndexArrayExt = ((int)0X8077),
        PostConvolutionBlueScaleExt = ((int)0X801e),
        ReadFramebufferExt = ((int)0X8ca8),
        ProgramTexInstructionsArb = ((int)0X8806),
        StorageSharedApple = ((int)0X85bf),
        ColorAttachment6Ext = ((int)0X8ce6),
        Sampler1DArrayShadowExt = ((int)0X8dc3),
        Texture1DStackMesax = ((int)0X8759),
        CurrentMatrixNv = ((int)0X8641),
        T2fV3f = ((int)0X2a27),
        TextureCubeMapNegativeXArb = ((int)0X8516),
        MaxProgramNativeTemporaries = ((int)0X88a7),
        ObjectActiveUniformMaxLengthArb = ((int)0X8b87),
        VertexArraySizeExt = ((int)0X807a),
        Gl422AverageExt = ((int)0X80ce),
        CompressedSluminanceAlphaExt = ((int)0X8c4b),
        MatrixMode = ((int)0X0ba0),
        DrawBuffer11Arb = ((int)0X8830),
        DrawBuffer9Ati = ((int)0X882e),
        RedBias = ((int)0X0d15),
        LineSmoothHint = ((int)0X0c52),
        IntVec3 = ((int)0X8b54),
        Map2Color4 = ((int)0X0db0),
        CompressedSluminance = ((int)0X8c4a),
        SwizzleStrDrAti = ((int)0X8978),
        GreenScale = ((int)0X0d18),
        InterpolateArb = ((int)0X8575),
        VertexArray = ((int)0X8074),
        SpotDirection = ((int)0X1204),
        Modelview1Ext = ((int)0X850a),
        PixelMapIToI = ((int)0X0c70),
        PostConvolutionRedBias = ((int)0X8020),
        Replace = ((int)0X1e01),
        Src0Alpha = ((int)0X8588),
        Operand0Alpha = ((int)0X8598),
        BlueScale = ((int)0X0d1a),
        Specular = ((int)0X1202),
        MaxProgramLoopDepthNv = ((int)0X88f7),
        ColorAttachment1Ext = ((int)0X8ce1),
        ProgramNativeInstructions = ((int)0X88a2),
        Luminance12Alpha12Ext = ((int)0X8047),
        MaxTransformFeedbackInterleavedAttribsNv = ((int)0X8c8a),
        FragmentProgramBindingNv = ((int)0X8873),
        PostColorMatrixAlphaScaleSgi = ((int)0X80b7),
        HistogramBlueSizeExt = ((int)0X802a),
        ColorArrayPointer = ((int)0X8090),
        DotProductNv = ((int)0X86ec),
        Modelview4Arb = ((int)0X8724),
        DepthComponent32 = ((int)0X81a7),
        DetailTextureLevelSgis = ((int)0X809a),
        ReplacementCodeArrayPointerSun = ((int)0X85c3),
        ClampReadColorArb = ((int)0X891c),
        BackLeft = ((int)0X0402),
        NumInstructionsTotalAti = ((int)0X8972),
        PixelPackBuffer = ((int)0X88eb),
        ClipPlane0 = ((int)0X3000),
        OffsetProjectiveTextureRectangleNv = ((int)0X8852),
        SamplerBufferExt = ((int)0X8dc2),
        TextureCoordNv = ((int)0X8c79),
        SignedRgbNv = ((int)0X86fe),
        BlendDst = ((int)0X0be0),
        Points = ((int)0X0000),
        LocalConstantValueExt = ((int)0X87ec),
        Matrix2Nv = ((int)0X8632),
        Light6 = ((int)0X4006),
        Rgb8 = ((int)0X8051),
        ReplacementCodeSun = ((int)0X81d8),
        LuminanceAlpha = ((int)0X190a),
        PostImageTransformColorTableHp = ((int)0X8162),
        DepthAttachmentExt = ((int)0X8d00),
        MaxVertexHintPgi = ((int)0X1a22d),
        ResampleZeroFillSgix = ((int)0X842f),
        PostConvolutionAlphaBias = ((int)0X8023),
        AlphaBits = ((int)0X0d55),
        UnsignedShort4444Ext = ((int)0X8033),
        DotProductTextureCubeMapNv = ((int)0X86f0),
        Luminance = ((int)0X1909),
        TextureBindingRectangleArb = ((int)0X84f6),
        MaxGeneralCombinersNv = ((int)0X854d),
        IndexLogicOp = ((int)0X0bf1),
        BumpNumTexUnitsAti = ((int)0X8777),
        FogOffsetValueSgix = ((int)0X8199),
        Lequal = ((int)0X0203),
        WritePixelDataRangeNv = ((int)0X8878),
        OutputTextureCoord20Ext = ((int)0X87b1),
        SrcAlpha = ((int)0X0302),
        ModelviewMatrix = ((int)0X0ba6),
        RgbFloat32Ati = ((int)0X8815),
        PixelModeBit = ((int)0X00000020),
        MirrorClampExt = ((int)0X8742),
        PixelTexGenAlphaReplaceSgix = ((int)0X8187),
        PixelPackBufferBindingExt = ((int)0X88ed),
        CombineRgbExt = ((int)0X8571),
        RgbaUnsignedDotProductMappingNv = ((int)0X86d9),
        AsyncMarkerSgix = ((int)0X8329),
        SpriteEyeAlignedSgix = ((int)0X814e),
        ColorTableRedSize = ((int)0X80da),
        Dsdt8Mag8Nv = ((int)0X870a),
        MaxProgramLoopCountNv = ((int)0X88f8),
        VertexArrayRangePointerNv = ((int)0X8521),
        VibranceScaleNv = ((int)0X8713),
        OneMinusDstAlpha = ((int)0X0305),
        ModelviewProjectionNv = ((int)0X8629),
        SwizzleStqDqAti = ((int)0X8979),
        Map2TextureCoord2 = ((int)0X0db4),
        Map2TextureCoord3 = ((int)0X0db5),
        Map2TextureCoord1 = ((int)0X0db3),
        TransposeColorMatrixArb = ((int)0X84e6),
        IndexMode = ((int)0X0c30),
        Map2TextureCoord4 = ((int)0X0db6),
        Rgba32uiExt = ((int)0X8d70),
        OffsetHiloProjectiveTexture2DNv = ((int)0X8856),
        SignedHiloNv = ((int)0X86f9),
        MaxFragmentLightsSgix = ((int)0X8404),
        ImageScaleXHp = ((int)0X8155),
        FenceApple = ((int)0X8a0b),
        TextureCubeMapNegativeYArb = ((int)0X8518),
        FloatVec4Arb = ((int)0X8b52),
        TextureDepthExt = ((int)0X8071),
        FloatVec2Arb = ((int)0X8b50),
        SmoothLineWidthGranularity = ((int)0X0b23),
        LightModelAmbient = ((int)0X0b53),
        MaxMatrixPaletteStackDepthArb = ((int)0X8841),
        Texture2DArrayExt = ((int)0X8c1a),
        MaxMultisampleCoverageModesNv = ((int)0X8e11),
        QuadTextureSelectSgis = ((int)0X8125),
        AttribArrayTypeNv = ((int)0X8625),
        UnsignedIntS8S888Nv = ((int)0X86da),
        UnsignedShort565Reversed = ((int)0X8364),
        ListMode = ((int)0X0b30),
        DrawBuffer5Ati = ((int)0X882a),
        CurrentVertexAttrib = ((int)0X8626),
        LuminanceAlpha32uiExt = ((int)0X8d75),
        SingleColorExt = ((int)0X81f9),
        CurrentVertexExt = ((int)0X87e2),
        TextureCoordArrayListStrideIbm = ((int)103084),
        TextureClipmapLodOffsetSgix = ((int)0X8175),
        R5G6B5A8IccSgix = ((int)0X8467),
        ObjectDeleteStatusArb = ((int)0X8b80),
        InvalidFramebufferOperationExt = ((int)0X0506),
        Normalize = ((int)0X0ba1),
        FramebufferSrgbCapableExt = ((int)0X8dba),
        BlendEquationAlpha = ((int)0X883d),
        RgbS3tc = ((int)0X83a0),
        ProgramResultComponentsNv = ((int)0X8907),
        RgbaS3tc = ((int)0X83a2),
        PostColorMatrixAlphaBias = ((int)0X80bb),
        TextureColorWritemaskSgis = ((int)0X81ef),
        MaxProgramGenericResultsNv = ((int)0X8da6),
        Luminance16IccSgix = ((int)0X8469),
        ActiveAttributes = ((int)0X8b89),
        ConserveMemoryHintPgi = ((int)0X1a1fd),
        ProgramStringNv = ((int)0X8628),
        Copy = ((int)0X1503),
        DrawBuffer10 = ((int)0X882f),
        IndexArrayBufferBindingArb = ((int)0X8899),
        VariableCNv = ((int)0X8525),
        ShaderSourceLength = ((int)0X8b88),
        AttribArrayPointerNv = ((int)0X8645),
        R1uiV3fSun = ((int)0X85c4),
        Texture14Arb = ((int)0X84ce),
        OpSetGeExt = ((int)0X878c),
        Texture12Arb = ((int)0X84cc),
        ColorArrayTypeExt = ((int)0X8082),
        SignedAlpha8Nv = ((int)0X8706),
        GenericAttribNv = ((int)0X8c7d),
        MinProgramTexelOffsetNv = ((int)0X8904),
        Intensity32fArb = ((int)0X8817),
        Light0 = ((int)0X4000),
        RgbScaleArb = ((int)0X8573),
        VertexProgramPointSizeNv = ((int)0X8642),
        VertexShaderExt = ((int)0X8780),
        ArrayType = ((int)0X8625),
        NumCompressedTextureFormats = ((int)0X86a2),
        Q = ((int)0X2003),
        R = ((int)0X2002),
        S = ((int)0X2000),
        T = ((int)0X2001),
        Gl4Pass3Sgis = ((int)0X80a7),
        TextureEnvBiasSgix = ((int)0X80be),
        SingleColor = ((int)0X81f9),
        Ycbcr422Apple = ((int)0X85b9),
        AttribStackDepth = ((int)0X0bb0),
        CompressedSluminanceExt = ((int)0X8c4a),
        VertexAttribArray2Nv = ((int)0X8652),
        TextureLuminanceTypeArb = ((int)0X8c14),
        VertexArrayParallelPointersIntel = ((int)0X83f5),
        TextureGreenSizeExt = ((int)0X805d),
        LightModelColorControlExt = ((int)0X81f8),
        ArrayNormalized = ((int)0X886a),
        SamplePatternExt = ((int)0X80ac),
        StackOverflow = ((int)0X0503),
        CombinerCdDotProductNv = ((int)0X8546),
        FramebufferAttachmentObjectNameExt = ((int)0X8cd1),
        DrawBuffer9Arb = ((int)0X882e),
        CompressedSrgbAlphaExt = ((int)0X8c49),
        ZeroExt = ((int)0X87dd),
        Operand1RgbExt = ((int)0X8591),
        TextureFilterControlExt = ((int)0X8500),
        MaxProgramNativeAttribs = ((int)0X88af),
        GeometryProgramParameterBufferNv = ((int)0X8da3),
        TextureStencilSizeExt = ((int)0X88f1),
        TextureDepth = ((int)0X8071),
        MaxEvalOrder = ((int)0X0d30),
        Texture0Arb = ((int)0X84c0),
        Rgba16iExt = ((int)0X8d88),
        DepthComponent24 = ((int)0X81a6),
        LinearSharpenAlphaSgis = ((int)0X80ae),
        Alpha32fArb = ((int)0X8816),
        PixelCubicWeightExt = ((int)0X8333),
        TextureInternalFormat = ((int)0X1003),
        OutputTextureCoord24Ext = ((int)0X87b5),
        TextFragmentShaderAti = ((int)0X8200),
        SpriteObjectAlignedSgix = ((int)0X814d),
        IntensityExt = ((int)0X8049),
        Luminance16uiExt = ((int)0X8d7a),
        CompressedSrgbAlphaS3tcDxt3Ext = ((int)0X8c4e),
        TextureFilterControl = ((int)0X8500),
        MaxRenderbufferSizeExt = ((int)0X84e8),
        EvalFractionalTessellationNv = ((int)0X86c5),
        UnsignedInt8888RevExt = ((int)0X8367),
        Color3BitPgi = ((int)0X00010000),
        PostColorMatrixColorTableSgi = ((int)0X80d2),
        HistogramLuminanceSizeExt = ((int)0X802c),
        UnsignedShort88Mesa = ((int)0X85ba),
        VertexArrayBindingApple = ((int)0X85b5),
        DrawBuffer1Ati = ((int)0X8826),
        NearestClipmapLinearSgix = ((int)0X844e),
        OffsetTexture2DNv = ((int)0X86e8),
        CurrentFogCoord = ((int)0X8453),
        SwizzleStqAti = ((int)0X8977),
        Rgb = ((int)0X1907),
        ConvolutionHintSgix = ((int)0X8316),
        AsyncHistogramSgix = ((int)0X832c),
        InverseNv = ((int)0X862b),
        Gl422Ext = ((int)0X80cc),
        TextureCompressedImageSizeArb = ((int)0X86a0),
        Con17Ati = ((int)0X8952),
        Con16Ati = ((int)0X8951),
        BumpTargetAti = ((int)0X877c),
        ClipNearHintPgi = ((int)0X1a220),
        DrawBuffer = ((int)0X0c01),
        SecondaryColorArrayTypeExt = ((int)0X845b),
        Con19Ati = ((int)0X8954),
        Max3DTextureSize = ((int)0X8073),
        ColorClearUnclampedValueAti = ((int)0X8835),
        TextureCompressionHint = ((int)0X84ef),
        Byte = ((int)0X1400),
        SignedRgbaNv = ((int)0X86fb),
        DrawBuffer6Ati = ((int)0X882b),
        InvariantExt = ((int)0X87c2),
        HalfBiasNormalNv = ((int)0X853a),
        ClipFarHintPgi = ((int)0X1a221),
        SampleCoverage = ((int)0X80a0),
        BumpRotMatrixAti = ((int)0X8775),
        StencilBackWritemask = ((int)0X8ca5),
        VertexWeightArrayExt = ((int)0X850c),
        T2fN3fV3f = ((int)0X2a2b),
        PostConvolutionBlueBiasExt = ((int)0X8022),
        PointDistanceAttenuation = ((int)0X8129),
        OutOfMemory = ((int)0X0505),
        Modelview7Arb = ((int)0X8727),
        StreamCopyArb = ((int)0X88e2),
        DepthComponent32Arb = ((int)0X81a7),
        Luminance12Ext = ((int)0X8041),
        DrawBuffer10Ati = ((int)0X882f),
        OpAddExt = ((int)0X8787),
        LinearDetailAlphaSgis = ((int)0X8098),
        PixelMapAToASize = ((int)0X0cb9),
        UniformBufferExt = ((int)0X8dee),
        PixelTileGridDepthSgix = ((int)0X8144),
        TextureBindingRectangleNv = ((int)0X84f6),
        Matrix5 = ((int)0X88c5),
        TextureDeformationSgix = ((int)0X8195),
        Light2 = ((int)0X4002),
        NormalArrayExt = ((int)0X8075),
        FogScaleSgix = ((int)0X81fc),
        Modelview15Arb = ((int)0X872f),
        TextureDeformationBitSgix = ((int)0X00000001),
        Modelview6Arb = ((int)0X8726),
        SecondaryColorArrayType = ((int)0X845b),
        ObjectPlane = ((int)0X2501),
        DepthBoundsExt = ((int)0X8891),
        TangentArrayStrideExt = ((int)0X843f),
        WeightSumUnityArb = ((int)0X86a6),
        FuncReverseSubtract = ((int)0X800b),
        CurrentOcclusionQueryIdNv = ((int)0X8865),
        ColorTableIntensitySize = ((int)0X80df),
        IndexMaterialFaceExt = ((int)0X81ba),
        ArrayBuffer = ((int)0X8892),
        Alpha4 = ((int)0X803b),
        Noop = ((int)0X1505),
        BlendSrcRgb = ((int)0X80c9),
        UnsignedShort4444Reversed = ((int)0X8365),
        SrgbAlpha = ((int)0X8c42),
        UnsignedShort88RevMesa = ((int)0X85bb),
        DrawBuffer15Arb = ((int)0X8834),
        PointSize = ((int)0X0b11),
        MultisampleCoverageModesNv = ((int)0X8e12),
        Gequal = ((int)0X0206),
        PerStageConstantsNv = ((int)0X8535),
        SeparateSpecularColorExt = ((int)0X81fa),
        FloatRgbaNv = ((int)0X8883),
        PostConvolutionGreenBiasExt = ((int)0X8021),
        ObjectValidateStatusArb = ((int)0X8b83),
        IntensityFloat32Ati = ((int)0X8817),
        PixelTransform2DMatrixExt = ((int)0X8338),
        UnsignedByte = ((int)0X1401),
        MaxOptimizedVertexShaderLocalConstantsExt = ((int)0X87cc),
        MaxTransformFeedbackSeparateComponentsNv = ((int)0X8c80),
        DontCare = ((int)0X1100),
        QueryResultAvailableArb = ((int)0X8867),
        Map1BinormalExt = ((int)0X8446),
        BoolVec4 = ((int)0X8b59),
        TextureLodBias = ((int)0X8501),
        Map2GridDomain = ((int)0X0dd2),
        StrictLightingHintPgi = ((int)0X1a217),
        OutputColor0Ext = ((int)0X879b),
        MatrixPaletteArb = ((int)0X8840),
        Reg9Ati = ((int)0X892a),
        EdgeFlagArrayPointerExt = ((int)0X8093),
        DualIntensity16Sgis = ((int)0X811b),
        StaticAti = ((int)0X8760),
        Intensity16IccSgix = ((int)0X846a),
        Sampler2DArb = ((int)0X8b5e),
        GlobalAlphaFactorSun = ((int)0X81da),
        Projection = ((int)0X1701),
        ColorTableAlphaSizeSgi = ((int)0X80dd),
        Reg0Ati = ((int)0X8921),
        MultisampleArb = ((int)0X809d),
        TextureCoordArrayCountExt = ((int)0X808b),
        BlendEquationExt = ((int)0X8009),
        SampleCoverageValueArb = ((int)0X80aa),
        SampleMaskExt = ((int)0X80a0),
        FogHint = ((int)0X0c54),
        StencilBackFuncAti = ((int)0X8800),
        DepthBufferBit = ((int)0X00000100),
        Accum = ((int)0X0100),
        UnpackClientStorageApple = ((int)0X85b2),
        TextureEnvMode = ((int)0X2200),
        Matrix4Nv = ((int)0X8634),
        OutputTextureCoord19Ext = ((int)0X87b0),
        BackNormalsHintPgi = ((int)0X1a223),
        MaxProgramOutputVerticesNv = ((int)0X8c27),
        LineWidthGranularity = ((int)0X0b23),
        SubtractArb = ((int)0X84e7),
        Operand0RgbArb = ((int)0X8590),
        PixelCountAvailableNv = ((int)0X8867),
        MaxProgramAddressRegisters = ((int)0X88b1),
        UnsignedInt8888Rev = ((int)0X8367),
        Alpha8iExt = ((int)0X8d90),
        ShadowAttenuationExt = ((int)0X834e),
        IuiV3fExt = ((int)0X81ae),
        Gl422RevExt = ((int)0X80cd),
        RedBits = ((int)0X0d52),
        ReadWriteArb = ((int)0X88ba),
        PackImageDepthSgis = ((int)0X8131),
        CoordReplace = ((int)0X8862),
        ConstantBorderHp = ((int)0X8151),
        DrawBuffer7Ati = ((int)0X882c),
        Gl8XBitAti = ((int)0X00000004),
        DepthComponent16 = ((int)0X81a5),
        AverageExt = ((int)0X8335),
        Map1Index = ((int)0X0d91),
        EvalBit = ((int)0X00010000),
        VariantArrayExt = ((int)0X87e8),
        DepthComponent32fNv = ((int)0X8dab),
        AlphaIccSgix = ((int)0X8462),
        CurrentMatrixIndexArb = ((int)0X8845),
        StaticCopy = ((int)0X88e6),
        OpSetLtExt = ((int)0X878d),
        MaxViewportDims = ((int)0X0d3a),
        OutputTextureCoord17Ext = ((int)0X87ae),
        MaxGeometryOutputVerticesExt = ((int)0X8de0),
        ETimesFNv = ((int)0X8531),
        IndexBits = ((int)0X0d51),
        ConstantBorder = ((int)0X8151),
        IntVec3Arb = ((int)0X8b54),
        YcrcbaSgix = ((int)0X8319),
        DepthRange = ((int)0X0b70),
        HalfFloatNv = ((int)0X140b),
        OpRoundExt = ((int)0X8790),
        Map1TextureCoord1 = ((int)0X0d93),
        OpLogBase2Ext = ((int)0X8792),
        PnTrianglesPointModeAti = ((int)0X87f2),
        ProxyTexture2DArrayExt = ((int)0X8c1b),
        Con3Ati = ((int)0X8944),
        TextureCubeMapPositiveX = ((int)0X8515),
        VertexAttribArray6Nv = ((int)0X8656),
        DepthStencilNv = ((int)0X84f9),
        ImageScaleYHp = ((int)0X8156),
        EmbossConstantNv = ((int)0X855e),
        TextureGenMode = ((int)0X2500),
        RenderbufferBindingExt = ((int)0X8ca7),
        OutputTextureCoord21Ext = ((int)0X87b2),
        VertexArrayType = ((int)0X807b),
        SampleAlphaToOneSgis = ((int)0X809f),
        UnsignedInt2101010Reversed = ((int)0X8368),
        DualLuminance8Sgis = ((int)0X8115),
        BufferSizeArb = ((int)0X8764),
        RenderbufferHeightExt = ((int)0X8d43),
        MaxProgramTexIndirectionsArb = ((int)0X880d),
        LinearMipmapNearest = ((int)0X2701),
        T2fIuiN3fV3fExt = ((int)0X81b4),
        Linear = ((int)0X2601),
        PixelPackBufferExt = ((int)0X88eb),
        DrawBuffer1Arb = ((int)0X8826),
        DrawBuffer7Arb = ((int)0X882c),
        CompressedSignedLuminanceAlphaLatc2Ext = ((int)0X8c73),
        VariantExt = ((int)0X87c1),
        AlphaIntegerExt = ((int)0X8d97),
        Texture6 = ((int)0X84c6),
        TextureCubeMapPositiveZ = ((int)0X8519),
        FenceConditionNv = ((int)0X84f4),
        MaxProgramNativeParameters = ((int)0X88ab),
        FramebufferAttachmentLayeredExt = ((int)0X8da7),
        ActiveUniforms = ((int)0X8b86),
        LineWidth = ((int)0X0b21),
        TransformFeedbackRecordNv = ((int)0X8c86),
        HistogramLuminanceSize = ((int)0X802c),
        ReferencePlaneEquationSgix = ((int)0X817e),
        Texture29 = ((int)0X84dd),
        DrawBuffer14 = ((int)0X8833),
        EdgeFlag = ((int)0X0b43),
        Rgba16uiExt = ((int)0X8d76),
        SphereMap = ((int)0X2402),
        OneExt = ((int)0X87de),
        NearestMipmapNearest = ((int)0X2700),
        Con0Ati = ((int)0X8941),
        Back = ((int)0X0405),
        UnpackSkipImagesExt = ((int)0X806d),
        Modelview = ((int)0X1700),
        Texture2DStackMesax = ((int)0X875a),
        Matrix8 = ((int)0X88c8),
        UnsignedIntSampler1DArrayExt = ((int)0X8dd6),
        OffsetTexture2DMatrixNv = ((int)0X86e1),
        TransformFeedbackPrimitivesWrittenNv = ((int)0X8c88),
        RgbaFloat32Ati = ((int)0X8814),
        MaxShininessNv = ((int)0X8504),
        CullFaceMode = ((int)0X0b45),
        SamplesPassed = ((int)0X8914),
        PerspectiveCorrectionHint = ((int)0X0c50),
        CompressedTextureFormats = ((int)0X86a3),
        FramezoomFactorSgix = ((int)0X818c),
        ScalebiasHintSgix = ((int)0X8322),
        InterlaceSgix = ((int)0X8094),
        MaxPixelMapTable = ((int)0X0d34),
        RenderbufferRedSizeExt = ((int)0X8d50),
        TextureMinFilter = ((int)0X2801),
        MaxConvolutionWidth = ((int)0X801a),
        CombineExt = ((int)0X8570),
        Reg30Ati = ((int)0X893f),
        Reg31Ati = ((int)0X8940),
        EyeDistanceToPointSgis = ((int)0X81f0),
        TextureGenQ = ((int)0X0c63),
        Sampler2DArrayShadowExt = ((int)0X8dc4),
        TextureCoordArrayTypeExt = ((int)0X8089),
        MaxListNesting = ((int)0X0b31),
        VariantArrayStrideExt = ((int)0X87e6),
        CompressedSignedRedGreenRgtc2Ext = ((int)0X8dbe),
        FogMode = ((int)0X0b65),
        PixelUnpackBufferBinding = ((int)0X88ef),
        OutputTextureCoord9Ext = ((int)0X87a6),
        ReplacementCodeArrayTypeSun = ((int)0X85c1),
        ShaderConsistentNv = ((int)0X86dd),
        ReadPixelDataRangeNv = ((int)0X8879),
        ProgramInstruction = ((int)0X88a0),
        ProgramLengthNv = ((int)0X8627),
        Modelview24Arb = ((int)0X8738),
        MaxProgramTexInstructionsArb = ((int)0X880c),
        Alpha = ((int)0X1906),
        SampleBuffers3Dfx = ((int)0X86b3),
        EdgeFlagArrayBufferBinding = ((int)0X889b),
        VertexAttribArrayIntegerNv = ((int)0X88fd),
        ObjectAttachedObjectsArb = ((int)0X8b85),
        FragmentShaderAti = ((int)0X8920),
        PostColorMatrixAlphaBiasSgi = ((int)0X80bb),
        InvariantDatatypeExt = ((int)0X87eb),
        VertexProgramTwoSideNv = ((int)0X8643),
        TextureBufferDataStoreBindingExt = ((int)0X8c2d),
        FramebufferIncompleteAttachmentExt = ((int)0X8cd6),
        TextureCoordArraySize = ((int)0X8088),
        EvalVertexAttrib15Nv = ((int)0X86d5),
        EvalVertexAttrib6Nv = ((int)0X86cc),
        EvalVertexAttrib7Nv = ((int)0X86cd),
        ClampToBorder = ((int)0X812d),
        IndexTestFuncExt = ((int)0X81b6),
        Intensity4Ext = ((int)0X804a),
        SubpixelBits = ((int)0X0d50),
        LoScaleNv = ((int)0X870f),
        Invert = ((int)0X150a),
        DeformationsMaskSgix = ((int)0X8196),
        DiscardNv = ((int)0X8530),
        VertexAttribArray4Nv = ((int)0X8654),
        Set = ((int)0X150f),
        MaxVaryingComponentsExt = ((int)0X8b4b),
        Sampler1DArb = ((int)0X8b5d),
        Sluminance = ((int)0X8c46),
        Alpha8 = ((int)0X803c),
        ColorTableLuminanceSizeSgi = ((int)0X80de),
        CompressedLuminanceLatc1Ext = ((int)0X8c70),
        ClientAttribStackDepth = ((int)0X0bb1),
        Map1VertexAttrib154Nv = ((int)0X866f),
        Matrix7 = ((int)0X88c7),
        Con25Ati = ((int)0X895a),
        Sluminance8Ext = ((int)0X8c47),
        ColorAttachment3Ext = ((int)0X8ce3),
        MaxTextureSize = ((int)0X0d33),
        Modelview0Ext = ((int)0X1700),
        YcrcbSgix = ((int)0X8318),
        CompressedRgbaS3tcDxt1Ext = ((int)0X83f1),
        PointFadeThresholdSize = ((int)0X8128),
        AutoNormal = ((int)0X0d80),
        Bgr = ((int)0X80e0),
        Viewport = ((int)0X0ba2),
        SamplerCubeArb = ((int)0X8b60),
        FuncSubtractExt = ((int)0X800a),
        InverseTransposeNv = ((int)0X862d),
        CombineArb = ((int)0X8570),
        FrontFace = ((int)0X0b46),
        EyePlaneAbsoluteNv = ((int)0X855c),
        ColorArrayBufferBinding = ((int)0X8898),
        MaxNameStackDepth = ((int)0X0d37),
        EyeLineSgis = ((int)0X81f6),
        VertexDataHintPgi = ((int)0X1a22a),
        IndexArray = ((int)0X8077),
        Gl2Pass1Sgis = ((int)0X80a3),
        FogCoordArray = ((int)0X8457),
        Matrix5Nv = ((int)0X8635),
        EyePointSgis = ((int)0X81f4),
        MaxVertexUniformComponents = ((int)0X8b4a),
        MaxFragmentUniformComponents = ((int)0X8b49),
        MaxVertexBindableUniformsExt = ((int)0X8de2),
        Map2VertexAttrib54Nv = ((int)0X8675),
        PnTrianglesTesselationLevelAti = ((int)0X87f4),
        MulAti = ((int)0X8964),
        ActiveTexture = ((int)0X84e0),
        Intensity16 = ((int)0X804d),
        ValidateStatus = ((int)0X8b83),
        StencilIndex8Ext = ((int)0X8d48),
        BackSecondaryColorNv = ((int)0X8c78),
        CombinerAbOutputNv = ((int)0X854a),
        Modulate = ((int)0X2100),
        ColorAttachment0Ext = ((int)0X8ce0),
        RenderbufferDepthSizeExt = ((int)0X8d54),
        T4fV4f = ((int)0X2a28),
        PostTextureFilterScaleRangeSgix = ((int)0X817c),
        MaxElementsIndices = ((int)0X80e9),
        Srgb8Alpha8 = ((int)0X8c43),
        AlwaysFastHintPgi = ((int)0X1a20c),
        Dot3Rgba = ((int)0X86af),
        FloatMat3x4 = ((int)0X8b68),
        MultisampleSgis = ((int)0X809d),
        FramebufferAttachmentObjectTypeExt = ((int)0X8cd0),
        FogScaleValueSgix = ((int)0X81fd),
        DrawPixelsApple = ((int)0X8a0a),
        Srgb = ((int)0X8c40),
        DrawBuffer14Ati = ((int)0X8833),
        AndReverse = ((int)0X1502),
        LinearMipmapLinear = ((int)0X2703),
        PackResampleSgix = ((int)0X842c),
        ElementArrayBufferBindingArb = ((int)0X8895),
        OutputTextureCoord31Ext = ((int)0X87bc),
        PixelTextureSgis = ((int)0X8353),
        Four = ((int)4),
        UnpackLsbFirst = ((int)0X0cf1),
        CopyInverted = ((int)0X150c),
        UnsignedIntSamplerCubeExt = ((int)0X8dd4),
        NegativeWExt = ((int)0X87dc),
        ColorArrayPointerExt = ((int)0X8090),
        AttribArrayStrideNv = ((int)0X8624),
        IntSampler1DArrayExt = ((int)0X8dce),
        InterleavedAttribsNv = ((int)0X8c8c),
        Texture26Arb = ((int)0X84da),
        DepthScale = ((int)0X0d1e),
        Texture24Arb = ((int)0X84d8),
        Texture25Arb = ((int)0X84d9),
        NegativeZExt = ((int)0X87db),
        NegativeYExt = ((int)0X87da),
        Texture20Arb = ((int)0X84d4),
        Texture21Arb = ((int)0X84d5),
        ColorArrayListIbm = ((int)103072),
        EdgeFlagArrayBufferBindingArb = ((int)0X889b),
        Rgb16 = ((int)0X8054),
        CullVertexObjectPositionExt = ((int)0X81ac),
        Rgb10 = ((int)0X8052),
        ScissorTest = ((int)0X0c11),
        Rgb12 = ((int)0X8053),
        ArrayObjectOffsetAti = ((int)0X8767),
        RgbaIccSgix = ((int)0X8461),
        AlphaFloat32Ati = ((int)0X8816),
        GeometryInputTypeExt = ((int)0X8ddb),
        CompressedLuminanceAlpha = ((int)0X84eb),
        InterlaceReadOml = ((int)0X8981),
        PointSizeGranularity = ((int)0X0b13),
        UnsignedInt5999RevExt = ((int)0X8c3e),
        CompressedIntensity = ((int)0X84ec),
        TextureFilter4SizeSgis = ((int)0X8147),
        TexturePreSpecularHp = ((int)0X8169),
        CurrentRasterNormalSgix = ((int)0X8406),
        EnableBit = ((int)0X00002000),
        MaxVertexUnitsArb = ((int)0X86a4),
        ClipPlane4 = ((int)0X3004),
        LoBiasNv = ((int)0X8715),
        Gl4Pass2Sgis = ((int)0X80a6),
        NormalArrayPointer = ((int)0X808f),
        OutputTextureCoord22Ext = ((int)0X87b3),
        Reg28Ati = ((int)0X893d),
        VariantArrayPointerExt = ((int)0X87e9),
        CurrentTangentExt = ((int)0X843b),
        CurrentSecondaryColorExt = ((int)0X8459),
        ActiveVertexUnitsArb = ((int)0X86a5),
        ConvolutionWidthExt = ((int)0X8018),
        MaxVaryingFloatsArb = ((int)0X8b4b),
        FenceStatusNv = ((int)0X84f3),
        Luminance12Alpha4Ext = ((int)0X8046),
        Luminance8uiExt = ((int)0X8d80),
        OffsetProjectiveTexture2DScaleNv = ((int)0X8851),
        UnsignedNormalizedArb = ((int)0X8c17),
        PolygonOffsetFactorExt = ((int)0X8038),
        TextureRectangleArb = ((int)0X84f5),
        PixelTransform2DExt = ((int)0X8330),
        CullModesNv = ((int)0X86e0),
        InvalidOperation = ((int)0X0502),
        BufferFlushingUnmapApple = ((int)0X8a13),
        ProgramErrorPositionArb = ((int)0X864b),
        WeightArrayBufferBinding = ((int)0X889e),
        DrawBuffer0Arb = ((int)0X8825),
        T2fC4fN3fV3f = ((int)0X2a2c),
        Map1GridSegments = ((int)0X0dd1),
        PackSkipImages = ((int)0X806b),
        VariantArrayTypeExt = ((int)0X87e7),
        ColorTableIntensitySizeSgi = ((int)0X80df),
        UnsignedInt88S8S8RevNv = ((int)0X86db),
        ConvolutionFilterBiasExt = ((int)0X8015),
        TransposeModelviewMatrix = ((int)0X84e3),
        TextureBit = ((int)0X00040000),
        ProgramParameters = ((int)0X88a8),
        SaturateBitAti = ((int)0X00000040),
        PolygonOffsetBiasExt = ((int)0X8039),
        SpriteAxialSgix = ((int)0X814c),
        N3fV3f = ((int)0X2a25),
        MaxPixelTransform2DStackDepthExt = ((int)0X8337),
        C4ubV3f = ((int)0X2a23),
        FragmentShaderDerivativeHintArb = ((int)0X8b8b),
        QuadraticAttenuation = ((int)0X1209),
        FramebufferIncompleteMultisampleExt = ((int)0X8d56),
        GeometryVerticesOutExt = ((int)0X8dda),
        SecondaryColorArrayExt = ((int)0X845e),
        FogStart = ((int)0X0b63),
        TextureRedSize = ((int)0X805c),
        FragmentLight3Sgix = ((int)0X840f),
        Con9Ati = ((int)0X894a),
        EdgeFlagArrayListIbm = ((int)103075),
        Gl2XBitAti = ((int)0X00000001),
        BoolArb = ((int)0X8b56),
        CompressedLuminanceAlphaLatc2Ext = ((int)0X8c72),
        EvalVertexAttrib9Nv = ((int)0X86cf),
        VertexAttribArray11Nv = ((int)0X865b),
        LuminanceAlpha32fArb = ((int)0X8819),
        SmoothLineWidthRange = ((int)0X0b22),
        EyePlane = ((int)0X2502),
        EvalVertexAttrib2Nv = ((int)0X86c8),
        LuminanceFloat16Ati = ((int)0X881e),
        ProxyTexture4DSgis = ((int)0X8135),
        EvalVertexAttrib1Nv = ((int)0X86c7),
        AttribArraySizeNv = ((int)0X8623),
        QuadLuminance8Sgis = ((int)0X8121),
        EvalVertexAttrib4Nv = ((int)0X86ca),
        EvalVertexAttrib5Nv = ((int)0X86cb),
        Map2VertexAttrib14Nv = ((int)0X8671),
        Map2TangentExt = ((int)0X8445),
        Rgba8iExt = ((int)0X8d8e),
        ObjectPointSgis = ((int)0X81f5),
        Luminance4Alpha4 = ((int)0X8043),
        LuminanceIccSgix = ((int)0X8463),
        Matrix28 = ((int)0X88dc),
        Intensity8iExt = ((int)0X8d91),
        ModulateSignedAddAti = ((int)0X8745),
        FragmentColorExt = ((int)0X834c),
        ColorIndex = ((int)0X1900),
        ColorIndex4Ext = ((int)0X80e4),
        Rgb32iExt = ((int)0X8d83),
        AttachedShaders = ((int)0X8b85),
        MirroredRepeatIbm = ((int)0X8370),
        NormalArrayPointerExt = ((int)0X808f),
        StencilBufferBit = ((int)0X00000400),
        UnsignedInt8888 = ((int)0X8035),
        HistogramGreenSizeExt = ((int)0X8029),
        ColorTableRedSizeSgi = ((int)0X80da),
        MaxFragmentUniformComponentsArb = ((int)0X8b49),
        FramebufferIncompleteDrawBufferExt = ((int)0X8cdb),
        ScreenCoordinatesRend = ((int)0X8490),
        Stencil = ((int)0X1802),
        RgbaFloat16Ati = ((int)0X881a),
        ConstantColor0Nv = ((int)0X852a),
        TextureCubeMapPositiveZExt = ((int)0X8519),
        MaxTextureCoordsArb = ((int)0X8871),
        Lines = ((int)0X0001),
        Front = ((int)0X0404),
        VibranceBiasNv = ((int)0X8719),
        PostColorMatrixGreenBias = ((int)0X80b9),
        Sluminance8Alpha8 = ((int)0X8c45),
        C3fV3f = ((int)0X2a24),
        ColorTable = ((int)0X80d0),
        ColorArrayCountExt = ((int)0X8084),
        LuminanceAlphaIccSgix = ((int)0X8465),
        SignedAlphaNv = ((int)0X8705),
        DepthComponent16Sgix = ((int)0X81a5),
        PostColorMatrixBlueScaleSgi = ((int)0X80b6),
        ReadWrite = ((int)0X88ba),
        ColorTableBias = ((int)0X80d7),
        Luminance4 = ((int)0X803f),
        PixelPackBufferBindingArb = ((int)0X88ed),
        VertexAttribArray8Nv = ((int)0X8658),
        Rgb4Ext = ((int)0X804f),
        PackLsbFirst = ((int)0X0d01),
        Src2Rgb = ((int)0X8582),
        MaxProgramNativeTexIndirectionsArb = ((int)0X8810),
        MaxOptimizedVertexShaderInstructionsExt = ((int)0X87ca),
        PixelCounterBitsNv = ((int)0X8864),
        ClientActiveTexture = ((int)0X84e1),
        EdgeFlagArray = ((int)0X8079),
        Two = ((int)2),
        UnsignedInt10F11F11FRevExt = ((int)0X8c3b),
        PointSpriteNv = ((int)0X8861),
        MaxSamplesExt = ((int)0X8d57),
        MaxTextureLodBias = ((int)0X84fd),
        Texture1DArrayExt = ((int)0X8c18),
        VariableDNv = ((int)0X8526),
        Map1VertexAttrib114Nv = ((int)0X866b),
        PixelUnpackBufferBindingExt = ((int)0X88ef),
        FramebufferExt = ((int)0X8d40),
        CurrentProgram = ((int)0X8b8d),
        NativeGraphicsEndHintPgi = ((int)0X1a204),
        Intensity16uiExt = ((int)0X8d79),
        UnpackSkipImages = ((int)0X806d),
        VertexAttribArray15Nv = ((int)0X865f),
        ActiveUniformMaxLength = ((int)0X8b87),
        PostConvolutionBlueScale = ((int)0X801e),
        StencilBits = ((int)0X0d57),
        MaxClientAttribStackDepth = ((int)0X0d3b),
        Right = ((int)0X0407),
        Return = ((int)0X0102),
        ElementArrayPointerAti = ((int)0X876a),
        VertexArrayListStrideIbm = ((int)103080),
        Operand1AlphaExt = ((int)0X8599),
        ClampToEdge = ((int)0X812f),
        Texture16Arb = ((int)0X84d0),
        Texture17Arb = ((int)0X84d1),
        InvalidValue = ((int)0X0501),
        Texture15Arb = ((int)0X84cf),
        FramebufferAttachmentTextureLevelExt = ((int)0X8cd2),
        Texture13Arb = ((int)0X84cd),
        InterlaceOml = ((int)0X8980),
        LineStipple = ((int)0X0b24),
        VertexArrayListIbm = ((int)103070),
        RedBitAti = ((int)0X00000001),
        DynamicCopyArb = ((int)0X88ea),
        DiscardAti = ((int)0X8763),
        ConvolutionBorderModeExt = ((int)0X8013),
        Gl2D = ((int)0X0600),
        Texture19Arb = ((int)0X84d3),
        PixelFragmentRgbSourceSgis = ((int)0X8354),
        Green = ((int)0X1904),
        PointSizeRange = ((int)0X0b12),
        DrawBuffer15 = ((int)0X8834),
        LowerLeft = ((int)0X8ca1),
        DependentGbTexture2DNv = ((int)0X86ea),
        HistogramBlueSize = ((int)0X802a),
        VariantDatatypeExt = ((int)0X87e5),
        ResampleZeroFillOml = ((int)0X8987),
        TextureBindingCubeMap = ((int)0X8514),
        PixelTileHeightSgix = ((int)0X8141),
        NegativeXExt = ((int)0X87d9),
        ConvolutionFilterScaleExt = ((int)0X8014),
        Srgb8Ext = ((int)0X8c41),
        DotProductTexture1DNv = ((int)0X885c),
        VertexArrayPointerExt = ((int)0X808e),
        Sampler2DRectArb = ((int)0X8b63),
        AsyncDrawPixelsSgix = ((int)0X835d),
        MapAttribVOrderNv = ((int)0X86c4),
        TextureLuminanceSize = ((int)0X8060),
        DrawBuffer11Ati = ((int)0X8830),
        UnpackResampleSgix = ((int)0X842d),
        NumFragmentRegistersAti = ((int)0X896e),
        ProxyTextureCubeMap = ((int)0X851b),
        ArrayEnabled = ((int)0X8622),
        FormatSubsample2424Oml = ((int)0X8982),
        Modelview18Arb = ((int)0X8732),
        IndexArrayCountExt = ((int)0X8087),
        Map1VertexAttrib144Nv = ((int)0X866e),
        CompressedRgbFxt13Dfx = ((int)0X86b0),
        ColorAttachment10Ext = ((int)0X8cea),
        OpDot4Ext = ((int)0X8785),
        Intensity16Ext = ((int)0X804d),
        Srgb8Alpha8Ext = ((int)0X8c43),
        OutputTextureCoord25Ext = ((int)0X87b6),
        OffsetTextureScaleNv = ((int)0X86e2),
        Depth32fStencil8Nv = ((int)0X8dac),
        MaxGeometryTotalOutputComponentsExt = ((int)0X8de1),
        Texture4 = ((int)0X84c4),
        UnpackSubsampleRateSgix = ((int)0X85a1),
        ConstantColorExt = ((int)0X8001),
        Min = ((int)0X8007),
        MaxTextureImageUnits = ((int)0X8872),
        ProgramTemporaries = ((int)0X88a4),
        VertexAttribArrayBufferBindingArb = ((int)0X889f),
        AliasedLineWidthRange = ((int)0X846e),
        ReplicateBorder = ((int)0X8153),
        Alpha4Ext = ((int)0X803b),
        Map2BinormalExt = ((int)0X8447),
        FullStippleHintPgi = ((int)0X1a219),
        Float = ((int)0X1406),
        PolygonToken = ((int)0X0703),
        ConvolutionWidth = ((int)0X8018),
        Con26Ati = ((int)0X895b),
        TextureColorTableSgi = ((int)0X80bc),
        UnsignedInt1010102Ext = ((int)0X8036),
        Con23Ati = ((int)0X8958),
        Con22Ati = ((int)0X8957),
        Matrix26 = ((int)0X88da),
        Intensity8uiExt = ((int)0X8d7f),
        TextureLuminanceSizeExt = ((int)0X8060),
        TransposeNv = ((int)0X862c),
        CompressedRgbS3tcDxt1Ext = ((int)0X83f0),
        Con28Ati = ((int)0X895d),
        Modelview5Arb = ((int)0X8725),
        DependentRgbTextureCubeMapNv = ((int)0X885a),
        BinormalArrayStrideExt = ((int)0X8441),
        Src1Alpha = ((int)0X8589),
        MaxGeometryVaryingComponentsExt = ((int)0X8ddd),
        Diffuse = ((int)0X1201),
        CompressedLuminanceArb = ((int)0X84ea),
        BlueIntegerExt = ((int)0X8d96),
        ImplementationColorReadTypeOes = ((int)0X8b9a),
        PostColorMatrixGreenScale = ((int)0X80b5),
        TransformFeedbackBufferSizeNv = ((int)0X8c85),
        Source0RgbExt = ((int)0X8580),
        Texture24 = ((int)0X84d8),
        UnsignedIdentityNv = ((int)0X8536),
        Texture22 = ((int)0X84d6),
        Alpha12 = ((int)0X803d),
        RenderbufferCoverageSamplesNv = ((int)0X8cab),
        MaxCubeMapTextureSize = ((int)0X851c),
        Blue = ((int)0X1905),
        LightModelSpecularVectorApple = ((int)0X85b0),
        Texture28 = ((int)0X84dc),
        Map2Normal = ((int)0X0db2),
        Texture28Arb = ((int)0X84dc),
        Texture29Arb = ((int)0X84dd),
        UnsignedIntSampler2DRectExt = ((int)0X8dd5),
        BlendColorExt = ((int)0X8005),
    }

    public enum ArbImaging
    {
        HistogramRedSize = ((int)0X8028),
        ColorTable = ((int)0X80d0),
        ConvolutionWidth = ((int)0X8018),
        PostConvolutionGreenScale = ((int)0X801d),
        PostColorMatrixRedScale = ((int)0X80b4),
        PostConvolutionBlueBias = ((int)0X8022),
        ColorMatrix = ((int)0X80b1),
        ColorTableAlphaSize = ((int)0X80dd),
        BlendEquation = ((int)0X8009),
        MaxColorMatrixStackDepth = ((int)0X80b3),
        HistogramAlphaSize = ((int)0X802b),
        HistogramSink = ((int)0X802d),
        ConstantColor = ((int)0X8001),
        ProxyColorTable = ((int)0X80d3),
        HistogramLuminanceSize = ((int)0X802c),
        ColorTableScale = ((int)0X80d6),
        HistogramGreenSize = ((int)0X8029),
        PostConvolutionGreenBias = ((int)0X8021),
        BlendColor = ((int)0X8005),
        ConvolutionFilterBias = ((int)0X8015),
        ColorTableIntensitySize = ((int)0X80df),
        ConvolutionFormat = ((int)0X8017),
        Convolution2D = ((int)0X8011),
        ConvolutionBorderColor = ((int)0X8154),
        ColorTableFormat = ((int)0X80d8),
        PostConvolutionColorTable = ((int)0X80d1),
        ColorTableBias = ((int)0X80d7),
        MaxConvolutionHeight = ((int)0X801b),
        MaxConvolutionWidth = ((int)0X801a),
        HistogramBlueSize = ((int)0X802a),
        PostColorMatrixRedBias = ((int)0X80b8),
        ReplicateBorder = ((int)0X8153),
        PostConvolutionAlphaScale = ((int)0X801f),
        PostColorMatrixAlphaBias = ((int)0X80bb),
        ConstantBorder = ((int)0X8151),
        Convolution1D = ((int)0X8010),
        ConvolutionHeight = ((int)0X8019),
        ColorTableGreenSize = ((int)0X80db),
        OneMinusConstantColor = ((int)0X8002),
        PostColorMatrixGreenBias = ((int)0X80b9),
        Histogram = ((int)0X8024),
        Minmax = ((int)0X802e),
        PostColorMatrixBlueBias = ((int)0X80ba),
        PostConvolutionRedScale = ((int)0X801c),
        PostConvolutionAlphaBias = ((int)0X8023),
        MinmaxFormat = ((int)0X802f),
        PostColorMatrixAlphaScale = ((int)0X80b7),
        ConvolutionBorderMode = ((int)0X8013),
        ColorTableRedSize = ((int)0X80da),
        OneMinusConstantAlpha = ((int)0X8004),
        MinmaxSink = ((int)0X8030),
        PostColorMatrixColorTable = ((int)0X80d2),
        ProxyPostColorMatrixColorTable = ((int)0X80d5),
        ProxyPostConvolutionColorTable = ((int)0X80d4),
        Separable2D = ((int)0X8012),
        ConvolutionFilterScale = ((int)0X8014),
        ProxyHistogram = ((int)0X8025),
        TableTooLarge = ((int)0X8031),
        PostColorMatrixGreenScale = ((int)0X80b5),
        PostConvolutionRedBias = ((int)0X8020),
        ColorTableBlueSize = ((int)0X80dc),
        Reduce = ((int)0X8016),
        PostConvolutionBlueScale = ((int)0X801e),
        HistogramWidth = ((int)0X8026),
        ColorTableLuminanceSize = ((int)0X80de),
        HistogramFormat = ((int)0X8027),
        ColorTableWidth = ((int)0X80d9),
        ConstantAlpha = ((int)0X8003),
        ColorMatrixStackDepth = ((int)0X80b2),
        PostColorMatrixBlueScale = ((int)0X80b6),
    }

    public enum BlendEquationMode
    {
        FuncSubtract = ((int)0X800a),
        FuncReverseSubtract = ((int)0X800b),
        Min = ((int)0X8007),
        FuncAdd = ((int)0X8006),
        Max = ((int)0X8008),
    }

    public enum TextureEnvModeCombine
    {
        Modulate = ((int)0X2100),
        AddSigned = ((int)0X8574),
        Dot3Rgb = ((int)0X86ae),
        Replace = ((int)0X1e01),
        Interpolate = ((int)0X8575),
        Add = ((int)0X0104),
        Dot3Rgba = ((int)0X86af),
        Subtract = ((int)0X84e7),
    }

    public enum TextureEnvModeSource
    {
        Texture9 = ((int)0X84c9),
        Texture25 = ((int)0X84d9),
        Texture30 = ((int)0X84de),
        Texture31 = ((int)0X84df),
        Texture6 = ((int)0X84c6),
        Texture5 = ((int)0X84c5),
        Constant = ((int)0X8576),
        Texture = ((int)0X1702),
        Texture7 = ((int)0X84c7),
        Texture3 = ((int)0X84c3),
        Previous = ((int)0X8578),
        Texture8 = ((int)0X84c8),
        Texture26 = ((int)0X84da),
        Texture27 = ((int)0X84db),
        Texture24 = ((int)0X84d8),
        PrimaryColor = ((int)0X8577),
        Texture22 = ((int)0X84d6),
        Texture23 = ((int)0X84d7),
        Texture20 = ((int)0X84d4),
        Texture21 = ((int)0X84d5),
        Texture0 = ((int)0X84c0),
        Texture1 = ((int)0X84c1),
        Texture28 = ((int)0X84dc),
        Texture29 = ((int)0X84dd),
        Texture16 = ((int)0X84d0),
        Texture17 = ((int)0X84d1),
        Texture14 = ((int)0X84ce),
        Texture15 = ((int)0X84cf),
        Texture12 = ((int)0X84cc),
        Texture13 = ((int)0X84cd),
        Texture10 = ((int)0X84ca),
        Texture11 = ((int)0X84cb),
        Texture4 = ((int)0X84c4),
        Texture2 = ((int)0X84c2),
        Texture18 = ((int)0X84d2),
        Texture19 = ((int)0X84d3),
    }

    public enum TextureEnvModeOperandRgb
    {
        SrcColor = ((int)0X0300),
        OneMinusSrcColor = ((int)0X0301),
        OneMinusSrcAlpha = ((int)0X0303),
        SrcAlpha = ((int)0X0302),
    }

    public enum TextureEnvModeOperandAlpha
    {
        OneMinusSrcAlpha = ((int)0X0303),
        SrcAlpha = ((int)0X0302),
    }

    public enum TextureEnvModeScale
    {
        One = ((int)1),
        Four = ((int)4),
        Two = ((int)2),
    }

    public enum TextureUnit
    {
        Texture29 = ((int)0X84dd),
        Texture5 = ((int)0X84c5),
        Texture18 = ((int)0X84d2),
        Texture19 = ((int)0X84d3),
        Texture1 = ((int)0X84c1),
        Texture4 = ((int)0X84c4),
        Texture26 = ((int)0X84da),
        Texture20 = ((int)0X84d4),
        Texture24 = ((int)0X84d8),
        Texture25 = ((int)0X84d9),
        Texture22 = ((int)0X84d6),
        Texture23 = ((int)0X84d7),
        Texture0 = ((int)0X84c0),
        Texture21 = ((int)0X84d5),
        Texture9 = ((int)0X84c9),
        Texture31 = ((int)0X84df),
        Texture3 = ((int)0X84c3),
        Texture14 = ((int)0X84ce),
        Texture8 = ((int)0X84c8),
        Texture2 = ((int)0X84c2),
        Texture27 = ((int)0X84db),
        Texture30 = ((int)0X84de),
        Texture7 = ((int)0X84c7),
        Texture16 = ((int)0X84d0),
        Texture17 = ((int)0X84d1),
        Texture6 = ((int)0X84c6),
        Texture15 = ((int)0X84cf),
        Texture12 = ((int)0X84cc),
        Texture13 = ((int)0X84cd),
        Texture10 = ((int)0X84ca),
        Texture11 = ((int)0X84cb),
        Texture28 = ((int)0X84dc),
    }

    public enum TextureCompareMode
    {
        CompareRToTexture = ((int)0X884e),
    }

    public enum FogPointerType
    {
        Double = ((int)0X140a),
        Float = ((int)0X1406),
    }

    public enum PointParameterName
    {
        PointFadeThresholdSize = ((int)0X8128),
        PointSizeMax = ((int)0X8127),
        PointSpriteCoordOrigin = ((int)0X8ca0),
        PointSizeMin = ((int)0X8126),
        PointDistanceAttenuation = ((int)0X8129),
    }

    public enum QueryTarget
    {
        SamplesPassed = ((int)0X8914),
    }

    public enum GetQueryParam
    {
        CurrentQuery = ((int)0X8865),
        QueryCounterBits = ((int)0X8864),
    }

    public enum GetQueryObjectParam
    {
        QueryResultAvailable = ((int)0X8867),
        QueryResult = ((int)0X8866),
    }

    public enum BufferTarget
    {
        PixelUnpackBuffer = ((int)0X88ec),
        PixelPackBuffer = ((int)0X88eb),
        ArrayBuffer = ((int)0X8892),
        ElementArrayBuffer = ((int)0X8893),
    }

    public enum BufferUsageHint
    {
        StaticDraw = ((int)0X88e4),
        StreamRead = ((int)0X88e1),
        StreamCopy = ((int)0X88e2),
        DynamicRead = ((int)0X88e9),
        StreamDraw = ((int)0X88e0),
        DynamicCopy = ((int)0X88ea),
        StaticRead = ((int)0X88e5),
        StaticCopy = ((int)0X88e6),
        DynamicDraw = ((int)0X88e8),
    }

    public enum BufferAccess
    {
        ReadOnly = ((int)0X88b8),
        ReadWrite = ((int)0X88ba),
        WriteOnly = ((int)0X88b9),
    }

    public enum BufferParameterName
    {
        BufferSize = ((int)0X8764),
        BufferUsage = ((int)0X8765),
        BufferAccess = ((int)0X88bb),
        BufferMapped = ((int)0X88bc),
    }

    public enum BufferPointer
    {
        BufferMapPointer = ((int)0X88bd),
    }

    public enum ShaderType
    {
        FragmentShader = ((int)0X8b30),
        VertexShader = ((int)0X8b31),
        GeometryShaderExt = ((int)0X8dd9),
    }

    public enum ActiveUniformType
    {
        BoolVec4 = ((int)0X8b59),
        FloatMat2 = ((int)0X8b5a),
        BoolVec3 = ((int)0X8b58),
        FloatMat3 = ((int)0X8b5b),
        Sampler2DShadow = ((int)0X8b62),
        FloatMat3x4 = ((int)0X8b68),
        FloatMat2x4 = ((int)0X8b66),
        BoolVec2 = ((int)0X8b57),
        FloatMat4x2 = ((int)0X8b69),
        Float = ((int)0X1406),
        SamplerCube = ((int)0X8b60),
        IntVec3 = ((int)0X8b54),
        Bool = ((int)0X8b56),
        IntVec4 = ((int)0X8b55),
        FloatMat4x3 = ((int)0X8b6a),
        FloatMat2x3 = ((int)0X8b65),
        Int = ((int)0X1404),
        Sampler1D = ((int)0X8b5d),
        Sampler2D = ((int)0X8b5e),
        Sampler1DShadow = ((int)0X8b61),
        FloatMat3x2 = ((int)0X8b67),
        FloatVec4 = ((int)0X8b52),
        FloatVec3 = ((int)0X8b51),
        FloatVec2 = ((int)0X8b50),
        Sampler3D = ((int)0X8b5f),
        IntVec2 = ((int)0X8b53),
        FloatMat4 = ((int)0X8b5c),
    }

    public enum ActiveAttribType
    {
        FloatVec4 = ((int)0X8b52),
        FloatVec3 = ((int)0X8b51),
        FloatVec2 = ((int)0X8b50),
        FloatMat2 = ((int)0X8b5a),
        Float = ((int)0X1406),
        FloatMat4 = ((int)0X8b5c),
        FloatMat3 = ((int)0X8b5b),
    }

    public enum VertexAttribPointerType
    {
        UnsignedInt = ((int)0X1405),
        Float = ((int)0X1406),
        Byte = ((int)0X1400),
        Int = ((int)0X1404),
        UnsignedShort = ((int)0X1403),
        Double = ((int)0X140a),
        UnsignedByte = ((int)0X1401),
        Short = ((int)0X1402),
    }

    public enum ShaderParameter
    {
        ShaderSourceLength = ((int)0X8b88),
        InfoLogLength = ((int)0X8b84),
        CompileStatus = ((int)0X8b81),
        DeleteStatus = ((int)0X8b80),
        ShaderType = ((int)0X8b4f),
    }

    public enum ProgramParameter
    {
        ActiveAttributeMaxLength = ((int)0X8b8a),
        ActiveAttributes = ((int)0X8b89),
        InfoLogLength = ((int)0X8b84),
        ValidateStatus = ((int)0X8b83),
        DeleteStatus = ((int)0X8b80),
        AttachedShaders = ((int)0X8b85),
        LinkStatus = ((int)0X8b82),
        ActiveUniforms = ((int)0X8b86),
        ActiveUniformMaxLength = ((int)0X8b87),
    }

    public enum VertexAttribParameter
    {
        ArrayType = ((int)0X8625),
        ArrayEnabled = ((int)0X8622),
        ArrayStride = ((int)0X8624),
        ArraySize = ((int)0X8623),
        CurrentVertexAttrib = ((int)0X8626),
        ArrayNormalized = ((int)0X886a),
    }

    public enum VertexAttribPointerParameter
    {
        ArrayPointer = ((int)0X8645),
    }

    public enum DrawBuffersEnum
    {
        None = ((int)0),
        Aux2 = ((int)0X040b),
        FrontRight = ((int)0X0401),
        Aux0 = ((int)0X0409),
        FrontLeft = ((int)0X0400),
        Aux3 = ((int)0X040c),
        Aux1 = ((int)0X040a),
        BackRight = ((int)0X0403),
        BackLeft = ((int)0X0402),
    }

    public enum PointSpriteCoordOriginParameter
    {
        LowerLeft = ((int)0X8ca1),
        UpperLeft = ((int)0X8ca2),
    }

    public enum TextureEnvModePointSprite
    {
        True = ((int)1),
        False = ((int)0),
    }

    public enum ArbMultitexture
    {
        Texture4Arb = ((int)0X84c4),
        MaxTextureUnitsArb = ((int)0X84e2),
        ClientActiveTextureArb = ((int)0X84e1),
        Texture7Arb = ((int)0X84c7),
        Texture30Arb = ((int)0X84de),
        Texture17Arb = ((int)0X84d1),
        Texture14Arb = ((int)0X84ce),
        Texture15Arb = ((int)0X84cf),
        Texture12Arb = ((int)0X84cc),
        Texture13Arb = ((int)0X84cd),
        Texture22Arb = ((int)0X84d6),
        Texture11Arb = ((int)0X84cb),
        Texture20Arb = ((int)0X84d4),
        Texture21Arb = ((int)0X84d5),
        Texture6Arb = ((int)0X84c6),
        Texture18Arb = ((int)0X84d2),
        Texture19Arb = ((int)0X84d3),
        Texture28Arb = ((int)0X84dc),
        Texture8Arb = ((int)0X84c8),
        Texture1Arb = ((int)0X84c1),
        ActiveTextureArb = ((int)0X84e0),
        Texture0Arb = ((int)0X84c0),
        Texture27Arb = ((int)0X84db),
        Texture24Arb = ((int)0X84d8),
        Texture25Arb = ((int)0X84d9),
        Texture23Arb = ((int)0X84d7),
        Texture3Arb = ((int)0X84c3),
        Texture29Arb = ((int)0X84dd),
        Texture16Arb = ((int)0X84d0),
        Texture10Arb = ((int)0X84ca),
        Texture2Arb = ((int)0X84c2),
        Texture9Arb = ((int)0X84c9),
        Texture5Arb = ((int)0X84c5),
        Texture26Arb = ((int)0X84da),
        Texture31Arb = ((int)0X84df),
    }

    public enum ArbTransposeMatrix
    {
        TransposeTextureMatrixArb = ((int)0X84e5),
        TransposeColorMatrixArb = ((int)0X84e6),
        TransposeModelviewMatrixArb = ((int)0X84e3),
        TransposeProjectionMatrixArb = ((int)0X84e4),
    }

    public enum ArbTextureEnvAdd
    {
    }

    public enum ArbTextureCubeMap
    {
        TextureCubeMapPositiveYArb = ((int)0X8517),
        TextureCubeMapNegativeZArb = ((int)0X851a),
        TextureCubeMapPositiveZArb = ((int)0X8519),
        TextureBindingCubeMapArb = ((int)0X8514),
        ProxyTextureCubeMapArb = ((int)0X851b),
        TextureCubeMapNegativeYArb = ((int)0X8518),
        TextureCubeMapNegativeXArb = ((int)0X8516),
        MaxCubeMapTextureSizeArb = ((int)0X851c),
        NormalMapArb = ((int)0X8511),
        TextureCubeMapArb = ((int)0X8513),
        TextureCubeMapPositiveXArb = ((int)0X8515),
        ReflectionMapArb = ((int)0X8512),
    }

    public enum ArbTextureCompression
    {
        CompressedTextureFormatsArb = ((int)0X86a3),
        CompressedAlphaArb = ((int)0X84e9),
        CompressedRgbArb = ((int)0X84ed),
        CompressedLuminanceAlphaArb = ((int)0X84eb),
        NumCompressedTextureFormatsArb = ((int)0X86a2),
        CompressedRgbaArb = ((int)0X84ee),
        TextureCompressedImageSizeArb = ((int)0X86a0),
        CompressedIntensityArb = ((int)0X84ec),
        TextureCompressedArb = ((int)0X86a1),
        TextureCompressionHintArb = ((int)0X84ef),
        CompressedLuminanceArb = ((int)0X84ea),
    }

    public enum ArbTextureBorderClamp
    {
        ClampToBorderArb = ((int)0X812d),
    }

    public enum ArbPointParameters
    {
        PointSizeMaxArb = ((int)0X8127),
        PointFadeThresholdSizeArb = ((int)0X8128),
        PointDistanceAttenuationArb = ((int)0X8129),
        PointSizeMinArb = ((int)0X8126),
    }

    public enum ArbVertexBlend
    {
        Modelview5Arb = ((int)0X8725),
        Modelview29Arb = ((int)0X873d),
        Modelview19Arb = ((int)0X8733),
        Modelview6Arb = ((int)0X8726),
        Modelview7Arb = ((int)0X8727),
        Modelview30Arb = ((int)0X873e),
        ActiveVertexUnitsArb = ((int)0X86a5),
        Modelview20Arb = ((int)0X8734),
        Modelview10Arb = ((int)0X872a),
        WeightArraySizeArb = ((int)0X86ab),
        WeightArrayPointerArb = ((int)0X86ac),
        Modelview23Arb = ((int)0X8737),
        Modelview13Arb = ((int)0X872d),
        Modelview24Arb = ((int)0X8738),
        Modelview14Arb = ((int)0X872e),
        Modelview12Arb = ((int)0X872c),
        MaxVertexUnitsArb = ((int)0X86a4),
        Modelview22Arb = ((int)0X8736),
        VertexBlendArb = ((int)0X86a7),
        Modelview27Arb = ((int)0X873b),
        Modelview17Arb = ((int)0X8731),
        Modelview28Arb = ((int)0X873c),
        Modelview18Arb = ((int)0X8732),
        Modelview8Arb = ((int)0X8728),
        Modelview9Arb = ((int)0X8729),
        WeightSumUnityArb = ((int)0X86a6),
        Modelview26Arb = ((int)0X873a),
        Modelview16Arb = ((int)0X8730),
        Modelview31Arb = ((int)0X873f),
        CurrentWeightArb = ((int)0X86a8),
        Modelview21Arb = ((int)0X8735),
        Modelview11Arb = ((int)0X872b),
        WeightArrayArb = ((int)0X86ad),
        Modelview0Arb = ((int)0X1700),
        Modelview1Arb = ((int)0X850a),
        Modelview25Arb = ((int)0X8739),
        Modelview15Arb = ((int)0X872f),
        WeightArrayTypeArb = ((int)0X86a9),
        WeightArrayStrideArb = ((int)0X86aa),
        Modelview3Arb = ((int)0X8723),
        Modelview2Arb = ((int)0X8722),
        Modelview4Arb = ((int)0X8724),
    }

    public enum ArbMatrixPalette
    {
        MatrixIndexArrayPointerArb = ((int)0X8849),
        CurrentMatrixIndexArb = ((int)0X8845),
        CurrentPaletteMatrixArb = ((int)0X8843),
        MatrixPaletteArb = ((int)0X8840),
        MaxPaletteMatricesArb = ((int)0X8842),
        MaxMatrixPaletteStackDepthArb = ((int)0X8841),
        MatrixIndexArrayTypeArb = ((int)0X8847),
        MatrixIndexArrayStrideArb = ((int)0X8848),
        MatrixIndexArraySizeArb = ((int)0X8846),
        MatrixIndexArrayArb = ((int)0X8844),
    }

    public enum ArbTextureEnvCombine
    {
        Operand1AlphaArb = ((int)0X8599),
        InterpolateArb = ((int)0X8575),
        CombineArb = ((int)0X8570),
        CombineAlphaArb = ((int)0X8572),
        AddSignedArb = ((int)0X8574),
        Operand0RgbArb = ((int)0X8590),
        Operand2RgbArb = ((int)0X8592),
        PrimaryColorArb = ((int)0X8577),
        SubtractArb = ((int)0X84e7),
        Source1AlphaArb = ((int)0X8589),
        Operand2AlphaArb = ((int)0X859a),
        CombineRgbArb = ((int)0X8571),
        ConstantArb = ((int)0X8576),
        Source2AlphaArb = ((int)0X858a),
        Source1RgbArb = ((int)0X8581),
        RgbScaleArb = ((int)0X8573),
        Source2RgbArb = ((int)0X8582),
        Source0RgbArb = ((int)0X8580),
        Operand1RgbArb = ((int)0X8591),
        Source0AlphaArb = ((int)0X8588),
        Operand0AlphaArb = ((int)0X8598),
        PreviousArb = ((int)0X8578),
    }

    public enum ArbTextureEnvCrossbar
    {
    }

    public enum ArbTextureEnvDot3
    {
        Dot3RgbaArb = ((int)0X86af),
        Dot3RgbArb = ((int)0X86ae),
    }

    public enum ArbTextureMirroredRepeat
    {
        MirroredRepeatArb = ((int)0X8370),
    }

    public enum ArbDepthTexture
    {
        DepthComponent16Arb = ((int)0X81a5),
        DepthComponent24Arb = ((int)0X81a6),
        DepthTextureModeArb = ((int)0X884b),
        TextureDepthSizeArb = ((int)0X884a),
        DepthComponent32Arb = ((int)0X81a7),
    }

    public enum ArbShadow
    {
        CompareRToTextureArb = ((int)0X884e),
        TextureCompareModeArb = ((int)0X884c),
        TextureCompareFuncArb = ((int)0X884d),
    }

    public enum ArbShadowAmbient
    {
        TextureCompareFailValueArb = ((int)0X80bf),
    }

    public enum ArbWindowPos
    {
    }

    public enum ArbVertexProgram
    {
        ColorSumArb = ((int)0X8458),
        ProgramErrorStringArb = ((int)0X8874),
        MaxProgramMatricesArb = ((int)0X862f),
        ProgramErrorPositionArb = ((int)0X864b),
        ProgramFormatAsciiArb = ((int)0X8875),
        CurrentMatrixArb = ((int)0X8641),
        MaxVertexAttribsArb = ((int)0X8869),
        VertexProgramTwoSideArb = ((int)0X8643),
        MaxProgramMatrixStackDepthArb = ((int)0X862e),
        CurrentMatrixStackDepthArb = ((int)0X8640),
        TransposeCurrentMatrixArb = ((int)0X88b7),
        VertexProgramPointSizeArb = ((int)0X8642),
    }

    public enum AssemblyProgramTargetArb
    {
        VertexProgram = ((int)0X8620),
        GeometryProgramNv = ((int)0X8c26),
        FragmentProgram = ((int)0X8804),
    }

    public enum AssemblyProgramFormatArb
    {
        ProgramFormatAsciiArb = ((int)0X8875),
    }

    public enum AssemblyProgramParameterArb
    {
        MaxProgramTexIndirectionsArb = ((int)0X880d),
        ProgramBinding = ((int)0X8677),
        ProgramTexInstructionsArb = ((int)0X8806),
        ProgramNativeInstructions = ((int)0X88a2),
        MaxProgramTemporaries = ((int)0X88a5),
        MaxProgramNativeParameters = ((int)0X88ab),
        ProgramAttribs = ((int)0X88ac),
        ProgramNativeAddressRegisters = ((int)0X88b2),
        ProgramNativeAttribs = ((int)0X88ae),
        MaxProgramNativeTemporaries = ((int)0X88a7),
        MaxProgramTexInstructionsArb = ((int)0X880c),
        MaxProgramNativeTexIndirectionsArb = ((int)0X8810),
        MaxProgramNativeAluInstructionsArb = ((int)0X880e),
        MaxProgramNativeInstructions = ((int)0X88a3),
        MaxProgramAluInstructionsArb = ((int)0X880b),
        MaxProgramInstructions = ((int)0X88a1),
        MaxProgramAddressRegisters = ((int)0X88b1),
        ProgramNativeTexIndirectionsArb = ((int)0X880a),
        ProgramNativeParameters = ((int)0X88aa),
        MaxProgramEnvParameters = ((int)0X88b5),
        MaxProgramAttribs = ((int)0X88ad),
        MaxProgramNativeTexInstructionsArb = ((int)0X880f),
        ProgramAddressRegisters = ((int)0X88b0),
        ProgramTexIndirectionsArb = ((int)0X8807),
        MaxProgramLocalParameters = ((int)0X88b4),
        MaxProgramNativeAttribs = ((int)0X88af),
        ProgramParameters = ((int)0X88a8),
        ProgramFormat = ((int)0X8876),
        MaxProgramParameters = ((int)0X88a9),
        ProgramAluInstructionsArb = ((int)0X8805),
        ProgramNativeTemporaries = ((int)0X88a6),
        ProgramNativeAluInstructionsArb = ((int)0X8808),
        ProgramLength = ((int)0X8627),
        ProgramNativeTexInstructionsArb = ((int)0X8809),
        ProgramInstruction = ((int)0X88a0),
        MaxProgramNativeAddressRegisters = ((int)0X88b3),
        ProgramTemporaries = ((int)0X88a4),
        ProgramUnderNativeLimits = ((int)0X88b6),
    }

    public enum AssemblyProgramStringParameterArb
    {
        ProgramString = ((int)0X8628),
    }

    public enum MatrixModeArb
    {
        Modelview = ((int)0X1700),
        Matrix12 = ((int)0X88cc),
        Matrix14 = ((int)0X88ce),
        Matrix5 = ((int)0X88c5),
        Matrix28 = ((int)0X88dc),
        Matrix23 = ((int)0X88d7),
        Matrix25 = ((int)0X88d9),
        Matrix4 = ((int)0X88c4),
        Matrix17 = ((int)0X88d1),
        Matrix1 = ((int)0X88c1),
        Matrix31 = ((int)0X88df),
        Matrix7 = ((int)0X88c7),
        Matrix0 = ((int)0X88c0),
        Texture = ((int)0X1702),
        Matrix21 = ((int)0X88d5),
        Matrix3 = ((int)0X88c3),
        Matrix13 = ((int)0X88cd),
        Matrix15 = ((int)0X88cf),
        Color = ((int)0X1800),
        Matrix18 = ((int)0X88d2),
        Matrix9 = ((int)0X88c9),
        Matrix26 = ((int)0X88da),
        Matrix27 = ((int)0X88db),
        Matrix29 = ((int)0X88dd),
        Matrix10 = ((int)0X88ca),
        Matrix11 = ((int)0X88cb),
        Matrix8 = ((int)0X88c8),
        Projection = ((int)0X1701),
        Matrix22 = ((int)0X88d6),
        Matrix24 = ((int)0X88d8),
        Matrix6 = ((int)0X88c6),
        Matrix16 = ((int)0X88d0),
        Matrix30 = ((int)0X88de),
        Matrix19 = ((int)0X88d3),
        Matrix2 = ((int)0X88c2),
        Matrix20 = ((int)0X88d4),
    }

    public enum VertexAttribParameterArb
    {
        ArrayType = ((int)0X8625),
        ArrayEnabled = ((int)0X8622),
        ArrayStride = ((int)0X8624),
        ArraySize = ((int)0X8623),
        CurrentVertexAttrib = ((int)0X8626),
        ArrayNormalized = ((int)0X886a),
    }

    public enum VertexAttribPointerParameterArb
    {
        ArrayPointer = ((int)0X8645),
    }

    public enum VertexAttribPointerTypeArb
    {
        UnsignedInt = ((int)0X1405),
        Float = ((int)0X1406),
        Byte = ((int)0X1400),
        Int = ((int)0X1404),
        UnsignedShort = ((int)0X1403),
        Double = ((int)0X140a),
        UnsignedByte = ((int)0X1401),
        Short = ((int)0X1402),
    }

    public enum ArbFragmentProgram
    {
        MaxTextureCoordsArb = ((int)0X8871),
        MaxTextureImageUnitsArb = ((int)0X8872),
    }

    public enum BufferTargetArb
    {
        ArrayBuffer = ((int)0X8892),
        ElementArrayBuffer = ((int)0X8893),
    }

    public enum BufferUsageArb
    {
        StaticDraw = ((int)0X88e4),
        StreamRead = ((int)0X88e1),
        StreamCopy = ((int)0X88e2),
        DynamicRead = ((int)0X88e9),
        StreamDraw = ((int)0X88e0),
        DynamicCopy = ((int)0X88ea),
        StaticRead = ((int)0X88e5),
        StaticCopy = ((int)0X88e6),
        DynamicDraw = ((int)0X88e8),
    }

    public enum BufferAccessArb
    {
        ReadOnly = ((int)0X88b8),
        ReadWrite = ((int)0X88ba),
        WriteOnly = ((int)0X88b9),
    }

    public enum BufferParameterNameArb
    {
        BufferSize = ((int)0X8764),
        BufferUsage = ((int)0X8765),
        BufferAccess = ((int)0X88bb),
        BufferMapped = ((int)0X88bc),
    }

    public enum BufferPointerNameArb
    {
        BufferMapPointer = ((int)0X88bd),
    }

    public enum ArbVertexBufferObject
    {
        StreamReadArb = ((int)0X88e1),
        DynamicCopyArb = ((int)0X88ea),
        ReadOnlyArb = ((int)0X88b8),
        StreamCopyArb = ((int)0X88e2),
        ReadWriteArb = ((int)0X88ba),
        BufferMapPointerArb = ((int)0X88bd),
        StaticDrawArb = ((int)0X88e4),
        DynamicDrawArb = ((int)0X88e8),
        VertexAttribArrayBufferBindingArb = ((int)0X889f),
        SecondaryColorArrayBufferBindingArb = ((int)0X889c),
        BufferSizeArb = ((int)0X8764),
        BufferUsageArb = ((int)0X8765),
        ElementArrayBufferBindingArb = ((int)0X8895),
        BufferAccessArb = ((int)0X88bb),
        ArrayBufferBindingArb = ((int)0X8894),
        ColorArrayBufferBindingArb = ((int)0X8898),
        TextureCoordArrayBufferBindingArb = ((int)0X889a),
        StaticReadArb = ((int)0X88e5),
        WeightArrayBufferBindingArb = ((int)0X889e),
        ArrayBufferArb = ((int)0X8892),
        ElementArrayBufferArb = ((int)0X8893),
        VertexArrayBufferBindingArb = ((int)0X8896),
        WriteOnlyArb = ((int)0X88b9),
        BufferMappedArb = ((int)0X88bc),
        IndexArrayBufferBindingArb = ((int)0X8899),
        StaticCopyArb = ((int)0X88e6),
        StreamDrawArb = ((int)0X88e0),
        DynamicReadArb = ((int)0X88e9),
        EdgeFlagArrayBufferBindingArb = ((int)0X889b),
        FogCoordinateArrayBufferBindingArb = ((int)0X889d),
        NormalArrayBufferBindingArb = ((int)0X8897),
    }

    public enum ArbOcclusionQuery
    {
        SamplesPassedArb = ((int)0X8914),
        CurrentQueryArb = ((int)0X8865),
        QueryResultAvailableArb = ((int)0X8867),
        QueryCounterBitsArb = ((int)0X8864),
        QueryResultArb = ((int)0X8866),
    }

    public enum ArbShaderObjects
    {
        ObjectSubtypeArb = ((int)0X8b4f),
        ObjectValidateStatusArb = ((int)0X8b83),
        IntVec3Arb = ((int)0X8b54),
        Sampler2DShadowArb = ((int)0X8b62),
        ObjectInfoLogLengthArb = ((int)0X8b84),
        ObjectAttachedObjectsArb = ((int)0X8b85),
        SamplerCubeArb = ((int)0X8b60),
        ObjectDeleteStatusArb = ((int)0X8b80),
        FloatVec2Arb = ((int)0X8b50),
        IntVec2Arb = ((int)0X8b53),
        FloatMat4Arb = ((int)0X8b5c),
        FloatMat3Arb = ((int)0X8b5b),
        FloatMat2Arb = ((int)0X8b5a),
        ObjectCompileStatusArb = ((int)0X8b81),
        Sampler1DShadowArb = ((int)0X8b61),
        Sampler2DRectArb = ((int)0X8b63),
        ObjectTypeArb = ((int)0X8b4e),
        Sampler1DArb = ((int)0X8b5d),
        Sampler2DArb = ((int)0X8b5e),
        IntVec4Arb = ((int)0X8b55),
        FloatVec4Arb = ((int)0X8b52),
        FloatVec3Arb = ((int)0X8b51),
        ObjectActiveUniformMaxLengthArb = ((int)0X8b87),
        Sampler2DRectShadowArb = ((int)0X8b64),
        BoolVec3Arb = ((int)0X8b58),
        BoolArb = ((int)0X8b56),
        ObjectActiveUniformsArb = ((int)0X8b86),
        ObjectLinkStatusArb = ((int)0X8b82),
        BoolVec2Arb = ((int)0X8b57),
        Sampler3DArb = ((int)0X8b5f),
        ShaderObjectArb = ((int)0X8b48),
        ProgramObjectArb = ((int)0X8b40),
        BoolVec4Arb = ((int)0X8b59),
        ObjectShaderSourceLengthArb = ((int)0X8b88),
    }

    public enum ArbVertexShader
    {
        MaxVertexTextureImageUnitsArb = ((int)0X8b4c),
        MaxCombinedTextureImageUnitsArb = ((int)0X8b4d),
        ObjectActiveAttributeMaxLengthArb = ((int)0X8b8a),
        MaxVertexUniformComponentsArb = ((int)0X8b4a),
        MaxVaryingFloatsArb = ((int)0X8b4b),
        VertexShaderArb = ((int)0X8b31),
        ObjectActiveAttributesArb = ((int)0X8b89),
    }

    public enum ArbFragmentShader
    {
        FragmentShaderArb = ((int)0X8b30),
        MaxFragmentUniformComponentsArb = ((int)0X8b49),
        FragmentShaderDerivativeHintArb = ((int)0X8b8b),
    }

    public enum ArbShadingLanguage100
    {
        ShadingLanguageVersionArb = ((int)0X8b8c),
    }

    public enum ArbTextureNonPowerOfTwo
    {
    }

    public enum ArbPointSprite
    {
        CoordReplaceArb = ((int)0X8862),
        PointSpriteArb = ((int)0X8861),
    }

    public enum ArbFragmentProgramShadow
    {
    }

    public enum ArbDrawBuffers
    {
        DrawBuffer13Arb = ((int)0X8832),
        DrawBuffer7Arb = ((int)0X882c),
        DrawBuffer5Arb = ((int)0X882a),
        DrawBuffer15Arb = ((int)0X8834),
        MaxDrawBuffersArb = ((int)0X8824),
        DrawBuffer4Arb = ((int)0X8829),
        DrawBuffer8Arb = ((int)0X882d),
        DrawBuffer10Arb = ((int)0X882f),
        DrawBuffer1Arb = ((int)0X8826),
        DrawBuffer2Arb = ((int)0X8827),
        DrawBuffer12Arb = ((int)0X8831),
        DrawBuffer14Arb = ((int)0X8833),
        DrawBuffer6Arb = ((int)0X882b),
        DrawBuffer9Arb = ((int)0X882e),
        DrawBuffer3Arb = ((int)0X8828),
        DrawBuffer11Arb = ((int)0X8830),
        DrawBuffer0Arb = ((int)0X8825),
    }

    public enum ArbTextureRectangle
    {
        MaxRectangleTextureSizeArb = ((int)0X84f8),
        TextureBindingRectangleArb = ((int)0X84f6),
        ProxyTextureRectangleArb = ((int)0X84f7),
        TextureRectangleArb = ((int)0X84f5),
    }

    public enum ArbColorBufferFloat
    {
        ClampVertexColorArb = ((int)0X891a),
        ClampFragmentColorArb = ((int)0X891b),
        ClampReadColorArb = ((int)0X891c),
        FixedOnlyArb = ((int)0X891d),
        RgbaFloatModeArb = ((int)0X8820),
    }

    public enum ArbHalfFloatPixel
    {
        HalfFloatArb = ((int)0X140b),
    }

    public enum ArbTextureFloat
    {
        Rgba16fArb = ((int)0X881a),
        TextureRedTypeArb = ((int)0X8c10),
        UnsignedNormalizedArb = ((int)0X8c17),
        TextureAlphaTypeArb = ((int)0X8c13),
        TextureGreenTypeArb = ((int)0X8c11),
        LuminanceAlpha32fArb = ((int)0X8819),
        TextureLuminanceTypeArb = ((int)0X8c14),
        TextureBlueTypeArb = ((int)0X8c12),
        Intensity16fArb = ((int)0X881d),
        Intensity32fArb = ((int)0X8817),
        Rgb16fArb = ((int)0X881b),
        TextureIntensityTypeArb = ((int)0X8c15),
        Rgba32fArb = ((int)0X8814),
        Alpha32fArb = ((int)0X8816),
        Alpha16fArb = ((int)0X881c),
        Luminance32fArb = ((int)0X8818),
        LuminanceAlpha16fArb = ((int)0X881f),
        TextureDepthTypeArb = ((int)0X8c16),
        Rgb32fArb = ((int)0X8815),
        Luminance16fArb = ((int)0X881e),
    }

    public enum ArbPixelBufferObject
    {
        PixelUnpackBufferArb = ((int)0X88ec),
        PixelPackBufferBindingArb = ((int)0X88ed),
        PixelUnpackBufferBindingArb = ((int)0X88ef),
        PixelPackBufferArb = ((int)0X88eb),
    }

    public enum ExtSubtexture
    {
    }

    public enum ExtCopyTexture
    {
    }

    public enum ExtMiscAttribute
    {
    }

    public enum ExtBlendLogicOp
    {
    }

    public enum ExtPointParameters
    {
        PointSizeMaxExt = ((int)0X8127),
        DistanceAttenuationExt = ((int)0X8129),
        PointSizeMinExt = ((int)0X8126),
        PointFadeThresholdSizeExt = ((int)0X8128),
    }

    public enum SgixTagSampleBuffer
    {
    }

    public enum SgixPolynomialFfd
    {
        TextureDeformationSgix = ((int)0X8195),
        MaxDeformationOrderSgix = ((int)0X8197),
        GeometryDeformationSgix = ((int)0X8194),
        DeformationsMaskSgix = ((int)0X8196),
    }

    public enum SgixFlushRaster
    {
    }

    public enum HpImageTransform
    {
        ImageRotateAngleHp = ((int)0X8159),
        ImageTranslateXHp = ((int)0X8157),
        AverageHp = ((int)0X8160),
        CubicHp = ((int)0X815f),
        ImageTranslateYHp = ((int)0X8158),
        ImageMagFilterHp = ((int)0X815c),
        ImageRotateOriginXHp = ((int)0X815a),
        ImageScaleXHp = ((int)0X8155),
        ImageMinFilterHp = ((int)0X815d),
        ImageScaleYHp = ((int)0X8156),
        ImageTransform2DHp = ((int)0X8161),
        ImageCubicWeightHp = ((int)0X815e),
        ProxyPostImageTransformColorTableHp = ((int)0X8163),
        PostImageTransformColorTableHp = ((int)0X8162),
        ImageRotateOriginYHp = ((int)0X815b),
    }

    public enum IngrPaletteBuffer
    {
    }

    public enum ExtColorSubtable
    {
    }

    public enum PgiVertexHints
    {
        MatDiffuseBitPgi = ((int)0X00400000),
        Color3BitPgi = ((int)0X00010000),
        EdgeflagBitPgi = ((int)0X00040000),
        VertexDataHintPgi = ((int)0X1a22a),
        MaxVertexHintPgi = ((int)0X1a22d),
        MatShininessBitPgi = ((int)0X02000000),
        Texcoord1BitPgi = ((int)0X10000000),
        Color4BitPgi = ((int)0X00020000),
        Texcoord3BitPgi = ((int)0X40000000),
        VertexConsistentHintPgi = ((int)0X1a22b),
        IndexBitPgi = ((int)0X00080000),
        Vertex4BitPgi = ((int)0X00000008),
        NormalBitPgi = ((int)0X08000000),
        MatSpecularBitPgi = ((int)0X04000000),
        Texcoord4BitPgi = unchecked((int)0X80000000),
        Texcoord2BitPgi = ((int)0X20000000),
        MatAmbientAndDiffuseBitPgi = ((int)0X00200000),
        MaterialSideHintPgi = ((int)0X1a22c),
        MatAmbientBitPgi = ((int)0X00100000),
        MatEmissionBitPgi = ((int)0X00800000),
        MatColorIndexesBitPgi = ((int)0X01000000),
        Vertex23BitPgi = ((int)0X00000004),
    }

    public enum PgiMiscHints
    {
        WideLineHintPgi = ((int)0X1a222),
        AllowDrawObjHintPgi = ((int)0X1a20e),
        StrictDepthfuncHintPgi = ((int)0X1a216),
        AllowDrawFrgHintPgi = ((int)0X1a210),
        FullStippleHintPgi = ((int)0X1a219),
        StrictScissorHintPgi = ((int)0X1a218),
        ClipNearHintPgi = ((int)0X1a220),
        NativeGraphicsHandlePgi = ((int)0X1a202),
        ConserveMemoryHintPgi = ((int)0X1a1fd),
        BackNormalsHintPgi = ((int)0X1a223),
        AllowDrawMemHintPgi = ((int)0X1a211),
        ClipFarHintPgi = ((int)0X1a221),
        AlwaysFastHintPgi = ((int)0X1a20c),
        ReclaimMemoryHintPgi = ((int)0X1a1fe),
        NativeGraphicsEndHintPgi = ((int)0X1a204),
        AllowDrawWinHintPgi = ((int)0X1a20f),
        PreferDoublebufferHintPgi = ((int)0X1a1f8),
        NativeGraphicsBeginHintPgi = ((int)0X1a203),
        StrictLightingHintPgi = ((int)0X1a217),
        AlwaysSoftHintPgi = ((int)0X1a20d),
    }

    public enum ExtPalettedTexture
    {
        ColorIndex2Ext = ((int)0X80e3),
        ColorIndex1Ext = ((int)0X80e2),
        ColorIndex12Ext = ((int)0X80e6),
        ColorIndex8Ext = ((int)0X80e5),
        ColorIndex4Ext = ((int)0X80e4),
        TextureIndexSizeExt = ((int)0X80ed),
        ColorIndex16Ext = ((int)0X80e7),
    }

    public enum ExtClipVolumeHint
    {
        ClipVolumeClippingHintExt = ((int)0X80f0),
    }

    public enum ExtIndexTexture
    {
    }

    public enum ExtIndexMaterial
    {
        IndexMaterialExt = ((int)0X81b8),
        IndexMaterialFaceExt = ((int)0X81ba),
        IndexMaterialParameterExt = ((int)0X81b9),
    }

    public enum ExtIndexFunc
    {
        IndexTestExt = ((int)0X81b5),
        IndexTestRefExt = ((int)0X81b7),
        IndexTestFuncExt = ((int)0X81b6),
    }

    public enum ExtIndexArrayFormats
    {
        IuiV3fExt = ((int)0X81ae),
        IuiV2fExt = ((int)0X81ad),
        T2fIuiN3fV3fExt = ((int)0X81b4),
        T2fIuiV2fExt = ((int)0X81b1),
        IuiN3fV2fExt = ((int)0X81af),
        T2fIuiV3fExt = ((int)0X81b2),
        T2fIuiN3fV2fExt = ((int)0X81b3),
        IuiN3fV3fExt = ((int)0X81b0),
    }

    public enum ExtCompiledVertexArray
    {
        ArrayElementLockCountExt = ((int)0X81a9),
        ArrayElementLockFirstExt = ((int)0X81a8),
    }

    public enum ExtCullVertex
    {
        CullVertexExt = ((int)0X81aa),
        CullVertexObjectPositionExt = ((int)0X81ac),
        CullVertexEyePositionExt = ((int)0X81ab),
    }

    public enum IbmRasterposClip
    {
        RasterPositionUnclippedIbm = ((int)0X19262),
    }

    public enum HpTextureLighting
    {
        TexturePostSpecularHp = ((int)0X8168),
        TextureLightingModeHp = ((int)0X8167),
        TexturePreSpecularHp = ((int)0X8169),
    }

    public enum ExtDrawRangeElements
    {
        MaxElementsIndicesExt = ((int)0X80e9),
        MaxElementsVerticesExt = ((int)0X80e8),
    }

    public enum WinPhongShading
    {
        PhongHintWin = ((int)0X80eb),
        PhongWin = ((int)0X80ea),
    }

    public enum WinSpecularFog
    {
        FogSpecularTextureWin = ((int)0X80ec),
    }

    public enum ExtLightTexture
    {
        FragmentColorExt = ((int)0X834c),
        TextureLightExt = ((int)0X8350),
        ShadowAttenuationExt = ((int)0X834e),
        AttenuationExt = ((int)0X834d),
        TextureMaterialParameterExt = ((int)0X8352),
        TextureMaterialFaceExt = ((int)0X8351),
        FragmentDepthExt = ((int)0X8452),
        FragmentNormalExt = ((int)0X834a),
        TextureApplicationModeExt = ((int)0X834f),
        FragmentMaterialExt = ((int)0X8349),
    }

    public enum SgixAsync
    {
        AsyncMarkerSgix = ((int)0X8329),
    }

    public enum IntelTextureScissor
    {
    }

    public enum HpOcclusionTest
    {
        OcclusionTestResultHp = ((int)0X8166),
        OcclusionTestHp = ((int)0X8165),
    }

    public enum ExtPixelTransformColorTable
    {
    }

    public enum ExtSecondaryColor
    {
        ColorSumExt = ((int)0X8458),
        SecondaryColorArrayTypeExt = ((int)0X845b),
        SecondaryColorArrayStrideExt = ((int)0X845c),
        CurrentSecondaryColorExt = ((int)0X8459),
        SecondaryColorArrayExt = ((int)0X845e),
        SecondaryColorArraySizeExt = ((int)0X845a),
        SecondaryColorArrayPointerExt = ((int)0X845d),
    }

    public enum ExtTexturePerturbNormal
    {
        PerturbExt = ((int)0X85ae),
        TextureNormalExt = ((int)0X85af),
    }

    public enum ExtMultiDrawArrays
    {
    }

    public enum ExtFogCoord
    {
        CurrentFogCoordinateExt = ((int)0X8453),
        FragmentDepthExt = ((int)0X8452),
        FogCoordinateArrayExt = ((int)0X8457),
        FogCoordinateSourceExt = ((int)0X8450),
        FogCoordinateArrayPointerExt = ((int)0X8456),
        FogCoordinateArrayStrideExt = ((int)0X8455),
        FogCoordinateArrayTypeExt = ((int)0X8454),
        FogCoordinateExt = ((int)0X8451),
    }

    public enum RendScreenCoordinates
    {
        ScreenCoordinatesRend = ((int)0X8490),
        InvertedScreenWRend = ((int)0X8491),
    }

    public enum ExtCoordinateFrame
    {
        TangentArrayExt = ((int)0X8439),
        CurrentBinormalExt = ((int)0X843c),
        Map2TangentExt = ((int)0X8445),
        BinormalArrayExt = ((int)0X843a),
        CurrentTangentExt = ((int)0X843b),
        TangentArrayStrideExt = ((int)0X843f),
        BinormalArrayStrideExt = ((int)0X8441),
        Map1BinormalExt = ((int)0X8446),
        Map1TangentExt = ((int)0X8444),
        Map2BinormalExt = ((int)0X8447),
        TangentArrayTypeExt = ((int)0X843e),
        BinormalArrayPointerExt = ((int)0X8443),
        TangentArrayPointerExt = ((int)0X8442),
        BinormalArrayTypeExt = ((int)0X8440),
    }

    public enum ExtTextureEnvCombine
    {
        Operand2RgbExt = ((int)0X8592),
        Source2AlphaExt = ((int)0X858a),
        PreviousExt = ((int)0X8578),
        Operand1AlphaExt = ((int)0X8599),
        Source1RgbExt = ((int)0X8581),
        AddSignedExt = ((int)0X8574),
        CombineRgbExt = ((int)0X8571),
        Operand0RgbExt = ((int)0X8590),
        RgbScaleExt = ((int)0X8573),
        CombineExt = ((int)0X8570),
        Operand0AlphaExt = ((int)0X8598),
        ConstantExt = ((int)0X8576),
        PrimaryColorExt = ((int)0X8577),
        Source1AlphaExt = ((int)0X8589),
        Source0AlphaExt = ((int)0X8588),
        Source2RgbExt = ((int)0X8582),
        InterpolateExt = ((int)0X8575),
        CombineAlphaExt = ((int)0X8572),
        Source0RgbExt = ((int)0X8580),
        Operand1RgbExt = ((int)0X8591),
        Operand2AlphaExt = ((int)0X859a),
    }

    public enum AppleSpecularVector
    {
        LightModelSpecularVectorApple = ((int)0X85b0),
    }

    public enum AppleTransformHint
    {
        TransformHintApple = ((int)0X85b1),
    }

    public enum SgixFogScale
    {
        FogScaleSgix = ((int)0X81fc),
        FogScaleValueSgix = ((int)0X81fd),
    }

    public enum SunxConstantData
    {
        TextureConstantDataSunx = ((int)0X81d6),
        UnpackConstantDataSunx = ((int)0X81d5),
    }

    public enum SunGlobalAlpha
    {
        GlobalAlphaFactorSun = ((int)0X81da),
        GlobalAlphaSun = ((int)0X81d9),
    }

    public enum SunTriangleList
    {
        R1uiN3fV3fSun = ((int)0X85c7),
        R1uiC3fV3fSun = ((int)0X85c6),
        R1uiC4fN3fV3fSun = ((int)0X85c8),
        R1uiV3fSun = ((int)0X85c4),
        TriangleListSun = ((int)0X81d7),
        R1uiT2fN3fV3fSun = ((int)0X85ca),
        ReplacementCodeArrayPointerSun = ((int)0X85c3),
        R1uiC4ubV3fSun = ((int)0X85c5),
        RestartSun = ((int)0X0001),
        ReplacementCodeArrayStrideSun = ((int)0X85c2),
        ReplacementCodeSun = ((int)0X81d8),
        R1uiT2fC4fN3fV3fSun = ((int)0X85cb),
        ReplacementCodeArrayTypeSun = ((int)0X85c1),
        R1uiT2fV3fSun = ((int)0X85c9),
        ReplaceOldestSun = ((int)0X0003),
        ReplacementCodeArraySun = ((int)0X85c0),
        ReplaceMiddleSun = ((int)0X0002),
    }

    public enum SunVertex
    {
    }

    public enum ExtBlendFuncSeparate
    {
        BlendSrcRgbExt = ((int)0X80c9),
        BlendDstRgbExt = ((int)0X80c8),
        BlendSrcAlphaExt = ((int)0X80cb),
        BlendDstAlphaExt = ((int)0X80ca),
    }

    public enum IngrColorClamp
    {
        RedMinClampIngr = ((int)0X8560),
        GreenMaxClampIngr = ((int)0X8565),
        GreenMinClampIngr = ((int)0X8561),
        BlueMaxClampIngr = ((int)0X8566),
        RedMaxClampIngr = ((int)0X8564),
        AlphaMaxClampIngr = ((int)0X8567),
        BlueMinClampIngr = ((int)0X8562),
        AlphaMinClampIngr = ((int)0X8563),
    }

    public enum IngrInterlaceRead
    {
        InterlaceReadIngr = ((int)0X8568),
    }

    public enum ExtStencilWrap
    {
        DecrWrapExt = ((int)0X8508),
        IncrWrapExt = ((int)0X8507),
    }

    public enum Ext422Pixels
    {
        Gl422Ext = ((int)0X80cc),
        Gl422AverageExt = ((int)0X80ce),
        Gl422RevExt = ((int)0X80cd),
        Gl422RevAverageExt = ((int)0X80cf),
    }

    public enum NvTexgenReflection
    {
        ReflectionMapNv = ((int)0X8512),
        NormalMapNv = ((int)0X8511),
    }

    public enum ExtTextureCubeMap
    {
        TextureCubeMapPositiveZExt = ((int)0X8519),
        TextureBindingCubeMapExt = ((int)0X8514),
        TextureCubeMapNegativeZExt = ((int)0X851a),
        TextureCubeMapNegativeYExt = ((int)0X8518),
        ProxyTextureCubeMapExt = ((int)0X851b),
        TextureCubeMapExt = ((int)0X8513),
        TextureCubeMapPositiveXExt = ((int)0X8515),
        TextureCubeMapPositiveYExt = ((int)0X8517),
        MaxCubeMapTextureSizeExt = ((int)0X851c),
        TextureCubeMapNegativeXExt = ((int)0X8516),
        ReflectionMapExt = ((int)0X8512),
        NormalMapExt = ((int)0X8511),
    }

    public enum SunConvolutionBorderModes
    {
        WrapBorderSun = ((int)0X81d4),
    }

    public enum ExtTextureEnvAdd
    {
    }

    public enum ExtTextureLodBias
    {
        MaxTextureLodBiasExt = ((int)0X84fd),
        TextureLodBiasExt = ((int)0X8501),
        TextureFilterControlExt = ((int)0X8500),
    }

    public enum ExtTextureFilterAnisotropic
    {
        MaxTextureMaxAnisotropyExt = ((int)0X84ff),
        TextureMaxAnisotropyExt = ((int)0X84fe),
    }

    public enum ExtVertexWeighting
    {
        Modelview1MatrixExt = ((int)0X8506),
        VertexWeightArraySizeExt = ((int)0X850d),
        CurrentVertexWeightExt = ((int)0X850b),
        VertexWeightArrayExt = ((int)0X850c),
        VertexWeightArrayTypeExt = ((int)0X850e),
        Modelview0MatrixExt = ((int)0X0ba6),
        VertexWeightingExt = ((int)0X8509),
        Modelview1StackDepthExt = ((int)0X8502),
        Modelview1Ext = ((int)0X850a),
        Modelview0StackDepthExt = ((int)0X0ba3),
        Modelview0Ext = ((int)0X1700),
        VertexWeightArrayPointerExt = ((int)0X8510),
        VertexWeightArrayStrideExt = ((int)0X850f),
    }

    public enum NvLightMaxExponent
    {
        MaxSpotExponentNv = ((int)0X8505),
        MaxShininessNv = ((int)0X8504),
    }

    public enum NvVertexArrayRange
    {
        VertexArrayRangeLengthNv = ((int)0X851e),
        VertexArrayRangeValidNv = ((int)0X851f),
        VertexArrayRangeNv = ((int)0X851d),
        MaxVertexArrayRangeElementNv = ((int)0X8520),
        VertexArrayRangePointerNv = ((int)0X8521),
    }

    public enum NvRegisterCombiners
    {
        Zero = ((int)0),
        Texture1Arb = ((int)0X84c1),
        Combiner0Nv = ((int)0X8550),
        CombinerAbOutputNv = ((int)0X854a),
        ExpandNormalNv = ((int)0X8538),
        CombinerMappingNv = ((int)0X8543),
        ExpandNegateNv = ((int)0X8539),
        CombinerAbDotProductNv = ((int)0X8545),
        Combiner2Nv = ((int)0X8552),
        ScaleByOneHalfNv = ((int)0X8540),
        MaxGeneralCombinersNv = ((int)0X854d),
        ScaleByFourNv = ((int)0X853f),
        Combiner7Nv = ((int)0X8557),
        Combiner6Nv = ((int)0X8556),
        Combiner5Nv = ((int)0X8555),
        Combiner4Nv = ((int)0X8554),
        Combiner3Nv = ((int)0X8553),
        CombinerSumOutputNv = ((int)0X854c),
        Combiner1Nv = ((int)0X8551),
        Spare1Nv = ((int)0X852f),
        VariableGNv = ((int)0X8529),
        Spare0PlusSecondaryColorNv = ((int)0X8532),
        BiasByNegativeOneHalfNv = ((int)0X8541),
        None = ((int)0),
        ColorSumClampNv = ((int)0X854f),
        PrimaryColorNv = ((int)0X852c),
        CombinerCdDotProductNv = ((int)0X8546),
        SignedNegateNv = ((int)0X853d),
        CombinerBiasNv = ((int)0X8549),
        ConstantColor1Nv = ((int)0X852b),
        DiscardNv = ((int)0X8530),
        ScaleByTwoNv = ((int)0X853e),
        UnsignedIdentityNv = ((int)0X8536),
        HalfBiasNegateNv = ((int)0X853b),
        HalfBiasNormalNv = ((int)0X853a),
        ETimesFNv = ((int)0X8531),
        Texture0Arb = ((int)0X84c0),
        CombinerScaleNv = ((int)0X8548),
        UnsignedInvertNv = ((int)0X8537),
        NumGeneralCombinersNv = ((int)0X854e),
        ConstantColor0Nv = ((int)0X852a),
        CombinerCdOutputNv = ((int)0X854b),
        SignedIdentityNv = ((int)0X853c),
        CombinerComponentUsageNv = ((int)0X8544),
        Fog = ((int)0X0b60),
        VariableDNv = ((int)0X8526),
        VariableENv = ((int)0X8527),
        VariableFNv = ((int)0X8528),
        Spare0Nv = ((int)0X852e),
        VariableANv = ((int)0X8523),
        VariableBNv = ((int)0X8524),
        VariableCNv = ((int)0X8525),
        CombinerInputNv = ((int)0X8542),
        RegisterCombinersNv = ((int)0X8522),
        SecondaryColorNv = ((int)0X852d),
        CombinerMuxSumNv = ((int)0X8547),
    }

    public enum NvFogDistance
    {
        FogDistanceModeNv = ((int)0X855a),
        EyePlaneAbsoluteNv = ((int)0X855c),
        EyeRadialNv = ((int)0X855b),
        EyePlane = ((int)0X2502),
    }

    public enum NvTexgenEmboss
    {
        EmbossConstantNv = ((int)0X855e),
        EmbossLightNv = ((int)0X855d),
        EmbossMapNv = ((int)0X855f),
    }

    public enum NvBlendSquare
    {
    }

    public enum NvTextureEnvCombine4
    {
        Source3RgbNv = ((int)0X8583),
        Operand3AlphaNv = ((int)0X859b),
        Operand3RgbNv = ((int)0X8593),
        Source3AlphaNv = ((int)0X858b),
        Combine4Nv = ((int)0X8503),
    }

    public enum MesaResizeBuffers
    {
    }

    public enum MesaWindowPos
    {
    }

    public enum IbmCullVertex
    {
        CullVertexIbm = ((int)103050),
    }

    public enum IbmMultimodeDrawArrays
    {
    }

    public enum IbmVertexArrayLists
    {
        ColorArrayListIbm = ((int)103072),
        FogCoordinateArrayListStrideIbm = ((int)103086),
        EdgeFlagArrayListStrideIbm = ((int)103085),
        NormalArrayListStrideIbm = ((int)103081),
        SecondaryColorArrayListStrideIbm = ((int)103087),
        TextureCoordArrayListIbm = ((int)103074),
        NormalArrayListIbm = ((int)103071),
        VertexArrayListIbm = ((int)103070),
        IndexArrayListIbm = ((int)103073),
        ColorArrayListStrideIbm = ((int)103082),
        FogCoordinateArrayListIbm = ((int)103076),
        TextureCoordArrayListStrideIbm = ((int)103084),
        EdgeFlagArrayListIbm = ((int)103075),
        IndexArrayListStrideIbm = ((int)103083),
        SecondaryColorArrayListIbm = ((int)103077),
        VertexArrayListStrideIbm = ((int)103080),
    }

    public enum SgixYcrcbSubsample
    {
        PixelSubsample2424Sgix = ((int)0X85a3),
        UnpackSubsampleRateSgix = ((int)0X85a1),
        PixelSubsample4242Sgix = ((int)0X85a4),
        PackSubsampleRateSgix = ((int)0X85a0),
        PixelSubsample4444Sgix = ((int)0X85a2),
    }

    public enum SgixYcrcba
    {
        YcrcbSgix = ((int)0X8318),
        YcrcbaSgix = ((int)0X8319),
    }

    public enum SgiDepthPassInstrument
    {
        DepthPassInstrumentMaxSgix = ((int)0X8312),
        DepthPassInstrumentSgix = ((int)0X8310),
        DepthPassInstrumentCountersSgix = ((int)0X8311),
    }

    public enum Gl3DfxTextureCompressionFxt1
    {
        CompressedRgbFxt13Dfx = ((int)0X86b0),
        CompressedRgbaFxt13Dfx = ((int)0X86b1),
    }

    public enum Gl3DfxMultisample
    {
        SampleBuffers3Dfx = ((int)0X86b3),
        MultisampleBit3Dfx = ((int)0X20000000),
        Samples3Dfx = ((int)0X86b4),
        Multisample3Dfx = ((int)0X86b2),
    }

    public enum Gl3DfxTbuffer
    {
    }

    public enum ExtMultisample
    {
        Gl2Pass1Ext = ((int)0X80a3),
        Gl4Pass0Ext = ((int)0X80a4),
        MultisampleExt = ((int)0X809d),
        SamplesExt = ((int)0X80a9),
        Gl4Pass2Ext = ((int)0X80a6),
        SampleAlphaToOneExt = ((int)0X809f),
        SampleMaskValueExt = ((int)0X80aa),
        Gl2Pass0Ext = ((int)0X80a2),
        SampleMaskExt = ((int)0X80a0),
        Gl4Pass1Ext = ((int)0X80a5),
        SamplePatternExt = ((int)0X80ac),
        Gl4Pass3Ext = ((int)0X80a7),
        SampleMaskInvertExt = ((int)0X80ab),
        SampleAlphaToMaskExt = ((int)0X809e),
        MultisampleBitExt = ((int)0X20000000),
        SampleBuffersExt = ((int)0X80a8),
        Gl1PassExt = ((int)0X80a1),
    }

    public enum ExtTextureEnvDot3
    {
        Dot3RgbaExt = ((int)0X8741),
        Dot3RgbExt = ((int)0X8740),
    }

    public enum AtiTextureMirrorOnce
    {
        MirrorClampAti = ((int)0X8742),
        MirrorClampToEdgeAti = ((int)0X8743),
    }

    public enum NvFence
    {
        FenceConditionNv = ((int)0X84f4),
        AllCompletedNv = ((int)0X84f2),
        FenceStatusNv = ((int)0X84f3),
    }

    public enum IbmTextureMirroredRepeat
    {
        MirroredRepeatIbm = ((int)0X8370),
    }

    public enum NvEvaluators
    {
        EvalVertexAttrib10Nv = ((int)0X86d0),
        MaxMapTessellationNv = ((int)0X86d6),
        EvalVertexAttrib2Nv = ((int)0X86c8),
        EvalVertexAttrib3Nv = ((int)0X86c9),
        EvalVertexAttrib0Nv = ((int)0X86c6),
        EvalVertexAttrib1Nv = ((int)0X86c7),
        EvalVertexAttrib6Nv = ((int)0X86cc),
        EvalVertexAttrib7Nv = ((int)0X86cd),
        EvalFractionalTessellationNv = ((int)0X86c5),
        EvalVertexAttrib5Nv = ((int)0X86cb),
        EvalVertexAttrib15Nv = ((int)0X86d5),
        MapAttribUOrderNv = ((int)0X86c3),
        EvalVertexAttrib14Nv = ((int)0X86d4),
        EvalVertexAttrib4Nv = ((int)0X86ca),
        MaxRationalEvalOrderNv = ((int)0X86d7),
        EvalVertexAttrib13Nv = ((int)0X86d3),
        Eval2DNv = ((int)0X86c0),
        EvalVertexAttrib12Nv = ((int)0X86d2),
        MapTessellationNv = ((int)0X86c2),
        MapAttribVOrderNv = ((int)0X86c4),
        EvalVertexAttrib11Nv = ((int)0X86d1),
        EvalTriangular2DNv = ((int)0X86c1),
        EvalVertexAttrib8Nv = ((int)0X86ce),
        EvalVertexAttrib9Nv = ((int)0X86cf),
    }

    public enum NvPackedDepthStencil
    {
        UnsignedInt248Nv = ((int)0X84fa),
        DepthStencilNv = ((int)0X84f9),
    }

    public enum NvRegisterCombiners2
    {
        PerStageConstantsNv = ((int)0X8535),
    }

    public enum NvTextureCompressionVtc
    {
    }

    public enum NvTextureRectangle
    {
        TextureRectangleNv = ((int)0X84f5),
        ProxyTextureRectangleNv = ((int)0X84f7),
        TextureBindingRectangleNv = ((int)0X84f6),
        MaxRectangleTextureSizeNv = ((int)0X84f8),
    }

    public enum NvTextureShader
    {
        ShaderOperationNv = ((int)0X86df),
        DotProductTextureRectangleNv = ((int)0X864e),
        RgbaUnsignedDotProductMappingNv = ((int)0X86d9),
        SignedLuminance8Nv = ((int)0X8702),
        SignedLuminanceAlphaNv = ((int)0X8703),
        SignedIntensity8Nv = ((int)0X8708),
        LoBiasNv = ((int)0X8715),
        SignedHiloNv = ((int)0X86f9),
        SignedAlpha8Nv = ((int)0X8706),
        SignedIntensityNv = ((int)0X8707),
        OffsetTextureScaleNv = ((int)0X86e2),
        Dsdt8Mag8Intensity8Nv = ((int)0X870b),
        MagnitudeBiasNv = ((int)0X8718),
        DsScaleNv = ((int)0X8710),
        TextureDsSizeNv = ((int)0X871d),
        OffsetTextureMatrixNv = ((int)0X86e1),
        SignedHilo16Nv = ((int)0X86fa),
        SignedRgb8UnsignedAlpha8Nv = ((int)0X870d),
        OffsetTextureRectangleScaleNv = ((int)0X864d),
        DsBiasNv = ((int)0X8716),
        DsdtMagNv = ((int)0X86f6),
        HiScaleNv = ((int)0X870e),
        SignedLuminanceNv = ((int)0X8701),
        HiBiasNv = ((int)0X8714),
        OffsetTextureBiasNv = ((int)0X86e3),
        MagnitudeScaleNv = ((int)0X8712),
        DsdtMagIntensityNv = ((int)0X86dc),
        DsdtMagVibNv = ((int)0X86f7),
        DotProductConstEyeReflectCubeMapNv = ((int)0X86f3),
        TextureDtSizeNv = ((int)0X871e),
        TextureBorderValuesNv = ((int)0X871a),
        OffsetTexture2DMatrixNv = ((int)0X86e1),
        Hilo16Nv = ((int)0X86f8),
        OffsetTexture2DBiasNv = ((int)0X86e3),
        OffsetTextureRectangleNv = ((int)0X864c),
        ShaderConsistentNv = ((int)0X86dd),
        DtScaleNv = ((int)0X8711),
        VibranceScaleNv = ((int)0X8713),
        TextureMagSizeNv = ((int)0X871f),
        SignedRgbNv = ((int)0X86fe),
        VibranceBiasNv = ((int)0X8719),
        Dsdt8Nv = ((int)0X8709),
        DotProductTextureCubeMapNv = ((int)0X86f0),
        TextureHiSizeNv = ((int)0X871b),
        HiloNv = ((int)0X86f4),
        SignedRgba8Nv = ((int)0X86fc),
        UnsignedInt88S8S8RevNv = ((int)0X86db),
        TextureLoSizeNv = ((int)0X871c),
        OffsetTexture2DScaleNv = ((int)0X86e2),
        DotProductDiffuseCubeMapNv = ((int)0X86f1),
        DotProductNv = ((int)0X86ec),
        SignedRgbaNv = ((int)0X86fb),
        ConstEyeNv = ((int)0X86e5),
        SignedRgb8Nv = ((int)0X86ff),
        TextureShaderNv = ((int)0X86de),
        CullModesNv = ((int)0X86e0),
        CullFragmentNv = ((int)0X86e7),
        DtBiasNv = ((int)0X8717),
        SignedAlphaNv = ((int)0X8705),
        DependentGbTexture2DNv = ((int)0X86ea),
        Dsdt8Mag8Nv = ((int)0X870a),
        DotProductTexture2DNv = ((int)0X86ee),
        SignedLuminance8Alpha8Nv = ((int)0X8704),
        LoScaleNv = ((int)0X870f),
        DotProductDepthReplaceNv = ((int)0X86ed),
        UnsignedIntS8S888Nv = ((int)0X86da),
        DotProductReflectCubeMapNv = ((int)0X86f2),
        OffsetTexture2DNv = ((int)0X86e8),
        DependentArTexture2DNv = ((int)0X86e9),
        SignedRgbUnsignedAlphaNv = ((int)0X870c),
        PreviousTextureInputNv = ((int)0X86e4),
        DsdtNv = ((int)0X86f5),
        PassThroughNv = ((int)0X86e6),
    }

    public enum NvTextureShader2
    {
        DotProductTexture3DNv = ((int)0X86ef),
    }

    public enum NvVertexArrayRange2
    {
        VertexArrayRangeWithoutFlushNv = ((int)0X8533),
    }

    public enum NvVertexProgram
    {
        Map2VertexAttrib124Nv = ((int)0X867c),
        Matrix7Nv = ((int)0X8637),
        Matrix6Nv = ((int)0X8636),
        Map1VertexAttrib154Nv = ((int)0X866f),
        VertexAttribArray11Nv = ((int)0X865b),
        Map2VertexAttrib154Nv = ((int)0X867f),
        InverseTransposeNv = ((int)0X862d),
        VertexAttribArray14Nv = ((int)0X865e),
        MaxTrackMatricesNv = ((int)0X862f),
        VertexAttribArray12Nv = ((int)0X865c),
        Matrix3Nv = ((int)0X8633),
        Map1VertexAttrib144Nv = ((int)0X866e),
        VertexAttribArray0Nv = ((int)0X8650),
        VertexStateProgramNv = ((int)0X8621),
        Map2VertexAttrib144Nv = ((int)0X867e),
        Matrix4Nv = ((int)0X8634),
        CurrentMatrixNv = ((int)0X8641),
        Map1VertexAttrib124Nv = ((int)0X866c),
        Map1VertexAttrib14Nv = ((int)0X8661),
        ProgramTargetNv = ((int)0X8646),
        VertexProgramPointSizeNv = ((int)0X8642),
        VertexAttribArray10Nv = ((int)0X865a),
        VertexAttribArray4Nv = ((int)0X8654),
        Map2VertexAttrib104Nv = ((int)0X867a),
        VertexAttribArray9Nv = ((int)0X8659),
        VertexProgramTwoSideNv = ((int)0X8643),
        VertexAttribArray1Nv = ((int)0X8651),
        Matrix0Nv = ((int)0X8630),
        AttribArrayPointerNv = ((int)0X8645),
        MaxTrackMatrixStackDepthNv = ((int)0X862e),
        Map1VertexAttrib114Nv = ((int)0X866b),
        Map2VertexAttrib114Nv = ((int)0X867b),
        Matrix1Nv = ((int)0X8631),
        VertexAttribArray3Nv = ((int)0X8653),
        Map1VertexAttrib04Nv = ((int)0X8660),
        Map1VertexAttrib34Nv = ((int)0X8663),
        Map1VertexAttrib24Nv = ((int)0X8662),
        Map1VertexAttrib54Nv = ((int)0X8665),
        Map1VertexAttrib44Nv = ((int)0X8664),
        Map1VertexAttrib74Nv = ((int)0X8667),
        VertexAttribArray5Nv = ((int)0X8655),
        Map1VertexAttrib94Nv = ((int)0X8669),
        Map1VertexAttrib84Nv = ((int)0X8668),
        TransposeNv = ((int)0X862c),
        VertexAttribArray8Nv = ((int)0X8658),
        VertexProgramNv = ((int)0X8620),
        VertexAttribArray2Nv = ((int)0X8652),
        ProgramParameterNv = ((int)0X8644),
        ProgramLengthNv = ((int)0X8627),
        Map1VertexAttrib134Nv = ((int)0X866d),
        Matrix5Nv = ((int)0X8635),
        AttribArrayStrideNv = ((int)0X8624),
        TrackMatrixNv = ((int)0X8648),
        TrackMatrixTransformNv = ((int)0X8649),
        AttribArraySizeNv = ((int)0X8623),
        Map2VertexAttrib14Nv = ((int)0X8671),
        Map2VertexAttrib04Nv = ((int)0X8670),
        Map2VertexAttrib34Nv = ((int)0X8673),
        Map2VertexAttrib24Nv = ((int)0X8672),
        Map2VertexAttrib54Nv = ((int)0X8675),
        Map2VertexAttrib44Nv = ((int)0X8674),
        Map2VertexAttrib74Nv = ((int)0X8677),
        Map2VertexAttrib64Nv = ((int)0X8676),
        Map2VertexAttrib94Nv = ((int)0X8679),
        Map2VertexAttrib84Nv = ((int)0X8678),
        CurrentAttribNv = ((int)0X8626),
        VertexAttribArray6Nv = ((int)0X8656),
        ModelviewProjectionNv = ((int)0X8629),
        ProgramStringNv = ((int)0X8628),
        IdentityNv = ((int)0X862a),
        VertexAttribArray13Nv = ((int)0X865d),
        AttribArrayTypeNv = ((int)0X8625),
        VertexProgramBindingNv = ((int)0X864a),
        ProgramErrorPositionNv = ((int)0X864b),
        VertexAttribArray15Nv = ((int)0X865f),
        Map2VertexAttrib134Nv = ((int)0X867d),
        Matrix2Nv = ((int)0X8632),
        InverseNv = ((int)0X862b),
        CurrentMatrixStackDepthNv = ((int)0X8640),
        ProgramResidentNv = ((int)0X8647),
        VertexAttribArray7Nv = ((int)0X8657),
        Map1VertexAttrib104Nv = ((int)0X866a),
        Map1VertexAttrib64Nv = ((int)0X8666),
    }

    public enum SgixScalebiasHint
    {
        ScalebiasHintSgix = ((int)0X8322),
    }

    public enum OmlInterlace
    {
        InterlaceReadOml = ((int)0X8981),
        InterlaceOml = ((int)0X8980),
    }

    public enum OmlSubsample
    {
        FormatSubsample244244Oml = ((int)0X8983),
        FormatSubsample2424Oml = ((int)0X8982),
    }

    public enum OmlResample
    {
        ResampleAverageOml = ((int)0X8988),
        ResampleReplicateOml = ((int)0X8986),
        ResampleDecimateOml = ((int)0X8989),
        ResampleZeroFillOml = ((int)0X8987),
        UnpackResampleOml = ((int)0X8985),
        PackResampleOml = ((int)0X8984),
    }

    public enum NvCopyDepthToColor
    {
        DepthStencilToRgbaNv = ((int)0X886e),
        DepthStencilToBgraNv = ((int)0X886f),
    }

    public enum AtiEnvmapBumpmap
    {
        BumpTargetAti = ((int)0X877c),
        BumpEnvmapAti = ((int)0X877b),
        BumpNumTexUnitsAti = ((int)0X8777),
        DudvAti = ((int)0X8779),
        BumpRotMatrixSizeAti = ((int)0X8776),
        Du8dv8Ati = ((int)0X877a),
        BumpTexUnitsAti = ((int)0X8778),
        BumpRotMatrixAti = ((int)0X8775),
    }

    public enum AtiFragmentShader
    {
        NumInstructionsTotalAti = ((int)0X8972),
        ColorAlphaPairingAti = ((int)0X8975),
        RedBitAti = ((int)0X00000001),
        Con29Ati = ((int)0X895e),
        Con28Ati = ((int)0X895d),
        FragmentShaderAti = ((int)0X8920),
        MovAti = ((int)0X8961),
        AddAti = ((int)0X8963),
        MulAti = ((int)0X8964),
        Dot3Ati = ((int)0X8966),
        Con7Ati = ((int)0X8948),
        Con17Ati = ((int)0X8952),
        Reg6Ati = ((int)0X8927),
        Con2Ati = ((int)0X8943),
        SubAti = ((int)0X8965),
        Gl4XBitAti = ((int)0X00000002),
        Con31Ati = ((int)0X8960),
        Con30Ati = ((int)0X895f),
        SwizzleStrAti = ((int)0X8976),
        Reg24Ati = ((int)0X8939),
        Reg25Ati = ((int)0X893a),
        Reg26Ati = ((int)0X893b),
        Reg27Ati = ((int)0X893c),
        Reg20Ati = ((int)0X8935),
        Reg21Ati = ((int)0X8936),
        Reg22Ati = ((int)0X8937),
        Reg23Ati = ((int)0X8938),
        NumInstructionsPerPassAti = ((int)0X8971),
        Reg28Ati = ((int)0X893d),
        Reg29Ati = ((int)0X893e),
        HalfBitAti = ((int)0X00000008),
        Cnd0Ati = ((int)0X896b),
        Dot2AddAti = ((int)0X896c),
        SwizzleStrDrAti = ((int)0X8978),
        BlueBitAti = ((int)0X00000004),
        SaturateBitAti = ((int)0X00000040),
        Con4Ati = ((int)0X8945),
        Gl2XBitAti = ((int)0X00000001),
        Reg3Ati = ((int)0X8924),
        Reg30Ati = ((int)0X893f),
        Reg31Ati = ((int)0X8940),
        NegateBitAti = ((int)0X00000004),
        SwizzleStrqAti = ((int)0X897a),
        Reg9Ati = ((int)0X892a),
        Con6Ati = ((int)0X8947),
        Reg5Ati = ((int)0X8926),
        Con1Ati = ((int)0X8942),
        Con15Ati = ((int)0X8950),
        Con14Ati = ((int)0X894f),
        Reg0Ati = ((int)0X8921),
        Con16Ati = ((int)0X8951),
        Con11Ati = ((int)0X894c),
        Con10Ati = ((int)0X894b),
        Con13Ati = ((int)0X894e),
        Con12Ati = ((int)0X894d),
        Con9Ati = ((int)0X894a),
        NumFragmentConstantsAti = ((int)0X896f),
        Con19Ati = ((int)0X8954),
        Con18Ati = ((int)0X8953),
        Con25Ati = ((int)0X895a),
        Reg1Ati = ((int)0X8922),
        BiasBitAti = ((int)0X00000008),
        CndAti = ((int)0X896a),
        Dot4Ati = ((int)0X8967),
        EighthBitAti = ((int)0X00000020),
        Con3Ati = ((int)0X8944),
        LerpAti = ((int)0X8969),
        SwizzleStrqDqAti = ((int)0X897b),
        Reg2Ati = ((int)0X8923),
        Reg14Ati = ((int)0X892f),
        Reg15Ati = ((int)0X8930),
        Reg16Ati = ((int)0X8931),
        Reg17Ati = ((int)0X8932),
        Reg10Ati = ((int)0X892b),
        Reg11Ati = ((int)0X892c),
        Reg12Ati = ((int)0X892d),
        Reg13Ati = ((int)0X892e),
        NumLoopbackComponentsAti = ((int)0X8974),
        Reg8Ati = ((int)0X8929),
        Reg18Ati = ((int)0X8933),
        Reg19Ati = ((int)0X8934),
        Gl8XBitAti = ((int)0X00000004),
        SwizzleStqDqAti = ((int)0X8979),
        CompBitAti = ((int)0X00000002),
        GreenBitAti = ((int)0X00000002),
        SecondaryInterpolatorAti = ((int)0X896d),
        QuarterBitAti = ((int)0X00000010),
        SwizzleStqAti = ((int)0X8977),
        NumPassesAti = ((int)0X8970),
        Con5Ati = ((int)0X8946),
        MadAti = ((int)0X8968),
        NumInputInterpolatorComponentsAti = ((int)0X8973),
        NumFragmentRegistersAti = ((int)0X896e),
        Reg4Ati = ((int)0X8925),
        Con0Ati = ((int)0X8941),
        Reg7Ati = ((int)0X8928),
        Con8Ati = ((int)0X8949),
        Con24Ati = ((int)0X8959),
        Con27Ati = ((int)0X895c),
        Con26Ati = ((int)0X895b),
        Con21Ati = ((int)0X8956),
        Con20Ati = ((int)0X8955),
        Con23Ati = ((int)0X8958),
        Con22Ati = ((int)0X8957),
    }

    public enum AtiPnTriangles
    {
        PnTrianglesPointModeAti = ((int)0X87f2),
        PnTrianglesTesselationLevelAti = ((int)0X87f4),
        PnTrianglesPointModeCubicAti = ((int)0X87f6),
        PnTrianglesPointModeLinearAti = ((int)0X87f5),
        PnTrianglesNormalModeLinearAti = ((int)0X87f7),
        PnTrianglesNormalModeAti = ((int)0X87f3),
        PnTrianglesNormalModeQuadraticAti = ((int)0X87f8),
        PnTrianglesAti = ((int)0X87f0),
        MaxPnTrianglesTesselationLevelAti = ((int)0X87f1),
    }

    public enum AtiVertexArrayObject
    {
        DynamicAti = ((int)0X8761),
        DiscardAti = ((int)0X8763),
        ArrayObjectOffsetAti = ((int)0X8767),
        PreserveAti = ((int)0X8762),
        ObjectBufferSizeAti = ((int)0X8764),
        ArrayObjectBufferAti = ((int)0X8766),
        ObjectBufferUsageAti = ((int)0X8765),
        StaticAti = ((int)0X8760),
    }

    public enum ExtVertexShader
    {
        OutputTextureCoord5Ext = ((int)0X87a2),
        LocalConstantValueExt = ((int)0X87ec),
        OutputTextureCoord10Ext = ((int)0X87a7),
        OutputTextureCoord24Ext = ((int)0X87b5),
        OpAddExt = ((int)0X8787),
        OpClampExt = ((int)0X878e),
        OutputTextureCoord21Ext = ((int)0X87b2),
        OpRecipSqrtExt = ((int)0X8795),
        OutputTextureCoord29Ext = ((int)0X87ba),
        OpCrossProductExt = ((int)0X8797),
        OpDot3Ext = ((int)0X8784),
        MaxOptimizedVertexShaderLocalsExt = ((int)0X87ce),
        VariantExt = ((int)0X87c1),
        OutputColor1Ext = ((int)0X879c),
        XExt = ((int)0X87d5),
        OpMaxExt = ((int)0X878a),
        InvariantExt = ((int)0X87c2),
        CurrentVertexExt = ((int)0X87e2),
        ScalarExt = ((int)0X87be),
        MaxOptimizedVertexShaderLocalConstantsExt = ((int)0X87cc),
        OutputTextureCoord27Ext = ((int)0X87b8),
        OutputTextureCoord26Ext = ((int)0X87b7),
        VariantDatatypeExt = ((int)0X87e5),
        OutputTextureCoord25Ext = ((int)0X87b6),
        OpRoundExt = ((int)0X8790),
        NegativeYExt = ((int)0X87da),
        OutputTextureCoord23Ext = ((int)0X87b4),
        VariantArrayPointerExt = ((int)0X87e9),
        OutputTextureCoord18Ext = ((int)0X87af),
        VariantArrayTypeExt = ((int)0X87e7),
        InvariantValueExt = ((int)0X87ea),
        OutputTextureCoord30Ext = ((int)0X87bb),
        OutputTextureCoord17Ext = ((int)0X87ae),
        OutputTextureCoord15Ext = ((int)0X87ac),
        OpMulExt = ((int)0X8786),
        OutputTextureCoord28Ext = ((int)0X87b9),
        MaxOptimizedVertexShaderInvariantsExt = ((int)0X87cd),
        OpMovExt = ((int)0X8799),
        OutputTextureCoord8Ext = ((int)0X87a5),
        OpFloorExt = ((int)0X878f),
        LocalConstantDatatypeExt = ((int)0X87ed),
        VertexShaderOptimizedExt = ((int)0X87d4),
        OneExt = ((int)0X87de),
        OpSubExt = ((int)0X8796),
        MaxOptimizedVertexShaderVariantsExt = ((int)0X87cb),
        YExt = ((int)0X87d6),
        OutputTextureCoord1Ext = ((int)0X879e),
        MaxOptimizedVertexShaderInstructionsExt = ((int)0X87ca),
        OutputTextureCoord11Ext = ((int)0X87a8),
        VertexShaderLocalConstantsExt = ((int)0X87d2),
        VertexShaderInstructionsExt = ((int)0X87cf),
        OutputTextureCoord12Ext = ((int)0X87a9),
        MaxVertexShaderVariantsExt = ((int)0X87c6),
        ZeroExt = ((int)0X87dd),
        OutputTextureCoord6Ext = ((int)0X87a3),
        OpNegateExt = ((int)0X8783),
        WExt = ((int)0X87d8),
        OpMinExt = ((int)0X878b),
        NegativeWExt = ((int)0X87dc),
        OutputTextureCoord9Ext = ((int)0X87a6),
        OpMaddExt = ((int)0X8788),
        MatrixExt = ((int)0X87c0),
        NegativeZExt = ((int)0X87db),
        LocalExt = ((int)0X87c4),
        LocalConstantExt = ((int)0X87c3),
        VariantValueExt = ((int)0X87e4),
        OutputColor0Ext = ((int)0X879b),
        OpRecipExt = ((int)0X8794),
        OpSetLtExt = ((int)0X878d),
        OpIndexExt = ((int)0X8782),
        VertexShaderExt = ((int)0X8780),
        MaxVertexShaderInvariantsExt = ((int)0X87c7),
        OutputTextureCoord13Ext = ((int)0X87aa),
        OpLogBase2Ext = ((int)0X8792),
        OpFracExt = ((int)0X8789),
        OutputTextureCoord20Ext = ((int)0X87b1),
        OutputTextureCoord2Ext = ((int)0X879f),
        OpSetGeExt = ((int)0X878c),
        VertexShaderVariantsExt = ((int)0X87d0),
        OutputTextureCoord19Ext = ((int)0X87b0),
        VertexShaderBindingExt = ((int)0X8781),
        MaxVertexShaderInstructionsExt = ((int)0X87c5),
        OutputTextureCoord31Ext = ((int)0X87bc),
        OutputTextureCoord7Ext = ((int)0X87a4),
        VertexShaderInvariantsExt = ((int)0X87d1),
        OutputTextureCoord4Ext = ((int)0X87a1),
        OutputVertexExt = ((int)0X879a),
        VariantArrayStrideExt = ((int)0X87e6),
        VariantArrayExt = ((int)0X87e8),
        OpExpBase2Ext = ((int)0X8791),
        NegativeOneExt = ((int)0X87df),
        OutputTextureCoord14Ext = ((int)0X87ab),
        OutputTextureCoord16Ext = ((int)0X87ad),
        OpDot4Ext = ((int)0X8785),
        InvariantDatatypeExt = ((int)0X87eb),
        OpMultiplyMatrixExt = ((int)0X8798),
        OutputTextureCoord22Ext = ((int)0X87b3),
        VertexShaderLocalsExt = ((int)0X87d3),
        FullRangeExt = ((int)0X87e1),
        OpPowerExt = ((int)0X8793),
        NegativeXExt = ((int)0X87d9),
        OutputTextureCoord3Ext = ((int)0X87a0),
        ZExt = ((int)0X87d7),
        MvpMatrixExt = ((int)0X87e3),
        VectorExt = ((int)0X87bf),
        MaxVertexShaderLocalConstantsExt = ((int)0X87c8),
        OutputTextureCoord0Ext = ((int)0X879d),
        OutputFogExt = ((int)0X87bd),
        NormalizedRangeExt = ((int)0X87e0),
        MaxVertexShaderLocalsExt = ((int)0X87c9),
    }

    public enum AtiVertexStreams
    {
        VertexSourceAti = ((int)0X8774),
        MaxVertexStreamsAti = ((int)0X876b),
        VertexStream3Ati = ((int)0X876f),
        VertexStream2Ati = ((int)0X876e),
        VertexStream1Ati = ((int)0X876d),
        VertexStream0Ati = ((int)0X876c),
        VertexStream7Ati = ((int)0X8773),
        VertexStream6Ati = ((int)0X8772),
        VertexStream5Ati = ((int)0X8771),
        VertexStream4Ati = ((int)0X8770),
    }

    public enum AtiElementArray
    {
        ElementArrayTypeAti = ((int)0X8769),
        ElementArrayAti = ((int)0X8768),
        ElementArrayPointerAti = ((int)0X876a),
    }

    public enum SunMeshArray
    {
        TriangleMeshSun = ((int)0X8615),
        QuadMeshSun = ((int)0X8614),
    }

    public enum SunSliceAccum
    {
        SliceAccumSun = ((int)0X85cc),
    }

    public enum NvMultisampleFilterHint
    {
        MultisampleFilterHintNv = ((int)0X8534),
    }

    public enum NvDepthClamp
    {
        DepthClampNv = ((int)0X864f),
    }

    public enum NvOcclusionQuery
    {
        PixelCountAvailableNv = ((int)0X8867),
        CurrentOcclusionQueryIdNv = ((int)0X8865),
        PixelCountNv = ((int)0X8866),
        PixelCounterBitsNv = ((int)0X8864),
    }

    public enum NvPointSprite
    {
        PointSpriteRModeNv = ((int)0X8863),
        CoordReplaceNv = ((int)0X8862),
        PointSpriteNv = ((int)0X8861),
    }

    public enum NvTextureShader3
    {
        SignedHilo8Nv = ((int)0X885f),
        OffsetHiloTextureRectangleNv = ((int)0X8855),
        OffsetProjectiveTexture2DNv = ((int)0X8850),
        DotProductPassThroughNv = ((int)0X885b),
        OffsetProjectiveTextureRectangleScaleNv = ((int)0X8853),
        DependentRgbTexture3DNv = ((int)0X8859),
        DotProductAffineDepthReplaceNv = ((int)0X885d),
        Hilo8Nv = ((int)0X885e),
        ForceBlueToOneNv = ((int)0X8860),
        OffsetProjectiveTextureRectangleNv = ((int)0X8852),
        OffsetHiloTexture2DNv = ((int)0X8854),
        OffsetHiloProjectiveTexture2DNv = ((int)0X8856),
        OffsetHiloProjectiveTextureRectangleNv = ((int)0X8857),
        DependentRgbTextureCubeMapNv = ((int)0X885a),
        OffsetProjectiveTexture2DScaleNv = ((int)0X8851),
        DotProductTexture1DNv = ((int)0X885c),
        DependentHiloTexture2DNv = ((int)0X8858),
    }

    public enum NvVertexProgram11
    {
    }

    public enum ExtShadowFuncs
    {
    }

    public enum ExtStencilTwoSide
    {
        ActiveStencilFaceExt = ((int)0X8911),
        StencilTestTwoSideExt = ((int)0X8910),
    }

    public enum AtiTextFragmentShader
    {
        TextFragmentShaderAti = ((int)0X8200),
    }

    public enum AppleClientStorage
    {
        UnpackClientStorageApple = ((int)0X85b2),
    }

    public enum AppleElementArray
    {
        ElementArrayTypeApple = ((int)0X8769),
        ElementArrayApple = ((int)0X8768),
        ElementArrayPointerApple = ((int)0X876a),
    }

    public enum AppleFence
    {
        FenceApple = ((int)0X8a0b),
        DrawPixelsApple = ((int)0X8a0a),
    }

    public enum AppleVertexArrayObject
    {
        VertexArrayBindingApple = ((int)0X85b5),
    }

    public enum AppleVertexArrayRange
    {
        VertexArrayRangePointerApple = ((int)0X8521),
        StorageCachedApple = ((int)0X85be),
        VertexArrayRangeApple = ((int)0X851d),
        VertexArrayStorageHintApple = ((int)0X851f),
        VertexArrayRangeLengthApple = ((int)0X851e),
        StorageSharedApple = ((int)0X85bf),
    }

    public enum AppleYcbcr422
    {
        UnsignedShort88Apple = ((int)0X85ba),
        Ycbcr422Apple = ((int)0X85b9),
        UnsignedShort88RevApple = ((int)0X85bb),
    }

    public enum S3S3tc
    {
        RgbaS3tc = ((int)0X83a2),
        RgbS3tc = ((int)0X83a0),
        Rgba4S3tc = ((int)0X83a3),
        Rgb4S3tc = ((int)0X83a1),
    }

    public enum AtiDrawBuffers
    {
        DrawBuffer3Ati = ((int)0X8828),
        DrawBuffer13Ati = ((int)0X8832),
        DrawBuffer0Ati = ((int)0X8825),
        DrawBuffer7Ati = ((int)0X882c),
        DrawBuffer10Ati = ((int)0X882f),
        DrawBuffer2Ati = ((int)0X8827),
        DrawBuffer5Ati = ((int)0X882a),
        DrawBuffer4Ati = ((int)0X8829),
        DrawBuffer12Ati = ((int)0X8831),
        DrawBuffer8Ati = ((int)0X882d),
        MaxDrawBuffersAti = ((int)0X8824),
        DrawBuffer1Ati = ((int)0X8826),
        DrawBuffer14Ati = ((int)0X8833),
        DrawBuffer15Ati = ((int)0X8834),
        DrawBuffer6Ati = ((int)0X882b),
        DrawBuffer11Ati = ((int)0X8830),
        DrawBuffer9Ati = ((int)0X882e),
    }

    public enum AtiPixelFormatFloat
    {
        TypeRgbaFloatAti = ((int)0X8820),
        ColorClearUnclampedValueAti = ((int)0X8835),
    }

    public enum AtiTextureEnvCombine3
    {
        ModulateSubtractAti = ((int)0X8746),
        ModulateSignedAddAti = ((int)0X8745),
        ModulateAddAti = ((int)0X8744),
    }

    public enum AtiTextureFloat
    {
        AlphaFloat16Ati = ((int)0X881c),
        IntensityFloat32Ati = ((int)0X8817),
        LuminanceFloat16Ati = ((int)0X881e),
        LuminanceAlphaFloat16Ati = ((int)0X881f),
        AlphaFloat32Ati = ((int)0X8816),
        RgbFloat16Ati = ((int)0X881b),
        RgbaFloat32Ati = ((int)0X8814),
        RgbaFloat16Ati = ((int)0X881a),
        LuminanceFloat32Ati = ((int)0X8818),
        RgbFloat32Ati = ((int)0X8815),
        IntensityFloat16Ati = ((int)0X881d),
        LuminanceAlphaFloat32Ati = ((int)0X8819),
    }

    public enum NvFloatBuffer
    {
        FloatRgb16Nv = ((int)0X8888),
        FloatRgba16Nv = ((int)0X888a),
        FloatRgNv = ((int)0X8881),
        FloatRgba32Nv = ((int)0X888b),
        FloatRNv = ((int)0X8880),
        FloatRgb32Nv = ((int)0X8889),
        FloatRg16Nv = ((int)0X8886),
        FloatRg32Nv = ((int)0X8887),
        FloatRgbaNv = ((int)0X8883),
        FloatRgbNv = ((int)0X8882),
        FloatClearColorValueNv = ((int)0X888d),
        FloatR32Nv = ((int)0X8885),
        TextureFloatComponentsNv = ((int)0X888c),
        FloatR16Nv = ((int)0X8884),
        FloatRgbaModeNv = ((int)0X888e),
    }

    public enum NvFragmentProgram
    {
        ProgramErrorStringNv = ((int)0X8874),
        MaxFragmentProgramLocalParametersNv = ((int)0X8868),
        FragmentProgramNv = ((int)0X8870),
        MaxTextureCoordsNv = ((int)0X8871),
        MaxTextureImageUnitsNv = ((int)0X8872),
        FragmentProgramBindingNv = ((int)0X8873),
    }

    public enum NvHalfFloat
    {
        HalfFloatNv = ((int)0X140b),
    }

    public enum NvPixelDataRange
    {
        ReadPixelDataRangePointerNv = ((int)0X887d),
        WritePixelDataRangeLengthNv = ((int)0X887a),
        ReadPixelDataRangeLengthNv = ((int)0X887b),
        WritePixelDataRangeNv = ((int)0X8878),
        ReadPixelDataRangeNv = ((int)0X8879),
        WritePixelDataRangePointerNv = ((int)0X887c),
    }

    public enum NvPrimitiveRestart
    {
        PrimitiveRestartIndexNv = ((int)0X8559),
        PrimitiveRestartNv = ((int)0X8558),
    }

    public enum NvTextureExpandNormal
    {
        TextureUnsignedRemapModeNv = ((int)0X888f),
    }

    public enum NvVertexProgram2
    {
    }

    public enum AtiMapObjectBuffer
    {
    }

    public enum AtiSeparateStencil
    {
        StencilBackFailAti = ((int)0X8801),
        StencilBackPassDepthFailAti = ((int)0X8802),
        StencilBackPassDepthPassAti = ((int)0X8803),
        StencilBackFuncAti = ((int)0X8800),
    }

    public enum AtiVertexAttribArrayObject
    {
    }

    public enum OesReadFormat
    {
        ImplementationColorReadFormatOes = ((int)0X8b9b),
        ImplementationColorReadTypeOes = ((int)0X8b9a),
    }

    public enum ExtDepthBoundsTest
    {
        DepthBoundsTestExt = ((int)0X8890),
        DepthBoundsExt = ((int)0X8891),
    }

    public enum ExtTextureMirrorClamp
    {
        MirrorClampExt = ((int)0X8742),
        MirrorClampToEdgeExt = ((int)0X8743),
        MirrorClampToBorderExt = ((int)0X8912),
    }

    public enum ExtBlendEquationSeparate
    {
        BlendEquationAlphaExt = ((int)0X883d),
        BlendEquationRgbExt = ((int)0X8009),
    }

    public enum MesaPackInvert
    {
        PackInvertMesa = ((int)0X8758),
    }

    public enum MesaYcbcrTexture
    {
        UnsignedShort88Mesa = ((int)0X85ba),
        UnsignedShort88RevMesa = ((int)0X85bb),
        YcbcrMesa = ((int)0X8757),
    }

    public enum ExtPixelBufferObject
    {
        PixelPackBufferExt = ((int)0X88eb),
        PixelUnpackBufferBindingExt = ((int)0X88ef),
        PixelPackBufferBindingExt = ((int)0X88ed),
        PixelUnpackBufferExt = ((int)0X88ec),
    }

    public enum NvFragmentProgramOption
    {
    }

    public enum NvFragmentProgram2
    {
        MaxProgramIfDepthNv = ((int)0X88f6),
        MaxProgramCallDepthNv = ((int)0X88f5),
        MaxProgramExecInstructionsNv = ((int)0X88f4),
        MaxProgramLoopDepthNv = ((int)0X88f7),
        MaxProgramLoopCountNv = ((int)0X88f8),
    }

    public enum NvVertexProgram2Option
    {
        MaxProgramCallDepthNv = ((int)0X88f5),
        MaxProgramExecInstructionsNv = ((int)0X88f4),
    }

    public enum NvVertexProgram3
    {
        MaxVertexTextureImageUnitsArb = ((int)0X8b4c),
    }

    public enum GenerateMipmapTarget
    {
        TextureCubeMap = ((int)0X8513),
        Texture2D = ((int)0X0de1),
        Texture1D = ((int)0X0de0),
        Texture3D = ((int)0X806f),
    }

    public enum FramebufferTarget
    {
        FramebufferExt = ((int)0X8d40),
    }

    public enum RenderbufferTarget
    {
        RenderbufferExt = ((int)0X8d41),
    }

    public enum RenderbufferStorage
    {
        StencilIndex8Ext = ((int)0X8d48),
        StencilIndex4Ext = ((int)0X8d47),
        StencilIndex16Ext = ((int)0X8d49),
        StencilIndex1Ext = ((int)0X8d46),
    }

    public enum FramebufferErrorCode
    {
        FramebufferUnsupportedExt = ((int)0X8cdd),
        FramebufferCompleteExt = ((int)0X8cd5),
        FramebufferIncompleteMissingAttachmentExt = ((int)0X8cd7),
        FramebufferIncompleteAttachmentExt = ((int)0X8cd6),
        FramebufferIncompleteDrawBufferExt = ((int)0X8cdb),
        FramebufferIncompleteFormatsExt = ((int)0X8cda),
        FramebufferIncompleteDimensionsExt = ((int)0X8cd9),
        FramebufferIncompleteReadBufferExt = ((int)0X8cdc),
    }

    public enum FramebufferAttachment
    {
        DepthAttachmentExt = ((int)0X8d00),
        ColorAttachment7Ext = ((int)0X8ce7),
        ColorAttachment1Ext = ((int)0X8ce1),
        ColorAttachment2Ext = ((int)0X8ce2),
        ColorAttachment9Ext = ((int)0X8ce9),
        ColorAttachment4Ext = ((int)0X8ce4),
        StencilAttachmentExt = ((int)0X8d20),
        ColorAttachment6Ext = ((int)0X8ce6),
        ColorAttachment0Ext = ((int)0X8ce0),
        ColorAttachment14Ext = ((int)0X8cee),
        ColorAttachment15Ext = ((int)0X8cef),
        ColorAttachment12Ext = ((int)0X8cec),
        ColorAttachment13Ext = ((int)0X8ced),
        ColorAttachment10Ext = ((int)0X8cea),
        ColorAttachment11Ext = ((int)0X8ceb),
        ColorAttachment3Ext = ((int)0X8ce3),
        ColorAttachment8Ext = ((int)0X8ce8),
        ColorAttachment5Ext = ((int)0X8ce5),
    }

    public enum FramebufferParameterName
    {
        FramebufferAttachmentTextureCubeMapFaceExt = ((int)0X8cd3),
        FramebufferAttachmentTextureLevelExt = ((int)0X8cd2),
        FramebufferAttachmentObjectTypeExt = ((int)0X8cd0),
        FramebufferAttachmentObjectNameExt = ((int)0X8cd1),
        FramebufferAttachmentTexture3DZoffsetExt = ((int)0X8cd4),
    }

    public enum RenderbufferParameterName
    {
        RenderbufferAlphaSizeExt = ((int)0X8d53),
        RenderbufferGreenSizeExt = ((int)0X8d51),
        RenderbufferStencilSizeExt = ((int)0X8d55),
        RenderbufferBlueSizeExt = ((int)0X8d52),
        RenderbufferRedSizeExt = ((int)0X8d50),
        RenderbufferDepthSizeExt = ((int)0X8d54),
        RenderbufferWidthExt = ((int)0X8d42),
        RenderbufferInternalFormatExt = ((int)0X8d44),
        RenderbufferHeightExt = ((int)0X8d43),
    }

    public enum GremedyStringMarker
    {
    }

    public enum ExtPackedDepthStencil
    {
        Depth24Stencil8Ext = ((int)0X88f0),
        TextureStencilSizeExt = ((int)0X88f1),
        UnsignedInt248Ext = ((int)0X84fa),
        DepthStencilExt = ((int)0X84f9),
    }

    public enum ExtStencilClearTag
    {
        StencilClearTagValueExt = ((int)0X88f3),
        StencilTagBitsExt = ((int)0X88f2),
    }

    public enum ExtTextureSrgb
    {
        SluminanceExt = ((int)0X8c46),
        SrgbAlphaExt = ((int)0X8c42),
        CompressedSrgbAlphaS3tcDxt3Ext = ((int)0X8c4e),
        Sluminance8Alpha8Ext = ((int)0X8c45),
        CompressedSrgbAlphaS3tcDxt1Ext = ((int)0X8c4d),
        CompressedSrgbAlphaS3tcDxt5Ext = ((int)0X8c4f),
        SluminanceAlphaExt = ((int)0X8c44),
        Sluminance8Ext = ((int)0X8c47),
        CompressedSluminanceAlphaExt = ((int)0X8c4b),
        CompressedSrgbAlphaExt = ((int)0X8c49),
        Srgb8Alpha8Ext = ((int)0X8c43),
        CompressedSrgbS3tcDxt1Ext = ((int)0X8c4c),
        Srgb8Ext = ((int)0X8c41),
        CompressedSluminanceExt = ((int)0X8c4a),
        SrgbExt = ((int)0X8c40),
        CompressedSrgbExt = ((int)0X8c48),
    }

    public enum ExtFramebufferBlit
    {
        DrawFramebufferExt = ((int)0X8ca9),
        ReadFramebufferBindingExt = ((int)0X8ca6),
        ReadFramebufferExt = ((int)0X8ca8),
        DrawFramebufferBindingExt = ((int)0X8caa),
    }

    public enum ExtFramebufferMultisample
    {
        RenderbufferSamplesExt = ((int)0X8cab),
        MaxSamplesExt = ((int)0X8d57),
        FramebufferIncompleteMultisampleExt = ((int)0X8d56),
    }

    public enum MesaxTextureStack
    {
        ProxyTexture1DStackMesax = ((int)0X875b),
        Texture2DStackMesax = ((int)0X875a),
        Texture1DStackMesax = ((int)0X8759),
        Texture1DStackBindingMesax = ((int)0X875d),
        Texture2DStackBindingMesax = ((int)0X875e),
        ProxyTexture2DStackMesax = ((int)0X875c),
    }

    public enum ExtTimerQuery
    {
        TimeElapsedExt = ((int)0X88bf),
    }

    public enum ExtGpuProgramParameters
    {
    }

    public enum AppleFlushBufferRange
    {
        BufferSerializedModifyApple = ((int)0X8a12),
        BufferFlushingUnmapApple = ((int)0X8a13),
    }

    public enum NvGpuProgram4
    {
        MaxProgramResultComponentsNv = ((int)0X8909),
        MinProgramTexelOffsetNv = ((int)0X8904),
        MaxProgramGenericResultsNv = ((int)0X8da6),
        MaxProgramTexelOffsetNv = ((int)0X8905),
        MaxProgramAttribComponentsNv = ((int)0X8908),
        ProgramResultComponentsNv = ((int)0X8907),
        MaxProgramGenericAttribsNv = ((int)0X8da5),
        ProgramAttribComponentsNv = ((int)0X8906),
    }

    public enum NvGeometryProgram4
    {
        MaxGeometryTextureImageUnitsExt = ((int)0X8c29),
        TrianglesAdjacencyExt = ((int)0X000c),
        GeometryInputTypeExt = ((int)0X8ddb),
        FramebufferAttachmentTextureLayerExt = ((int)0X8cd4),
        FramebufferIncompleteLayerTargetsExt = ((int)0X8da8),
        LinesAdjacencyExt = ((int)0X000a),
        FramebufferIncompleteLayerCountExt = ((int)0X8da9),
        MaxProgramTotalOutputComponentsNv = ((int)0X8c28),
        ProgramPointSizeExt = ((int)0X8642),
        TriangleStripAdjacencyExt = ((int)0X000d),
        LineStripAdjacencyExt = ((int)0X000b),
        MaxProgramOutputVerticesNv = ((int)0X8c27),
        GeometryVerticesOutExt = ((int)0X8dda),
        GeometryOutputTypeExt = ((int)0X8ddc),
        FramebufferAttachmentLayeredExt = ((int)0X8da7),
        GeometryProgramNv = ((int)0X8c26),
    }

    public enum ExtGeometryShader4
    {
        MaxGeometryTextureImageUnitsExt = ((int)0X8c29),
        MaxVaryingComponentsExt = ((int)0X8b4b),
        MaxGeometryVaryingComponentsExt = ((int)0X8ddd),
        GeometryInputTypeExt = ((int)0X8Ddb),
        GeometryShaderExt = ((int)0X8dd9),
        LineStripAdjacencyExt = ((int)0X000b),
        MaxGeometryUniformComponentsExt = ((int)0X8ddf),
        MaxVertexVaryingComponentsExt = ((int)0X8dde),
        GeometryOutputTypeExt = ((int)0X8Ddc),
        FramebufferIncompleteLayerCountExt = ((int)0X8Da9),
        FramebufferIncompleteLayerTargetsExt = ((int)0X8Da8),
        GeometryVerticesOutExt = ((int)0X8Dda),
        FramebufferAttachmentLayeredExt = ((int)0X8Da7),
        TrianglesAdjacencyExt = ((int)0X000c),
        ProgramPointSizeExt = ((int)0X8642),
        LinesAdjacencyExt = ((int)0X000a),
        FramebufferAttachmentTextureLayerExt = ((int)0X8cd4),
        MaxGeometryTotalOutputComponentsExt = ((int)0X8de1),
        MaxGeometryOutputVerticesExt = ((int)0X8de0),
        TriangleStripAdjacencyExt = ((int)0X000D),
    }

    public enum NvVertexProgram4
    {
        VertexAttribArrayIntegerNv = ((int)0X88fd),
    }

    public enum ExtGpuShader4
    {
        Sampler2DArrayExt = ((int)0X8dc1),
        UnsignedIntSampler2DArrayExt = ((int)0X8dd7),
        UnsignedIntSamplerCubeExt = ((int)0X8dd4),
        Sampler2DArrayShadowExt = ((int)0X8dc4),
        SamplerBufferExt = ((int)0X8dc2),
        Sampler1DArrayExt = ((int)0X8dc0),
        UnsignedIntVec4Ext = ((int)0X8dc8),
        SamplerCubeShadowExt = ((int)0X8dc5),
        UnsignedIntSampler2DRectExt = ((int)0X8dd5),
        UnsignedIntSampler3DExt = ((int)0X8dd3),
        IntSampler2DArrayExt = ((int)0X8dcf),
        IntSampler2DRectExt = ((int)0X8dcd),
        UnsignedIntSampler2DExt = ((int)0X8dd2),
        UnsignedIntSampler1DArrayExt = ((int)0X8dd6),
        IntSampler1DExt = ((int)0X8dc9),
        IntSampler3DExt = ((int)0X8dcb),
        IntSamplerCubeExt = ((int)0X8dcc),
        Sampler1DArrayShadowExt = ((int)0X8dc3),
        IntSampler2DExt = ((int)0X8dca),
        UnsignedIntVec2Ext = ((int)0X8dc6),
        UnsignedIntVec3Ext = ((int)0X8dc7),
        IntSamplerBufferExt = ((int)0X8dd0),
        UnsignedIntSamplerBufferExt = ((int)0X8dd8),
        IntSampler1DArrayExt = ((int)0X8dce),
        UnsignedIntSampler1DExt = ((int)0X8dd1),
    }

    public enum ExtDrawInstanced
    {
    }

    public enum ExtPackedFloat
    {
        R11fG11fB10fExt = ((int)0X8c3a),
        UnsignedInt10F11F11FRevExt = ((int)0X8c3b),
        RgbaSignedComponentsExt = ((int)0X8c3c),
    }

    public enum ExtTextureArray
    {
        MaxArrayTextureLayersExt = ((int)0X88ff),
        Texture2DArrayExt = ((int)0X8c1a),
        TextureBinding2DArrayExt = ((int)0X8c1d),
        CompareRefDepthToTextureExt = ((int)0X884e),
        Texture1DArrayExt = ((int)0X8c18),
        TextureBinding1DArrayExt = ((int)0X8c1c),
        FramebufferAttachmentTextureLayerExt = ((int)0X8cd4),
        ProxyTexture2DArrayExt = ((int)0X8c1b),
        ProxyTexture1DArrayExt = ((int)0X8c19),
    }

    public enum ExtTextureBufferObject
    {
        MaxTextureBufferSizeExt = ((int)0X8c2b),
        TextureBufferExt = ((int)0X8c2a),
        TextureBufferDataStoreBindingExt = ((int)0X8c2d),
        TextureBindingBufferExt = ((int)0X8c2c),
        TextureBufferFormatExt = ((int)0X8c2e),
    }

    public enum ExtTextureCompressionLatc
    {
        CompressedSignedLuminanceAlphaLatc2Ext = ((int)0X8c73),
        CompressedLuminanceAlphaLatc2Ext = ((int)0X8c72),
        CompressedSignedLuminanceLatc1Ext = ((int)0X8c71),
        CompressedLuminanceLatc1Ext = ((int)0X8c70),
    }

    public enum ExtTextureCompressionRgtc
    {
        CompressedSignedRedRgtc1Ext = ((int)0X8dbc),
        CompressedRedGreenRgtc2Ext = ((int)0X8dbd),
        CompressedSignedRedGreenRgtc2Ext = ((int)0X8dbe),
        CompressedRedRgtc1Ext = ((int)0X8dbb),
    }

    public enum ExtTextureSharedExponent
    {
        TextureSharedSizeExt = ((int)0X8c3f),
        Rgb9E5Ext = ((int)0X8c3d),
        UnsignedInt5999RevExt = ((int)0X8c3e),
    }

    public enum NvDepthBufferFloat
    {
        DepthBufferFloatModeNv = ((int)0X8daf),
        Depth32fStencil8Nv = ((int)0X8dac),
        Float32UnsignedInt248RevNv = ((int)0X8dad),
        DepthComponent32fNv = ((int)0X8dab),
    }

    public enum NvFragmentProgram4
    {
    }

    public enum NvFramebufferMultisampleCoverage
    {
        RenderbufferColorSamplesNv = ((int)0X8e10),
        RenderbufferCoverageSamplesNv = ((int)0X8cab),
        MaxMultisampleCoverageModesNv = ((int)0X8e11),
        MultisampleCoverageModesNv = ((int)0X8e12),
    }

    public enum ExtFramebufferSrgb
    {
        FramebufferSrgbCapableExt = ((int)0X8dba),
        FramebufferSrgbExt = ((int)0X8db9),
    }

    public enum NvGeometryShader4
    {
    }

    public enum NvParameterBufferObject
    {
        MaxProgramParameterBufferSizeNv = ((int)0X8da1),
        VertexProgramParameterBufferNv = ((int)0X8da2),
        GeometryProgramParameterBufferNv = ((int)0X8da3),
        FragmentProgramParameterBufferNv = ((int)0X8da4),
        MaxProgramParameterBufferBindingsNv = ((int)0X8da0),
    }

    public enum ExtDrawBuffers2
    {
    }

    public enum NvTransformFeedback
    {
        ClipDistanceNv = ((int)0X8c7a),
        SeparateAttribsNv = ((int)0X8c8d),
        BackSecondaryColorNv = ((int)0X8c78),
        ActiveVaryingMaxLengthNv = ((int)0X8c82),
        TransformFeedbackVaryingsNv = ((int)0X8c83),
        TransformFeedbackPrimitivesWrittenNv = ((int)0X8c88),
        RasterizerDiscardNv = ((int)0X8c89),
        TransformFeedbackBufferModeNv = ((int)0X8c7f),
        BackPrimaryColorNv = ((int)0X8c77),
        PrimitivesGeneratedNv = ((int)0X8c87),
        InterleavedAttribsNv = ((int)0X8c8c),
        GenericAttribNv = ((int)0X8c7d),
        TransformFeedbackAttribsNv = ((int)0X8c7e),
        ActiveVaryingsNv = ((int)0X8c81),
        TextureCoordNv = ((int)0X8c79),
        VertexIdNv = ((int)0X8c7b),
        TransformFeedbackBufferStartNv = ((int)0X8c84),
        MaxTransformFeedbackSeparateAttribsNv = ((int)0X8c8b),
        TransformFeedbackRecordNv = ((int)0X8c86),
        MaxTransformFeedbackInterleavedAttribsNv = ((int)0X8c8a),
        PrimitiveIdNv = ((int)0X8c7c),
        TransformFeedbackBufferNv = ((int)0X8c8e),
        TransformFeedbackBufferBindingNv = ((int)0X8c8f),
        MaxTransformFeedbackSeparateComponentsNv = ((int)0X8c80),
        TransformFeedbackBufferSizeNv = ((int)0X8c85),
    }

    public enum ExtBindableUniform
    {
        MaxGeometryBindableUniformsExt = ((int)0X8de4),
        UniformBufferExt = ((int)0X8dee),
        MaxVertexBindableUniformsExt = ((int)0X8de2),
        MaxBindableUniformSizeExt = ((int)0X8ded),
        UniformBufferBindingExt = ((int)0X8def),
        MaxFragmentBindableUniformsExt = ((int)0X8de3),
    }

    public enum ExtTextureInteger
    {
        Alpha32iExt = ((int)0X8d84),
        LuminanceAlpha16uiExt = ((int)0X8d7b),
        Rgb32iExt = ((int)0X8d83),
        Luminance8uiExt = ((int)0X8d80),
        LuminanceAlpha32iExt = ((int)0X8d87),
        Alpha32uiExt = ((int)0X8d72),
        Rgba16iExt = ((int)0X8d88),
        BgrIntegerExt = ((int)0X8d9a),
        Luminance8iExt = ((int)0X8d92),
        Rgba8iExt = ((int)0X8d8e),
        Rgb16uiExt = ((int)0X8d77),
        Rgb16iExt = ((int)0X8d89),
        Rgba32uiExt = ((int)0X8d70),
        BgraIntegerExt = ((int)0X8d9b),
        Alpha8uiExt = ((int)0X8d7e),
        Luminance32iExt = ((int)0X8d86),
        RgbIntegerExt = ((int)0X8d98),
        BlueIntegerExt = ((int)0X8d96),
        RgbaIntegerExt = ((int)0X8d99),
        Luminance32uiExt = ((int)0X8d74),
        Intensity32uiExt = ((int)0X8d73),
        Intensity8uiExt = ((int)0X8d7f),
        LuminanceAlpha16iExt = ((int)0X8d8d),
        Intensity8iExt = ((int)0X8d91),
        Rgb8iExt = ((int)0X8d8f),
        LuminanceAlphaIntegerExt = ((int)0X8d9d),
        Alpha16uiExt = ((int)0X8d78),
        Rgba8uiExt = ((int)0X8d7c),
        Rgba16uiExt = ((int)0X8d76),
        Rgb32uiExt = ((int)0X8d71),
        Alpha8iExt = ((int)0X8d90),
        AlphaIntegerExt = ((int)0X8d97),
        Alpha16iExt = ((int)0X8d8a),
        Rgba32iExt = ((int)0X8d82),
        RedIntegerExt = ((int)0X8d94),
        Intensity32iExt = ((int)0X8d85),
        Intensity16uiExt = ((int)0X8d79),
        LuminanceAlpha8uiExt = ((int)0X8d81),
        Intensity16iExt = ((int)0X8d8b),
        Luminance16iExt = ((int)0X8d8c),
        LuminanceAlpha32uiExt = ((int)0X8d75),
        LuminanceIntegerExt = ((int)0X8d9c),
        GreenIntegerExt = ((int)0X8d95),
        Rgb8uiExt = ((int)0X8d7d),
        Luminance16uiExt = ((int)0X8d7a),
        RgbaIntegerModeExt = ((int)0X8d9e),
        LuminanceAlpha8iExt = ((int)0X8d93),
    }

}
