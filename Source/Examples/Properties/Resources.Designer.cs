//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Examples.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Examples.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region License
        /////
        ///// The Open Toolkit Library License
        /////
        ///// Copyright (c) 2006 - 2008 the Open Toolkit library, except where noted.
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the rights to 
        ///// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        ///// the Software, and to permit person [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Color4Serialization {
            get {
                return ResourceManager.GetString("Color4Serialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///#region --- Using Directives ---
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///using System.Threading;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///
        ///#endregion --- Using Directives ---
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    [Example(&quot;Display Lists&quot;, E [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DisplayLists {
            get {
                return ResourceManager.GetString("DisplayLists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region License
        /////
        ///// The Open Toolkit Library License
        /////
        ///// Copyright (c) 2006 - 2009 the Open Toolkit library.
        /////
        ///// Permission is hereby granted, free of charge, to any person obtaining a copy
        ///// of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///// in the Software without restriction, including without limitation the rights to 
        ///// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
        ///// the Software, and to permit persons to whom the Softwa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EFXReverb {
            get {
                return ResourceManager.GetString("EFXReverb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///using System.Threading;
        ///using System.Reflection;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics.OpenGL;
        ///using OpenTK.Graphics.OpenGL.Enums;
        ///using OpenTK.Graphics;
        ///using System.Text.RegularExpressions;
        ///
        ///names [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Extensions {
            get {
                return ResourceManager.GetString("Extensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.IO;
        ///using System.Drawing;
        ///using System.Diagnostics;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///using OpenTK.Input;
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Shows how to render and scroll large amounts of text.
        ///    /// &lt;/summary&gt;
        ///    [Example(&quot;Font rendering (advanced)&quot;,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FontRenderingAdvanced {
            get {
                return ResourceManager.GetString("FontRenderingAdvanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///using OpenTK.Graphics;
        ///
        ///namespace Examples.WinForms
        ///{
        ///    [Example(&quot;Font rendering (basic)&quot;, ExampleCategory.OpenTK, &quot;Fonts&quot;, Difficulty = 1, Documentation = &quot;FontRenderingBasic&quot;)]
        ///    public partial class FontRenderingBasic : Form
        ///    {
        ///        #region Fields
        ///
        ///        float[] sizes = new float[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FontRenderingBasic {
            get {
                return ResourceManager.GetString("FontRenderingBasic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1253\deff0\deflang1032{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\fswiss\fcharset0 Arial;}{\f2\fswiss\fcharset161{\*\fname Arial;}Arial Greek;}{\f3\fswiss\fprq2\fcharset161{\*\fname Arial;}Arial Greek;}{\f4\fmodern\fprq1\fcharset0 Consolas;}}
        ///{\colortbl ;\red0\green0\blue255;\red43\green145\blue175;}
        ///{\*\generator Msftedit 5.41.21.2508;}\viewkind4\uc1\pard\qc\lang1033\b\f0\fs32 Font rendering\par
        ///\b0\f1\fs20\par
        ///\lang1032\f2\par
        ///\pard\lang1033\b\f1\fs24 Overview\par
        ///\par
        ///\b0\f [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FontRenderingBasicDoc {
            get {
                return ResourceManager.GetString("FontRenderingBasicDoc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing details.
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Diagnostics;
        ///using System.Drawing;
        ///
        ///using OpenTK;
        ///using OpenTK.Input;
        ///using OpenTK.Math;
        ///using OpenTK.Graphics;
        ///using OpenTK.Graphics.OpenGL;
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    [Example(&quot;Framebuffer Objects&quot;, ExampleCategory.OpenGL, &quot;FB [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FramebufferObject {
            get {
                return ResourceManager.GetString("FramebufferObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1253\deff0\deflang1032\deflangfe1032{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\fswiss\fcharset0 Arial;}{\f2\fswiss\fcharset161{\*\fname Arial;}Arial Greek;}}
        ///{\*\generator Msftedit 5.41.21.2508;}\viewkind4\uc1\pard\qc\lang1033\b\f0\fs32 Framebuffer Objects\par
        ///\b0\f1\fs20\par
        ///\lang1032\f2\par
        ///\pard\lang1033\b\f1\fs24 Overview\par
        ///\par
        ///\b0\fs22 This sample demonstrates Framebuffer objects (FBOs) via the EXT_framebuffer_object extension. FBOs provide an efficient method to perfo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FramebufferObjectDoc {
            get {
                return ResourceManager.GetString("FramebufferObjectDoc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Diagnostics;
        ///using System.Drawing;
        ///using System.Threading;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///using OpenTK.Input;
        ///
        ///namespace Examples.Tests
        ///{
        ///    [Example(&quot;GameWindow states&quot;, ExampleCategory.OpenTK, &quot;Test&quot;, Documentation=&quot;GameWindowStates&quot;)]
        ///    public class GameWindowStates : Ga [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GameWindowStates {
            get {
                return ResourceManager.GetString("GameWindowStates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* This source file is released under the MIT license. See License.txt for more information.
        /// * Coded by Erik Ylvisaker and Stefanos Apostolopoulos.
        /// */
        ///#endregion
        ///
        ///#region --- Using directives ---
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///using System.Diagnostics;
        ///using System.Threading;
        ///
        ///using OpenTK.Graphics;
        ///using OpenTK.Platform;
        ///
        ///#endr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GLControlGameLoop {
            get {
                return ResourceManager.GetString("GLControlGameLoop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing detailed licensing details.
        /// */
        ///#endregion
        ///
        ///#region --- Using Directives ---
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Windows.Forms;
        ///using System.Threading;
        ///using System.Drawing;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///using OpenTK.Graphics.OpenGL;
        ///
        ///#endregion
        ///
        ///names [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ImmediateMode {
            get {
                return ResourceManager.GetString("ImmediateMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///
        ///using OpenTK;
        ///using OpenTK.Platform;
        ///using OpenTK.Input;
        ///using System.Diagnostics;
        ///using System.Threading;
        ///
        ///using OpenTK.Graphics;
        ///using OpenTK.Graphics.OpenGL;
        ///
        ///namespace Examples.Tests
        ///{
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InputLogger {
            get {
                return ResourceManager.GetString("InputLogger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing detailed licensing details.
        /// * 
        /// * Written by Christoph Brandtner
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Windows.Forms;
        ///using System.Diagnostics;
        ///using System.Drawing;
        ///using System.Drawing.Imaging;
        ///using System.IO;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///
        ///namespace Examples.Tutorial
        ///{ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JuliaSetFractal {
            get {
                return ResourceManager.GetString("JuliaSetFractal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics.OpenGL;
        ///
        ///namespace Examples.WinForms
        ///{
        ///    [Example(&quot;Multiple GLControls&quot;, ExampleCategory.OpenTK, &quot;GLControl&quot;, 3, Documentation=&quot;MultipleGLControls&quot;)]
        ///    public partial class MultipleGLControlsForm : Form
        ///    {
        ///        public MultipleGLControlsForm()
        ///        {
        ///            InitializeCompone [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultipleGLControls {
            get {
                return ResourceManager.GetString("MultipleGLControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing details.
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Threading;
        ///using System.IO;
        ///
        ///using OpenTK.Audio;
        ///
        ///namespace Examples
        ///{
        ///    [Example(&quot;Playback&quot;, ExampleCategory.OpenAL, &quot;1.1&quot;, Documentation=&quot;Playback&quot;)]
        ///    public class Playback
        ///    {
        ///        static readonly string filename = Path.Comb [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Playback {
            get {
                return ResourceManager.GetString("Playback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        /// * Copyright (c) 2006, Creative Labs Inc.
        /// * All rights reserved.
        /// * 
        /// * Redistribution and use in source and binary forms, with or without modification, are permitted provided
        /// * that the following conditions are met:
        /// * 
        /// *     * Redistributions of source code must retain the above copyright notice, this list of conditions and
        /// * 	     the following disclaimer.
        /// *     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions
        /// * 	     and the following [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PlayStatic {
            get {
                return ResourceManager.GetString("PlayStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///#region --- Using directives ---
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Data;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///
        ///#endregion
        ///
        ///namespace Examples.WinForms
        ///{
        ///    [Example(&quot;Simple GLControl&quot;, ExampleCategory.OpenTK, &quot;GLControl&quot;, 1, Document [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SimpleGLControl {
            get {
                return ResourceManager.GetString("SimpleGLControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing detailed licensing details.
        /// */
        ///#endregion
        ///
        ///#region --- Using Directives ---
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.ComponentModel;
        ///using System.Drawing;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///using System.Threading;
        ///using System.Diagnostics;
        ///using System.IO; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SimpleGLSL {
            get {
                return ResourceManager.GetString("SimpleGLSL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Drawing;
        ///using System.Diagnostics;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics.OpenGL;
        ///using OpenTK.Graphics;
        ///using OpenTK.Graphics.OpenGL.Enums;
        ///using OpenTK.Input;
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Demonstrates the GameWindow class.
        ///    /// &lt;/summary&gt;
        ///    [Exampl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SimpleWindow {
            get {
                return ResourceManager.GetString("SimpleWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing details.
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Threading;
        ///using System.ComponentModel;
        ///
        ///using OpenTK.Audio;
        ///
        ///namespace Examples.OpenAL
        ///{
        ///    // Not working correctly (sound pops).
        ///
        ///    //[Example(&quot;Streaming Playback&quot;, ExampleCateg [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StreamingPlayback {
            get {
                return ResourceManager.GetString("StreamingPlayback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing details.
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Diagnostics;
        ///using System.Runtime.InteropServices;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///using OpenTK.Input;
        ///
        ///namespace Examples
        ///{
        ///    [Example(&quot;GLU Tesselation Functions Test&quot;, ExampleCategory.OpenGL, &quot;GLU&quot;, Visible = false)]
        ///    public [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Tessellation {
            get {
                return ResourceManager.GetString("Tessellation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK Team.
        /// * This notice may not be removed from any source distribution.
        /// * See license.txt for licensing details.
        /// */
        ///#endregion
        ///
        ///using System;
        ///
        ///using OpenTK.Audio;
        ///
        ///using AlContext = System.IntPtr;
        ///using AlDevice = System.IntPtr;
        ///using System.Diagnostics;
        ///
        ///namespace Examples
        ///{
        ///    [Example(&quot;AudioContext Test&quot;, ExampleCategory.OpenTK, &quot;Test&quot;, 0, false)]
        ///    class TestApp
        ///    {
        ///        publ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TestAudioContext {
            get {
                return ResourceManager.GetString("TestAudioContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Licensed under the MIT/X11 license.
        /// * Copyright (c) 2006-2008 the OpenTK team.
        /// * This notice may not be removed.
        /// * See license.txt for licensing detailed licensing details.
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Windows.Forms;
        ///using System.Diagnostics;
        ///
        ///using OpenTK.Graphics;
        ///using System.Threading;
        ///
        ///namespace Examples.Tests
        ///{
        ///    [Example(&quot;Test Resolution Changes&quot;, ExampleCategory.OpenTK, &quot;Test&quot;, Docum [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TestResolutionChanges {
            get {
                return ResourceManager.GetString("TestResolutionChanges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Diagnostics;
        ///using System.IO;
        ///
        ///using System.Drawing;
        ///using System.Drawing.Imaging;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics.OpenGL;
        ///using OpenTK.Graphics;
        ///using OpenTK.Graphics.OpenGL.Enums;
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Demonstrates simple OpenGL Texturing. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Textures {
            get {
                return ResourceManager.GetString("Textures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Drawing;
        ///using System.Threading;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics.OpenGL;
        ///using System.Diagnostics;
        ///using OpenTK.Input;
        ///using OpenTK.Graphics;
        ///using OpenTK.Graphics.OpenGL.Enums;
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Demonstrates Vertex Arrays (in system memo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VertexArrays {
            get {
                return ResourceManager.GetString("VertexArrays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///#region --- Using directives ---
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Runtime.InteropServices;
        ///using System.Threading;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///using OpenTK.Platform;
        ///using OpenTK.Math;
        ///
        ///#endregion
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    [Example(&quot;Vertex Buffer Objects&quot;, ExampleCategory.OpenGL, &quot;1.5&quot;, false, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VertexBufferObject {
            get {
                return ResourceManager.GetString("VertexBufferObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #region --- License ---
        ////* Copyright (c) 2006, 2007 Stefanos Apostolopoulos
        /// * See license.txt for license info
        /// */
        ///#endregion
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Text;
        ///using System.Drawing;
        ///
        ///using OpenTK;
        ///using OpenTK.Graphics;
        ///using Examples.Shapes;
        ///using OpenTK.Math;
        ///
        ///namespace Examples.Tutorial
        ///{
        ///    /// &lt;summary&gt;
        ///    /// Demonstrates fixed-function OpenGL lighting.  Example is incomplete (documentation).
        ///    /// &lt;/summary&gt;
        ///    [Example(&quot;Vertex Lighting&quot;, E [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VertexLighting {
            get {
                return ResourceManager.GetString("VertexLighting", resourceCulture);
            }
        }
    }
}
